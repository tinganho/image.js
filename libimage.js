// Images.js, (C) 2013 Anthony LIOT, https://github.com/wolfviking0/image.js

var ImageJS = {

	Decode: function(imagedata,imagename) {

		var Module = {
		};

	Module['preRun'] = function() {
		FS.createDataFile('/', imagename,imagedata, true, true);
  	};
  	Module.arguments = [imagename];
 	Module['return'] = function() {
 		// Like that i can found the equivalent with -O2 and closure
		return FS.root.contents['image.raw'].contents;
 	};
 	Module['print'] = function(text) {
 		var element = document.getElementById('output');
        element.value += text + "\n";
        element.scrollTop = 99999; // focus on bottom
 	};



// Note: For maximum-speed code, see "Optimizing Code" on the Emscripten wiki, https://github.com/kripken/emscripten/wiki/Optimizing-Code
// Note: Some Emscripten settings may limit the speed of the generated code.
try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function(filename) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename).toString();
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename).toString();
    }
    return ret;
  };

  Module['load'] = function(f) {
    globalEval(read(f));
  };

  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
}

if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  // Polyfill over SpiderMonkey/V8 differences
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function(f) { snarf(f) };
  }

  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }

  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }
}

if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  if (!Module['print']) {
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  Module['load'] = importScripts;
}

if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  BITSHIFT64_SHL: 0,
  BITSHIFT64_ASHR: 1,
  BITSHIFT64_LSHR: 2,
  bitshift64: function (low, high, op, bits) {
    var ret;
    var ander = Math.pow(2, bits)-1;
    if (bits < 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [low << bits, (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(((low >>> bits ) | ((high&ander) << (32 - bits))) >> 0) >>> 0, (high >> bits) >>> 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [((low >>> bits) | ((high&ander) << (32 - bits))) >>> 0, high >>> bits];
          break;
      }
    } else if (bits == 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [high, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high, 0];
          break;
      }
    } else { // bits > 32
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low << (bits - 32)];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(high >> (bits - 32)) >>> 0, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high >>>  (bits - 32) , 0];
          break;
      }
    }
    HEAP32[tempDoublePtr>>2] = ret[0]; // cannot use utility functions since we are in runtime itself
    HEAP32[tempDoublePtr+4>>2] = ret[1];
  },
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  addFunction: function (func, sig) {
    //assert(sig); // TODO: support asm
    var table = FUNCTION_TABLE; // TODO: support asm
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function stackAlloc(size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2); return ret; },
  staticAlloc: function staticAlloc(size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = ((((STATICTOP)+3)>>2)<<2); if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function alignMemory(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function makeBigInt(low,high,unsigned) { var ret = (unsigned ? ((+(((low)>>>(0))))+((+(((high)>>>(0))))*(+(4294967296)))) : ((+(((low)>>>(0))))+((+(((high)|(0))))*(+(4294967296))))); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};

var ABORT = false;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = globalScope['Module']['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/(+(4294967296))), (+(4294967295)))>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF32[((ptr)>>2)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF32[((ptr)>>2)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_NONE = 3; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    HEAPU8.set(new Uint8Array(slab), ret);
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  var utf8 = new Runtime.UTF8Processor();
  var nullTerminated = typeof(length) == "undefined";
  var ret = "";
  var i = 0;
  var t;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (nullTerminated && t == 0) break;
    ret += utf8.processCChar(t);
    i += 1;
    if (!nullTerminated && i == length) break;
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module['Array_stringify'] = Array_stringify;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  abort('Cannot enlarge memory arrays in asm.js. Compile with -s TOTAL_MEMORY=X with X higher than the current value.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

STACK_ROOT = STACKTOP = Runtime.alignMemory(1);
STACK_MAX = TOTAL_STACK; // we lose a little stack here, but TOTAL_STACK is nice and round so use that as the max

var tempDoublePtr = Runtime.alignMemory(allocate(12, 'i8', ALLOC_STACK), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

STATICTOP = STACK_MAX;
assert(STATICTOP < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY

var nullString = allocate(intArrayFromString('(null)'), 'i8', ALLOC_STACK);

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

if (!Math.imul) Math.imul = function(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 6000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

// === Body ===



assert(STATICTOP == STACK_MAX); assert(STACK_MAX == TOTAL_STACK);

STATICTOP += 40396;

assert(STATICTOP < TOTAL_MEMORY);








var _stderr;



























































































































































































































































































































































































































































































var __ZTVN10__cxxabiv120__si_class_type_infoE;
var __ZTVN10__cxxabiv117__class_type_infoE;






var __ZTISt9exception;




















allocate([0,64,128,192,16,80,144,208,32,96,160,224,48,112,176,240,4,68,132,196,20,84,148,212,36,100,164,228,52,116,180,244,8,72,136,200,24,88,152,216,40,104,168,232,56,120,184,248,12,76,140,204,28,92,156,220,44,108,172,236,60,124,188,252,1,65,129,193,17,81,145,209,33,97,161,225,49,113,177,241,5,69,133,197,21,85,149,213,37,101,165,229,53,117,181,245,9,73,137,201,25,89,153,217,41,105,169,233,57,121,185,249,13,77,141,205,29,93,157,221,45,109,173,237,61,125,189,253,2,66,130,194,18,82,146,210,34,98,162,226,50,114,178,242,6,70,134,198,22,86,150,214,38,102,166,230,54,118,182,246,10,74,138,202,26,90,154,218,42,106,170,234,58,122,186,250,14,78,142,206,30,94,158,222,46,110,174,238,62,126,190,254,3,67,131,195,19,83,147,211,35,99,163,227,51,115,179,243,7,71,135,199,23,87,151,215,39,103,167,231,55,119,183,247,11,75,139,203,27,91,155,219,43,107,171,235,59,123,187,251,15,79,143,207,31,95,159,223,47,111,175,239,63,127,191,255] /* \00@\80\C0\10P\90\D0 */, "i8", ALLOC_NONE, 5242880);
allocate(4, "i8", ALLOC_NONE, 5243136);
allocate([76,105,98,114,97,114,121,32,73,109,97,103,101,32,74,97,118,97,115,99,114,105,112,116,46,46,46,0] /* Library Image Javasc */, "i8", ALLOC_NONE, 5243140);
allocate([73,109,97,103,101,70,111,114,109,97,116,84,71,65,58,58,108,111,97,100,0] /* ImageFormatTGA::load */, "i8", ALLOC_NONE, 5243168);
allocate([73,109,97,103,101,70,111,114,109,97,116,87,69,66,80,58,58,108,111,97,100,0] /* ImageFormatWEBP::loa */, "i8", ALLOC_NONE, 5243192);
allocate([73,109,97,103,101,70,111,114,109,97,116,80,78,71,58,58,108,111,97,100,0] /* ImageFormatPNG::load */, "i8", ALLOC_NONE, 5243216);
allocate([73,109,97,103,101,70,111,114,109,97,116,74,80,71,58,58,108,111,97,100,0] /* ImageFormatJPG::load */, "i8", ALLOC_NONE, 5243240);
var _stderr = _stderr=allocate(4, "i8", ALLOC_STATIC);
allocate([0,64,197,88,159,83,66,75,0,64,73,50,163,34,168,17,197,88,33,123,252,115,98,104,197,88,191,69,11,48,126,24,159,83,252,115,65,109,84,98,159,83,179,65,65,45,18,23,66,75,98,104,84,98,126,88,66,75,33,59,186,40,195,20,0,64,197,88,159,83,66,75,0,64,73,50,163,34,168,17,73,50,191,69,179,65,33,59,73,50,130,39,55,27,224,13,163,34,11,48,65,45,186,40,163,34,55,27,191,18,142,9,168,17,126,24,18,23,195,20,168,17,224,13,142,9,223,4], "i8", ALLOC_NONE, 5243264);
allocate([0,0,0,0,0,0,240,63,239,97,72,177,80,49,246,63,202,111,77,145,174,231,244,63,170,17,108,239,98,208,242,63,0,0,0,0,0,0,240,63,59,191,167,192,105,36,233,63,187,32,199,123,122,81,225,63,93,171,114,222,85,168,209,63], "i8", ALLOC_NONE, 5243392);
allocate([1,0,0,0,0,0,0,0,2,0,0,0], "i8", ALLOC_NONE, 5243456);
allocate(225, "i8", ALLOC_NONE, 5243468);
allocate(2041, "i8", ALLOC_NONE, 5243696);
allocate([0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0], "i8", ALLOC_NONE, 5245740);
allocate([8,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0], "i8", ALLOC_NONE, 5245768);
allocate([128,0,0,0,8,0,0,0,136,0,0,0,34,0,0,0,170,0,0,0,85,0,0,0,255,0,0,0], "i8", ALLOC_NONE, 5245796);
allocate([73,68,65,84,0] /* IDAT\00 */, "i8", ALLOC_NONE, 5245824);
allocate([122,84,88,116,0] /* zTXt\00 */, "i8", ALLOC_NONE, 5245832);
allocate([116,82,78,83,0] /* tRNS\00 */, "i8", ALLOC_NONE, 5245840);
allocate([116,73,77,69,0] /* tIME\00 */, "i8", ALLOC_NONE, 5245848);
allocate([116,69,88,116,0] /* tEXt\00 */, "i8", ALLOC_NONE, 5245856);
allocate([115,82,71,66,0] /* sRGB\00 */, "i8", ALLOC_NONE, 5245864);
allocate([115,80,76,84,0] /* sPLT\00 */, "i8", ALLOC_NONE, 5245872);
allocate([115,67,65,76,0] /* sCAL\00 */, "i8", ALLOC_NONE, 5245880);
allocate([115,66,73,84,0] /* sBIT\00 */, "i8", ALLOC_NONE, 5245888);
allocate([112,72,89,115,0] /* pHYs\00 */, "i8", ALLOC_NONE, 5245896);
allocate([112,67,65,76,0] /* pCAL\00 */, "i8", ALLOC_NONE, 5245904);
allocate([111,70,70,115,0] /* oFFs\00 */, "i8", ALLOC_NONE, 5245912);
allocate([105,84,88,116,0] /* iTXt\00 */, "i8", ALLOC_NONE, 5245920);
allocate([105,67,67,80,0] /* iCCP\00 */, "i8", ALLOC_NONE, 5245928);
allocate([104,73,83,84,0] /* hIST\00 */, "i8", ALLOC_NONE, 5245936);
allocate([103,65,77,65,0] /* gAMA\00 */, "i8", ALLOC_NONE, 5245944);
allocate([99,72,82,77,0] /* cHRM\00 */, "i8", ALLOC_NONE, 5245952);
allocate([98,75,71,68,0] /* bKGD\00 */, "i8", ALLOC_NONE, 5245960);
allocate([80,76,84,69,0] /* PLTE\00 */, "i8", ALLOC_NONE, 5245968);
allocate([73,72,68,82,0] /* IHDR\00 */, "i8", ALLOC_NONE, 5245976);
allocate([73,69,78,68,0] /* IEND\00 */, "i8", ALLOC_NONE, 5245984);
allocate([73,68,65,84,0] /* IDAT\00 */, "i8", ALLOC_NONE, 5245992);
allocate([73,68,65,84,0] /* IDAT\00 */, "i8", ALLOC_NONE, 5246000);
allocate([73,68,65,84,0] /* IDAT\00 */, "i8", ALLOC_NONE, 5246008);
allocate([0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5246016);
allocate([8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0], "i8", ALLOC_NONE, 5246044);
allocate([48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70] /* 0123456789ABCDEF */, "i8", ALLOC_NONE, 5246072);
allocate(4, "i8", ALLOC_NONE, 5246088);
allocate(4, "i8", ALLOC_NONE, 5246092);
allocate(4, "i8", ALLOC_NONE, 5246096);
allocate([0,128,64,192,32,160,96,224,16,144,80,208,48,176,112,240,8,136,72,200,40,168,104,232,24,152,88,216,56,184,120,248,4,132,68,196,36,164,100,228,20,148,84,212,52,180,116,244,12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254,1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241,9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249,5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245,13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253,3,131,67,195,35,163,99,227,19,147,83,211,51,179,115,243,11,139,75,203,43,171,107,235,27,155,91,219,59,187,123,251,7,135,71,199,39,167,103,231,23,151,87,215,55,183,119,247,15,143,79,207,47,175,111,239,31,159,95,223,63,191,127,255] /* \00\80@\C0 \A0`\E0\1 */, "i8", ALLOC_NONE, 5246100);
allocate(24, "i8", ALLOC_NONE, 5246356);
allocate([0,1,4,8,5,2,3,6,9,12,13,10,7,11,14,15] /* \00\01\04\08\05\02\0 */, "i8", ALLOC_NONE, 5246380);
allocate([0,1,255,2,254,3,4,6,253,5,252,251,250,7,249,8,248,247] /* \00\01\FF\02\FE\03\0 */, "i8", ALLOC_NONE, 5246396);
allocate([255,127,0,0,255,127,0,0,255,191,0,0,255,127,0,0,255,159,0,0,255,191,0,0,255,223,0,0,255,127,0,0,255,143,0,0,255,159,0,0,255,175,0,0,255,191,0,0,255,207,0,0,255,223,0,0,255,239,0,0,255,127,0,0,255,135,0,0,255,143,0,0,255,151,0,0,255,159,0,0,255,167,0,0,255,175,0,0,255,183,0,0,255,191,0,0,255,199,0,0,255,207,0,0,255,215,0,0,255,223,0,0,255,231,0,0,255,239,0,0,255,247,0,0,255,127,0,0,255,131,0,0,255,135,0,0,255,139,0,0,255,143,0,0,255,147,0,0,255,151,0,0,255,155,0,0,255,159,0,0,255,163,0,0,255,167,0,0,255,171,0,0,255,175,0,0,255,179,0,0,255,183,0,0,255,187,0,0,255,191,0,0,255,195,0,0,255,199,0,0,255,203,0,0,255,207,0,0,255,211,0,0,255,215,0,0,255,219,0,0,255,223,0,0,255,227,0,0,255,231,0,0,255,235,0,0,255,239,0,0,255,243,0,0,255,247,0,0,255,251,0,0,255,127,0,0,255,129,0,0,255,131,0,0,255,133,0,0,255,135,0,0,255,137,0,0,255,139,0,0,255,141,0,0,255,143,0,0,255,145,0,0,255,147,0,0,255,149,0,0,255,151,0,0,255,153,0,0,255,155,0,0,255,157,0,0,255,159,0,0,255,161,0,0,255,163,0,0,255,165,0,0,255,167,0,0,255,169,0,0,255,171,0,0,255,173,0,0,255,175,0,0,255,177,0,0,255,179,0,0,255,181,0,0,255,183,0,0,255,185,0,0,255,187,0,0,255,189,0,0,255,191,0,0,255,193,0,0,255,195,0,0,255,197,0,0,255,199,0,0,255,201,0,0,255,203,0,0,255,205,0,0,255,207,0,0,255,209,0,0,255,211,0,0,255,213,0,0,255,215,0,0,255,217,0,0,255,219,0,0,255,221,0,0,255,223,0,0,255,225,0,0,255,227,0,0,255,229,0,0,255,231,0,0,255,233,0,0,255,235,0,0,255,237,0,0,255,239,0,0,255,241,0,0,255,243,0,0,255,245,0,0,255,247,0,0,255,249,0,0,255,251,0,0,255,253,0,0,255,127,0,0], "i8", ALLOC_NONE, 5246416);
allocate([7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0] /* \07\06\06\05\05\05\0 */, "i8", ALLOC_NONE, 5246928);
allocate([0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0,1,0,1,0,1,0,0,1,1,0,1,1,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,1,0,1,0,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1], "i8", ALLOC_NONE, 5247056);
allocate([0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,128,0,0,0,132,0,0,0,136,0,0,0,140,0,0,0,0,1,0,0,4,1,0,0,8,1,0,0,12,1,0,0,128,1,0,0,132,1,0,0,136,1,0,0,140,1,0,0], "i8", ALLOC_NONE, 5247120);
allocate([290,0,0,0,292,0,0,0,294,0,0,0,158,0,0,0,282,0,0,0,284,0,0,0,286,0,0,0,288,0,0,0,300,0,0,0,302,0,0,0,358,0,0,0,360,0,0,0,354,0,0,0,120,0,0,0,290,0,0,0,290,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 5247184);
allocate([3,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0], "i8", ALLOC_NONE, 5247248);
allocate([0,2,8] /* \00\02\08 */, "i8", ALLOC_NONE, 5247300);
allocate([4,5,6,7,8,9,10,10,11,12,13,14,15,16,17,17,18,19,20,20,21,21,22,22,23,23,24,25,25,26,27,28,29,30,31,32,33,34,35,36,37,37,38,39,40,41,42,43,44,45,46,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,93,95,96,98,100,101,102,104,106,108,110,112,114,116,118,122,124,126,128,130,132,134,136,138,140,143,145,148,151,154,157] /* \04\05\06\07\08\09\0 */, "i8", ALLOC_NONE, 5247304);
allocate([3,0,0,0,3,0,0,0,11,0,0,0], "i8", ALLOC_NONE, 5247432);
allocate([2,0,0,0,3,0,0,0,7,0,0,0], "i8", ALLOC_NONE, 5247444);
allocate([17,18,0,1,2,3,4,5,16,6,7,8,9,10,11,12,13,14,15] /* \11\12\00\01\02\03\0 */, "i8", ALLOC_NONE, 5247456);
allocate([254,254,243,230,196,177,153,140,133,130,129,0] /* \FE\FE\F3\E6\C4\B1\9 */, "i8", ALLOC_NONE, 5247476);
allocate([180,157,141,134,130,0] /* \B4\9D\8D\86\82\00 */, "i8", ALLOC_NONE, 5247488);
allocate([176,155,140,135,0] /* \B0\9B\8C\87\00 */, "i8", ALLOC_NONE, 5247496);
allocate(16, "i8", ALLOC_NONE, 5247504);
allocate([173,148,140,0] /* \AD\94\8C\00 */, "i8", ALLOC_NONE, 5247520);
allocate([0,0,0,0,1,0,0,0,3,0,0,0,7,0,0,0,15,0,0,0,31,0,0,0,63,0,0,0,127,0,0,0,255,0,0,0,255,1,0,0,255,3,0,0,255,7,0,0,255,15,0,0,255,31,0,0,255,63,0,0,255,127,0,0,255,255,0,0,255,255,1,0,255,255,3,0,255,255,7,0,255,255,15,0,255,255,31,0,255,255,63,0,255,255,127,0,255,255,255,0], "i8", ALLOC_NONE, 5247524);
allocate([0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,6,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5247624);
allocate([231,120,48,89,115,113,120,152,112,152,179,64,126,170,118,46,70,95,175,69,143,80,85,82,72,155,103,56,58,10,171,218,189,17,13,152,114,26,17,163,44,195,21,10,173,121,24,80,195,26,62,44,64,85,144,71,10,38,171,213,144,34,26,170,46,55,19,136,160,33,206,71,63,20,8,114,114,208,12,9,226,81,40,11,96,182,84,29,16,36,134,183,89,137,98,101,106,165,148,72,187,100,130,157,111,32,75,80,66,102,167,99,74,62,40,234,128,41,53,9,178,241,141,26,8,107,74,43,26,146,73,166,49,23,157,65,38,105,160,51,52,31,115,128,104,79,12,27,217,255,87,17,7,87,68,71,44,114,51,15,186,23,47,41,14,110,182,183,21,17,194,66,45,25,102,197,189,23,18,22,88,88,147,150,42,46,45,196,205,43,97,183,117,85,38,35,179,61,39,53,200,87,26,21,43,232,171,56,34,51,104,114,102,29,93,77,39,28,85,171,58,165,90,98,64,34,22,116,206,23,34,43,166,73,107,54,32,26,51,1,81,43,31,68,25,106,22,64,171,36,225,114,34,19,21,102,132,188,16,76,124,62,18,78,95,85,57,50,48,51,193,101,35,159,215,111,89,46,111,60,148,31,172,219,228,21,18,111,112,113,77,85,179,255,38,120,114,40,42,1,196,245,209,10,25,109,88,43,29,140,166,213,37,43,154,61,63,30,155,67,45,68,1,209,100,80,8,43,154,1,51,26,71,142,78,78,16,255,128,34,197,171,41,40,5,102,211,183,4,1,221,51,50,17,168,209,192,23,25,82,138,31,36,171,27,166,38,44,229,67,87,58,169,82,115,26,59,179,63,59,90,180,59,166,93,73,154,40,40,21,116,143,209,34,39,175,47,15,16,183,34,223,49,45,183,46,17,33,183,6,98,15,32,183,57,46,22,24,128,1,54,17,37,65,32,73,115,28,128,23,128,205,40,3,9,115,51,192,18,6,223,87,37,9,115,59,77,64,21,47,104,55,44,218,9,54,53,130,226,64,90,70,205,40,41,23,26,57,54,57,112,184,5,41,38,166,213,30,34,26,133,152,116,10,32,134,39,19,53,221,26,114,32,73,255,31,9,65,234,2,15,1,118,73,75,32,12,51,192,255,160,43,51,88,31,35,67,102,85,55,186,85,56,21,23,111,59,205,45,37,192,55,38,70,124,73,102,1,34,98,125,98,42,88,104,85,117,175,82,95,84,53,89,128,100,113,101,45,75,79,123,47,51,128,81,171,1,57,17,5,71,102,57,53,41,49,38,33,13,121,57,73,26,1,85,41,10,67,138,77,110,90,47,114,115,21,2,10,102,255,166,23,6,101,29,16,10,85,128,101,196,26,57,18,10,102,102,213,34,20,43,117,20,15,36,163,128,68,1,26,102,61,71,37,34,53,31,243,192,69,60,71,38,73,119,28,222,37,68,45,128,34,1,47,11,245,171,62,17,19,70,146,85,55,62,70,37,43,37,154,100,163,85,160,1,63,9,92,136,28,64,32,201,85,75,15,9,9,64,255,184,119,16,86,6,28,5,64,255,25,248,1,56,8,17,132,137,255,55,116,128,58,15,20,82,135,57,26,121,40,164,50,31,137,154,133,25,35,218,51,103,44,131,131,123,31,6,158,86,40,64,135,148,224,45,183,128,22,26,17,131,240,154,14,1,209,45,16,21,91,64,222,7,1,197,56,21,39,155,60,138,23,102,213,83,12,13,54,192,255,68,47,28,85,26,85,85,128,128,32,146,171,18,11,7,63,144,171,4,4,246,35,27,10,146,174,171,12,26,128,190,80,35,99,180,80,126,54,45,85,126,47,87,176,51,41,20,32,101,75,128,139,118,146,116,128,85,56,41,15,176,236,85,37,9,62,71,30,17,119,118,255,17,18,138,101,38,60,138,55,70,43,26,142,146,36,19,30,171,255,97,27,20,138,45,61,62,219,1,81,188,64,32,41,20,117,151,142,20,21,163,112,19,12,61,195,128,48,4,24], "i8", ALLOC_NONE, 5247692);
allocate([24,1,0,1,0,1,0,1,40,0], "i8", ALLOC_NONE, 5248592);
allocate([4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,60,0,62,0,64,0,66,0,68,0,70,0,72,0,74,0,76,0,78,0,80,0,82,0,84,0,86,0,88,0,90,0,92,0,94,0,96,0,98,0,100,0,102,0,104,0,106,0,108,0,110,0,112,0,114,0,116,0,119,0,122,0,125,0,128,0,131,0,134,0,137,0,140,0,143,0,146,0,149,0,152,0,155,0,158,0,161,0,164,0,167,0,170,0,173,0,177,0,181,0,185,0,189,0,193,0,197,0,201,0,205,0,209,0,213,0,217,0,221,0,225,0,229,0,234,0,239,0,245,0,249,0,254,0,3,1,8,1,13,1,18,1,23,1,28,1], "i8", ALLOC_NONE, 5248604);
allocate(500, "i8", ALLOC_NONE, 5248860);
allocate([0,0,0,0,1,0,0,0,8,0,0,0,16,0,0,0,9,0,0,0,2,0,0,0,3,0,0,0,10,0,0,0,17,0,0,0,24,0,0,0,32,0,0,0,25,0,0,0,18,0,0,0,11,0,0,0,4,0,0,0,5,0,0,0,12,0,0,0,19,0,0,0,26,0,0,0,33,0,0,0,40,0,0,0,48,0,0,0,41,0,0,0,34,0,0,0,27,0,0,0,20,0,0,0,13,0,0,0,6,0,0,0,7,0,0,0,14,0,0,0,21,0,0,0,28,0,0,0,35,0,0,0,42,0,0,0,49,0,0,0,56,0,0,0,57,0,0,0,50,0,0,0,43,0,0,0,36,0,0,0,29,0,0,0,22,0,0,0,15,0,0,0,23,0,0,0,30,0,0,0,37,0,0,0,44,0,0,0,51,0,0,0,58,0,0,0,59,0,0,0,52,0,0,0,45,0,0,0,38,0,0,0,31,0,0,0,39,0,0,0,46,0,0,0,53,0,0,0,60,0,0,0,61,0,0,0,54,0,0,0,47,0,0,0,55,0,0,0,62,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0], "i8", ALLOC_NONE, 5249360);
allocate([16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,17,0,17,0,17,0,17,0,18,0,18,0,18,0,18,0,19,0,19,0,19,0,19,0,20,0,20,0,20,0,20,0,21,0,21,0,21,0,21,0,16,0,78,0,68,0], "i8", ALLOC_NONE, 5249680);
allocate([3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,13,0,15,0,17,0,19,0,23,0,27,0,31,0,35,0,43,0,51,0,59,0,67,0,83,0,99,0,115,0,131,0,163,0,195,0,227,0,2,1,0,0,0,0], "i8", ALLOC_NONE, 5249744);
allocate([16,0,16,0,16,0,16,0,17,0,17,0,18,0,18,0,19,0,19,0,20,0,20,0,21,0,21,0,22,0,22,0,23,0,23,0,24,0,24,0,25,0,25,0,26,0,26,0,27,0,27,0,28,0,28,0,29,0,29,0,64,0,64,0], "i8", ALLOC_NONE, 5249808);
allocate([1,0,2,0,3,0,4,0,5,0,7,0,9,0,13,0,17,0,25,0,33,0,49,0,65,0,97,0,129,0,193,0,1,1,129,1,1,2,1,3,1,4,1,6,1,8,1,12,1,16,1,24,1,32,1,48,1,64,1,96,0,0,0,0], "i8", ALLOC_NONE, 5249872);
allocate([16,0,17,0,18,0,0,0,8,0,7,0,9,0,6,0,10,0,5,0,11,0,4,0,12,0,3,0,13,0,2,0,14,0,1,0,15,0], "i8", ALLOC_NONE, 5249936);
allocate([0,16,32,48,64,80,96,112,128,144,160,176,192,208,224,240,1,17,33,49,65,81,97,113,129,145,161,177,193,209,225,241,2,18,34,50,66,82,98,114,130,146,162,178,194,210,226,242,3,19,35,51,67,83,99,115,131,147,163,179,195,211,227,243,4,20,36,52,68,84,100,116,132,148,164,180,196,212,228,244,5,21,37,53,69,85,101,117,133,149,165,181,197,213,229,245,6,22,38,54,70,86,102,118,134,150,166,182,198,214,230,246,7,23,39,55,71,87,103,119,135,151,167,183,199,215,231,247,8,24,40,56,72,88,104,120,136,152,168,184,200,216,232,248,9,25,41,57,73,89,105,121,137,153,169,185,201,217,233,249,10,26,42,58,74,90,106,122,138,154,170,186,202,218,234,250,11,27,43,59,75,91,107,123,139,155,171,187,203,219,235,251,12,28,44,60,76,92,108,124,140,156,172,188,204,220,236,252,13,29,45,61,77,93,109,125,141,157,173,189,205,221,237,253,14,30,46,62,78,94,110,126,142,158,174,190,206,222,238,254,15,31,47,63,79,95,111,127,143,159,175,191,207,223,239,255] /* \00\10 0@P`p\80\90\A */, "i8", ALLOC_NONE, 5249976);
allocate([96,7,0,0,0,8,80,0,0,8,16,0,20,8,115,0,18,7,31,0,0,8,112,0,0,8,48,0,0,9,192,0,16,7,10,0,0,8,96,0,0,8,32,0,0,9,160,0,0,8,0,0,0,8,128,0,0,8,64,0,0,9,224,0,16,7,6,0,0,8,88,0,0,8,24,0,0,9,144,0,19,7,59,0,0,8,120,0,0,8,56,0,0,9,208,0,17,7,17,0,0,8,104,0,0,8,40,0,0,9,176,0,0,8,8,0,0,8,136,0,0,8,72,0,0,9,240,0,16,7,4,0,0,8,84,0,0,8,20,0,21,8,227,0,19,7,43,0,0,8,116,0,0,8,52,0,0,9,200,0,17,7,13,0,0,8,100,0,0,8,36,0,0,9,168,0,0,8,4,0,0,8,132,0,0,8,68,0,0,9,232,0,16,7,8,0,0,8,92,0,0,8,28,0,0,9,152,0,20,7,83,0,0,8,124,0,0,8,60,0,0,9,216,0,18,7,23,0,0,8,108,0,0,8,44,0,0,9,184,0,0,8,12,0,0,8,140,0,0,8,76,0,0,9,248,0,16,7,3,0,0,8,82,0,0,8,18,0,21,8,163,0,19,7,35,0,0,8,114,0,0,8,50,0,0,9,196,0,17,7,11,0,0,8,98,0,0,8,34,0,0,9,164,0,0,8,2,0,0,8,130,0,0,8,66,0,0,9,228,0,16,7,7,0,0,8,90,0,0,8,26,0,0,9,148,0,20,7,67,0,0,8,122,0,0,8,58,0,0,9,212,0,18,7,19,0,0,8,106,0,0,8,42,0,0,9,180,0,0,8,10,0,0,8,138,0,0,8,74,0,0,9,244,0,16,7,5,0,0,8,86,0,0,8,22,0,64,8,0,0,19,7,51,0,0,8,118,0,0,8,54,0,0,9,204,0,17,7,15,0,0,8,102,0,0,8,38,0,0,9,172,0,0,8,6,0,0,8,134,0,0,8,70,0,0,9,236,0,16,7,9,0,0,8,94,0,0,8,30,0,0,9,156,0,20,7,99,0,0,8,126,0,0,8,62,0,0,9,220,0,18,7,27,0,0,8,110,0,0,8,46,0,0,9,188,0,0,8,14,0,0,8,142,0,0,8,78,0,0,9,252,0,96,7,0,0,0,8,81,0,0,8,17,0,21,8,131,0,18,7,31,0,0,8,113,0,0,8,49,0,0,9,194,0,16,7,10,0,0,8,97,0,0,8,33,0,0,9,162,0,0,8,1,0,0,8,129,0,0,8,65,0,0,9,226,0,16,7,6,0,0,8,89,0,0,8,25,0,0,9,146,0,19,7,59,0,0,8,121,0,0,8,57,0,0,9,210,0,17,7,17,0,0,8,105,0,0,8,41,0,0,9,178,0,0,8,9,0,0,8,137,0,0,8,73,0,0,9,242,0,16,7,4,0,0,8,85,0,0,8,21,0,16,8,2,1,19,7,43,0,0,8,117,0,0,8,53,0,0,9,202,0,17,7,13,0,0,8,101,0,0,8,37,0,0,9,170,0,0,8,5,0,0,8,133,0,0,8,69,0,0,9,234,0,16,7,8,0,0,8,93,0,0,8,29,0,0,9,154,0,20,7,83,0,0,8,125,0,0,8,61,0,0,9,218,0,18,7,23,0,0,8,109,0,0,8,45,0,0,9,186,0,0,8,13,0,0,8,141,0,0,8,77,0,0,9,250,0,16,7,3,0,0,8,83,0,0,8,19,0,21,8,195,0,19,7,35,0,0,8,115,0,0,8,51,0,0,9,198,0,17,7,11,0,0,8,99,0,0,8,35,0,0,9,166,0,0,8,3,0,0,8,131,0,0,8,67,0,0,9,230,0,16,7,7,0,0,8,91,0,0,8,27,0,0,9,150,0,20,7,67,0,0,8,123,0,0,8,59,0,0,9,214,0,18,7,19,0,0,8,107,0,0,8,43,0,0,9,182,0,0,8,11,0,0,8,139,0,0,8,75,0,0,9,246,0,16,7,5,0,0,8,87,0,0,8,23,0,64,8,0,0,19,7,51,0,0,8,119,0,0,8,55,0,0,9,206,0,17,7,15,0,0,8,103,0,0,8,39,0,0,9,174,0,0,8,7,0,0,8,135,0,0,8,71,0,0,9,238,0,16,7,9,0,0,8,95,0,0,8,31,0,0,9,158,0,20,7,99,0,0,8,127,0,0,8,63,0,0,9,222,0,18,7,27,0,0,8,111,0,0,8,47,0,0,9,190,0,0,8,15,0,0,8,143,0,0,8,79,0,0,9,254,0,96,7,0,0,0,8,80,0,0,8,16,0,20,8,115,0,18,7,31,0,0,8,112,0,0,8,48,0,0,9,193,0,16,7,10,0,0,8,96,0,0,8,32,0,0,9,161,0,0,8,0,0,0,8,128,0,0,8,64,0,0,9,225,0,16,7,6,0,0,8,88,0,0,8,24,0,0,9,145,0,19,7,59,0,0,8,120,0,0,8,56,0,0,9,209,0,17,7,17,0,0,8,104,0,0,8,40,0,0,9,177,0,0,8,8,0,0,8,136,0,0,8,72,0,0,9,241,0,16,7,4,0,0,8,84,0,0,8,20,0,21,8,227,0,19,7,43,0,0,8,116,0,0,8,52,0,0,9,201,0,17,7,13,0,0,8,100,0,0,8,36,0,0,9,169,0,0,8,4,0,0,8,132,0,0,8,68,0,0,9,233,0,16,7,8,0,0,8,92,0,0,8,28,0,0,9,153,0,20,7,83,0,0,8,124,0,0,8,60,0,0,9,217,0,18,7,23,0,0,8,108,0,0,8,44,0,0,9,185,0,0,8,12,0,0,8,140,0,0,8,76,0,0,9,249,0,16,7,3,0,0,8,82,0,0,8,18,0,21,8,163,0,19,7,35,0,0,8,114,0,0,8,50,0,0,9,197,0,17,7,11,0,0,8,98,0,0,8,34,0,0,9,165,0,0,8,2,0,0,8,130,0,0,8,66,0,0,9,229,0,16,7,7,0,0,8,90,0,0,8,26,0,0,9,149,0,20,7,67,0,0,8,122,0,0,8,58,0,0,9,213,0,18,7,19,0,0,8,106,0,0,8,42,0,0,9,181,0,0,8,10,0,0,8,138,0,0,8,74,0,0,9,245,0,16,7,5,0,0,8,86,0,0,8,22,0,64,8,0,0,19,7,51,0,0,8,118,0,0,8,54,0,0,9,205,0,17,7,15,0,0,8,102,0,0,8,38,0,0,9,173,0,0,8,6,0,0,8,134,0,0,8,70,0,0,9,237,0,16,7,9,0,0,8,94,0,0,8,30,0,0,9,157,0,20,7,99,0,0,8,126,0,0,8,62,0,0,9,221,0,18,7,27,0,0,8,110,0,0,8,46,0,0,9,189,0,0,8,14,0,0,8,142,0,0,8,78,0,0,9,253,0,96,7,0,0,0,8,81,0,0,8,17,0,21,8,131,0,18,7,31,0,0,8,113,0,0,8,49,0,0,9,195,0,16,7,10,0,0,8,97,0,0,8,33,0,0,9,163,0,0,8,1,0,0,8,129,0,0,8,65,0,0,9,227,0,16,7,6,0,0,8,89,0,0,8,25,0,0,9,147,0,19,7,59,0,0,8,121,0,0,8,57,0,0,9,211,0,17,7,17,0,0,8,105,0,0,8,41,0,0,9,179,0,0,8,9,0,0,8,137,0,0,8,73,0,0,9,243,0,16,7,4,0,0,8,85,0,0,8,21,0,16,8,2,1,19,7,43,0,0,8,117,0,0,8,53,0,0,9,203,0,17,7,13,0,0,8,101,0,0,8,37,0,0,9,171,0,0,8,5,0,0,8,133,0,0,8,69,0,0,9,235,0,16,7,8,0,0,8,93,0,0,8,29,0,0,9,155,0,20,7,83,0,0,8,125,0,0,8,61,0,0,9,219,0,18,7,23,0,0,8,109,0,0,8,45,0,0,9,187,0,0,8,13,0,0,8,141,0,0,8,77,0,0,9,251,0,16,7,3,0,0,8,83,0,0,8,19,0,21,8,195,0,19,7,35,0,0,8,115,0,0,8,51,0,0,9,199,0,17,7,11,0,0,8,99,0,0,8,35,0,0,9,167,0,0,8,3,0,0,8,131,0,0,8,67,0,0,9,231,0,16,7,7,0,0,8,91,0,0,8,27,0,0,9,151,0,20,7,67,0,0,8,123,0,0,8,59,0,0,9,215,0,18,7,19,0,0,8,107,0,0,8,43,0,0,9,183,0,0,8,11,0,0,8,139,0,0,8,75,0,0,9,247,0,16,7,5,0,0,8,87,0,0,8,23,0,64,8,0,0,19,7,51,0,0,8,119,0,0,8,55,0,0,9,207,0,17,7,15,0,0,8,103,0,0,8,39,0,0,9,175,0,0,8,7,0,0,8,135,0,0,8,71,0,0,9,239,0,16,7,9,0,0,8,95,0,0,8,31,0,0,9,159,0,20,7,99,0,0,8,127,0,0,8,63,0,0,9,223,0,18,7,27,0,0,8,111,0,0,8,47,0,0,9,191,0,0,8,15,0,0,8,143,0,0,8,79,0,0,9,255,0], "i8", ALLOC_NONE, 5250232);
allocate([16,5,1,0,23,5,1,1,19,5,17,0,27,5,1,16,17,5,5,0,25,5,1,4,21,5,65,0,29,5,1,64,16,5,3,0,24,5,1,2,20,5,33,0,28,5,1,32,18,5,9,0,26,5,1,8,22,5,129,0,64,5,0,0,16,5,2,0,23,5,129,1,19,5,25,0,27,5,1,24,17,5,7,0,25,5,1,6,21,5,97,0,29,5,1,96,16,5,4,0,24,5,1,3,20,5,49,0,28,5,1,48,18,5,13,0,26,5,1,12,22,5,193,0,64,5,0,0], "i8", ALLOC_NONE, 5252280);
allocate([64,6,0,0,128,62,0,0], "i8", ALLOC_NONE, 5252408);
allocate([0,0,0,0,136,19,0,0], "i8", ALLOC_NONE, 5252416);
allocate([0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,128,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,64,0,0], "i8", ALLOC_NONE, 5252424);
allocate([0,0,0,0,255,255,255,255,253,255,255,255,249,255,255,255,241,255,255,255,225,255,255,255,193,255,255,255,129,255,255,255,1,255,255,255,1,254,255,255,1,252,255,255,1,248,255,255,1,240,255,255,1,224,255,255,1,192,255,255,1,128,255,255], "i8", ALLOC_NONE, 5252488);
allocate(4, "i8", ALLOC_NONE, 5252552);
allocate([0,0,0,0,150,48,7,119,44,97,14,238,186,81,9,153,25,196,109,7,143,244,106,112,53,165,99,233,163,149,100,158,50,136,219,14,164,184,220,121,30,233,213,224,136,217,210,151,43,76,182,9,189,124,177,126,7,45,184,231,145,29,191,144,100,16,183,29,242,32,176,106,72,113,185,243,222,65,190,132,125,212,218,26,235,228,221,109,81,181,212,244,199,133,211,131,86,152,108,19,192,168,107,100,122,249,98,253,236,201,101,138,79,92,1,20,217,108,6,99,99,61,15,250,245,13,8,141,200,32,110,59,94,16,105,76,228,65,96,213,114,113,103,162,209,228,3,60,71,212,4,75,253,133,13,210,107,181,10,165,250,168,181,53,108,152,178,66,214,201,187,219,64,249,188,172,227,108,216,50,117,92,223,69,207,13,214,220,89,61,209,171,172,48,217,38,58,0,222,81,128,81,215,200,22,97,208,191,181,244,180,33,35,196,179,86,153,149,186,207,15,165,189,184,158,184,2,40,8,136,5,95,178,217,12,198,36,233,11,177,135,124,111,47,17,76,104,88,171,29,97,193,61,45,102,182,144,65,220,118,6,113,219,1,188,32,210,152,42,16,213,239,137,133,177,113,31,181,182,6,165,228,191,159,51,212,184,232,162,201,7,120,52,249,0,15,142,168,9,150,24,152,14,225,187,13,106,127,45,61,109,8,151,108,100,145,1,92,99,230,244,81,107,107,98,97,108,28,216,48,101,133,78,0,98,242,237,149,6,108,123,165,1,27,193,244,8,130,87,196,15,245,198,217,176,101,80,233,183,18,234,184,190,139,124,136,185,252,223,29,221,98,73,45,218,21,243,124,211,140,101,76,212,251,88,97,178,77,206,81,181,58,116,0,188,163,226,48,187,212,65,165,223,74,215,149,216,61,109,196,209,164,251,244,214,211,106,233,105,67,252,217,110,52,70,136,103,173,208,184,96,218,115,45,4,68,229,29,3,51,95,76,10,170,201,124,13,221,60,113,5,80,170,65,2,39,16,16,11,190,134,32,12,201,37,181,104,87,179,133,111,32,9,212,102,185,159,228,97,206,14,249,222,94,152,201,217,41,34,152,208,176,180,168,215,199,23,61,179,89,129,13,180,46,59,92,189,183,173,108,186,192,32,131,184,237,182,179,191,154,12,226,182,3,154,210,177,116,57,71,213,234,175,119,210,157,21,38,219,4,131,22,220,115,18,11,99,227,132,59,100,148,62,106,109,13,168,90,106,122,11,207,14,228,157,255,9,147,39,174,0,10,177,158,7,125,68,147,15,240,210,163,8,135,104,242,1,30,254,194,6,105,93,87,98,247,203,103,101,128,113,54,108,25,231,6,107,110,118,27,212,254,224,43,211,137,90,122,218,16,204,74,221,103,111,223,185,249,249,239,190,142,67,190,183,23,213,142,176,96,232,163,214,214,126,147,209,161,196,194,216,56,82,242,223,79,241,103,187,209,103,87,188,166,221,6,181,63,75,54,178,72,218,43,13,216,76,27,10,175,246,74,3,54,96,122,4,65,195,239,96,223,85,223,103,168,239,142,110,49,121,190,105,70,140,179,97,203,26,131,102,188,160,210,111,37,54,226,104,82,149,119,12,204,3,71,11,187,185,22,2,34,47,38,5,85,190,59,186,197,40,11,189,178,146,90,180,43,4,106,179,92,167,255,215,194,49,207,208,181,139,158,217,44,29,174,222,91,176,194,100,155,38,242,99,236,156,163,106,117,10,147,109,2,169,6,9,156,63,54,14,235,133,103,7,114,19,87,0,5,130,74,191,149,20,122,184,226,174,43,177,123,56,27,182,12,155,142,210,146,13,190,213,229,183,239,220,124,33,223,219,11,212,210,211,134,66,226,212,241,248,179,221,104,110,131,218,31,205,22,190,129,91,38,185,246,225,119,176,111,119,71,183,24,230,90,8,136,112,106,15,255,202,59,6,102,92,11,1,17,255,158,101,143,105,174,98,248,211,255,107,97,69,207,108,22,120,226,10,160,238,210,13,215,84,131,4,78,194,179,3,57,97,38,103,167,247,22,96,208,77,71,105,73,219,119,110,62,74,106,209,174,220,90,214,217,102,11,223,64,240,59,216,55,83,174,188,169,197,158,187,222,127,207,178,71,233,255,181,48,28,242,189,189,138,194,186,202,48,147,179,83,166,163,180,36,5,54,208,186,147,6,215,205,41,87,222,84,191,103,217,35,46,122,102,179,184,74,97,196,2,27,104,93,148,43,111,42,55,190,11,180,161,142,12,195,27,223,5,90,141,239,2,45,0,0,0,0,65,49,27,25,130,98,54,50,195,83,45,43,4,197,108,100,69,244,119,125,134,167,90,86,199,150,65,79,8,138,217,200,73,187,194,209,138,232,239,250,203,217,244,227,12,79,181,172,77,126,174,181,142,45,131,158,207,28,152,135,81,18,194,74,16,35,217,83,211,112,244,120,146,65,239,97,85,215,174,46,20,230,181,55,215,181,152,28,150,132,131,5,89,152,27,130,24,169,0,155,219,250,45,176,154,203,54,169,93,93,119,230,28,108,108,255,223,63,65,212,158,14,90,205,162,36,132,149,227,21,159,140,32,70,178,167,97,119,169,190,166,225,232,241,231,208,243,232,36,131,222,195,101,178,197,218,170,174,93,93,235,159,70,68,40,204,107,111,105,253,112,118,174,107,49,57,239,90,42,32,44,9,7,11,109,56,28,18,243,54,70,223,178,7,93,198,113,84,112,237,48,101,107,244,247,243,42,187,182,194,49,162,117,145,28,137,52,160,7,144,251,188,159,23,186,141,132,14,121,222,169,37,56,239,178,60,255,121,243,115,190,72,232,106,125,27,197,65,60,42,222,88,5,79,121,240,68,126,98,233,135,45,79,194,198,28,84,219,1,138,21,148,64,187,14,141,131,232,35,166,194,217,56,191,13,197,160,56,76,244,187,33,143,167,150,10,206,150,141,19,9,0,204,92,72,49,215,69,139,98,250,110,202,83,225,119,84,93,187,186,21,108,160,163,214,63,141,136,151,14,150,145,80,152,215,222,17,169,204,199,210,250,225,236,147,203,250,245,92,215,98,114,29,230,121,107,222,181,84,64,159,132,79,89,88,18,14,22,25,35,21,15,218,112,56,36,155,65,35,61,167,107,253,101,230,90,230,124,37,9,203,87,100,56,208,78,163,174,145,1,226,159,138,24,33,204,167,51,96,253,188,42,175,225,36,173,238,208,63,180,45,131,18,159,108,178,9,134,171,36,72,201,234,21,83,208,41,70,126,251,104,119,101,226,246,121,63,47,183,72,36,54,116,27,9,29,53,42,18,4,242,188,83,75,179,141,72,82,112,222,101,121,49,239,126,96,254,243,230,231,191,194,253,254,124,145,208,213,61,160,203,204,250,54,138,131,187,7,145,154,120,84,188,177,57,101,167,168,75,152,131,59,10,169,152,34,201,250,181,9,136,203,174,16,79,93,239,95,14,108,244,70,205,63,217,109,140,14,194,116,67,18,90,243,2,35,65,234,193,112,108,193,128,65,119,216,71,215,54,151,6,230,45,142,197,181,0,165,132,132,27,188,26,138,65,113,91,187,90,104,152,232,119,67,217,217,108,90,30,79,45,21,95,126,54,12,156,45,27,39,221,28,0,62,18,0,152,185,83,49,131,160,144,98,174,139,209,83,181,146,22,197,244,221,87,244,239,196,148,167,194,239,213,150,217,246,233,188,7,174,168,141,28,183,107,222,49,156,42,239,42,133,237,121,107,202,172,72,112,211,111,27,93,248,46,42,70,225,225,54,222,102,160,7,197,127,99,84,232,84,34,101,243,77,229,243,178,2,164,194,169,27,103,145,132,48,38,160,159,41,184,174,197,228,249,159,222,253,58,204,243,214,123,253,232,207,188,107,169,128,253,90,178,153,62,9,159,178,127,56,132,171,176,36,28,44,241,21,7,53,50,70,42,30,115,119,49,7,180,225,112,72,245,208,107,81,54,131,70,122,119,178,93,99,78,215,250,203,15,230,225,210,204,181,204,249,141,132,215,224,74,18,150,175,11,35,141,182,200,112,160,157,137,65,187,132,70,93,35,3,7,108,56,26,196,63,21,49,133,14,14,40,66,152,79,103,3,169,84,126,192,250,121,85,129,203,98,76,31,197,56,129,94,244,35,152,157,167,14,179,220,150,21,170,27,0,84,229,90,49,79,252,153,98,98,215,216,83,121,206,23,79,225,73,86,126,250,80,149,45,215,123,212,28,204,98,19,138,141,45,82,187,150,52,145,232,187,31,208,217,160,6,236,243,126,94,173,194,101,71,110,145,72,108,47,160,83,117,232,54,18,58,169,7,9,35,106,84,36,8,43,101,63,17,228,121,167,150,165,72,188,143,102,27,145,164,39,42,138,189,224,188,203,242,161,141,208,235,98,222,253,192,35,239,230,217,189,225,188,20,252,208,167,13,63,131,138,38,126,178,145,63,185,36,208,112,248,21,203,105,59,70,230,66,122,119,253,91,181,107,101,220,244,90,126,197,55,9,83,238,118,56,72,247,177,174,9,184,240,159,18,161,51,204,63,138,114,253,36,147,0,0,0,0,55,106,194,1,110,212,132,3,89,190,70,2,220,168,9,7,235,194,203,6,178,124,141,4,133,22,79,5,184,81,19,14,143,59,209,15,214,133,151,13,225,239,85,12,100,249,26,9,83,147,216,8,10,45,158,10,61,71,92,11,112,163,38,28,71,201,228,29,30,119,162,31,41,29,96,30,172,11,47,27,155,97,237,26,194,223,171,24,245,181,105,25,200,242,53,18,255,152,247,19,166,38,177,17,145,76,115,16,20,90,60,21,35,48,254,20,122,142,184,22,77,228,122,23,224,70,77,56,215,44,143,57,142,146,201,59,185,248,11,58,60,238,68,63,11,132,134,62,82,58,192,60,101,80,2,61,88,23,94,54,111,125,156,55,54,195,218,53,1,169,24,52,132,191,87,49,179,213,149,48,234,107,211,50,221,1,17,51,144,229,107,36,167,143,169,37,254,49,239,39,201,91,45,38,76,77,98,35,123,39,160,34,34,153,230,32,21,243,36,33,40,180,120,42,31,222,186,43,70,96,252,41,113,10,62,40,244,28,113,45,195,118,179,44,154,200,245,46,173,162,55,47,192,141,154,112,247,231,88,113,174,89,30,115,153,51,220,114,28,37,147,119,43,79,81,118,114,241,23,116,69,155,213,117,120,220,137,126,79,182,75,127,22,8,13,125,33,98,207,124,164,116,128,121,147,30,66,120,202,160,4,122,253,202,198,123,176,46,188,108,135,68,126,109,222,250,56,111,233,144,250,110,108,134,181,107,91,236,119,106,2,82,49,104,53,56,243,105,8,127,175,98,63,21,109,99,102,171,43,97,81,193,233,96,212,215,166,101,227,189,100,100,186,3,34,102,141,105,224,103,32,203,215,72,23,161,21,73,78,31,83,75,121,117,145,74,252,99,222,79,203,9,28,78,146,183,90,76,165,221,152,77,152,154,196,70,175,240,6,71,246,78,64,69,193,36,130,68,68,50,205,65,115,88,15,64,42,230,73,66,29,140,139,67,80,104,241,84,103,2,51,85,62,188,117,87,9,214,183,86,140,192,248,83,187,170,58,82,226,20,124,80,213,126,190,81,232,57,226,90,223,83,32,91,134,237,102,89,177,135,164,88,52,145,235,93,3,251,41,92,90,69,111,94,109,47,173,95,128,27,53,225,183,113,247,224,238,207,177,226,217,165,115,227,92,179,60,230,107,217,254,231,50,103,184,229,5,13,122,228,56,74,38,239,15,32,228,238,86,158,162,236,97,244,96,237,228,226,47,232,211,136,237,233,138,54,171,235,189,92,105,234,240,184,19,253,199,210,209,252,158,108,151,254,169,6,85,255,44,16,26,250,27,122,216,251,66,196,158,249,117,174,92,248,72,233,0,243,127,131,194,242,38,61,132,240,17,87,70,241,148,65,9,244,163,43,203,245,250,149,141,247,205,255,79,246,96,93,120,217,87,55,186,216,14,137,252,218,57,227,62,219,188,245,113,222,139,159,179,223,210,33,245,221,229,75,55,220,216,12,107,215,239,102,169,214,182,216,239,212,129,178,45,213,4,164,98,208,51,206,160,209,106,112,230,211,93,26,36,210,16,254,94,197,39,148,156,196,126,42,218,198,73,64,24,199,204,86,87,194,251,60,149,195,162,130,211,193,149,232,17,192,168,175,77,203,159,197,143,202,198,123,201,200,241,17,11,201,116,7,68,204,67,109,134,205,26,211,192,207,45,185,2,206,64,150,175,145,119,252,109,144,46,66,43,146,25,40,233,147,156,62,166,150,171,84,100,151,242,234,34,149,197,128,224,148,248,199,188,159,207,173,126,158,150,19,56,156,161,121,250,157,36,111,181,152,19,5,119,153,74,187,49,155,125,209,243,154,48,53,137,141,7,95,75,140,94,225,13,142,105,139,207,143,236,157,128,138,219,247,66,139,130,73,4,137,181,35,198,136,136,100,154,131,191,14,88,130,230,176,30,128,209,218,220,129,84,204,147,132,99,166,81,133,58,24,23,135,13,114,213,134,160,208,226,169,151,186,32,168,206,4,102,170,249,110,164,171,124,120,235,174,75,18,41,175,18,172,111,173,37,198,173,172,24,129,241,167,47,235,51,166,118,85,117,164,65,63,183,165,196,41,248,160,243,67,58,161,170,253,124,163,157,151,190,162,208,115,196,181,231,25,6,180,190,167,64,182,137,205,130,183,12,219,205,178,59,177,15,179,98,15,73,177,85,101,139,176,104,34,215,187,95,72,21,186,6,246,83,184,49,156,145,185,180,138,222,188,131,224,28,189,218,94,90,191,237,52,152,190,0,0,0,0,101,103,188,184,139,200,9,170,238,175,181,18,87,151,98,143,50,240,222,55,220,95,107,37,185,56,215,157,239,40,180,197,138,79,8,125,100,224,189,111,1,135,1,215,184,191,214,74,221,216,106,242,51,119,223,224,86,16,99,88,159,87,25,80,250,48,165,232,20,159,16,250,113,248,172,66,200,192,123,223,173,167,199,103,67,8,114,117,38,111,206,205,112,127,173,149,21,24,17,45,251,183,164,63,158,208,24,135,39,232,207,26,66,143,115,162,172,32,198,176,201,71,122,8,62,175,50,160,91,200,142,24,181,103,59,10,208,0,135,178,105,56,80,47,12,95,236,151,226,240,89,133,135,151,229,61,209,135,134,101,180,224,58,221,90,79,143,207,63,40,51,119,134,16,228,234,227,119,88,82,13,216,237,64,104,191,81,248,161,248,43,240,196,159,151,72,42,48,34,90,79,87,158,226,246,111,73,127,147,8,245,199,125,167,64,213,24,192,252,109,78,208,159,53,43,183,35,141,197,24,150,159,160,127,42,39,25,71,253,186,124,32,65,2,146,143,244,16,247,232,72,168,61,88,20,155,88,63,168,35,182,144,29,49,211,247,161,137,106,207,118,20,15,168,202,172,225,7,127,190,132,96,195,6,210,112,160,94,183,23,28,230,89,184,169,244,60,223,21,76,133,231,194,209,224,128,126,105,14,47,203,123,107,72,119,195,162,15,13,203,199,104,177,115,41,199,4,97,76,160,184,217,245,152,111,68,144,255,211,252,126,80,102,238,27,55,218,86,77,39,185,14,40,64,5,182,198,239,176,164,163,136,12,28,26,176,219,129,127,215,103,57,145,120,210,43,244,31,110,147,3,247,38,59,102,144,154,131,136,63,47,145,237,88,147,41,84,96,68,180,49,7,248,12,223,168,77,30,186,207,241,166,236,223,146,254,137,184,46,70,103,23,155,84,2,112,39,236,187,72,240,113,222,47,76,201,48,128,249,219,85,231,69,99,156,160,63,107,249,199,131,211,23,104,54,193,114,15,138,121,203,55,93,228,174,80,225,92,64,255,84,78,37,152,232,246,115,136,139,174,22,239,55,22,248,64,130,4,157,39,62,188,36,31,233,33,65,120,85,153,175,215,224,139,202,176,92,51,59,182,89,237,94,209,229,85,176,126,80,71,213,25,236,255,108,33,59,98,9,70,135,218,231,233,50,200,130,142,142,112,212,158,237,40,177,249,81,144,95,86,228,130,58,49,88,58,131,9,143,167,230,110,51,31,8,193,134,13,109,166,58,181,164,225,64,189,193,134,252,5,47,41,73,23,74,78,245,175,243,118,34,50,150,17,158,138,120,190,43,152,29,217,151,32,75,201,244,120,46,174,72,192,192,1,253,210,165,102,65,106,28,94,150,247,121,57,42,79,151,150,159,93,242,241,35,229,5,25,107,77,96,126,215,245,142,209,98,231,235,182,222,95,82,142,9,194,55,233,181,122,217,70,0,104,188,33,188,208,234,49,223,136,143,86,99,48,97,249,214,34,4,158,106,154,189,166,189,7,216,193,1,191,54,110,180,173,83,9,8,21,154,78,114,29,255,41,206,165,17,134,123,183,116,225,199,15,205,217,16,146,168,190,172,42,70,17,25,56,35,118,165,128,117,102,198,216,16,1,122,96,254,174,207,114,155,201,115,202,34,241,164,87,71,150,24,239,169,57,173,253,204,94,17,69,6,238,77,118,99,137,241,206,141,38,68,220,232,65,248,100,81,121,47,249,52,30,147,65,218,177,38,83,191,214,154,235,233,198,249,179,140,161,69,11,98,14,240,25,7,105,76,161,190,81,155,60,219,54,39,132,53,153,146,150,80,254,46,46,153,185,84,38,252,222,232,158,18,113,93,140,119,22,225,52,206,46,54,169,171,73,138,17,69,230,63,3,32,129,131,187,118,145,224,227,19,246,92,91,253,89,233,73,152,62,85,241,33,6,130,108,68,97,62,212,170,206,139,198,207,169,55,126,56,65,127,214,93,38,195,110,179,137,118,124,214,238,202,196,111,214,29,89,10,177,161,225,228,30,20,243,129,121,168,75,215,105,203,19,178,14,119,171,92,161,194,185,57,198,126,1,128,254,169,156,229,153,21,36,11,54,160,54,110,81,28,142,167,22,102,134,194,113,218,62,44,222,111,44,73,185,211,148,240,129,4,9,149,230,184,177,123,73,13,163,30,46,177,27,72,62,210,67,45,89,110,251,195,246,219,233,166,145,103,81,31,169,176,204,122,206,12,116,148,97,185,102,241,6,5,222,0,0,0,0,119,7,48,150,238,14,97,44,153,9,81,186,7,109,196,25,112,106,244,143,233,99,165,53,158,100,149,163,14,219,136,50,121,220,184,164,224,213,233,30,151,210,217,136,9,182,76,43,126,177,124,189,231,184,45,7,144,191,29,145,29,183,16,100,106,176,32,242,243,185,113,72,132,190,65,222,26,218,212,125,109,221,228,235,244,212,181,81,131,211,133,199,19,108,152,86,100,107,168,192,253,98,249,122,138,101,201,236,20,1,92,79,99,6,108,217,250,15,61,99,141,8,13,245,59,110,32,200,76,105,16,94,213,96,65,228,162,103,113,114,60,3,228,209,75,4,212,71,210,13,133,253,165,10,181,107,53,181,168,250,66,178,152,108,219,187,201,214,172,188,249,64,50,216,108,227,69,223,92,117,220,214,13,207,171,209,61,89,38,217,48,172,81,222,0,58,200,215,81,128,191,208,97,22,33,180,244,181,86,179,196,35,207,186,149,153,184,189,165,15,40,2,184,158,95,5,136,8,198,12,217,178,177,11,233,36,47,111,124,135,88,104,76,17,193,97,29,171,182,102,45,61,118,220,65,144,1,219,113,6,152,210,32,188,239,213,16,42,113,177,133,137,6,182,181,31,159,191,228,165,232,184,212,51,120,7,201,162,15,0,249,52,150,9,168,142,225,14,152,24,127,106,13,187,8,109,61,45,145,100,108,151,230,99,92,1,107,107,81,244,28,108,97,98,133,101,48,216,242,98,0,78,108,6,149,237,27,1,165,123,130,8,244,193,245,15,196,87,101,176,217,198,18,183,233,80,139,190,184,234,252,185,136,124,98,221,29,223,21,218,45,73,140,211,124,243,251,212,76,101,77,178,97,88,58,181,81,206,163,188,0,116,212,187,48,226,74,223,165,65,61,216,149,215,164,209,196,109,211,214,244,251,67,105,233,106,52,110,217,252,173,103,136,70,218,96,184,208,68,4,45,115,51,3,29,229,170,10,76,95,221,13,124,201,80,5,113,60,39,2,65,170,190,11,16,16,201,12,32,134,87,104,181,37,32,111,133,179,185,102,212,9,206,97,228,159,94,222,249,14,41,217,201,152,176,208,152,34,199,215,168,180,89,179,61,23,46,180,13,129,183,189,92,59,192,186,108,173,237,184,131,32,154,191,179,182,3,182,226,12,116,177,210,154,234,213,71,57,157,210,119,175,4,219,38,21,115,220,22,131,227,99,11,18,148,100,59,132,13,109,106,62,122,106,90,168,228,14,207,11,147,9,255,157,10,0,174,39,125,7,158,177,240,15,147,68,135,8,163,210,30,1,242,104,105,6,194,254,247,98,87,93,128,101,103,203,25,108,54,113,110,107,6,231,254,212,27,118,137,211,43,224,16,218,122,90,103,221,74,204,249,185,223,111,142,190,239,249,23,183,190,67,96,176,142,213,214,214,163,232,161,209,147,126,56,216,194,196,79,223,242,82,209,187,103,241,166,188,87,103,63,181,6,221,72,178,54,75,216,13,43,218,175,10,27,76,54,3,74,246,65,4,122,96,223,96,239,195,168,103,223,85,49,110,142,239,70,105,190,121,203,97,179,140,188,102,131,26,37,111,210,160,82,104,226,54,204,12,119,149,187,11,71,3,34,2,22,185,85,5,38,47,197,186,59,190,178,189,11,40,43,180,90,146,92,179,106,4,194,215,255,167,181,208,207,49,44,217,158,139,91,222,174,29,155,100,194,176,236,99,242,38,117,106,163,156,2,109,147,10,156,9,6,169,235,14,54,63,114,7,103,133,5,0,87,19,149,191,74,130,226,184,122,20,123,177,43,174,12,182,27,56,146,210,142,155,229,213,190,13,124,220,239,183,11,219,223,33,134,211,210,212,241,212,226,66,104,221,179,248,31,218,131,110,129,190,22,205,246,185,38,91,111,176,119,225,24,183,71,119,136,8,90,230,255,15,106,112,102,6,59,202,17,1,11,92,143,101,158,255,248,98,174,105,97,107,255,211,22,108,207,69,160,10,226,120,215,13,210,238,78,4,131,84,57,3,179,194,167,103,38,97,208,96,22,247,73,105,71,77,62,110,119,219,174,209,106,74,217,214,90,220,64,223,11,102,55,216,59,240,169,188,174,83,222,187,158,197,71,178,207,127,48,181,255,233,189,189,242,28,202,186,194,138,83,179,147,48,36,180,163,166,186,208,54,5,205,215,6,147,84,222,87,41,35,217,103,191,179,102,122,46,196,97,74,184,93,104,27,2,42,111,43,148,180,11,190,55,195,12,142,161,90,5,223,27,45,2,239,141,0,0,0,0,25,27,49,65,50,54,98,130,43,45,83,195,100,108,197,4,125,119,244,69,86,90,167,134,79,65,150,199,200,217,138,8,209,194,187,73,250,239,232,138,227,244,217,203,172,181,79,12,181,174,126,77,158,131,45,142,135,152,28,207,74,194,18,81,83,217,35,16,120,244,112,211,97,239,65,146,46,174,215,85,55,181,230,20,28,152,181,215,5,131,132,150,130,27,152,89,155,0,169,24,176,45,250,219,169,54,203,154,230,119,93,93,255,108,108,28,212,65,63,223,205,90,14,158,149,132,36,162,140,159,21,227,167,178,70,32,190,169,119,97,241,232,225,166,232,243,208,231,195,222,131,36,218,197,178,101,93,93,174,170,68,70,159,235,111,107,204,40,118,112,253,105,57,49,107,174,32,42,90,239,11,7,9,44,18,28,56,109,223,70,54,243,198,93,7,178,237,112,84,113,244,107,101,48,187,42,243,247,162,49,194,182,137,28,145,117,144,7,160,52,23,159,188,251,14,132,141,186,37,169,222,121,60,178,239,56,115,243,121,255,106,232,72,190,65,197,27,125,88,222,42,60,240,121,79,5,233,98,126,68,194,79,45,135,219,84,28,198,148,21,138,1,141,14,187,64,166,35,232,131,191,56,217,194,56,160,197,13,33,187,244,76,10,150,167,143,19,141,150,206,92,204,0,9,69,215,49,72,110,250,98,139,119,225,83,202,186,187,93,84,163,160,108,21,136,141,63,214,145,150,14,151,222,215,152,80,199,204,169,17,236,225,250,210,245,250,203,147,114,98,215,92,107,121,230,29,64,84,181,222,89,79,132,159,22,14,18,88,15,21,35,25,36,56,112,218,61,35,65,155,101,253,107,167,124,230,90,230,87,203,9,37,78,208,56,100,1,145,174,163,24,138,159,226,51,167,204,33,42,188,253,96,173,36,225,175,180,63,208,238,159,18,131,45,134,9,178,108,201,72,36,171,208,83,21,234,251,126,70,41,226,101,119,104,47,63,121,246,54,36,72,183,29,9,27,116,4,18,42,53,75,83,188,242,82,72,141,179,121,101,222,112,96,126,239,49,231,230,243,254,254,253,194,191,213,208,145,124,204,203,160,61,131,138,54,250,154,145,7,187,177,188,84,120,168,167,101,57,59,131,152,75,34,152,169,10,9,181,250,201,16,174,203,136,95,239,93,79,70,244,108,14,109,217,63,205,116,194,14,140,243,90,18,67,234,65,35,2,193,108,112,193,216,119,65,128,151,54,215,71,142,45,230,6,165,0,181,197,188,27,132,132,113,65,138,26,104,90,187,91,67,119,232,152,90,108,217,217,21,45,79,30,12,54,126,95,39,27,45,156,62,0,28,221,185,152,0,18,160,131,49,83,139,174,98,144,146,181,83,209,221,244,197,22,196,239,244,87,239,194,167,148,246,217,150,213,174,7,188,233,183,28,141,168,156,49,222,107,133,42,239,42,202,107,121,237,211,112,72,172,248,93,27,111,225,70,42,46,102,222,54,225,127,197,7,160,84,232,84,99,77,243,101,34,2,178,243,229,27,169,194,164,48,132,145,103,41,159,160,38,228,197,174,184,253,222,159,249,214,243,204,58,207,232,253,123,128,169,107,188,153,178,90,253,178,159,9,62,171,132,56,127,44,28,36,176,53,7,21,241,30,42,70,50,7,49,119,115,72,112,225,180,81,107,208,245,122,70,131,54,99,93,178,119,203,250,215,78,210,225,230,15,249,204,181,204,224,215,132,141,175,150,18,74,182,141,35,11,157,160,112,200,132,187,65,137,3,35,93,70,26,56,108,7,49,21,63,196,40,14,14,133,103,79,152,66,126,84,169,3,85,121,250,192,76,98,203,129,129,56,197,31,152,35,244,94,179,14,167,157,170,21,150,220,229,84,0,27,252,79,49,90,215,98,98,153,206,121,83,216,73,225,79,23,80,250,126,86,123,215,45,149,98,204,28,212,45,141,138,19,52,150,187,82,31,187,232,145,6,160,217,208,94,126,243,236,71,101,194,173,108,72,145,110,117,83,160,47,58,18,54,232,35,9,7,169,8,36,84,106,17,63,101,43,150,167,121,228,143,188,72,165,164,145,27,102,189,138,42,39,242,203,188,224,235,208,141,161,192,253,222,98,217,230,239,35,20,188,225,189,13,167,208,252,38,138,131,63,63,145,178,126,112,208,36,185,105,203,21,248,66,230,70,59,91,253,119,122,220,101,107,181,197,126,90,244,238,83,9,55,247,72,56,118,184,9,174,177,161,18,159,240,138,63,204,51,147,36,253,114,0,0,0,0,1,194,106,55,3,132,212,110,2,70,190,89,7,9,168,220,6,203,194,235,4,141,124,178,5,79,22,133,14,19,81,184,15,209,59,143,13,151,133,214,12,85,239,225,9,26,249,100,8,216,147,83,10,158,45,10,11,92,71,61,28,38,163,112,29,228,201,71,31,162,119,30,30,96,29,41,27,47,11,172,26,237,97,155,24,171,223,194,25,105,181,245,18,53,242,200,19,247,152,255,17,177,38,166,16,115,76,145,21,60,90,20,20,254,48,35,22,184,142,122,23,122,228,77,56,77,70,224,57,143,44,215,59,201,146,142,58,11,248,185,63,68,238,60,62,134,132,11,60,192,58,82,61,2,80,101,54,94,23,88,55,156,125,111,53,218,195,54,52,24,169,1,49,87,191,132,48,149,213,179,50,211,107,234,51,17,1,221,36,107,229,144,37,169,143,167,39,239,49,254,38,45,91,201,35,98,77,76,34,160,39,123,32,230,153,34,33,36,243,21,42,120,180,40,43,186,222,31,41,252,96,70,40,62,10,113,45,113,28,244,44,179,118,195,46,245,200,154,47,55,162,173,112,154,141,192,113,88,231,247,115,30,89,174,114,220,51,153,119,147,37,28,118,81,79,43,116,23,241,114,117,213,155,69,126,137,220,120,127,75,182,79,125,13,8,22,124,207,98,33,121,128,116,164,120,66,30,147,122,4,160,202,123,198,202,253,108,188,46,176,109,126,68,135,111,56,250,222,110,250,144,233,107,181,134,108,106,119,236,91,104,49,82,2,105,243,56,53,98,175,127,8,99,109,21,63,97,43,171,102,96,233,193,81,101,166,215,212,100,100,189,227,102,34,3,186,103,224,105,141,72,215,203,32,73,21,161,23,75,83,31,78,74,145,117,121,79,222,99,252,78,28,9,203,76,90,183,146,77,152,221,165,70,196,154,152,71,6,240,175,69,64,78,246,68,130,36,193,65,205,50,68,64,15,88,115,66,73,230,42,67,139,140,29,84,241,104,80,85,51,2,103,87,117,188,62,86,183,214,9,83,248,192,140,82,58,170,187,80,124,20,226,81,190,126,213,90,226,57,232,91,32,83,223,89,102,237,134,88,164,135,177,93,235,145,52,92,41,251,3,94,111,69,90,95,173,47,109,225,53,27,128,224,247,113,183,226,177,207,238,227,115,165,217,230,60,179,92,231,254,217,107,229,184,103,50,228,122,13,5,239,38,74,56,238,228,32,15,236,162,158,86,237,96,244,97,232,47,226,228,233,237,136,211,235,171,54,138,234,105,92,189,253,19,184,240,252,209,210,199,254,151,108,158,255,85,6,169,250,26,16,44,251,216,122,27,249,158,196,66,248,92,174,117,243,0,233,72,242,194,131,127,240,132,61,38,241,70,87,17,244,9,65,148,245,203,43,163,247,141,149,250,246,79,255,205,217,120,93,96,216,186,55,87,218,252,137,14,219,62,227,57,222,113,245,188,223,179,159,139,221,245,33,210,220,55,75,229,215,107,12,216,214,169,102,239,212,239,216,182,213,45,178,129,208,98,164,4,209,160,206,51,211,230,112,106,210,36,26,93,197,94,254,16,196,156,148,39,198,218,42,126,199,24,64,73,194,87,86,204,195,149,60,251,193,211,130,162,192,17,232,149,203,77,175,168,202,143,197,159,200,201,123,198,201,11,17,241,204,68,7,116,205,134,109,67,207,192,211,26,206,2,185,45,145,175,150,64,144,109,252,119,146,43,66,46,147,233,40,25,150,166,62,156,151,100,84,171,149,34,234,242,148,224,128,197,159,188,199,248,158,126,173,207,156,56,19,150,157,250,121,161,152,181,111,36,153,119,5,19,155,49,187,74,154,243,209,125,141,137,53,48,140,75,95,7,142,13,225,94,143,207,139,105,138,128,157,236,139,66,247,219,137,4,73,130,136,198,35,181,131,154,100,136,130,88,14,191,128,30,176,230,129,220,218,209,132,147,204,84,133,81,166,99,135,23,24,58,134,213,114,13,169,226,208,160,168,32,186,151,170,102,4,206,171,164,110,249,174,235,120,124,175,41,18,75,173,111,172,18,172,173,198,37,167,241,129,24,166,51,235,47,164,117,85,118,165,183,63,65,160,248,41,196,161,58,67,243,163,124,253,170,162,190,151,157,181,196,115,208,180,6,25,231,182,64,167,190,183,130,205,137,178,205,219,12,179,15,177,59,177,73,15,98,176,139,101,85,187,215,34,104,186,21,72,95,184,83,246,6,185,145,156,49,188,222,138,180,189,28,224,131,191,90,94,218,190,152,52,237,0,0,0,0,184,188,103,101,170,9,200,139,18,181,175,238,143,98,151,87,55,222,240,50,37,107,95,220,157,215,56,185,197,180,40,239,125,8,79,138,111,189,224,100,215,1,135,1,74,214,191,184,242,106,216,221,224,223,119,51,88,99,16,86,80,25,87,159,232,165,48,250,250,16,159,20,66,172,248,113,223,123,192,200,103,199,167,173,117,114,8,67,205,206,111,38,149,173,127,112,45,17,24,21,63,164,183,251,135,24,208,158,26,207,232,39,162,115,143,66,176,198,32,172,8,122,71,201,160,50,175,62,24,142,200,91,10,59,103,181,178,135,0,208,47,80,56,105,151,236,95,12,133,89,240,226,61,229,151,135,101,134,135,209,221,58,224,180,207,143,79,90,119,51,40,63,234,228,16,134,82,88,119,227,64,237,216,13,248,81,191,104,240,43,248,161,72,151,159,196,90,34,48,42,226,158,87,79,127,73,111,246,199,245,8,147,213,64,167,125,109,252,192,24,53,159,208,78,141,35,183,43,159,150,24,197,39,42,127,160,186,253,71,25,2,65,32,124,16,244,143,146,168,72,232,247,155,20,88,61,35,168,63,88,49,29,144,182,137,161,247,211,20,118,207,106,172,202,168,15,190,127,7,225,6,195,96,132,94,160,112,210,230,28,23,183,244,169,184,89,76,21,223,60,209,194,231,133,105,126,128,224,123,203,47,14,195,119,72,107,203,13,15,162,115,177,104,199,97,4,199,41,217,184,160,76,68,111,152,245,252,211,255,144,238,102,80,126,86,218,55,27,14,185,39,77,182,5,64,40,164,176,239,198,28,12,136,163,129,219,176,26,57,103,215,127,43,210,120,145,147,110,31,244,59,38,247,3,131,154,144,102,145,47,63,136,41,147,88,237,180,68,96,84,12,248,7,49,30,77,168,223,166,241,207,186,254,146,223,236,70,46,184,137,84,155,23,103,236,39,112,2,113,240,72,187,201,76,47,222,219,249,128,48,99,69,231,85,107,63,160,156,211,131,199,249,193,54,104,23,121,138,15,114,228,93,55,203,92,225,80,174,78,84,255,64,246,232,152,37,174,139,136,115,22,55,239,22,4,130,64,248,188,62,39,157,33,233,31,36,153,85,120,65,139,224,215,175,51,92,176,202,237,89,182,59,85,229,209,94,71,80,126,176,255,236,25,213,98,59,33,108,218,135,70,9,200,50,233,231,112,142,142,130,40,237,158,212,144,81,249,177,130,228,86,95,58,88,49,58,167,143,9,131,31,51,110,230,13,134,193,8,181,58,166,109,189,64,225,164,5,252,134,193,23,73,41,47,175,245,78,74,50,34,118,243,138,158,17,150,152,43,190,120,32,151,217,29,120,244,201,75,192,72,174,46,210,253,1,192,106,65,102,165,247,150,94,28,79,42,57,121,93,159,150,151,229,35,241,242,77,107,25,5,245,215,126,96,231,98,209,142,95,222,182,235,194,9,142,82,122,181,233,55,104,0,70,217,208,188,33,188,136,223,49,234,48,99,86,143,34,214,249,97,154,106,158,4,7,189,166,189,191,1,193,216,173,180,110,54,21,8,9,83,29,114,78,154,165,206,41,255,183,123,134,17,15,199,225,116,146,16,217,205,42,172,190,168,56,25,17,70,128,165,118,35,216,198,102,117,96,122,1,16,114,207,174,254,202,115,201,155,87,164,241,34,239,24,150,71,253,173,57,169,69,17,94,204,118,77,238,6,206,241,137,99,220,68,38,141,100,248,65,232,249,47,121,81,65,147,30,52,83,38,177,218,235,154,214,191,179,249,198,233,11,69,161,140,25,240,14,98,161,76,105,7,60,155,81,190,132,39,54,219,150,146,153,53,46,46,254,80,38,84,185,153,158,232,222,252,140,93,113,18,52,225,22,119,169,54,46,206,17,138,73,171,3,63,230,69,187,131,129,32,227,224,145,118,91,92,246,19,73,233,89,253,241,85,62,152,108,130,6,33,212,62,97,68,198,139,206,170,126,55,169,207,214,127,65,56,110,195,38,93,124,118,137,179,196,202,238,214,89,29,214,111,225,161,177,10,243,20,30,228,75,168,121,129,19,203,105,215,171,119,14,178,185,194,161,92,1,126,198,57,156,169,254,128,36,21,153,229,54,160,54,11,142,28,81,110,134,102,22,167,62,218,113,194,44,111,222,44,148,211,185,73,9,4,129,240,177,184,230,149,163,13,73,123,27,177,46,30,67,210,62,72,251,110,89,45,233,219,246,195,81,103,145,166,204,176,169,31,116,12,206,122,102,185,97,148,222,5,6,241], "i8", ALLOC_NONE, 5252556);
allocate([24,7,23,25,40,6,39,41,22,26,38,42,56,5,55,57,21,27,54,58,37,43,72,4,71,73,20,28,53,59,70,74,36,44,88,69,75,52,60,3,87,89,19,29,86,90,35,45,68,76,85,91,51,61,104,2,103,105,18,30,102,106,34,46,84,92,67,77,101,107,50,62,120,1,119,121,83,93,17,31,100,108,66,78,118,122,33,47,117,123,49,63,99,109,82,94,0,116,124,65,79,16,32,98,110,48,115,125,81,95,64,114,126,97,111,80,113,127,96,112] /* \18\07\17\19(\06')\1 */, "i8", ALLOC_NONE, 5260748);
allocate(766, "i8", ALLOC_NONE, 5260868);
allocate([0,192,48,240,12,204,60,252,3,195,51,243,15,207,63,255,128,64,176,112,140,76,188,124,131,67,179,115,143,79,191,127,32,224,16,208,44,236,28,220,35,227,19,211,47,239,31,223,160,96,144,80,172,108,156,92,163,99,147,83,175,111,159,95,8,200,56,248,4,196,52,244,11,203,59,251,7,199,55,247,136,72,184,120,132,68,180,116,139,75,187,123,135,71,183,119,40,232,24,216,36,228,20,212,43,235,27,219,39,231,23,215,168,104,152,88,164,100,148,84,171,107,155,91,167,103,151,87,2,194,50,242,14,206,62,254,1,193,49,241,13,205,61,253,130,66,178,114,142,78,190,126,129,65,177,113,141,77,189,125,34,226,18,210,46,238,30,222,33,225,17,209,45,237,29,221,162,98,146,82,174,110,158,94,161,97,145,81,173,109,157,93,10,202,58,250,6,198,54,246,9,201,57,249,5,197,53,245,138,74,186,122,134,70,182,118,137,73,185,121,133,69,181,117,42,234,26,218,38,230,22,214,41,233,25,217,37,229,21,213,170,106,154,90,166,102,150,86,169,105,153,89,165,101,149,85], "i8", ALLOC_NONE, 5261636);
allocate(511, "i8", ALLOC_NONE, 5261892);
allocate(511, "i8", ALLOC_NONE, 5262404);
allocate([73,110,118,97,108,105,100,32,115,67,65,76,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid sCAL after I */, "i8", ALLOC_NONE, 5262916);
allocate([83,109,111,111,116,104,105,110,103,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,119,105,116,104,32,110,111,110,115,116,97,110,100,97,114,100,32,115,97,109,112,108,105,110,103,32,114,97,116,105,111,115,0] /* Smoothing not suppor */, "i8", ALLOC_NONE, 5262940);
allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,115,67,65,76,0] /* Missing IHDR before  */, "i8", ALLOC_NONE, 5263000);
allocate([82,83,84,37,100,0] /* RST%d\00 */, "i8", ALLOC_NONE, 5263028);
allocate([66,97,100,32,99,111,100,101,32,119,111,114,100,0] /* Bad code word\00 */, "i8", ALLOC_NONE, 5263036);
allocate([66,111,103,117,115,32,105,110,112,117,116,32,99,111,108,111,114,115,112,97,99,101,0] /* Bogus input colorspa */, "i8", ALLOC_NONE, 5263052);
allocate([78,111,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,112,97,114,97,109,115,0] /* No memory for pCAL p */, "i8", ALLOC_NONE, 5263076);
allocate([65,116,32,109,97,114,107,101,114,32,48,120,37,48,50,120,44,32,114,101,99,111,118,101,114,121,32,97,99,116,105,111,110,32,37,100,0] /* At marker 0x%02x, re */, "i8", ALLOC_NONE, 5263104);
allocate([83,101,108,101,99,116,101,100,32,37,100,32,99,111,108,111,114,115,32,102,111,114,32,113,117,97,110,116,105,122,97,116,105,111,110,0] /* Selected %d colors f */, "i8", ALLOC_NONE, 5263144);
allocate([73,110,118,97,108,105,100,32,112,67,65,76,32,112,97,114,97,109,101,116,101,114,115,32,102,111,114,32,101,113,117,97,116,105,111,110,32,116,121,112,101,0] /* Invalid pCAL paramet */, "i8", ALLOC_NONE, 5263180);
allocate([81,117,97,110,116,105,122,105,110,103,32,116,111,32,37,100,32,99,111,108,111,114,115,0] /* Quantizing to %d col */, "i8", ALLOC_NONE, 5263224);
allocate([73,110,118,97,108,105,100,32,112,67,65,76,32,100,97,116,97,0] /* Invalid pCAL data\00 */, "i8", ALLOC_NONE, 5263248);
allocate([81,117,97,110,116,105,122,105,110,103,32,116,111,32,37,100,32,61,32,37,100,42,37,100,42,37,100,32,99,111,108,111,114,115,0] /* Quantizing to %d = % */, "i8", ALLOC_NONE, 5263268);
allocate([78,111,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,112,117,114,112,111,115,101,0] /* No memory for pCAL p */, "i8", ALLOC_NONE, 5263304);
allocate([79,117,116,32,111,102,32,112,108,97,99,101,32,73,72,68,82,0] /* Out of place IHDR\00 */, "i8", ALLOC_NONE, 5263332);
allocate([105,110,118,97,108,105,100,32,98,97,99,107,103,114,111,117,110,100,32,103,97,109,109,97,32,116,121,112,101,0] /* invalid background g */, "i8", ALLOC_NONE, 5263352);
allocate([32,32,32,32,32,32,32,32,37,52,117,32,37,52,117,32,37,52,117,32,37,52,117,32,37,52,117,32,37,52,117,32,37,52,117,32,37,52,117,0] /*         %4u %4u %4u  */, "i8", ALLOC_NONE, 5263384);
allocate([105,110,118,97,108,105,100,32,99,111,100,101,32,108,101,110,103,116,104,115,32,115,101,116,0] /* invalid code lengths */, "i8", ALLOC_NONE, 5263424);
allocate([68,117,112,108,105,99,97,116,101,32,112,67,65,76,32,99,104,117,110,107,0] /* Duplicate pCAL chunk */, "i8", ALLOC_NONE, 5263452);
allocate([73,110,118,97,108,105,100,32,99,72,82,77,32,119,104,105,116,101,32,112,111,105,110,116,0] /* Invalid cHRM white p */, "i8", ALLOC_NONE, 5263476);
allocate([85,110,101,120,112,101,99,116,101,100,32,109,97,114,107,101,114,32,48,120,37,48,50,120,0] /* Unexpected marker 0x */, "i8", ALLOC_NONE, 5263504);
allocate([73,109,97,103,101,70,111,114,109,97,116,74,80,71,58,58,108,111,97,100,40,41,58,32,99,97,110,39,116,32,108,111,97,100,32,34,37,115,34,32,102,105,108,101,10,0] /* ImageFormatJPG::load */, "i8", ALLOC_NONE, 5263532);
allocate([73,110,118,97,108,105,100,32,112,67,65,76,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid pCAL after I */, "i8", ALLOC_NONE, 5263580);
allocate([77,105,115,99,101,108,108,97,110,101,111,117,115,32,109,97,114,107,101,114,32,48,120,37,48,50,120,44,32,108,101,110,103,116,104,32,37,117,0] /* Miscellaneous marker */, "i8", ALLOC_NONE, 5263604);
allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,112,67,65,76,0] /* Missing IHDR before  */, "i8", ALLOC_NONE, 5263644);
allocate([32,32,32,32,119,105,116,104,32,37,100,32,120,32,37,100,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,0] /*     with %d x %d thu */, "i8", ALLOC_NONE, 5263672);
allocate([73,110,99,111,114,114,101,99,116,32,111,70,70,115,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Incorrect oFFs chunk */, "i8", ALLOC_NONE, 5263708);
allocate([74,70,73,70,32,101,120,116,101,110,115,105,111,110,32,109,97,114,107,101,114,58,32,116,121,112,101,32,48,120,37,48,50,120,44,32,108,101,110,103,116,104,32,37,117,0] /* JFIF extension marke */, "i8", ALLOC_NONE, 5263736);
allocate([68,117,112,108,105,99,97,116,101,32,111,70,70,115,32,99,104,117,110,107,0] /* Duplicate oFFs chunk */, "i8", ALLOC_NONE, 5263784);
allocate([87,97,114,110,105,110,103,58,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,32,115,105,122,101,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,100,97,116,97,32,108,101,110,103,116,104,32,37,117,0] /* Warning: thumbnail i */, "i8", ALLOC_NONE, 5263808);
allocate([99,97,110,110,111,116,32,112,97,114,115,101,32,112,105,99,116,117,114,101,32,104,101,97,100,101,114,0] /* cannot parse picture */, "i8", ALLOC_NONE, 5263868);
allocate([66,111,103,117,115,32,72,117,102,102,109,97,110,32,116,97,98,108,101,32,100,101,102,105,110,105,116,105,111,110,0] /* Bogus Huffman table  */, "i8", ALLOC_NONE, 5263896);
allocate([73,110,118,97,108,105,100,32,111,70,70,115,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid oFFs after I */, "i8", ALLOC_NONE, 5263928);
allocate([74,70,73,70,32,65,80,80,48,32,109,97,114,107,101,114,58,32,118,101,114,115,105,111,110,32,37,100,46,37,48,50,100,44,32,100,101,110,115,105,116,121,32,37,100,120,37,100,32,32,37,100,0] /* JFIF APP0 marker: ve */, "i8", ALLOC_NONE, 5263952);
allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,111,70,70,115,0] /* Missing IHDR before  */, "i8", ALLOC_NONE, 5264008);
allocate([32,32,32,32,32,32,32,32,37,51,100,32,37,51,100,32,37,51,100,32,37,51,100,32,37,51,100,32,37,51,100,32,37,51,100,32,37,51,100,0] /*         %3d %3d %3d  */, "i8", ALLOC_NONE, 5264036);
allocate([73,110,99,111,114,114,101,99,116,32,112,72,89,115,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Incorrect pHYs chunk */, "i8", ALLOC_NONE, 5264076);
allocate([69,110,100,32,79,102,32,73,109,97,103,101,0] /* End Of Image\00 */, "i8", ALLOC_NONE, 5264104);
allocate([68,117,112,108,105,99,97,116,101,32,112,72,89,115,32,99,104,117,110,107,0] /* Duplicate pHYs chunk */, "i8", ALLOC_NONE, 5264120);
allocate([79,98,116,97,105,110,101,100,32,69,77,83,32,104,97,110,100,108,101,32,37,117,0] /* Obtained EMS handle  */, "i8", ALLOC_NONE, 5264144);
allocate([73,110,118,97,108,105,100,32,112,72,89,115,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid pHYs after I */, "i8", ALLOC_NONE, 5264168);
allocate([85,110,107,110,111,119,110,32,122,84,88,116,32,99,111,109,112,114,101,115,115,105,111,110,32,116,121,112,101,32,37,100,0] /* Unknown zTXt compres */, "i8", ALLOC_NONE, 5264192);
allocate([70,114,101,101,100,32,69,77,83,32,104,97,110,100,108,101,32,37,117,0] /* Freed EMS handle %u\ */, "i8", ALLOC_NONE, 5264228);
allocate([116,111,111,32,109,97,110,121,32,108,101,110,103,116,104,32,111,114,32,100,105,115,116,97,110,99,101,32,115,121,109,98,111,108,115,0] /* too many length or d */, "i8", ALLOC_NONE, 5264248);
allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,112,72,89,115,0] /* Missing IHDR before  */, "i8", ALLOC_NONE, 5264284);
allocate([70,114,97,109,101,32,115,101,116,117,112,32,102,97,105,108,101,100,0] /* Frame setup failed\0 */, "i8", ALLOC_NONE, 5264312);
allocate([68,101,102,105,110,101,32,82,101,115,116,97,114,116,32,73,110,116,101,114,118,97,108,32,37,117,0] /* Define Restart Inter */, "i8", ALLOC_NONE, 5264332);
allocate([73,109,97,103,101,70,111,114,109,97,116,74,80,71,58,58,108,111,97,100,40,41,58,32,99,97,110,39,116,32,111,112,101,110,32,102,105,108,101,32,39,37,115,39,10,0] /* ImageFormatJPG::load */, "i8", ALLOC_NONE, 5264360);
allocate([73,110,99,111,114,114,101,99,116,32,104,73,83,84,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Incorrect hIST chunk */, "i8", ALLOC_NONE, 5264408);
allocate([68,101,102,105,110,101,32,81,117,97,110,116,105,122,97,116,105,111,110,32,84,97,98,108,101,32,37,100,32,32,112,114,101,99,105,115,105,111,110,32,37,100,0] /* Define Quantization  */, "i8", ALLOC_NONE, 5264436);
allocate([68,117,112,108,105,99,97,116,101,32,104,73,83,84,32,99,104,117,110,107,0] /* Duplicate hIST chunk */, "i8", ALLOC_NONE, 5264480);
allocate([68,101,102,105,110,101,32,72,117,102,102,109,97,110,32,84,97,98,108,101,32,48,120,37,48,50,120,0] /* Define Huffman Table */, "i8", ALLOC_NONE, 5264504);
allocate([77,105,115,115,105,110,103,32,80,76,84,69,32,98,101,102,111,114,101,32,104,73,83,84,0] /* Missing PLTE before  */, "i8", ALLOC_NONE, 5264532);
allocate([68,101,102,105,110,101,32,65,114,105,116,104,109,101,116,105,99,32,84,97,98,108,101,32,48,120,37,48,50,120,58,32,48,120,37,48,50,120,0] /* Define Arithmetic Ta */, "i8", ALLOC_NONE, 5264560);
allocate([85,110,107,110,111,119,110,32,65,80,80,49,52,32,109,97,114,107,101,114,32,40,110,111,116,32,65,100,111,98,101,41,44,32,108,101,110,103,116,104,32,37,117,0] /* Unknown APP14 marker */, "i8", ALLOC_NONE, 5264600);
allocate([73,110,118,97,108,105,100,32,104,73,83,84,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid hIST after I */, "i8", ALLOC_NONE, 5264644);
allocate([70,114,97,109,101,32,110,111,116,32,100,105,115,112,108,97,121,97,98,108,101,46,0] /* Frame not displayabl */, "i8", ALLOC_NONE, 5264668);
allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,104,73,83,84,0] /* Missing IHDR before  */, "i8", ALLOC_NONE, 5264692);
allocate([73,68,67,84,32,111,117,116,112,117,116,32,98,108,111,99,107,32,115,105,122,101,32,37,100,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0] /* IDCT output block si */, "i8", ALLOC_NONE, 5264720);
allocate([85,110,107,110,111,119,110,32,65,80,80,48,32,109,97,114,107,101,114,32,40,110,111,116,32,74,70,73,70,41,44,32,108,101,110,103,116,104,32,37,117,0] /* Unknown APP0 marker  */, "i8", ALLOC_NONE, 5264760);
allocate([73,110,99,111,114,114,101,99,116,32,98,75,71,68,32,99,104,117,110,107,32,105,110,100,101,120,32,118,97,108,117,101,0] /* Incorrect bKGD chunk */, "i8", ALLOC_NONE, 5264804);
allocate([65,100,111,98,101,32,65,80,80,49,52,32,109,97,114,107,101,114,58,32,118,101,114,115,105,111,110,32,37,100,44,32,102,108,97,103,115,32,48,120,37,48,52,120,32,48,120,37,48,52,120,44,32,116,114,97,110,115,102,111,114,109,32,37,100,0] /* Adobe APP14 marker:  */, "i8", ALLOC_NONE, 5264840);
allocate([73,110,99,111,114,114,101,99,116,32,98,75,71,68,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Incorrect bKGD chunk */, "i8", ALLOC_NONE, 5264908);
allocate([67,97,117,116,105,111,110,58,32,113,117,97,110,116,105,122,97,116,105,111,110,32,116,97,98,108,101,115,32,97,114,101,32,116,111,111,32,99,111,97,114,115,101,32,102,111,114,32,98,97,115,101,108,105,110,101,32,74,80,69,71,0] /* Caution: quantizatio */, "i8", ALLOC_NONE, 5264936);
allocate([65,76,80,72,0] /* ALPH\00 */, "i8", ALLOC_NONE, 5265000);
allocate([68,117,112,108,105,99,97,116,101,32,98,75,71,68,32,99,104,117,110,107,0] /* Duplicate bKGD chunk */, "i8", ALLOC_NONE, 5265008);
allocate([54,98,32,32,50,55,45,77,97,114,45,49,57,57,56,0] /* 6b  27-Mar-1998\00 */, "i8", ALLOC_NONE, 5265032);
allocate([77,105,115,115,105,110,103,32,80,76,84,69,32,98,101,102,111,114,101,32,98,75,71,68,0] /* Missing PLTE before  */, "i8", ALLOC_NONE, 5265048);
allocate([78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,100,101,99,111,109,112,114,101,115,115,32,99,104,117,110,107,0] /* Not enough memory to */, "i8", ALLOC_NONE, 5265076);
allocate([67,111,112,121,114,105,103,104,116,32,40,67,41,32,49,57,57,56,44,32,84,104,111,109,97,115,32,71,46,32,76,97,110,101,0] /* Copyright (C) 1998,  */, "i8", ALLOC_NONE, 5265116);
allocate([77,105,115,115,105,110,103,32,80,76,84,69,32,98,101,102,111,114,101,32,73,68,65,84,0] /* Missing PLTE before  */, "i8", ALLOC_NONE, 5265152);
allocate([73,110,118,97,108,105,100,32,98,75,71,68,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid bKGD after I */, "i8", ALLOC_NONE, 5265180);
allocate([105,110,118,97,108,105,100,32,115,116,111,114,101,100,32,98,108,111,99,107,32,108,101,110,103,116,104,115,0] /* invalid stored block */, "i8", ALLOC_NONE, 5265204);
allocate([73,103,110,111,114,105,110,103,32,97,116,116,101,109,112,116,32,116,111,32,115,101,116,32,110,101,103,97,116,105,118,101,32,99,104,114,111,109,97,116,105,99,105,116,121,32,118,97,108,117,101,0] /* Ignoring attempt to  */, "i8", ALLOC_NONE, 5265236);
allocate([87,114,105,116,101,32,116,111,32,88,77,83,32,102,97,105,108,101,100,0] /* Write to XMS failed\ */, "i8", ALLOC_NONE, 5265288);
allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,98,75,71,68,0] /* Missing IHDR before  */, "i8", ALLOC_NONE, 5265308);
allocate([82,101,97,100,32,102,114,111,109,32,88,77,83,32,102,97,105,108,101,100,0] /* Read from XMS failed */, "i8", ALLOC_NONE, 5265336);
allocate([116,82,78,83,32,99,104,117,110,107,32,110,111,116,32,97,108,108,111,119,101,100,32,119,105,116,104,32,97,108,112,104,97,32,99,104,97,110,110,101,108,0] /* tRNS chunk not allow */, "i8", ALLOC_NONE, 5265360);
allocate([73,109,97,103,101,32,116,111,111,32,119,105,100,101,32,102,111,114,32,116,104,105,115,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,0] /* Image too wide for t */, "i8", ALLOC_NONE, 5265404);
allocate([90,101,114,111,32,108,101,110,103,116,104,32,116,82,78,83,32,99,104,117,110,107,0] /* Zero length tRNS chu */, "i8", ALLOC_NONE, 5265444);
allocate([86,105,114,116,117,97,108,32,97,114,114,97,121,32,99,111,110,116,114,111,108,108,101,114,32,109,101,115,115,101,100,32,117,112,0] /* Virtual array contro */, "i8", ALLOC_NONE, 5265468);
allocate([77,105,115,115,105,110,103,32,80,76,84,69,32,98,101,102,111,114,101,32,116,82,78,83,0] /* Missing PLTE before  */, "i8", ALLOC_NONE, 5265504);
allocate([85,110,115,117,112,112,111,114,116,101,100,32,109,97,114,107,101,114,32,116,121,112,101,32,48,120,37,48,50,120,0] /* Unsupported marker t */, "i8", ALLOC_NONE, 5265532);
allocate([65,112,112,108,105,99,97,116,105,111,110,32,116,114,97,110,115,102,101,114,114,101,100,32,116,111,111,32,102,101,119,32,115,99,97,110,108,105,110,101,115,0] /* Application transfer */, "i8", ALLOC_NONE, 5265564);
allocate([73,110,99,111,114,114,101,99,116,32,107,101,121,102,114,97,109,101,32,112,97,114,97,109,101,116,101,114,115,46,0] /* Incorrect keyframe p */, "i8", ALLOC_NONE, 5265608);
allocate([73,110,99,111,114,114,101,99,116,32,116,82,78,83,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Incorrect tRNS chunk */, "i8", ALLOC_NONE, 5265640);
allocate([68,67,84,32,99,111,101,102,102,105,99,105,101,110,116,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* DCT coefficient out  */, "i8", ALLOC_NONE, 5265668);
allocate([66,111,103,117,115,32,109,101,115,115,97,103,101,32,99,111,100,101,32,37,100,0] /* Bogus message code % */, "i8", ALLOC_NONE, 5265700);
allocate([68,117,112,108,105,99,97,116,101,32,116,82,78,83,32,99,104,117,110,107,0] /* Duplicate tRNS chunk */, "i8", ALLOC_NONE, 5265724);
allocate([87,114,105,116,101,32,102,97,105,108,101,100,32,111,110,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,32,45,45,45,32,111,117,116,32,111,102,32,100,105,115,107,32,115,112,97,99,101,63,0] /* Write failed on temp */, "i8", ALLOC_NONE, 5265748);
allocate([73,110,118,97,108,105,100,32,116,82,78,83,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid tRNS after I */, "i8", ALLOC_NONE, 5265804);
allocate([83,101,101,107,32,102,97,105,108,101,100,32,111,110,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,0] /* Seek failed on tempo */, "i8", ALLOC_NONE, 5265828);
allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,116,82,78,83,0] /* Missing IHDR before  */, "i8", ALLOC_NONE, 5265860);
allocate([82,101,97,100,32,102,97,105,108,101,100,32,111,110,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,0] /* Read failed on tempo */, "i8", ALLOC_NONE, 5265888);
allocate([115,80,76,84,32,99,104,117,110,107,32,114,101,113,117,105,114,101,115,32,116,111,111,32,109,117,99,104,32,109,101,109,111,114,121,0] /* sPLT chunk requires  */, "i8", ALLOC_NONE, 5265920);
allocate([112,110,103,95,105,110,102,108,97,116,101,32,108,111,103,105,99,32,101,114,114,111,114,0] /* png_inflate logic er */, "i8", ALLOC_NONE, 5265956);
allocate([70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,32,37,115,0] /* Failed to create tem */, "i8", ALLOC_NONE, 5265980);
allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,73,68,65,84,0] /* Missing IHDR before  */, "i8", ALLOC_NONE, 5266016);
allocate([115,80,76,84,32,99,104,117,110,107,32,116,111,111,32,108,111,110,103,0] /* sPLT chunk too long\ */, "i8", ALLOC_NONE, 5266044);
allocate([105,110,118,97,108,105,100,32,98,108,111,99,107,32,116,121,112,101,0] /* invalid block type\0 */, "i8", ALLOC_NONE, 5266064);
allocate([77,78,71,32,102,101,97,116,117,114,101,115,32,97,114,101,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,97,32,80,78,71,32,100,97,116,97,115,116,114,101,97,109,0] /* MNG features are not */, "i8", ALLOC_NONE, 5266084);
allocate([73,110,118,97,108,105,100,32,74,80,69,71,32,102,105,108,101,32,115,116,114,117,99,116,117,114,101,58,32,83,79,83,32,98,101,102,111,114,101,32,83,79,70,0] /* Invalid JPEG file st */, "i8", ALLOC_NONE, 5266136);
allocate([73,109,97,103,101,70,111,114,109,97,116,74,80,71,58,58,111,117,116,112,117,116,95,109,101,115,115,97,103,101,40,41,58,32,37,115,10,0] /* ImageFormatJPG::outp */, "i8", ALLOC_NONE, 5266180);
allocate([115,80,76,84,32,99,104,117,110,107,32,104,97,115,32,98,97,100,32,108,101,110,103,116,104,0] /* sPLT chunk has bad l */, "i8", ALLOC_NONE, 5266220);
allocate([73,110,118,97,108,105,100,32,74,80,69,71,32,102,105,108,101,32,115,116,114,117,99,116,117,114,101,58,32,116,119,111,32,83,79,73,32,109,97,114,107,101,114,115,0] /* Invalid JPEG file st */, "i8", ALLOC_NONE, 5266248);
allocate([109,97,108,102,111,114,109,101,100,32,115,80,76,84,32,99,104,117,110,107,0] /* malformed sPLT chunk */, "i8", ALLOC_NONE, 5266296);
allocate([85,110,115,117,112,112,111,114,116,101,100,32,74,80,69,71,32,112,114,111,99,101,115,115,58,32,83,79,70,32,116,121,112,101,32,48,120,37,48,50,120,0] /* Unsupported JPEG pro */, "i8", ALLOC_NONE, 5266320);
allocate([73,110,118,97,108,105,100,32,115,80,76,84,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid sPLT after I */, "i8", ALLOC_NONE, 5266364);
allocate([73,110,118,97,108,105,100,32,74,80,69,71,32,102,105,108,101,32,115,116,114,117,99,116,117,114,101,58,32,109,105,115,115,105,110,103,32,83,79,83,32,109,97,114,107,101,114,0] /* Invalid JPEG file st */, "i8", ALLOC_NONE, 5266388);
allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,115,80,76,84,0] /* Missing IHDR before  */, "i8", ALLOC_NONE, 5266436);
allocate([73,110,118,97,108,105,100,32,74,80,69,71,32,102,105,108,101,32,115,116,114,117,99,116,117,114,101,58,32,116,119,111,32,83,79,70,32,109,97,114,107,101,114,115,0] /* Invalid JPEG file st */, "i8", ALLOC_NONE, 5266464);
allocate([84,114,117,110,99,97,116,101,100,32,104,101,97,100,101,114,46,0] /* Truncated header.\00 */, "i8", ALLOC_NONE, 5266512);
allocate([87,69,66,80,0] /* WEBP\00 */, "i8", ALLOC_NONE, 5266532);
allocate([78,111,32,115,112,97,99,101,32,105,110,32,99,104,117,110,107,32,99,97,99,104,101,32,102,111,114,32,115,80,76,84,0] /* No space in chunk ca */, "i8", ALLOC_NONE, 5266540);
allocate([73,110,118,97,108,105,100,32,99,111,109,112,111,110,101,110,116,32,73,68,32,37,100,32,105,110,32,83,79,83,0] /* Invalid component ID */, "i8", ALLOC_NONE, 5266576);
allocate([67,97,110,110,111,116,32,113,117,97,110,116,105,122,101,32,116,111,32,109,111,114,101,32,116,104,97,110,32,37,100,32,99,111,108,111,114,115,0] /* Cannot quantize to m */, "i8", ALLOC_NONE, 5266608);
allocate([73,103,110,111,114,105,110,103,32,105,67,67,80,32,99,104,117,110,107,32,119,105,116,104,32,100,101,99,108,97,114,101,100,32,115,105,122,101,32,61,32,37,117,32,97,110,100,32,97,99,116,117,97,108,32,108,101,110,103,116,104,32,61,32,37,117,0] /* Ignoring iCCP chunk  */, "i8", ALLOC_NONE, 5266648);
allocate([67,97,110,110,111,116,32,113,117,97,110,116,105,122,101,32,116,111,32,102,101,119,101,114,32,116,104,97,110,32,37,100,32,99,111,108,111,114,115,0] /* Cannot quantize to f */, "i8", ALLOC_NONE, 5266716);
allocate([80,114,111,102,105,108,101,32,115,105,122,101,32,102,105,101,108,100,32,109,105,115,115,105,110,103,32,102,114,111,109,32,105,67,67,80,32,99,104,117,110,107,0] /* Profile size field m */, "i8", ALLOC_NONE, 5266756);
allocate([67,97,110,110,111,116,32,113,117,97,110,116,105,122,101,32,109,111,114,101,32,116,104,97,110,32,37,100,32,99,111,108,111,114,32,99,111,109,112,111,110,101,110,116,115,0] /* Cannot quantize more */, "i8", ALLOC_NONE, 5266800);
allocate([73,103,110,111,114,105,110,103,32,110,111,110,122,101,114,111,32,99,111,109,112,114,101,115,115,105,111,110,32,116,121,112,101,32,105,110,32,105,67,67,80,32,99,104,117,110,107,0] /* Ignoring nonzero com */, "i8", ALLOC_NONE, 5266848);
allocate([73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,40,99,97,115,101,32,37,100,41,0] /* Insufficient memory  */, "i8", ALLOC_NONE, 5266896);
allocate([77,97,108,102,111,114,109,101,100,32,105,67,67,80,32,99,104,117,110,107,0] /* Malformed iCCP chunk */, "i8", ALLOC_NONE, 5266928);
allocate([69,120,99,101,101,100,101,100,32,115,105,122,101,32,108,105,109,105,116,32,119,104,105,108,101,32,101,120,112,97,110,100,105,110,103,32,99,104,117,110,107,0] /* Exceeded size limit  */, "i8", ALLOC_NONE, 5266952);
allocate([78,111,116,32,97,32,74,80,69,71,32,102,105,108,101,58,32,115,116,97,114,116,115,32,119,105,116,104,32,48,120,37,48,50,120,32,48,120,37,48,50,120,0] /* Not a JPEG file: sta */, "i8", ALLOC_NONE, 5266996);
allocate([68,117,112,108,105,99,97,116,101,32,105,67,67,80,32,99,104,117,110,107,0] /* Duplicate iCCP chunk */, "i8", ALLOC_NONE, 5267040);
allocate([104,101,97,100,101,114,32,99,114,99,32,109,105,115,109,97,116,99,104,0] /* header crc mismatch\ */, "i8", ALLOC_NONE, 5267064);
allocate([81,117,97,110,116,105,122,97,116,105,111,110,32,116,97,98,108,101,32,48,120,37,48,50,120,32,119,97,115,32,110,111,116,32,100,101,102,105,110,101,100,0] /* Quantization table 0 */, "i8", ALLOC_NONE, 5267084);
allocate([74,80,69,71,32,100,97,116,97,115,116,114,101,97,109,32,99,111,110,116,97,105,110,115,32,110,111,32,105,109,97,103,101,0] /* JPEG datastream cont */, "i8", ALLOC_NONE, 5267128);
allocate([119,98,0] /* wb\00 */, "i8", ALLOC_NONE, 5267164);
allocate([79,117,116,32,111,102,32,112,108,97,99,101,32,105,67,67,80,32,99,104,117,110,107,0] /* Out of place iCCP ch */, "i8", ALLOC_NONE, 5267168);
allocate([72,117,102,102,109,97,110,32,116,97,98,108,101,32,48,120,37,48,50,120,32,119,97,115,32,110,111,116,32,100,101,102,105,110,101,100,0] /* Huffman table 0x%02x */, "i8", ALLOC_NONE, 5267192);
allocate([73,110,118,97,108,105,100,32,105,67,67,80,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid iCCP after I */, "i8", ALLOC_NONE, 5267232);
allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,105,67,67,80,0] /* Missing IHDR before  */, "i8", ALLOC_NONE, 5267256);
allocate([66,97,99,107,105,110,103,32,115,116,111,114,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0] /* Backing store not su */, "i8", ALLOC_NONE, 5267284);
allocate([105,110,99,111,114,114,101,99,116,32,103,97,109,109,97,61,40,37,100,47,49,48,48,48,48,48,41,10,0] /* incorrect gamma=(%d/ */, "i8", ALLOC_NONE, 5267312);
allocate([82,101,113,117,101,115,116,101,100,32,102,101,97,116,117,114,101,32,119,97,115,32,111,109,105,116,116,101,100,32,97,116,32,99,111,109,112,105,108,101,32,116,105,109,101,0] /* Requested feature wa */, "i8", ALLOC_NONE, 5267344);
allocate([85,110,101,120,112,101,99,116,101,100,32,108,111,115,115,108,101,115,115,32,102,111,114,109,97,116,32,101,110,99,111,117,110,116,101,114,101,100,46,0] /* Unexpected lossless  */, "i8", ALLOC_NONE, 5267392);
allocate([82,73,70,70,0] /* RIFF\00 */, "i8", ALLOC_NONE, 5267432);
allocate([85,110,107,110,111,119,110,32,115,82,71,66,32,105,110,116,101,110,116,0] /* Unknown sRGB intent\ */, "i8", ALLOC_NONE, 5267440);
allocate([66,111,103,117,115,32,98,117,102,102,101,114,32,99,111,110,116,114,111,108,32,109,111,100,101,0] /* Bogus buffer control */, "i8", ALLOC_NONE, 5267460);
allocate([78,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,121,101,116,0] /* Not implemented yet\ */, "i8", ALLOC_NONE, 5267488);
allocate([73,110,99,111,114,114,101,99,116,32,115,82,71,66,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Incorrect sRGB chunk */, "i8", ALLOC_NONE, 5267508);
allocate([73,110,118,97,108,105,100,32,99,111,108,111,114,32,113,117,97,110,116,105,122,97,116,105,111,110,32,109,111,100,101,32,99,104,97,110,103,101,0] /* Invalid color quanti */, "i8", ALLOC_NONE, 5267536);
allocate([68,117,112,108,105,99,97,116,101,32,115,82,71,66,32,99,104,117,110,107,0] /* Duplicate sRGB chunk */, "i8", ALLOC_NONE, 5267576);
allocate([83,99,97,110,32,115,99,114,105,112,116,32,100,111,101,115,32,110,111,116,32,116,114,97,110,115,109,105,116,32,97,108,108,32,100,97,116,97,0] /* Scan script does not */, "i8", ALLOC_NONE, 5267600);
allocate([79,117,116,32,111,102,32,112,108,97,99,101,32,115,82,71,66,32,99,104,117,110,107,0] /* Out of place sRGB ch */, "i8", ALLOC_NONE, 5267640);
allocate([67,97,110,110,111,116,32,116,114,97,110,115,99,111,100,101,32,100,117,101,32,116,111,32,109,117,108,116,105,112,108,101,32,117,115,101,32,111,102,32,113,117,97,110,116,105,122,97,116,105,111,110,32,116,97,98,108,101,32,37,100,0] /* Cannot transcode due */, "i8", ALLOC_NONE, 5267664);
allocate([73,110,118,97,108,105,100,32,115,82,71,66,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid sRGB after I */, "i8", ALLOC_NONE, 5267728);
allocate([105,110,118,97,108,105,100,32,99,104,117,110,107,108,101,110,103,116,104,0] /* invalid chunklength\ */, "i8", ALLOC_NONE, 5267752);
allocate([80,114,101,109,97,116,117,114,101,32,101,110,100,32,111,102,32,105,110,112,117,116,32,102,105,108,101,0] /* Premature end of inp */, "i8", ALLOC_NONE, 5267772);
allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,115,82,71,66,0] /* Missing IHDR before  */, "i8", ALLOC_NONE, 5267800);
allocate([117,110,107,110,111,119,110,32,104,101,97,100,101,114,32,102,108,97,103,115,32,115,101,116,0] /* unknown header flags */, "i8", ALLOC_NONE, 5267828);
allocate([69,109,112,116,121,32,105,110,112,117,116,32,102,105,108,101,0] /* Empty input file\00 */, "i8", ALLOC_NONE, 5267856);
allocate([85,110,114,101,99,111,103,110,105,122,101,100,32,101,113,117,97,116,105,111,110,32,116,121,112,101,32,102,111,114,32,112,67,65,76,32,99,104,117,110,107,0] /* Unrecognized equatio */, "i8", ALLOC_NONE, 5267876);
allocate([105,109,97,103,101,46,114,97,119,0] /* image.raw\00 */, "i8", ALLOC_NONE, 5267920);
allocate([103,120,61,37,100,44,32,103,121,61,37,100,44,32,98,120,61,37,100,44,32,98,121,61,37,100,10,0] /* gx=%d, gy=%d, bx=%d, */, "i8", ALLOC_NONE, 5267932);
allocate([77,97,120,105,109,117,109,32,115,117,112,112,111,114,116,101,100,32,105,109,97,103,101,32,100,105,109,101,110,115,105,111,110,32,105,115,32,37,117,32,112,105,120,101,108,115,0] /* Maximum supported im */, "i8", ALLOC_NONE, 5267960);
allocate([119,120,61,37,100,44,32,119,121,61,37,100,44,32,114,120,61,37,100,44,32,114,121,61,37,100,10,0] /* wx=%d, wy=%d, rx=%d, */, "i8", ALLOC_NONE, 5268008);
allocate([77,105,115,115,105,110,103,32,72,117,102,102,109,97,110,32,99,111,100,101,32,116,97,98,108,101,32,101,110,116,114,121,0] /* Missing Huffman code */, "i8", ALLOC_NONE, 5268036);
allocate([73,103,110,111,114,105,110,103,32,105,110,99,111,114,114,101,99,116,32,99,72,82,77,32,118,97,108,117,101,32,119,104,101,110,32,115,82,71,66,32,105,115,32,97,108,115,111,32,112,114,101,115,101,110,116,0] /* Ignoring incorrect c */, "i8", ALLOC_NONE, 5268072);
allocate([72,117,102,102,109,97,110,32,99,111,100,101,32,115,105,122,101,32,116,97,98,108,101,32,111,118,101,114,102,108,111,119,0] /* Huffman code size ta */, "i8", ALLOC_NONE, 5268128);
allocate([73,103,110,111,114,105,110,103,32,99,72,82,77,32,99,104,117,110,107,32,119,105,116,104,32,110,101,103,97,116,105,118,101,32,99,104,114,111,109,97,116,105,99,105,116,105,101,115,0] /* Ignoring cHRM chunk  */, "i8", ALLOC_NONE, 5268164);
allocate([67,111,117,108,100,32,110,111,116,32,100,101,99,111,100,101,32,97,108,112,104,97,32,100,97,116,97,46,0] /* Could not decode alp */, "i8", ALLOC_NONE, 5268216);
allocate([70,114,97,99,116,105,111,110,97,108,32,115,97,109,112,108,105,110,103,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,121,101,116,0] /* Fractional sampling  */, "i8", ALLOC_NONE, 5268248);
allocate([73,110,99,111,114,114,101,99,116,47,105,110,99,111,109,112,108,101,116,101,32,104,101,97,100,101,114,46,0] /* Incorrect/incomplete */, "i8", ALLOC_NONE, 5268288);
allocate([86,80,56,88,0] /* VP8X\00 */, "i8", ALLOC_NONE, 5268320);
allocate([73,110,99,111,114,114,101,99,116,32,99,72,82,77,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Incorrect cHRM chunk */, "i8", ALLOC_NONE, 5268328);
allocate([77,65,88,95,65,76,76,79,67,95,67,72,85,78,75,32,105,115,32,119,114,111,110,103,44,32,112,108,101,97,115,101,32,102,105,120,0] /* MAX_ALLOC_CHUNK is w */, "i8", ALLOC_NONE, 5268356);
allocate([79,117,116,112,117,116,32,102,105,108,101,32,119,114,105,116,101,32,101,114,114,111,114,32,45,45,45,32,111,117,116,32,111,102,32,100,105,115,107,32,115,112,97,99,101,63,0] /* Output file write er */, "i8", ALLOC_NONE, 5268396);
allocate([68,117,112,108,105,99,97,116,101,32,99,72,82,77,32,99,104,117,110,107,0] /* Duplicate cHRM chunk */, "i8", ALLOC_NONE, 5268444);
allocate([73,110,112,117,116,32,102,105,108,101,32,114,101,97,100,32,101,114,114,111,114,0] /* Input file read erro */, "i8", ALLOC_NONE, 5268468);
allocate([77,105,115,115,105,110,103,32,80,76,84,69,32,98,101,102,111,114,101,32,99,72,82,77,0] /* Missing PLTE before  */, "i8", ALLOC_NONE, 5268492);
allocate([68,105,100,110,39,116,32,101,120,112,101,99,116,32,109,111,114,101,32,116,104,97,110,32,111,110,101,32,115,99,97,110,0] /* Didn't expect more t */, "i8", ALLOC_NONE, 5268520);
allocate([73,110,118,97,108,105,100,32,99,72,82,77,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid cHRM after I */, "i8", ALLOC_NONE, 5268556);
allocate([87,114,105,116,101,32,116,111,32,69,77,83,32,102,97,105,108,101,100,0] /* Write to EMS failed\ */, "i8", ALLOC_NONE, 5268580);
allocate([79,117,116,32,111,102,32,109,101,109,111,114,121,32,119,104,105,108,101,32,112,114,111,99,101,115,115,105,110,103,32,117,110,107,110,111,119,110,32,99,104,117,110,107,0] /* Out of memory while  */, "i8", ALLOC_NONE, 5268600);
allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,99,72,82,77,0] /* Missing IHDR before  */, "i8", ALLOC_NONE, 5268648);
allocate([67,82,67,32,101,114,114,111,114,0] /* CRC error\00 */, "i8", ALLOC_NONE, 5268676);
allocate([80,78,71,32,117,110,115,105,103,110,101,100,32,105,110,116,101,103,101,114,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* PNG unsigned integer */, "i8", ALLOC_NONE, 5268688);
allocate([82,101,97,100,32,102,114,111,109,32,69,77,83,32,102,97,105,108,101,100,0] /* Read from EMS failed */, "i8", ALLOC_NONE, 5268724);
allocate([122,108,105,98,32,115,116,114,101,97,109,32,101,114,114,111,114,0] /* zlib stream error\00 */, "i8", ALLOC_NONE, 5268748);
allocate([79,117,116,32,111,102,32,109,101,109,111,114,121,32,119,104,105,108,101,32,112,114,111,99,101,115,115,105,110,103,32,115,80,76,84,32,99,104,117,110,107,0] /* Out of memory while  */, "i8", ALLOC_NONE, 5268768);
allocate([73,110,99,111,114,114,101,99,116,32,115,66,73,84,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Incorrect sBIT chunk */, "i8", ALLOC_NONE, 5268812);
allocate([108,105,98,112,110,103,32,101,114,114,111,114,58,32,37,115,0] /* libpng error: %s\00 */, "i8", ALLOC_NONE, 5268840);
allocate([105,110,118,97,108,105,100,32,119,105,110,100,111,119,32,115,105,122,101,0] /* invalid window size\ */, "i8", ALLOC_NONE, 5268860);
allocate([69,109,112,116,121,32,74,80,69,71,32,105,109,97,103,101,32,40,68,78,76,32,110,111,116,32,115,117,112,112,111,114,116,101,100,41,0] /* Empty JPEG image (DN */, "i8", ALLOC_NONE, 5268880);
allocate([115,116,100,58,58,98,97,100,95,97,108,108,111,99,0] /* std::bad_alloc\00 */, "i8", ALLOC_NONE, 5268920);
allocate([78,111,32,109,101,109,111,114,121,32,102,111,114,32,115,80,76,84,32,112,97,108,101,116,116,101,115,0] /* No memory for sPLT p */, "i8", ALLOC_NONE, 5268936);
allocate([68,117,112,108,105,99,97,116,101,32,115,66,73,84,32,99,104,117,110,107,0] /* Duplicate sBIT chunk */, "i8", ALLOC_NONE, 5268964);
allocate([66,111,103,117,115,32,68,81,84,32,105,110,100,101,120,32,37,100,0] /* Bogus DQT index %d\0 */, "i8", ALLOC_NONE, 5268988);
allocate([116,82,78,83,32,99,104,117,110,107,32,104,97,115,32,111,117,116,45,111,102,45,114,97,110,103,101,32,115,97,109,112,108,101,115,32,102,111,114,32,98,105,116,95,100,101,112,116,104,0] /* tRNS chunk has out-o */, "i8", ALLOC_NONE, 5269008);
allocate([79,117,116,32,111,102,32,112,108,97,99,101,32,115,66,73,84,32,99,104,117,110,107,0] /* Out of place sBIT ch */, "i8", ALLOC_NONE, 5269060);
allocate([67,97,108,108,32,116,111,32,78,85,76,76,32,114,101,97,100,32,102,117,110,99,116,105,111,110,0] /* Call to NULL read fu */, "i8", ALLOC_NONE, 5269084);
allocate([66,111,103,117,115,32,68,72,84,32,105,110,100,101,120,32,37,100,0] /* Bogus DHT index %d\0 */, "i8", ALLOC_NONE, 5269112);
allocate([116,101,120,116,32,99,111,109,112,114,101,115,115,105,111,110,32,109,111,100,101,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* text compression mod */, "i8", ALLOC_NONE, 5269132);
allocate([73,110,118,97,108,105,100,32,115,66,73,84,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid sBIT after I */, "i8", ALLOC_NONE, 5269172);
allocate([73,110,118,97,108,105,100,32,73,72,68,82,32,100,97,116,97,0] /* Invalid IHDR data\00 */, "i8", ALLOC_NONE, 5269196);
allocate([66,111,103,117,115,32,68,65,67,32,118,97,108,117,101,32,48,120,37,120,0] /* Bogus DAC value 0x%x */, "i8", ALLOC_NONE, 5269216);
allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,115,66,73,84,0] /* Missing IHDR before  */, "i8", ALLOC_NONE, 5269240);
allocate([73,110,118,97,108,105,100,32,102,105,108,116,101,114,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0] /* Invalid filter metho */, "i8", ALLOC_NONE, 5269268);
allocate([66,111,103,117,115,32,68,65,67,32,105,110,100,101,120,32,37,100,0] /* Bogus DAC index %d\0 */, "i8", ALLOC_NONE, 5269300);
allocate([110,117,108,108,32,86,80,56,73,111,32,112,97,115,115,101,100,32,116,111,32,86,80,56,71,101,116,72,101,97,100,101,114,115,40,41,0] /* null VP8Io passed to */, "i8", ALLOC_NONE, 5269320);
allocate([73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,105,67,67,80,32,112,114,111,102,105,108,101,0] /* Insufficient memory  */, "i8", ALLOC_NONE, 5269360);
allocate([86,80,56,76,0] /* VP8L\00 */, "i8", ALLOC_NONE, 5269404);
allocate([103,97,109,109,97,32,61,32,40,37,100,47,49,48,48,48,48,48,41,0] /* gamma = (%d/100000)\ */, "i8", ALLOC_NONE, 5269412);
allocate([85,110,107,110,111,119,110,32,102,105,108,116,101,114,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0] /* Unknown filter metho */, "i8", ALLOC_NONE, 5269432);
allocate([85,110,115,117,112,112,111,114,116,101,100,32,99,111,108,111,114,32,99,111,110,118,101,114,115,105,111,110,32,114,101,113,117,101,115,116,0] /* Unsupported color co */, "i8", ALLOC_NONE, 5269464);
allocate([65,76,73,71,78,95,84,89,80,69,32,105,115,32,119,114,111,110,103,44,32,112,108,101,97,115,101,32,102,105,120,0] /* ALIGN_TYPE is wrong, */, "i8", ALLOC_NONE, 5269504);
allocate([73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,105,67,67,80,32,99,104,117,110,107,0] /* Insufficient memory  */, "i8", ALLOC_NONE, 5269536);
allocate([73,103,110,111,114,105,110,103,32,105,110,99,111,114,114,101,99,116,32,103,65,77,65,32,118,97,108,117,101,32,119,104,101,110,32,115,82,71,66,32,105,115,32,97,108,115,111,32,112,114,101,115,101,110,116,0] /* Ignoring incorrect g */, "i8", ALLOC_NONE, 5269580);
allocate([67,97,110,39,116,32,115,101,116,32,98,111,116,104,32,114,101,97,100,95,100,97,116,97,95,102,110,32,97,110,100,32,119,114,105,116,101,95,100,97,116,97,95,102,110,32,105,110,32,116,104,101,32,115,97,109,101,32,115,116,114,117,99,116,117,114,101,0] /* Can't set both read_ */, "i8", ALLOC_NONE, 5269636);
allocate([73,109,97,103,101,70,111,114,109,97,116,58,58,108,111,97,100,40,41,58,32,117,110,107,110,111,119,110,32,102,111,114,109,97,116,32,111,102,32,34,37,115,34,32,102,105,108,101,10,0] /* ImageFormat::load(): */, "i8", ALLOC_NONE, 5269704);
allocate([84,111,111,32,109,97,110,121,32,99,111,108,111,114,32,99,111,109,112,111,110,101,110,116,115,58,32,37,100,44,32,109,97,120,32,37,100,0] /* Too many color compo */, "i8", ALLOC_NONE, 5269756);
allocate([73,110,118,97,108,105,100,32,112,97,108,101,116,116,101,32,108,101,110,103,116,104,0] /* Invalid palette leng */, "i8", ALLOC_NONE, 5269796);
allocate([73,103,110,111,114,105,110,103,32,103,65,77,65,32,99,104,117,110,107,32,119,105,116,104,32,111,117,116,32,111,102,32,114,97,110,103,101,32,103,97,109,109,97,0] /* Ignoring gAMA chunk  */, "i8", ALLOC_NONE, 5269820);
allocate([85,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0] /* Unknown compression  */, "i8", ALLOC_NONE, 5269864);
allocate([46,84,71,65,194,168,0] /* .TGA\C2\A8\00 */, "i8", ALLOC_NONE, 5269900);
allocate([67,67,73,82,54,48,49,32,115,97,109,112,108,105,110,103,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,121,101,116,0] /* CCIR601 sampling not */, "i8", ALLOC_NONE, 5269908);
allocate([46,116,103,97,0] /* .tga\00 */, "i8", ALLOC_NONE, 5269948);
allocate([79,117,116,32,111,102,32,77,101,109,111,114,121,0] /* Out of Memory\00 */, "i8", ALLOC_NONE, 5269956);
allocate([73,110,99,111,114,114,101,99,116,32,103,65,77,65,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Incorrect gAMA chunk */, "i8", ALLOC_NONE, 5269972);
allocate([85,110,107,110,111,119,110,32,105,110,116,101,114,108,97,99,101,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0] /* Unknown interlace me */, "i8", ALLOC_NONE, 5270000);
allocate([73,109,97,103,101,70,111,114,109,97,116,80,78,71,58,58,108,111,97,100,40,41,58,32,99,97,110,39,116,32,111,112,101,110,32,102,105,108,101,32,39,37,115,39,10,0] /* ImageFormatPNG::load */, "i8", ALLOC_NONE, 5270036);
allocate([83,117,115,112,101,110,115,105,111,110,32,110,111,116,32,97,108,108,111,119,101,100,32,104,101,114,101,0] /* Suspension not allow */, "i8", ALLOC_NONE, 5270084);
allocate([68,117,112,108,105,99,97,116,101,32,103,65,77,65,32,99,104,117,110,107,0] /* Duplicate gAMA chunk */, "i8", ALLOC_NONE, 5270112);
allocate([80,78,71,32,102,105,108,101,32,99,111,114,114,117,112,116,101,100,32,98,121,32,65,83,67,73,73,32,99,111,110,118,101,114,115,105,111,110,0] /* PNG file corrupted b */, "i8", ALLOC_NONE, 5270136);
allocate([73,110,118,97,108,105,100,32,99,111,108,111,114,32,116,121,112,101,47,98,105,116,32,100,101,112,116,104,32,99,111,109,98,105,110,97,116,105,111,110,32,105,110,32,73,72,68,82,0] /* Invalid color type/b */, "i8", ALLOC_NONE, 5270176);
allocate([46,87,69,66,194,168,0] /* .WEB\C2\A8\00 */, "i8", ALLOC_NONE, 5270228);
allocate([66,117,102,102,101,114,32,112,97,115,115,101,100,32,116,111,32,74,80,69,71,32,108,105,98,114,97,114,121,32,105,115,32,116,111,111,32,115,109,97,108,108,0] /* Buffer passed to JPE */, "i8", ALLOC_NONE, 5270236);
allocate([122,108,105,98,32,109,101,109,111,114,121,32,101,114,114,111,114,0] /* zlib memory error\00 */, "i8", ALLOC_NONE, 5270280);
allocate([77,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,102,97,105,108,101,100,32,119,104,105,108,101,32,112,114,111,99,101,115,115,105,110,103,32,115,67,65,76,0] /* Memory allocation fa */, "i8", ALLOC_NONE, 5270300);
allocate([79,117,116,32,111,102,32,112,108,97,99,101,32,103,65,77,65,32,99,104,117,110,107,0] /* Out of place gAMA ch */, "i8", ALLOC_NONE, 5270348);
allocate([73,110,118,97,108,105,100,32,99,111,108,111,114,32,116,121,112,101,32,105,110,32,73,72,68,82,0] /* Invalid color type i */, "i8", ALLOC_NONE, 5270372);
allocate([46,119,101,98,112,0] /* .webp\00 */, "i8", ALLOC_NONE, 5270400);
allocate([66,111,103,117,115,32,118,105,114,116,117,97,108,32,97,114,114,97,121,32,97,99,99,101,115,115,0] /* Bogus virtual array  */, "i8", ALLOC_NONE, 5270408);
allocate([117,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,0] /* unknown compression  */, "i8", ALLOC_NONE, 5270436);
allocate([73,110,118,97,108,105,100,32,115,67,65,76,32,104,101,105,103,104,116,0] /* Invalid sCAL height\ */, "i8", ALLOC_NONE, 5270464);
allocate([73,110,118,97,108,105,100,32,103,65,77,65,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid gAMA after I */, "i8", ALLOC_NONE, 5270484);
allocate([73,110,118,97,108,105,100,32,98,105,116,32,100,101,112,116,104,32,105,110,32,73,72,68,82,0] /* Invalid bit depth in */, "i8", ALLOC_NONE, 5270508);
allocate([46,80,78,71,0] /* .PNG\00 */, "i8", ALLOC_NONE, 5270536);
allocate([74,80,69,71,32,112,97,114,97,109,101,116,101,114,32,115,116,114,117,99,116,32,109,105,115,109,97,116,99,104,58,32,108,105,98,114,97,114,121,32,116,104,105,110,107,115,32,115,105,122,101,32,105,115,32,37,117,44,32,99,97,108,108,101,114,32,101,120,112,101,99,116,115,32,37,117,0] /* JPEG parameter struc */, "i8", ALLOC_NONE, 5270544);
allocate([73,110,118,97,108,105,100,32,115,67,65,76,32,119,105,100,116,104,0] /* Invalid sCAL width\0 */, "i8", ALLOC_NONE, 5270624);
allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,103,65,77,65,0] /* Missing IHDR before  */, "i8", ALLOC_NONE, 5270644);
allocate([87,105,100,116,104,32,105,115,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,108,105,98,112,110,103,32,116,111,32,112,114,111,99,101,115,115,32,112,105,120,101,108,115,0] /* Width is too large f */, "i8", ALLOC_NONE, 5270672);
allocate([46,112,110,103,0] /* .png\00 */, "i8", ALLOC_NONE, 5270720);
allocate([73,109,112,114,111,112,101,114,32,99,97,108,108,32,116,111,32,74,80,69,71,32,108,105,98,114,97,114,121,32,105,110,32,115,116,97,116,101,32,37,100,0] /* Improper call to JPE */, "i8", ALLOC_NONE, 5270728);
allocate([73,110,118,97,108,105,100,32,115,67,65,76,32,117,110,105,116,0] /* Invalid sCAL unit\00 */, "i8", ALLOC_NONE, 5270772);
allocate([73,110,99,111,114,114,101,99,116,32,73,69,78,68,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Incorrect IEND chunk */, "i8", ALLOC_NONE, 5270792);
allocate([46,74,80,71,0] /* .JPG\00 */, "i8", ALLOC_NONE, 5270820);
allocate([73,110,118,97,108,105,100,32,115,99,97,110,32,115,99,114,105,112,116,32,97,116,32,101,110,116,114,121,32,37,100,0] /* Invalid scan script  */, "i8", ALLOC_NONE, 5270828);
allocate([66,111,103,117,115,32,115,97,109,112,108,105,110,103,32,102,97,99,116,111,114,115,0] /* Bogus sampling facto */, "i8", ALLOC_NONE, 5270860);
allocate([73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,112,97,114,97,109,101,116,101,114,0] /* Insufficient memory  */, "i8", ALLOC_NONE, 5270884);
allocate([78,111,32,105,109,97,103,101,32,105,110,32,102,105,108,101,0] /* No image in file\00 */, "i8", ALLOC_NONE, 5270924);
allocate([110,111,32,109,101,109,111,114,121,32,100,117,114,105,110,103,32,102,114,97,109,101,32,105,110,105,116,105,97,108,105,122,97,116,105,111,110,46,0] /* no memory during fra */, "i8", ALLOC_NONE, 5270944);
allocate([46,106,112,103,0] /* .jpg\00 */, "i8", ALLOC_NONE, 5270984);
allocate([105,110,99,111,114,114,101,99,116,32,108,101,110,103,116,104,32,99,104,101,99,107,0] /* incorrect length che */, "i8", ALLOC_NONE, 5270992);
allocate([73,110,118,97,108,105,100,32,112,114,111,103,114,101,115,115,105,118,101,32,112,97,114,97,109,101,116,101,114,115,32,97,116,32,115,99,97,110,32,115,99,114,105,112,116,32,101,110,116,114,121,32,37,100,0] /* Invalid progressive  */, "i8", ALLOC_NONE, 5271016);
allocate([79,117,116,112,117,116,32,97,98,111,114,116,101,100,46,0] /* Output aborted.\00 */, "i8", ALLOC_NONE, 5271072);
allocate([79,75,0] /* OK\00 */, "i8", ALLOC_NONE, 5271088);
allocate([73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,112,97,114,97,109,115,0] /* Insufficient memory  */, "i8", ALLOC_NONE, 5271092);
allocate([86,80,56,32,0] /* VP8 \00 */, "i8", ALLOC_NONE, 5271128);
allocate([84,114,117,110,99,97,116,105,110,103,32,105,110,99,111,114,114,101,99,116,32,105,110,102,111,32,116,82,78,83,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Truncating incorrect */, "i8", ALLOC_NONE, 5271136);
allocate([105,110,99,111,114,114,101,99,116,32,100,97,116,97,32,99,104,101,99,107,0] /* incorrect data check */, "i8", ALLOC_NONE, 5271180);
allocate([73,109,97,103,101,32,104,101,105,103,104,116,32,101,120,99,101,101,100,115,32,117,115,101,114,32,108,105,109,105,116,32,105,110,32,73,72,68,82,0] /* Image height exceeds */, "i8", ALLOC_NONE, 5271204);
allocate([73,109,97,103,101,70,111,114,109,97,116,84,71,65,58,58,108,111,97,100,40,41,58,32,99,97,110,39,116,32,111,112,101,110,32,102,105,108,101,32,39,37,115,39,10,0] /* ImageFormatTGA::load */, "i8", ALLOC_NONE, 5271244);
allocate([73,110,118,97,108,105,100,32,112,114,111,103,114,101,115,115,105,118,101,32,112,97,114,97,109,101,116,101,114,115,32,83,115,61,37,100,32,83,101,61,37,100,32,65,104,61,37,100,32,65,108,61,37,100,0] /* Invalid progressive  */, "i8", ALLOC_NONE, 5271292);
allocate([83,111,114,114,121,44,32,116,104,101,114,101,32,97,114,101,32,108,101,103,97,108,32,114,101,115,116,114,105,99,116,105,111,110,115,32,111,110,32,97,114,105,116,104,109,101,116,105,99,32,99,111,100,105,110,103,0] /* Sorry, there are leg */, "i8", ALLOC_NONE, 5271348);
allocate([80,114,101,109,97,116,117,114,101,32,101,110,100,45,111,102,45,102,105,108,101,32,101,110,99,111,117,110,116,101,114,101,100,46,0] /* Premature end-of-fil */, "i8", ALLOC_NONE, 5271408);
allocate([73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,117,110,105,116,115,0] /* Insufficient memory  */, "i8", ALLOC_NONE, 5271444);
allocate([84,114,117,110,99,97,116,105,110,103,32,105,110,99,111,114,114,101,99,116,32,116,82,78,83,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Truncating incorrect */, "i8", ALLOC_NONE, 5271480);
allocate([73,109,97,103,101,32,119,105,100,116,104,32,101,120,99,101,101,100,115,32,117,115,101,114,32,108,105,109,105,116,32,105,110,32,73,72,68,82,0] /* Image width exceeds  */, "i8", ALLOC_NONE, 5271520);
allocate([105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,116,111,111,32,102,97,114,32,98,97,99,107,0] /* invalid distance too */, "i8", ALLOC_NONE, 5271560);
allocate([85,110,115,117,112,112,111,114,116,101,100,32,74,80,69,71,32,100,97,116,97,32,112,114,101,99,105,115,105,111,110,32,37,100,0] /* Unsupported JPEG dat */, "i8", ALLOC_NONE, 5271592);
allocate([73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,112,117,114,112,111,115,101,0] /* Insufficient memory  */, "i8", ALLOC_NONE, 5271628);
allocate([73,110,118,97,108,105,100,32,112,97,108,101,116,116,101,32,99,104,117,110,107,0] /* Invalid palette chun */, "i8", ALLOC_NONE, 5271668);
allocate([73,109,97,103,101,32,104,101,105,103,104,116,32,105,115,32,122,101,114,111,32,105,110,32,73,72,68,82,0] /* Image height is zero */, "i8", ALLOC_NONE, 5271692);
allocate([73,109,97,103,101,70,111,114,109,97,116,87,69,66,80,58,58,108,111,97,100,40,41,58,32,99,97,110,39,116,32,100,101,99,111,100,101,32,82,71,66,65,32,34,37,115,34,32,102,105,108,101,10,0] /* ImageFormatWEBP::loa */, "i8", ALLOC_NONE, 5271724);
allocate([105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,99,111,100,101,0] /* invalid distance cod */, "i8", ALLOC_NONE, 5271780);
allocate([73,110,118,97,108,105,100,32,109,101,109,111,114,121,32,112,111,111,108,32,99,111,100,101,32,37,100,0] /* Invalid memory pool  */, "i8", ALLOC_NONE, 5271804);
allocate([78,111,116,32,97,32,107,101,121,32,102,114,97,109,101,46,0] /* Not a key frame.\00 */, "i8", ALLOC_NONE, 5271832);
allocate([73,110,118,97,108,105,100,32,102,111,114,109,97,116,32,102,111,114,32,112,67,65,76,32,112,97,114,97,109,101,116,101,114,0] /* Invalid format for p */, "i8", ALLOC_NONE, 5271852);
allocate([73,103,110,111,114,105,110,103,32,80,76,84,69,32,99,104,117,110,107,32,105,110,32,103,114,97,121,115,99,97,108,101,32,80,78,71,0] /* Ignoring PLTE chunk  */, "i8", ALLOC_NONE, 5271888);
allocate([73,110,116,101,114,108,97,99,101,32,104,97,110,100,108,105,110,103,32,115,104,111,117,108,100,32,98,101,32,116,117,114,110,101,100,32,111,110,32,119,104,101,110,32,117,115,105,110,103,32,112,110,103,95,114,101,97,100,95,105,109,97,103,101,0] /* Interlace handling s */, "i8", ALLOC_NONE, 5271928);
allocate([73,109,97,103,101,32,119,105,100,116,104,32,105,115,32,122,101,114,111,32,105,110,32,73,72,68,82,0] /* Image width is zero  */, "i8", ALLOC_NONE, 5271996);
allocate([73,109,97,103,101,70,111,114,109,97,116,87,69,66,80,58,58,108,111,97,100,40,41,58,32,99,97,110,39,116,32,100,101,99,111,100,101,32,82,71,66,32,34,37,115,34,32,102,105,108,101,10,0] /* ImageFormatWEBP::loa */, "i8", ALLOC_NONE, 5272024);
allocate([73,110,99,111,109,112,108,101,116,101,32,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,115,116,114,101,97,109,32,105,110,32,37,115,32,99,104,117,110,107,0] /* Incomplete compresse */, "i8", ALLOC_NONE, 5272080);
allocate([105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,32,99,111,100,101,0] /* invalid literal/leng */, "i8", ALLOC_NONE, 5272128);
allocate([68,97,116,97,32,101,114,114,111,114,32,105,110,32,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,115,116,114,101,97,109,32,105,110,32,37,115,32,99,104,117,110,107,0] /* Data error in compre */, "i8", ALLOC_NONE, 5272156);
allocate([83,97,109,112,108,105,110,103,32,102,97,99,116,111,114,115,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,105,110,116,101,114,108,101,97,118,101,100,32,115,99,97,110,0] /* Sampling factors too */, "i8", ALLOC_NONE, 5272204);
allocate([66,117,102,102,101,114,32,101,114,114,111,114,32,105,110,32,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,115,116,114,101,97,109,32,105,110,32,37,115,32,99,104,117,110,107,0] /* Buffer error in comp */, "i8", ALLOC_NONE, 5272252);
allocate([99,97,110,110,111,116,32,112,97,114,115,101,32,112,97,114,116,105,116,105,111,110,115,0] /* cannot parse partiti */, "i8", ALLOC_NONE, 5272304);
allocate([82,111,119,32,104,97,115,32,116,111,111,32,109,97,110,121,32,98,121,116,101,115,32,116,111,32,97,108,108,111,99,97,116,101,32,105,110,32,109,101,109,111,114,121,0] /* Row has too many byt */, "i8", ALLOC_NONE, 5272328);
allocate([73,110,118,97,108,105,100,32,112,67,65,76,32,101,113,117,97,116,105,111,110,32,116,121,112,101,0] /* Invalid pCAL equatio */, "i8", ALLOC_NONE, 5272376);
allocate([73,109,97,103,101,70,111,114,109,97,116,87,69,66,80,58,58,108,111,97,100,40,41,58,32,98,97,100,32,98,105,116,115,116,114,101,97,109,32,105,110,32,34,37,115,34,32,102,105,108,101,44,32,101,114,114,111,114,58,34,37,100,34,10,0] /* ImageFormatWEBP::loa */, "i8", ALLOC_NONE, 5272404);
allocate([69,120,116,114,97,32,99,111,109,112,114,101,115,115,105,111,110,32,100,97,116,97,0] /* Extra compression da */, "i8", ALLOC_NONE, 5272472);
allocate([68,101,99,111,109,112,114,101,115,115,105,111,110,32,69,114,114,111,114,0] /* Decompression Error\ */, "i8", ALLOC_NONE, 5272496);
allocate([68,117,112,108,105,99,97,116,101,32,80,76,84,69,32,99,104,117,110,107,0] /* Duplicate PLTE chunk */, "i8", ALLOC_NONE, 5272516);
allocate([78,111,116,32,97,32,80,78,71,32,102,105,108,101,0] /* Not a PNG file\00 */, "i8", ALLOC_NONE, 5272540);
allocate([69,120,116,114,97,32,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,0] /* Extra compressed dat */, "i8", ALLOC_NONE, 5272556);
allocate([68,101,99,111,109,112,114,101,115,115,105,111,110,32,101,114,114,111,114,0] /* Decompression error\ */, "i8", ALLOC_NONE, 5272580);
allocate([73,103,110,111,114,105,110,103,32,97,116,116,101,109,112,116,32,116,111,32,115,101,116,32,99,72,82,77,32,82,71,66,32,116,114,105,97,110,103,108,101,32,119,105,116,104,32,122,101,114,111,32,97,114,101,97,0] /* Ignoring attempt to  */, "i8", ALLOC_NONE, 5272600);
allocate([78,111,116,32,101,110,111,117,103,104,32,105,109,97,103,101,32,100,97,116,97,0] /* Not enough image dat */, "i8", ALLOC_NONE, 5272660);
allocate([114,98,0] /* rb\00 */, "i8", ALLOC_NONE, 5272684);
allocate([73,103,110,111,114,105,110,103,32,98,97,100,32,97,100,97,112,116,105,118,101,32,102,105,108,116,101,114,32,116,121,112,101,0] /* Ignoring bad adaptiv */, "i8", ALLOC_NONE, 5272688);
allocate([82,101,97,100,32,69,114,114,111,114,0] /* Read Error\00 */, "i8", ALLOC_NONE, 5272724);
allocate([105,110,118,97,108,105,100,32,99,104,117,110,107,32,116,121,112,101,0] /* invalid chunk type\0 */, "i8", ALLOC_NONE, 5272736);
allocate([105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,115,32,115,101,116,0] /* invalid distances se */, "i8", ALLOC_NONE, 5272756);
allocate([101,114,114,111,114,32,105,110,32,117,115,101,114,32,99,104,117,110,107,0] /* error in user chunk\ */, "i8", ALLOC_NONE, 5272780);
allocate([117,110,107,110,111,119,110,32,99,114,105,116,105,99,97,108,32,99,104,117,110,107,0] /* unknown critical chu */, "i8", ALLOC_NONE, 5272800);
allocate([87,114,111,110,103,32,74,80,69,71,32,108,105,98,114,97,114,121,32,118,101,114,115,105,111,110,58,32,108,105,98,114,97,114,121,32,105,115,32,37,100,44,32,99,97,108,108,101,114,32,101,120,112,101,99,116,115,32,37,100,0] /* Wrong JPEG library v */, "i8", ALLOC_NONE, 5272824);
allocate([99,97,110,110,111,116,32,112,97,114,115,101,32,102,105,108,116,101,114,32,104,101,97,100,101,114,0] /* cannot parse filter  */, "i8", ALLOC_NONE, 5272888);
allocate([78,111,32,115,112,97,99,101,32,105,110,32,99,104,117,110,107,32,99,97,99,104,101,32,102,111,114,32,117,110,107,110,111,119,110,32,99,104,117,110,107,0] /* No space in chunk ca */, "i8", ALLOC_NONE, 5272916);
allocate([73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,115,116,111,114,101,32,105,84,88,116,32,99,104,117,110,107,0] /* Insufficient memory  */, "i8", ALLOC_NONE, 5272960);
allocate([73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,104,73,83,84,32,99,104,117,110,107,32,100,97,116,97,0] /* Insufficient memory  */, "i8", ALLOC_NONE, 5273000);
allocate([78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,105,84,88,116,32,99,104,117,110,107,0] /* Not enough memory to */, "i8", ALLOC_NONE, 5273040);
allocate([77,97,108,102,111,114,109,101,100,32,105,84,88,116,32,99,104,117,110,107,0] /* Malformed iTXt chunk */, "i8", ALLOC_NONE, 5273080);
allocate([84,114,117,110,99,97,116,101,100,32,105,84,88,116,32,99,104,117,110,107,0] /* Truncated iTXt chunk */, "i8", ALLOC_NONE, 5273104);
allocate([73,110,118,97,108,105,100,32,80,76,84,69,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid PLTE after I */, "i8", ALLOC_NONE, 5273128);
allocate([108,105,98,112,110,103,32,119,97,114,110,105,110,103,58,32,37,115,0] /* libpng warning: %s\0 */, "i8", ALLOC_NONE, 5273152);
allocate([112,110,103,95,100,111,95,113,117,97,110,116,105,122,101,32,114,101,116,117,114,110,101,100,32,114,111,119,98,121,116,101,115,61,48,0] /* png_do_quantize retu */, "i8", ALLOC_NONE, 5273172);
allocate([65,112,112,108,105,99,97,116,105,111,110,32,116,114,97,110,115,102,101,114,114,101,100,32,116,111,111,32,109,97,110,121,32,115,99,97,110,108,105,110,101,115,0] /* Application transfer */, "i8", ALLOC_NONE, 5273208);
allocate([105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,115,32,115,101,116,0] /* invalid literal/leng */, "i8", ALLOC_NONE, 5273252);
allocate([78,111,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,105,84,88,116,32,99,104,117,110,107,0] /* No memory to process */, "i8", ALLOC_NONE, 5273280);
allocate([73,110,118,97,108,105,100,32,99,72,82,77,32,98,108,117,101,32,112,111,105,110,116,0] /* Invalid cHRM blue po */, "i8", ALLOC_NONE, 5273312);
allocate([73,110,118,97,108,105,100,32,83,79,83,32,112,97,114,97,109,101,116,101,114,115,32,102,111,114,32,115,101,113,117,101,110,116,105,97,108,32,74,80,69,71,0] /* Invalid SOS paramete */, "i8", ALLOC_NONE, 5273336);
allocate([73,109,97,103,101,70,111,114,109,97,116,87,69,66,80,58,58,108,111,97,100,40,41,58,32,119,114,111,110,103,32,104,101,97,100,101,114,32,105,110,32,34,37,115,34,32,102,105,108,101,10,0] /* ImageFormatWEBP::loa */, "i8", ALLOC_NONE, 5273380);
allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,105,84,88,116,0] /* Missing IHDR before  */, "i8", ALLOC_NONE, 5273432);
allocate([67,111,114,114,117,112,116,32,74,80,69,71,32,100,97,116,97,58,32,102,111,117,110,100,32,109,97,114,107,101,114,32,48,120,37,48,50,120,32,105,110,115,116,101,97,100,32,111,102,32,82,83,84,37,100,0] /* Corrupt JPEG data: f */, "i8", ALLOC_NONE, 5273460);
allocate([78,111,32,115,112,97,99,101,32,105,110,32,99,104,117,110,107,32,99,97,99,104,101,32,102,111,114,32,105,84,88,116,0] /* No space in chunk ca */, "i8", ALLOC_NONE, 5273516);
allocate([80,111,116,101,110,116,105,97,108,32,111,118,101,114,102,108,111,119,32,105,110,32,112,110,103,95,122,97,108,108,111,99,40,41,0] /* Potential overflow i */, "i8", ALLOC_NONE, 5273552);
allocate([80,114,101,109,97,116,117,114,101,32,101,110,100,32,111,102,32,74,80,69,71,32,102,105,108,101,0] /* Premature end of JPE */, "i8", ALLOC_NONE, 5273588);
allocate([73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,115,116,111,114,101,32,122,84,88,116,32,99,104,117,110,107,0] /* Insufficient memory  */, "i8", ALLOC_NONE, 5273616);
allocate([87,97,114,110,105,110,103,58,32,117,110,107,110,111,119,110,32,74,70,73,70,32,114,101,118,105,115,105,111,110,32,110,117,109,98,101,114,32,37,100,46,37,48,50,100,0] /* Warning: unknown JFI */, "i8", ALLOC_NONE, 5273656);
allocate([67,111,114,114,117,112,116,32,74,80,69,71,32,100,97,116,97,58,32,98,97,100,32,72,117,102,102,109,97,110,32,99,111,100,101,0] /* Corrupt JPEG data: b */, "i8", ALLOC_NONE, 5273704);
allocate([78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,122,84,88,116,32,99,104,117,110,107,0] /* Not enough memory to */, "i8", ALLOC_NONE, 5273740);
allocate([105,110,99,111,114,114,101,99,116,32,104,101,97,100,101,114,32,99,104,101,99,107,0] /* incorrect header che */, "i8", ALLOC_NONE, 5273780);
allocate([66,111,103,117,115,32,109,97,114,107,101,114,32,108,101,110,103,116,104,0] /* Bogus marker length\ */, "i8", ALLOC_NONE, 5273804);
allocate([99,97,110,110,111,116,32,112,97,114,115,101,32,115,101,103,109,101,110,116,32,104,101,97,100,101,114,0] /* cannot parse segment */, "i8", ALLOC_NONE, 5273824);
allocate([85,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,116,121,112,101,32,105,110,32,122,84,88,116,32,99,104,117,110,107,0] /* Unknown compression  */, "i8", ALLOC_NONE, 5273852);
allocate([67,111,114,114,117,112,116,32,74,80,69,71,32,100,97,116,97,58,32,112,114,101,109,97,116,117,114,101,32,101,110,100,32,111,102,32,100,97,116,97,32,115,101,103,109,101,110,116,0] /* Corrupt JPEG data: p */, "i8", ALLOC_NONE, 5273892);
allocate([84,114,117,110,99,97,116,101,100,32,122,84,88,116,32,99,104,117,110,107,0] /* Truncated zTXt chunk */, "i8", ALLOC_NONE, 5273944);
allocate([67,111,114,114,117,112,116,32,74,80,69,71,32,100,97,116,97,58,32,37,117,32,101,120,116,114,97,110,101,111,117,115,32,98,121,116,101,115,32,98,101,102,111,114,101,32,109,97,114,107,101,114,32,48,120,37,48,50,120,0] /* Corrupt JPEG data: % */, "i8", ALLOC_NONE, 5273968);
allocate([79,117,116,32,111,102,32,109,101,109,111,114,121,32,112,114,111,99,101,115,115,105,110,103,32,122,84,88,116,32,99,104,117,110,107,0] /* Out of memory proces */, "i8", ALLOC_NONE, 5274028);
allocate([73,110,118,97,108,105,100,32,112,97,108,101,116,116,101,32,115,105,122,101,44,32,104,73,83,84,32,97,108,108,111,99,97,116,105,111,110,32,115,107,105,112,112,101,100,0] /* Invalid palette size */, "i8", ALLOC_NONE, 5274064);
allocate([73,110,99,111,110,115,105,115,116,101,110,116,32,112,114,111,103,114,101,115,115,105,111,110,32,115,101,113,117,101,110,99,101,32,102,111,114,32,99,111,109,112,111,110,101,110,116,32,37,100,32,99,111,101,102,102,105,99,105,101,110,116,32,37,100,0] /* Inconsistent progres */, "i8", ALLOC_NONE, 5274112);
allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,122,84,88,116,0] /* Missing IHDR before  */, "i8", ALLOC_NONE, 5274180);
allocate([109,97,105,110,40,41,58,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,32,105,110,99,111,114,114,101,99,116,32,58,32,37,100,10,0] /* main(): number of ar */, "i8", ALLOC_NONE, 5274208);
allocate([85,110,107,110,111,119,110,32,65,100,111,98,101,32,99,111,108,111,114,32,116,114,97,110,115,102,111,114,109,32,99,111,100,101,32,37,100,0] /* Unknown Adobe color  */, "i8", ALLOC_NONE, 5274252);
allocate([79,98,116,97,105,110,101,100,32,88,77,83,32,104,97,110,100,108,101,32,37,117,0] /* Obtained XMS handle  */, "i8", ALLOC_NONE, 5274292);
allocate([78,111,32,115,112,97,99,101,32,105,110,32,99,104,117,110,107,32,99,97,99,104,101,32,102,111,114,32,122,84,88,116,0] /* No space in chunk ca */, "i8", ALLOC_NONE, 5274316);
allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,80,76,84,69,0] /* Missing IHDR before  */, "i8", ALLOC_NONE, 5274352);
allocate([112,110,103,95,100,111,95,114,103,98,95,116,111,95,103,114,97,121,32,102,111,117,110,100,32,110,111,110,103,114,97,121,32,112,105,120,101,108,0] /* png_do_rgb_to_gray f */, "i8", ALLOC_NONE, 5274380);
allocate([105,110,118,97,108,105,100,32,99,111,100,101,32,45,45,32,109,105,115,115,105,110,103,32,101,110,100,45,111,102,45,98,108,111,99,107,0] /* invalid code -- miss */, "i8", ALLOC_NONE, 5274420);
allocate([73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,116,101,120,116,32,99,104,117,110,107,0] /* Insufficient memory  */, "i8", ALLOC_NONE, 5274460);
allocate([73,110,118,97,108,105,100,32,99,72,82,77,32,103,114,101,101,110,32,112,111,105,110,116,0] /* Invalid cHRM green p */, "i8", ALLOC_NONE, 5274504);
allocate([70,114,101,101,100,32,88,77,83,32,104,97,110,100,108,101,32,37,117,0] /* Freed XMS handle %u\ */, "i8", ALLOC_NONE, 5274532);
allocate([73,109,97,103,101,70,111,114,109,97,116,87,69,66,80,58,58,108,111,97,100,40,41,58,32,99,97,110,39,116,32,111,112,101,110,32,102,105,108,101,32,39,37,115,39,10,0] /* ImageFormatWEBP::loa */, "i8", ALLOC_NONE, 5274552);
allocate([78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,116,101,120,116,32,99,104,117,110,107,0] /* Not enough memory to */, "i8", ALLOC_NONE, 5274600);
allocate([85,110,114,101,99,111,103,110,105,122,101,100,32,99,111,109,112,111,110,101,110,116,32,73,68,115,32,37,100,32,37,100,32,37,100,44,32,97,115,115,117,109,105,110,103,32,89,67,98,67,114,0] /* Unrecognized compone */, "i8", ALLOC_NONE, 5274640);
allocate([78,111,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,116,101,120,116,32,99,104,117,110,107,0] /* No memory to process */, "i8", ALLOC_NONE, 5274692);
allocate([74,70,73,70,32,101,120,116,101,110,115,105,111,110,32,109,97,114,107,101,114,58,32,82,71,66,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,44,32,108,101,110,103,116,104,32,37,117,0] /* JFIF extension marke */, "i8", ALLOC_NONE, 5274724);
allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,116,69,88,116,0] /* Missing IHDR before  */, "i8", ALLOC_NONE, 5274780);
allocate([74,70,73,70,32,101,120,116,101,110,115,105,111,110,32,109,97,114,107,101,114,58,32,112,97,108,101,116,116,101,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,44,32,108,101,110,103,116,104,32,37,117,0] /* JFIF extension marke */, "i8", ALLOC_NONE, 5274808);
allocate([78,111,32,115,112,97,99,101,32,105,110,32,99,104,117,110,107,32,99,97,99,104,101,32,102,111,114,32,116,69,88,116,0] /* No space in chunk ca */, "i8", ALLOC_NONE, 5274868);
allocate([74,70,73,70,32,101,120,116,101,110,115,105,111,110,32,109,97,114,107,101,114,58,32,74,80,69,71,45,99,111,109,112,114,101,115,115,101,100,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,44,32,108,101,110,103,116,104,32,37,117,0] /* JFIF extension marke */, "i8", ALLOC_NONE, 5274904);
allocate([98,97,100,32,112,97,114,116,105,116,105,111,110,32,108,101,110,103,116,104,0] /* bad partition length */, "i8", ALLOC_NONE, 5274972);
allocate([66,111,103,117,115,32,74,80,69,71,32,99,111,108,111,114,115,112,97,99,101,0] /* Bogus JPEG colorspac */, "i8", ALLOC_NONE, 5274996);
allocate([73,110,99,111,114,114,101,99,116,32,116,73,77,69,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Incorrect tIME chunk */, "i8", ALLOC_NONE, 5275020);
allocate([79,112,101,110,101,100,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,32,37,115,0] /* Opened temporary fil */, "i8", ALLOC_NONE, 5275048);
allocate([68,117,112,108,105,99,97,116,101,32,116,73,77,69,32,99,104,117,110,107,0] /* Duplicate tIME chunk */, "i8", ALLOC_NONE, 5275076);
allocate([67,108,111,115,101,100,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,32,37,115,0] /* Closed temporary fil */, "i8", ALLOC_NONE, 5275100);
allocate([79,117,116,32,111,102,32,112,108,97,99,101,32,116,73,77,69,32,99,104,117,110,107,0] /* Out of place tIME ch */, "i8", ALLOC_NONE, 5275128);
allocate([32,32,83,115,61,37,100,44,32,83,101,61,37,100,44,32,65,104,61,37,100,44,32,65,108,61,37,100,0] /*   Ss=%d, Se=%d, Ah=% */, "i8", ALLOC_NONE, 5275152);
allocate([73,110,118,97,108,105,100,32,115,67,65,76,32,99,104,117,110,107,32,105,103,110,111,114,101,100,58,32,98,97,100,32,104,101,105,103,104,116,32,102,111,114,109,97,116,0] /* Invalid sCAL chunk i */, "i8", ALLOC_NONE, 5275184);
allocate([32,32,32,32,67,111,109,112,111,110,101,110,116,32,37,100,58,32,100,99,61,37,100,32,97,99,61,37,100,0] /*     Component %d: dc */, "i8", ALLOC_NONE, 5275232);
allocate([73,110,118,97,108,105,100,32,115,67,65,76,32,99,104,117,110,107,32,105,103,110,111,114,101,100,58,32,98,97,100,32,119,105,100,116,104,32,102,111,114,109,97,116,0] /* Invalid sCAL chunk i */, "i8", ALLOC_NONE, 5275264);
allocate([73,110,118,97,108,105,100,32,73,72,68,82,32,99,104,117,110,107,0] /* Invalid IHDR chunk\0 */, "i8", ALLOC_NONE, 5275312);
allocate([78,85,76,76,32,114,111,119,32,98,117,102,102,101,114,32,102,111,114,32,114,111,119,32,37,108,100,44,32,112,97,115,115,32,37,100,0] /* NULL row buffer for  */, "i8", ALLOC_NONE, 5275332);
allocate([83,116,97,114,116,32,79,102,32,83,99,97,110,58,32,37,100,32,99,111,109,112,111,110,101,110,116,115,0] /* Start Of Scan: %d co */, "i8", ALLOC_NONE, 5275372);
allocate([73,110,118,97,108,105,100,32,97,116,116,101,109,112,116,32,116,111,32,114,101,97,100,32,114,111,119,32,100,97,116,97,0] /* Invalid attempt to r */, "i8", ALLOC_NONE, 5275404);
allocate([105,110,118,97,108,105,100,32,98,105,116,32,108,101,110,103,116,104,32,114,101,112,101,97,116,0] /* invalid bit length r */, "i8", ALLOC_NONE, 5275440);
allocate([73,110,118,97,108,105,100,32,115,67,65,76,32,105,103,110,111,114,101,100,58,32,105,110,118,97,108,105,100,32,117,110,105,116,0] /* Invalid sCAL ignored */, "i8", ALLOC_NONE, 5275468);
allocate([73,110,118,97,108,105,100,32,99,72,82,77,32,114,101,100,32,112,111,105,110,116,0] /* Invalid cHRM red poi */, "i8", ALLOC_NONE, 5275504);
allocate([83,116,97,114,116,32,111,102,32,73,109,97,103,101,0] /* Start of Image\00 */, "i8", ALLOC_NONE, 5275528);
allocate([79,117,116,32,111,102,32,109,101,109,111,114,121,32,119,104,105,108,101,32,112,114,111,99,101,115,115,105,110,103,32,115,67,65,76,32,99,104,117,110,107,0] /* Out of memory while  */, "i8", ALLOC_NONE, 5275544);
allocate([32,32,32,32,67,111,109,112,111,110,101,110,116,32,37,100,58,32,37,100,104,120,37,100,118,32,113,61,37,100,0] /*     Component %d: %d */, "i8", ALLOC_NONE, 5275588);
allocate([68,117,112,108,105,99,97,116,101,32,115,67,65,76,32,99,104,117,110,107,0] /* Duplicate sCAL chunk */, "i8", ALLOC_NONE, 5275620);
allocate([83,116,97,114,116,32,79,102,32,70,114,97,109,101,32,48,120,37,48,50,120,58,32,119,105,100,116,104,61,37,117,44,32,104,101,105,103,104,116,61,37,117,44,32,99,111,109,112,111,110,101,110,116,115,61,37,100,0] /* Start Of Frame 0x%02 */, "i8", ALLOC_NONE, 5275644);
allocate(468, "i8", ALLOC_NONE, 5275704);
allocate([0,0,0,0,188,130,80,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5276172);
allocate(1, "i8", ALLOC_NONE, 5276192);
__ZTVN10__cxxabiv120__si_class_type_infoE=allocate([0,0,0,0,200,130,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
allocate(1, "i8", ALLOC_STATIC);
__ZTVN10__cxxabiv117__class_type_infoE=allocate([0,0,0,0,212,130,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
allocate(1, "i8", ALLOC_STATIC);
allocate([83,116,57,116,121,112,101,95,105,110,102,111,0] /* St9type_info\00 */, "i8", ALLOC_NONE, 5276196);
allocate([83,116,57,98,97,100,95,97,108,108,111,99,0] /* St9bad_alloc\00 */, "i8", ALLOC_NONE, 5276212);
allocate([78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0] /* N10__cxxabiv120__si_ */, "i8", ALLOC_NONE, 5276228);
allocate([78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0] /* N10__cxxabiv117__cla */, "i8", ALLOC_NONE, 5276268);
allocate([78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0] /* N10__cxxabiv116__shi */, "i8", ALLOC_NONE, 5276304);
allocate(8, "i8", ALLOC_NONE, 5276340);
var __ZTISt9exception = __ZTISt9exception=allocate(4, "i8", ALLOC_STATIC);
allocate(12, "i8", ALLOC_NONE, 5276348);
allocate([0,0,0,0,0,0,0,0,212,130,80,0], "i8", ALLOC_NONE, 5276360);
allocate([0,0,0,0,0,0,0,0,224,130,80,0], "i8", ALLOC_NONE, 5276372);
allocate([0,0,0,0,0,0,0,0,180,130,80,0], "i8", ALLOC_NONE, 5276384);
allocate(4, "i8", ALLOC_NONE, 5276396);
allocate([398,0,0,0,218,0,0,0,258,0,0,0,174,0,0,0,396,0,0,0,84,0,0,0,80,0,0,0,218,0,0,0,174,0,0,0,396,0,0,0,84,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 5276400);
allocate(52, "i8", ALLOC_NONE, 5276452);
allocate([0,0,0,0,138,0,0,0,198,0,0,0,268,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 5276504);
allocate([104,0,0,0,304,0,0,0,154,0,0,0,116,0,0,0,228,0,0,0,322,0,0,0,94,0,0,0,304,0,0,0,116,0,0,0,228,0,0,0,322,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 5276520);
allocate(512, "i8", ALLOC_NONE, 5276572);
allocate(1024, "i8", ALLOC_NONE, 5277084);
allocate(1024, "i8", ALLOC_NONE, 5278108);
allocate(512, "i8", ALLOC_NONE, 5279132);
allocate(709, "i8", ALLOC_NONE, 5279644);
allocate(709, "i8", ALLOC_NONE, 5280356);
allocate([86,0,0,0,390,0,0,0,168,0,0,0,26,0,0,0,196,0,0,0,172,0,0,0,72,0,0,0,296,0,0,0,58,0,0,0,164,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 5281068);
allocate([244,0,0,0,132,0,0,0,378,0,0,0,38,0,0,0,150,0,0,0,200,0,0,0,386,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 5281108);
allocate([254,0,0,0,264,0,0,0,220,0,0,0,114,0,0,0,42,0,0,0,64,0,0,0,144,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 5281136);
allocate([255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,176,246,255,255,255,255,255,255,255,255,255,223,241,252,255,255,255,255,255,255,255,255,249,253,253,255,255,255,255,255,255,255,255,255,244,252,255,255,255,255,255,255,255,255,234,254,254,255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,255,255,255,255,255,246,254,255,255,255,255,255,255,255,255,239,253,254,255,255,255,255,255,255,255,255,254,255,254,255,255,255,255,255,255,255,255,255,248,254,255,255,255,255,255,255,255,255,251,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,254,255,255,255,255,255,255,255,255,251,254,254,255,255,255,255,255,255,255,255,254,255,254,255,255,255,255,255,255,255,255,255,254,253,255,254,255,255,255,255,255,255,250,255,254,255,254,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,217,255,255,255,255,255,255,255,255,255,255,225,252,241,253,255,255,254,255,255,255,255,234,250,241,250,253,255,253,254,255,255,255,255,254,255,255,255,255,255,255,255,255,255,223,254,254,255,255,255,255,255,255,255,255,238,253,254,254,255,255,255,255,255,255,255,255,248,254,255,255,255,255,255,255,255,255,249,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,255,255,255,247,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,254,255,255,255,255,255,255,255,255,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,253,255,255,255,255,255,255,255,255,250,255,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,186,251,250,255,255,255,255,255,255,255,255,234,251,244,254,255,255,255,255,255,255,255,251,251,243,253,254,255,254,255,255,255,255,255,253,254,255,255,255,255,255,255,255,255,236,253,254,255,255,255,255,255,255,255,255,251,253,253,254,254,255,255,255,255,255,255,255,254,254,255,255,255,255,255,255,255,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,254,254,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,248,255,255,255,255,255,255,255,255,255,255,250,254,252,254,255,255,255,255,255,255,255,248,254,249,253,255,255,255,255,255,255,255,255,253,253,255,255,255,255,255,255,255,255,246,253,253,255,255,255,255,255,255,255,255,252,254,251,254,254,255,255,255,255,255,255,255,254,252,255,255,255,255,255,255,255,255,248,254,253,255,255,255,255,255,255,255,255,253,255,254,254,255,255,255,255,255,255,255,255,251,254,255,255,255,255,255,255,255,255,245,251,254,255,255,255,255,255,255,255,255,253,253,254,255,255,255,255,255,255,255,255,255,251,253,255,255,255,255,255,255,255,255,252,253,254,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,252,255,255,255,255,255,255,255,255,255,249,255,254,255,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,255,255,250,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255], "i8", ALLOC_NONE, 5281164);
allocate([128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,253,136,254,255,228,219,128,128,128,128,128,189,129,242,255,227,213,255,219,128,128,128,106,126,227,252,214,209,255,255,128,128,128,1,98,248,255,236,226,255,255,128,128,128,181,133,238,254,221,234,255,154,128,128,128,78,134,202,247,198,180,255,219,128,128,128,1,185,249,255,243,255,128,128,128,128,128,184,150,247,255,236,224,128,128,128,128,128,77,110,216,255,236,230,128,128,128,128,128,1,101,251,255,241,255,128,128,128,128,128,170,139,241,252,236,209,255,255,128,128,128,37,116,196,243,228,255,255,255,128,128,128,1,204,254,255,245,255,128,128,128,128,128,207,160,250,255,238,128,128,128,128,128,128,102,103,231,255,211,171,128,128,128,128,128,1,152,252,255,240,255,128,128,128,128,128,177,135,243,255,234,225,128,128,128,128,128,80,129,211,255,194,224,128,128,128,128,128,1,1,255,128,128,128,128,128,128,128,128,246,1,255,128,128,128,128,128,128,128,128,255,128,128,128,128,128,128,128,128,128,128,198,35,237,223,193,187,162,160,145,155,62,131,45,198,221,172,176,220,157,252,221,1,68,47,146,208,149,167,221,162,255,223,128,1,149,241,255,221,224,255,255,128,128,128,184,141,234,253,222,220,255,199,128,128,128,81,99,181,242,176,190,249,202,255,255,128,1,129,232,253,214,197,242,196,255,255,128,99,121,210,250,201,198,255,202,128,128,128,23,91,163,242,170,187,247,210,255,255,128,1,200,246,255,234,255,128,128,128,128,128,109,178,241,255,231,245,255,255,128,128,128,44,130,201,253,205,192,255,255,128,128,128,1,132,239,251,219,209,255,165,128,128,128,94,136,225,251,218,190,255,255,128,128,128,22,100,174,245,186,161,255,199,128,128,128,1,182,249,255,232,235,128,128,128,128,128,124,143,241,255,227,234,128,128,128,128,128,35,77,181,251,193,211,255,205,128,128,128,1,157,247,255,236,231,255,255,128,128,128,121,141,235,255,225,227,255,255,128,128,128,45,99,188,251,195,217,255,224,128,128,128,1,1,251,255,213,255,128,128,128,128,128,203,1,248,255,255,128,128,128,128,128,128,137,1,177,255,224,255,128,128,128,128,128,253,9,248,251,207,208,255,192,128,128,128,175,13,224,243,193,185,249,198,255,255,128,73,17,171,221,161,179,236,167,255,234,128,1,95,247,253,212,183,255,255,128,128,128,239,90,244,250,211,209,255,255,128,128,128,155,77,195,248,188,195,255,255,128,128,128,1,24,239,251,218,219,255,205,128,128,128,201,51,219,255,196,186,128,128,128,128,128,69,46,190,239,201,218,255,228,128,128,128,1,191,251,255,255,128,128,128,128,128,128,223,165,249,255,213,255,128,128,128,128,128,141,124,248,255,255,128,128,128,128,128,128,1,16,248,255,255,128,128,128,128,128,128,190,36,230,255,236,255,128,128,128,128,128,149,1,255,128,128,128,128,128,128,128,128,1,226,255,128,128,128,128,128,128,128,128,247,192,255,128,128,128,128,128,128,128,128,240,128,255,128,128,128,128,128,128,128,128,1,134,252,255,255,128,128,128,128,128,128,213,62,250,255,255,128,128,128,128,128,128,55,93,255,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,202,24,213,235,186,191,220,160,240,175,255,126,38,182,232,169,184,228,174,255,187,128,61,46,138,219,151,178,240,170,255,216,128,1,112,230,250,199,191,247,159,255,255,128,166,109,228,252,211,215,255,174,128,128,128,39,77,162,232,172,180,245,178,255,255,128,1,52,220,246,198,199,249,220,255,255,128,124,74,191,243,183,193,250,221,255,255,128,24,71,130,219,154,170,243,182,255,255,128,1,182,225,249,219,240,255,224,128,128,128,149,150,226,252,216,205,255,171,128,128,128,28,108,170,242,183,194,254,223,255,255,128,1,81,230,252,204,203,255,192,128,128,128,123,102,209,247,188,196,255,233,128,128,128,20,95,153,243,164,173,255,203,128,128,128,1,222,248,255,216,213,128,128,128,128,128,168,175,246,252,235,205,255,255,128,128,128,47,116,215,255,211,212,255,255,128,128,128,1,121,236,253,212,214,255,255,128,128,128,141,84,213,252,201,202,255,219,128,128,128,42,80,160,240,162,185,255,205,128,128,128,1,1,255,128,128,128,128,128,128,128,128,244,1,255,128,128,128,128,128,128,128,128,238,1,255,128,128,128,128,128,128,128,128], "i8", ALLOC_NONE, 5282220);
HEAP32[((5247504)>>2)]=((5247520)|0);
HEAP32[((5247508)>>2)]=((5247496)|0);
HEAP32[((5247512)>>2)]=((5247488)|0);
HEAP32[((5247516)>>2)]=((5247476)|0);
HEAP32[((5248860)>>2)]=((5265700)|0);
HEAP32[((5248864)>>2)]=((5271348)|0);
HEAP32[((5248868)>>2)]=((5269504)|0);
HEAP32[((5248872)>>2)]=((5268356)|0);
HEAP32[((5248876)>>2)]=((5267460)|0);
HEAP32[((5248880)>>2)]=((5266576)|0);
HEAP32[((5248884)>>2)]=((5265668)|0);
HEAP32[((5248888)>>2)]=((5264720)|0);
HEAP32[((5248892)>>2)]=((5263896)|0);
HEAP32[((5248896)>>2)]=((5263052)|0);
HEAP32[((5248900)>>2)]=((5274996)|0);
HEAP32[((5248904)>>2)]=((5273804)|0);
HEAP32[((5248908)>>2)]=((5272824)|0);
HEAP32[((5248912)>>2)]=((5272204)|0);
HEAP32[((5248916)>>2)]=((5271804)|0);
HEAP32[((5248920)>>2)]=((5271592)|0);
HEAP32[((5248924)>>2)]=((5271292)|0);
HEAP32[((5248928)>>2)]=((5271016)|0);
HEAP32[((5248932)>>2)]=((5270860)|0);
HEAP32[((5248936)>>2)]=((5270828)|0);
HEAP32[((5248940)>>2)]=((5270728)|0);
HEAP32[((5248944)>>2)]=((5270544)|0);
HEAP32[((5248948)>>2)]=((5270408)|0);
HEAP32[((5248952)>>2)]=((5270236)|0);
HEAP32[((5248956)>>2)]=((5270084)|0);
HEAP32[((5248960)>>2)]=((5269908)|0);
HEAP32[((5248964)>>2)]=((5269756)|0);
HEAP32[((5248968)>>2)]=((5269464)|0);
HEAP32[((5248972)>>2)]=((5269300)|0);
HEAP32[((5248976)>>2)]=((5269216)|0);
HEAP32[((5248980)>>2)]=((5269112)|0);
HEAP32[((5248984)>>2)]=((5268988)|0);
HEAP32[((5248988)>>2)]=((5268880)|0);
HEAP32[((5248992)>>2)]=((5268724)|0);
HEAP32[((5248996)>>2)]=((5268580)|0);
HEAP32[((5249000)>>2)]=((5268520)|0);
HEAP32[((5249004)>>2)]=((5268468)|0);
HEAP32[((5249008)>>2)]=((5268396)|0);
HEAP32[((5249012)>>2)]=((5268248)|0);
HEAP32[((5249016)>>2)]=((5268128)|0);
HEAP32[((5249020)>>2)]=((5268036)|0);
HEAP32[((5249024)>>2)]=((5267960)|0);
HEAP32[((5249028)>>2)]=((5267856)|0);
HEAP32[((5249032)>>2)]=((5267772)|0);
HEAP32[((5249036)>>2)]=((5267664)|0);
HEAP32[((5249040)>>2)]=((5267600)|0);
HEAP32[((5249044)>>2)]=((5267536)|0);
HEAP32[((5249048)>>2)]=((5267488)|0);
HEAP32[((5249052)>>2)]=((5267344)|0);
HEAP32[((5249056)>>2)]=((5267284)|0);
HEAP32[((5249060)>>2)]=((5267192)|0);
HEAP32[((5249064)>>2)]=((5267128)|0);
HEAP32[((5249068)>>2)]=((5267084)|0);
HEAP32[((5249072)>>2)]=((5266996)|0);
HEAP32[((5249076)>>2)]=((5266896)|0);
HEAP32[((5249080)>>2)]=((5266800)|0);
HEAP32[((5249084)>>2)]=((5266716)|0);
HEAP32[((5249088)>>2)]=((5266608)|0);
HEAP32[((5249092)>>2)]=((5266464)|0);
HEAP32[((5249096)>>2)]=((5266388)|0);
HEAP32[((5249100)>>2)]=((5266320)|0);
HEAP32[((5249104)>>2)]=((5266248)|0);
HEAP32[((5249108)>>2)]=((5266136)|0);
HEAP32[((5249112)>>2)]=((5265980)|0);
HEAP32[((5249116)>>2)]=((5265888)|0);
HEAP32[((5249120)>>2)]=((5265828)|0);
HEAP32[((5249124)>>2)]=((5265748)|0);
HEAP32[((5249128)>>2)]=((5265564)|0);
HEAP32[((5249132)>>2)]=((5265532)|0);
HEAP32[((5249136)>>2)]=((5265468)|0);
HEAP32[((5249140)>>2)]=((5265404)|0);
HEAP32[((5249144)>>2)]=((5265336)|0);
HEAP32[((5249148)>>2)]=((5265288)|0);
HEAP32[((5249152)>>2)]=((5265116)|0);
HEAP32[((5249156)>>2)]=((5265032)|0);
HEAP32[((5249160)>>2)]=((5264936)|0);
HEAP32[((5249164)>>2)]=((5264840)|0);
HEAP32[((5249168)>>2)]=((5264760)|0);
HEAP32[((5249172)>>2)]=((5264600)|0);
HEAP32[((5249176)>>2)]=((5264560)|0);
HEAP32[((5249180)>>2)]=((5264504)|0);
HEAP32[((5249184)>>2)]=((5264436)|0);
HEAP32[((5249188)>>2)]=((5264332)|0);
HEAP32[((5249192)>>2)]=((5264228)|0);
HEAP32[((5249196)>>2)]=((5264144)|0);
HEAP32[((5249200)>>2)]=((5264104)|0);
HEAP32[((5249204)>>2)]=((5264036)|0);
HEAP32[((5249208)>>2)]=((5263952)|0);
HEAP32[((5249212)>>2)]=((5263808)|0);
HEAP32[((5249216)>>2)]=((5263736)|0);
HEAP32[((5249220)>>2)]=((5263672)|0);
HEAP32[((5249224)>>2)]=((5263604)|0);
HEAP32[((5249228)>>2)]=((5263504)|0);
HEAP32[((5249232)>>2)]=((5263384)|0);
HEAP32[((5249236)>>2)]=((5263268)|0);
HEAP32[((5249240)>>2)]=((5263224)|0);
HEAP32[((5249244)>>2)]=((5263144)|0);
HEAP32[((5249248)>>2)]=((5263104)|0);
HEAP32[((5249252)>>2)]=((5263028)|0);
HEAP32[((5249256)>>2)]=((5262940)|0);
HEAP32[((5249260)>>2)]=((5275644)|0);
HEAP32[((5249264)>>2)]=((5275588)|0);
HEAP32[((5249268)>>2)]=((5275528)|0);
HEAP32[((5249272)>>2)]=((5275372)|0);
HEAP32[((5249276)>>2)]=((5275232)|0);
HEAP32[((5249280)>>2)]=((5275152)|0);
HEAP32[((5249284)>>2)]=((5275100)|0);
HEAP32[((5249288)>>2)]=((5275048)|0);
HEAP32[((5249292)>>2)]=((5274904)|0);
HEAP32[((5249296)>>2)]=((5274808)|0);
HEAP32[((5249300)>>2)]=((5274724)|0);
HEAP32[((5249304)>>2)]=((5274640)|0);
HEAP32[((5249308)>>2)]=((5274532)|0);
HEAP32[((5249312)>>2)]=((5274292)|0);
HEAP32[((5249316)>>2)]=((5274252)|0);
HEAP32[((5249320)>>2)]=((5274112)|0);
HEAP32[((5249324)>>2)]=((5273968)|0);
HEAP32[((5249328)>>2)]=((5273892)|0);
HEAP32[((5249332)>>2)]=((5273704)|0);
HEAP32[((5249336)>>2)]=((5273656)|0);
HEAP32[((5249340)>>2)]=((5273588)|0);
HEAP32[((5249344)>>2)]=((5273460)|0);
HEAP32[((5249348)>>2)]=((5273336)|0);
HEAP32[((5249352)>>2)]=((5273208)|0);
HEAP32[((5276180)>>2)]=(380);
HEAP32[((5276184)>>2)]=(320);
HEAP32[((5276188)>>2)]=(34);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(8))>>2)]=(274);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(12))>>2)]=(388);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(16))>>2)]=(364);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(20))>>2)]=(96);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(24))>>2)]=(50);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(28))>>2)]=(194);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(32))>>2)]=(130);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(36))>>2)]=(188);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(8))>>2)]=(204);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(12))>>2)]=(324);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(16))>>2)]=(364);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(20))>>2)]=(96);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(24))>>2)]=(50);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(28))>>2)]=(12);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(32))>>2)]=(182);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(36))>>2)]=(128);
HEAP32[((5276340)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((5276344)>>2)]=((5276196)|0);
HEAP32[((5276348)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5276352)>>2)]=((5276212)|0);
HEAP32[((5276356)>>2)]=__ZTISt9exception;
HEAP32[((5276360)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5276364)>>2)]=((5276228)|0);
HEAP32[((5276372)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5276376)>>2)]=((5276268)|0);
HEAP32[((5276384)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((5276388)>>2)]=((5276304)|0);

  
   var _llvm_memset_p0i8_i32=_memset;

  
   var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  
  
  
   function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF32[(((varargs)+(argIndex))>>2)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == '%'.charCodeAt(0)) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case '+'.charCodeAt(0):
                flagAlwaysSigned = true;
                break;
              case '-'.charCodeAt(0):
                flagLeftAlign = true;
                break;
              case '#'.charCodeAt(0):
                flagAlternative = true;
                break;
              case '0'.charCodeAt(0):
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == '*'.charCodeAt(0)) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
              width = width * 10 + (next - '0'.charCodeAt(0));
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false;
          if (next == '.'.charCodeAt(0)) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == '*'.charCodeAt(0)) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < '0'.charCodeAt(0) ||
                    precisionChr > '9'.charCodeAt(0)) break;
                precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 'h'.charCodeAt(0)) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 'l'.charCodeAt(0)) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
            // Integer.
            var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
            argSize = argSize || 4;
            var currArg = getNextArg('i' + (argSize * 8));
            var argText;
            // Flatten i64-1 [low, high] into a (slightly rounded) double
            if (argSize == 8) {
              currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 'u'.charCodeAt(0));
            }
            // Truncate to requested size.
            if (argSize <= 4) {
              var limit = Math.pow(256, argSize) - 1;
              currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
            }
            // Format the number.
            var currAbsArg = Math.abs(currArg);
            var prefix = '';
            if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
              argText = reSign(currArg, 8 * argSize, 1).toString(10);
            } else if (next == 'u'.charCodeAt(0)) {
              argText = unSign(currArg, 8 * argSize, 1).toString(10);
              currArg = Math.abs(currArg);
            } else if (next == 'o'.charCodeAt(0)) {
              argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
            } else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
              prefix = flagAlternative ? '0x' : '';
              if (currArg < 0) {
                // Represent negative numbers in hex as 2's complement.
                currArg = -currArg;
                argText = (currAbsArg - 1).toString(16);
                var buffer = [];
                for (var i = 0; i < argText.length; i++) {
                  buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                }
                argText = buffer.join('');
                while (argText.length < argSize * 2) argText = 'f' + argText;
              } else {
                argText = currAbsArg.toString(16);
              }
              if (next == 'X'.charCodeAt(0)) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else if (next == 'p'.charCodeAt(0)) {
              if (currAbsArg === 0) {
                argText = '(nil)';
              } else {
                prefix = '0x';
                argText = currAbsArg.toString(16);
              }
            }
            if (precisionSet) {
              while (argText.length < precision) {
                argText = '0' + argText;
              }
            }
  
            // Add sign if needed
            if (flagAlwaysSigned) {
              if (currArg < 0) {
                prefix = '-' + prefix;
              } else {
                prefix = '+' + prefix;
              }
            }
  
            // Add padding.
            while (prefix.length + argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad) {
                  argText = '0' + argText;
                } else {
                  prefix = ' ' + prefix;
                }
              }
            }
  
            // Insert the result into the buffer.
            argText = prefix + argText;
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
            // Float.
            var currArg = getNextArg('double');
            var argText;
  
            if (isNaN(currArg)) {
              argText = 'nan';
              flagZeroPad = false;
            } else if (!isFinite(currArg)) {
              argText = (currArg < 0 ? '-' : '') + 'inf';
              flagZeroPad = false;
            } else {
              var isGeneral = false;
              var effectivePrecision = Math.min(precision, 20);
  
              // Convert g/G to f/F or e/E, as per:
              // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
              if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
                isGeneral = true;
                precision = precision || 1;
                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                if (precision > exponent && exponent >= -4) {
                  next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
                  precision -= exponent + 1;
                } else {
                  next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
                  precision--;
                }
                effectivePrecision = Math.min(precision, 20);
              }
  
              if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
                argText = currArg.toExponential(effectivePrecision);
                // Make sure the exponent has at least 2 digits.
                if (/[eE][-+]\d$/.test(argText)) {
                  argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                }
              } else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
                argText = currArg.toFixed(effectivePrecision);
              }
  
              var parts = argText.split('e');
              if (isGeneral && !flagAlternative) {
                // Discard trailing zeros and periods.
                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                       (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                  parts[0] = parts[0].slice(0, -1);
                }
              } else {
                // Make sure we have a period in alternative mode.
                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                // Zero pad until required precision.
                while (precision > effectivePrecision++) parts[0] += '0';
              }
              argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
              // Capitalize 'E' if needed.
              if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
  
              // Add sign.
              if (flagAlwaysSigned && currArg >= 0) {
                argText = '+' + argText;
              }
            }
  
            // Add padding.
            while (argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                  argText = argText[0] + '0' + argText.slice(1);
                } else {
                  argText = (flagZeroPad ? '0' : ' ') + argText;
                }
              }
            }
  
            // Adjust case.
            if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
  
            // Insert the result into the buffer.
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (next == 's'.charCodeAt(0)) {
            // String.
            var arg = getNextArg('i8*') || nullString;
            var argLength = _strlen(arg);
            if (precisionSet) argLength = Math.min(argLength, precision);
            if (!flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
            for (var i = 0; i < argLength; i++) {
              ret.push(HEAPU8[((arg++)|0)]);
            }
            if (flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
          } else if (next == 'c'.charCodeAt(0)) {
            // Character.
            if (flagLeftAlign) ret.push(getNextArg('i8'));
            while (--width > 0) {
              ret.push(' '.charCodeAt(0));
            }
            if (!flagLeftAlign) ret.push(getNextArg('i8'));
          } else if (next == 'n'.charCodeAt(0)) {
            // Write the length written so far to the next parameter.
            var ptr = getNextArg('i32*');
            HEAP32[((ptr)>>2)]=ret.length
          } else if (next == '%'.charCodeAt(0)) {
            // Literal percent sign.
            ret.push(curr);
          } else {
            // Unknown specifiers remain untouched.
            for (var i = startTextIndex; i < textIndex + 2; i++) {
              ret.push(HEAP8[(i)]);
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  
  
  
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
  
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }
  
  var _stdin=allocate(1, "i32*", ALLOC_STACK);
  
  var _stdout=allocate(1, "i32*", ALLOC_STACK);
  
  var _stderr=allocate(1, "i32*", ALLOC_STACK);
  
  var __impure_ptr=allocate(1, "i32*", ALLOC_STACK);var FS={currentPath:"/",nextInode:2,streams:[null],ignorePermissions:true,joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
  
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
  
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
  
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
  
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function(chunkSize, length) {
            this.length = length;
            this.chunkSize = chunkSize;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % chunkSize;
            var chunkNum = Math.floor(idx / chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
    
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
          if (!hasByteServing) chunkSize = datalength;
    
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
    
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
    
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
    
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
    
          var lazyArray = new LazyUint8Array(chunkSize, datalength);
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * lazyArray.chunkSize;
            var end = (chunkNum+1) * lazyArray.chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.ensureObjects();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureRoot();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
  
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === '\n'.charCodeAt(0)) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
  
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
  
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
  
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        assert(Math.max(_stdin, _stdout, _stderr) < 128); // make sure these are low, we flatten arrays with these
        HEAP32[((_stdin)>>2)]=1;
        HEAP32[((_stdout)>>2)]=2;
        HEAP32[((_stderr)>>2)]=3;
  
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
  
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_STATIC) ], 'void*', ALLOC_NONE, __impure_ptr);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output('\n'.charCodeAt(0));
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output('\n'.charCodeAt(0));
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[(((buf)+(i))|0)];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[(((buf)+(i))|0)]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }


  
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[((buf++)|0)]=stream.ungotten.pop()
          nbyte--;
          bytesRead++;
        }
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        if (contents.subarray || contents.slice) { // typed array or normal array
          for (var i = 0; i < size; i++) {
            HEAP8[(((buf)+(i))|0)]=contents[offset + i]
          }
        } else {
          for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
            HEAP8[(((buf)+(i))|0)]=contents.get(offset + i)
          }
        }
        bytesRead += size;
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            while (stream.ungotten.length && nbyte > 0) {
              HEAP8[((buf++)|0)]=stream.ungotten.pop()
              nbyte--;
              bytesRead++;
            }
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP8[(((buf)+(i))|0)]=result
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var ungotSize = stream.ungotten.length;
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          if (bytesRead != -1) {
            stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
          }
          return bytesRead;
        }
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) return 0;
      var bytesRead = _read(stream, ptr, bytesToRead);
      var streamObj = FS.streams[stream];
      if (bytesRead == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        if (bytesRead < bytesToRead) streamObj.eof = true;
        return Math.floor(bytesRead / size);
      }
    }

   


  var _floor=Math.floor;

  var _llvm_pow_f64=Math.pow;

  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }



  function _longjmp(env, value) {
      throw { longjmp: true, id: HEAP32[((env)>>2)], value: value || 1 };
    }

  
   var _llvm_memmove_p0i8_p0i8_i32=_memmove;

  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  
  
  var ___dirent_struct_layout={__size__:1040,d_ino:0,d_name:4,d_off:1028,d_reclen:1032,d_type:1036};function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      // NOTE: This implementation tries to mimic glibc rather than strictly
      // following the POSIX standard.
  
      var mode = HEAP32[((varargs)>>2)];
  
      // Simplify flags.
      var accessMode = oflag & 3;
      var isWrite = accessMode != 0;
      var isRead = accessMode != 1;
      var isCreate = Boolean(oflag & 512);
      var isExistCheck = Boolean(oflag & 2048);
      var isTruncate = Boolean(oflag & 1024);
      var isAppend = Boolean(oflag & 8);
  
      // Verify path.
      var origPath = path;
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists) {
        ___setErrNo(path.error);
        return -1;
      }
      var target = path.object || null;
      var finalPath;
  
      // Verify the file exists, create if needed and allowed.
      if (target) {
        if (isCreate && isExistCheck) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          return -1;
        }
        if ((isWrite || isCreate || isTruncate) && target.isFolder) {
          ___setErrNo(ERRNO_CODES.EISDIR);
          return -1;
        }
        if (isRead && !target.read || isWrite && !target.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        if (isTruncate && !target.isDevice) {
          target.contents = [];
        } else {
          if (!FS.forceLoadFile(target)) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
        }
        finalPath = path.path;
      } else {
        if (!isCreate) {
          ___setErrNo(ERRNO_CODES.ENOENT);
          return -1;
        }
        if (!path.parentObject.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        target = FS.createDataFile(path.parentObject, path.name, [],
                                   mode & 0x100, mode & 0x80);  // S_IRUSR, S_IWUSR.
        finalPath = path.parentPath + '/' + path.name;
      }
      // Actually create an open stream.
      var id = FS.streams.length; // Keep dense
      if (target.isFolder) {
        var entryBuffer = 0;
        if (___dirent_struct_layout) {
          entryBuffer = _malloc(___dirent_struct_layout.__size__);
        }
        var contents = [];
        for (var key in target.contents) contents.push(key);
        FS.streams[id] = {
          path: finalPath,
          object: target,
          // An index into contents. Special values: -2 is ".", -1 is "..".
          position: -2,
          isRead: true,
          isWrite: false,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: [],
          // Folder-specific properties:
          // Remember the contents at the time of opening in an array, so we can
          // seek between them relying on a single order.
          contents: contents,
          // Each stream has its own area for readdir() returns.
          currentEntry: entryBuffer
        };
      } else {
        FS.streams[id] = {
          path: finalPath,
          object: target,
          position: 0,
          isRead: isRead,
          isWrite: isWrite,
          isAppend: isAppend,
          error: false,
          eof: false,
          ungotten: []
        };
      }
      return id;
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 1024;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 8;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      if (FS.streams[fildes]) {
        if (FS.streams[fildes].currentEntry) {
          _free(FS.streams[fildes].currentEntry);
        }
        FS.streams[fildes] = null;
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      if (FS.streams[fildes]) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }

  function _llvm_umul_with_overflow_i32(x, y) {
      x = x>>>0;
      y = y>>>0;
      return (asm.setTempRet0(x*y > 4294967295),(x*y)>>>0);
    }

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      if (FS.streams[stream]) {
        stream = FS.streams[stream];
        if (stream.object.isDevice) {
          ___setErrNo(ERRNO_CODES.ESPIPE);
          return -1;
        } else {
          return stream.position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }

  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      if (FS.streams[fildes] && !FS.streams[fildes].object.isDevice) {
        var stream = FS.streams[fildes];
        var position = offset;
        if (whence === 1) {  // SEEK_CUR.
          position += stream.position;
        } else if (whence === 2) {  // SEEK_END.
          position += stream.object.contents.length;
        }
        if (position < 0) {
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        } else {
          stream.ungotten = [];
          stream.position = position;
          return position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      } else {
        FS.streams[stream].eof = false;
        return 0;
      }
    }

  function ___gxx_personality_v0() {
    }

  function _strstr(ptr1, ptr2) {
      var check = 0, start;
      do {
        if (!check) {
          start = ptr1;
          check = ptr2;
        }
        var curr1 = HEAP8[((ptr1++)|0)];
        var curr2 = HEAP8[((check++)|0)];
        if (curr2 == 0) return start;
        if (curr2 != curr1) {
          // rewind to one character after start, to find ez in eeez
          ptr1 = start + 1;
          check = 0;
        }
      } while (curr1);
      return 0;
    }

  var _llvm_memset_p0i8_i64=_memset;

  function __ZNSt9exceptionD2Ev(){}

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }

  
  function ___errno_location() {
      return ___setErrNo.ret;
    }var ___errno=___errno_location;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
  
      // We need to make sure no one else allocates unfreeable memory!
      // We must control this entirely. So we don't even need to do
      // unfreeable allocations - the HEAP is ours, from STATICTOP up.
      // TODO: We could in theory slice off the top of the HEAP when
      //       sbrk gets a negative increment in |bytes|...
      var self = _sbrk;
      if (!self.called) {
        STATICTOP = alignMemoryPage(STATICTOP); // make sure we start out aligned
        self.called = true;
        _sbrk.DYNAMIC_START = STATICTOP;
      }
      var ret = STATICTOP;
      if (bytes != 0) Runtime.staticAlloc(bytes);
      return ret;  // Previous break location.
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function _llvm_eh_exception() {
      return HEAP32[((_llvm_eh_exception.buf)>>2)];
    }
  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }function ___cxa_find_matching_catch(thrown, throwntype, typeArray) {
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return (asm.setTempRet0(typeArray[i]),thrown);
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return (asm.setTempRet0(throwntype),thrown);
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=type
      HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=destructor
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";;
    }

  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }

  function _llvm_bswap_i32(x) {
      return ((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24);
    }

  function _llvm_lifetime_start() {}

  function _llvm_lifetime_end() {}

  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return -1;
      } else {
        return chr;
      }
    }

  
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc('\n'.charCodeAt(0), stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }





  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],ensureObjects:function () {
        if (Browser.ensured) return;
        Browser.ensured = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(-3)];
          return ret;
        }
  
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/.exec(name);
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        //Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            setTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        //Module['preloadPlugins'].push(audioPlugin);
      },createContext:function (canvas, useWebGL, setInModule) {
        var ctx;
        try {
          if (useWebGL) {
            ctx = canvas.getContext('experimental-webgl', {
              alpha: false,
            });
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},requestFullScreen:function () {
        var canvas = Module['canvas'];
        function fullScreenChange() {
          var isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                        canvas['mozRequestPointerLock'] ||
                                        canvas['webkitRequestPointerLock'];
            canvas.requestPointerLock();
            isFullScreen = true;
          }
          if (Module['onFullScreen']) Module['onFullScreen'](isFullScreen);
        }
  
        document.addEventListener('fullscreenchange', fullScreenChange, false);
        document.addEventListener('mozfullscreenchange', fullScreenChange, false);
        document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200) {
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      }};
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___setErrNo(0);
_llvm_eh_exception.buf = allocate(12, "void*", ALLOC_STATIC);
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function() { Browser.requestFullScreen() };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  

var Runtime_bitshift64 = Runtime.bitshift64;
var Math_min = Math.min;
function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
var asm = (function(global, env, buffer) {
  'use asm';
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var __ZTVN10__cxxabiv120__si_class_type_infoE=env.__ZTVN10__cxxabiv120__si_class_type_infoE|0;
  var _stderr=env._stderr|0;
  var __ZTVN10__cxxabiv117__class_type_infoE=env.__ZTVN10__cxxabiv117__class_type_infoE|0;
  var __ZTISt9exception=env.__ZTISt9exception|0;
  var NaN=+env.NaN;
  var Infinity=+env.Infinity;

  var __THREW__ = 0;
  var undef = 0;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var copyTempDouble=env.copyTempDouble;
  var copyTempFloat=env.copyTempFloat;
  var Runtime_bitshift64=env.Runtime_bitshift64;
  var Math_min=env.min;
  var _llvm_lifetime_end=env._llvm_lifetime_end;
  var _lseek=env._lseek;
  var ___cxa_call_unexpected=env.___cxa_call_unexpected;
  var _snprintf=env._snprintf;
  var ___cxa_throw=env.___cxa_throw;
  var _fread=env._fread;
  var _fclose=env._fclose;
  var _abort=env._abort;
  var _fprintf=env._fprintf;
  var _printf=env._printf;
  var _close=env._close;
  var _fopen=env._fopen;
  var _pread=env._pread;
  var _fputc=env._fputc;
  var _puts=env._puts;
  var _sysconf=env._sysconf;
  var _open=env._open;
  var _floor=env._floor;
  var ___setErrNo=env.___setErrNo;
  var _fwrite=env._fwrite;
  var _fseek=env._fseek;
  var _llvm_eh_exception=env._llvm_eh_exception;
  var _write=env._write;
  var _fputs=env._fputs;
  var _ftell=env._ftell;
  var _llvm_umul_with_overflow_i32=env._llvm_umul_with_overflow_i32;
  var _sprintf=env._sprintf;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _longjmp=env._longjmp;
  var _read=env._read;
  var ___cxa_is_number_type=env.___cxa_is_number_type;
  var __formatString=env.__formatString;
  var ___cxa_does_inherit=env.___cxa_does_inherit;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _pwrite=env._pwrite;
  var _strstr=env._strstr;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _fsync=env._fsync;
  var ___errno_location=env.___errno_location;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var __ZNSt9exceptionD2Ev=env.__ZNSt9exceptionD2Ev;
  var _llvm_bswap_i32=env._llvm_bswap_i32;
  var _sbrk=env._sbrk;
  var _time=env._time;
  var _llvm_lifetime_start=env._llvm_lifetime_start;

  function stackAlloc(size) {
    size = size|0;
    var ret = 0;
    ret = STACKTOP;
    STACKTOP = (STACKTOP + size)|0;
    STACKTOP = ((STACKTOP + 3)>>2)<<2;
    return ret|0;
  }
  function stackSave() {
    return STACKTOP|0;
  }
  function stackRestore(top) {
    top = top|0;
    STACKTOP = top;
  }
  function setThrew(threw) {
    threw = threw|0;
    __THREW__ = threw;
  }

  function setTempRet0(value) {
    value = value|0;
    tempRet0 = value;
  }

  function setTempRet1(value) {
    value = value|0;
    tempRet1 = value;
  }

  function setTempRet2(value) {
    value = value|0;
    tempRet2 = value;
  }

  function setTempRet3(value) {
    value = value|0;
    tempRet3 = value;
  }

  function setTempRet4(value) {
    value = value|0;
    tempRet4 = value;
  }

  function setTempRet5(value) {
    value = value|0;
    tempRet5 = value;
  }

  function setTempRet6(value) {
    value = value|0;
    tempRet6 = value;
  }

  function setTempRet7(value) {
    value = value|0;
    tempRet7 = value;
  }

  function setTempRet8(value) {
    value = value|0;
    tempRet8 = value;
  }

  function setTempRet9(value) {
    value = value|0;
    tempRet9 = value;
  }

function _adler32(i1, i2, i3) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0;
  i4 = i1 >>> 16;
  i5 = i1 & 65535;
  if ((i3 | 0) == 1) {
    i1 = (HEAPU8[i2] | 0) + i5 | 0;
    i6 = i1 >>> 0 > 65520 ? i1 - 65521 | 0 : i1;
    i1 = i6 + i4 | 0;
    i7 = (i1 >>> 0 > 65520 ? i1 + 15 | 0 : i1) << 16 | i6;
    return i7 | 0;
  }
  if ((i2 | 0) == 0) {
    i7 = 1;
    return i7 | 0;
  }
  if (i3 >>> 0 < 16) {
    L10 : do {
      if ((i3 | 0) == 0) {
        i8 = i5;
        i9 = i4;
      } else {
        i6 = i5;
        i1 = i2;
        i10 = i3;
        i11 = i4;
        while (1) {
          i12 = i10 - 1 | 0;
          i13 = (HEAPU8[i1] | 0) + i6 | 0;
          i14 = i13 + i11 | 0;
          if ((i12 | 0) == 0) {
            i8 = i13;
            i9 = i14;
            break L10;
          } else {
            i6 = i13;
            i1 = i1 + 1 | 0;
            i10 = i12;
            i11 = i14;
          }
        }
      }
    } while (0);
    i7 = (i9 >>> 0) % 65521 << 16 | (i8 >>> 0 > 65520 ? i8 - 65521 | 0 : i8);
    return i7 | 0;
  }
  do {
    if (i3 >>> 0 > 5551) {
      i8 = i5;
      i9 = i2;
      i11 = i3;
      i10 = i4;
      while (1) {
        i15 = i11 - 5552 | 0;
        i1 = 347;
        i6 = i10;
        i14 = i9;
        i12 = i8;
        while (1) {
          i13 = (HEAPU8[i14] | 0) + i12 | 0;
          i16 = i13 + (HEAPU8[i14 + 1 | 0] | 0) | 0;
          i17 = i16 + (HEAPU8[i14 + 2 | 0] | 0) | 0;
          i18 = i17 + (HEAPU8[i14 + 3 | 0] | 0) | 0;
          i19 = i18 + (HEAPU8[i14 + 4 | 0] | 0) | 0;
          i20 = i19 + (HEAPU8[i14 + 5 | 0] | 0) | 0;
          i21 = i20 + (HEAPU8[i14 + 6 | 0] | 0) | 0;
          i22 = i21 + (HEAPU8[i14 + 7 | 0] | 0) | 0;
          i23 = i22 + (HEAPU8[i14 + 8 | 0] | 0) | 0;
          i24 = i23 + (HEAPU8[i14 + 9 | 0] | 0) | 0;
          i25 = i24 + (HEAPU8[i14 + 10 | 0] | 0) | 0;
          i26 = i25 + (HEAPU8[i14 + 11 | 0] | 0) | 0;
          i27 = i26 + (HEAPU8[i14 + 12 | 0] | 0) | 0;
          i28 = i27 + (HEAPU8[i14 + 13 | 0] | 0) | 0;
          i29 = i28 + (HEAPU8[i14 + 14 | 0] | 0) | 0;
          i30 = i29 + (HEAPU8[i14 + 15 | 0] | 0) | 0;
          i31 = (((((((((((((((i13 + i6 | 0) + i16 | 0) + i17 | 0) + i18 | 0) + i19 | 0) + i20 | 0) + i21 | 0) + i22 | 0) + i23 | 0) + i24 | 0) + i25 | 0) + i26 | 0) + i27 | 0) + i28 | 0) + i29 | 0) + i30 | 0;
          i29 = i1 - 1 | 0;
          if ((i29 | 0) == 0) {
            break;
          } else {
            i1 = i29;
            i6 = i31;
            i14 = i14 + 16 | 0;
            i12 = i30;
          }
        }
        i32 = i9 + 5552 | 0;
        i33 = (i30 >>> 0) % 65521;
        i34 = (i31 >>> 0) % 65521;
        if (i15 >>> 0 > 5551) {
          i8 = i33;
          i9 = i32;
          i11 = i15;
          i10 = i34;
        } else {
          break;
        }
      }
      if ((i15 | 0) == 0) {
        i35 = i34;
        i36 = i33;
        break;
      }
      if (i15 >>> 0 > 15) {
        i37 = i33;
        i38 = i32;
        i39 = i15;
        i40 = i34;
        i41 = 15;
        break;
      } else {
        i42 = i33;
        i43 = i32;
        i44 = i15;
        i45 = i34;
        i41 = 16;
        break;
      }
    } else {
      i37 = i5;
      i38 = i2;
      i39 = i3;
      i40 = i4;
      i41 = 15;
    }
  } while (0);
  do {
    if ((i41 | 0) == 15) {
      while (1) {
        i41 = 0;
        i46 = i39 - 16 | 0;
        i4 = (HEAPU8[i38] | 0) + i37 | 0;
        i3 = i4 + (HEAPU8[i38 + 1 | 0] | 0) | 0;
        i2 = i3 + (HEAPU8[i38 + 2 | 0] | 0) | 0;
        i5 = i2 + (HEAPU8[i38 + 3 | 0] | 0) | 0;
        i34 = i5 + (HEAPU8[i38 + 4 | 0] | 0) | 0;
        i15 = i34 + (HEAPU8[i38 + 5 | 0] | 0) | 0;
        i32 = i15 + (HEAPU8[i38 + 6 | 0] | 0) | 0;
        i33 = i32 + (HEAPU8[i38 + 7 | 0] | 0) | 0;
        i31 = i33 + (HEAPU8[i38 + 8 | 0] | 0) | 0;
        i30 = i31 + (HEAPU8[i38 + 9 | 0] | 0) | 0;
        i10 = i30 + (HEAPU8[i38 + 10 | 0] | 0) | 0;
        i11 = i10 + (HEAPU8[i38 + 11 | 0] | 0) | 0;
        i9 = i11 + (HEAPU8[i38 + 12 | 0] | 0) | 0;
        i8 = i9 + (HEAPU8[i38 + 13 | 0] | 0) | 0;
        i12 = i8 + (HEAPU8[i38 + 14 | 0] | 0) | 0;
        i47 = i12 + (HEAPU8[i38 + 15 | 0] | 0) | 0;
        i48 = (((((((((((((((i4 + i40 | 0) + i3 | 0) + i2 | 0) + i5 | 0) + i34 | 0) + i15 | 0) + i32 | 0) + i33 | 0) + i31 | 0) + i30 | 0) + i10 | 0) + i11 | 0) + i9 | 0) + i8 | 0) + i12 | 0) + i47 | 0;
        i49 = i38 + 16 | 0;
        if (i46 >>> 0 > 15) {
          i37 = i47;
          i38 = i49;
          i39 = i46;
          i40 = i48;
          i41 = 15;
        } else {
          break;
        }
      }
      if ((i46 | 0) == 0) {
        i50 = i47;
        i51 = i48;
        i41 = 17;
        break;
      } else {
        i42 = i47;
        i43 = i49;
        i44 = i46;
        i45 = i48;
        i41 = 16;
        break;
      }
    }
  } while (0);
  L28 : do {
    if ((i41 | 0) == 16) {
      while (1) {
        i41 = 0;
        i48 = i44 - 1 | 0;
        i46 = (HEAPU8[i43] | 0) + i42 | 0;
        i49 = i46 + i45 | 0;
        if ((i48 | 0) == 0) {
          i50 = i46;
          i51 = i49;
          i41 = 17;
          break L28;
        } else {
          i42 = i46;
          i43 = i43 + 1 | 0;
          i44 = i48;
          i45 = i49;
          i41 = 16;
        }
      }
    }
  } while (0);
  if ((i41 | 0) == 17) {
    i35 = (i51 >>> 0) % 65521;
    i36 = (i50 >>> 0) % 65521;
  }
  i7 = i35 << 16 | i36;
  return i7 | 0;
}
function _crc32(i1, i2, i3) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
  if ((i2 | 0) == 0) {
    i4 = 0;
    return i4 | 0;
  }
  i5 = i1 ^ -1;
  L39 : do {
    if ((i3 | 0) == 0) {
      i6 = i5;
    } else {
      i1 = i2;
      i7 = i3;
      i8 = i5;
      while (1) {
        if ((i1 & 3 | 0) == 0) {
          break;
        }
        i9 = HEAP32[5252556 + (((HEAPU8[i1] | 0) ^ i8 & 255) << 2) >> 2] ^ i8 >>> 8;
        i10 = i7 - 1 | 0;
        if ((i10 | 0) == 0) {
          i6 = i9;
          break L39;
        } else {
          i1 = i1 + 1 | 0;
          i7 = i10;
          i8 = i9;
        }
      }
      i9 = i1;
      L44 : do {
        if (i7 >>> 0 > 31) {
          i10 = i7;
          i11 = i8;
          i12 = i9;
          while (1) {
            i13 = HEAP32[i12 >> 2] ^ i11;
            i14 = HEAP32[5254604 + ((i13 >>> 8 & 255) << 2) >> 2] ^ HEAP32[5255628 + ((i13 & 255) << 2) >> 2] ^ HEAP32[5253580 + ((i13 >>> 16 & 255) << 2) >> 2] ^ HEAP32[5252556 + (i13 >>> 24 << 2) >> 2] ^ HEAP32[i12 + 4 >> 2];
            i13 = HEAP32[5254604 + ((i14 >>> 8 & 255) << 2) >> 2] ^ HEAP32[5255628 + ((i14 & 255) << 2) >> 2] ^ HEAP32[5253580 + ((i14 >>> 16 & 255) << 2) >> 2] ^ HEAP32[5252556 + (i14 >>> 24 << 2) >> 2] ^ HEAP32[i12 + 8 >> 2];
            i14 = HEAP32[5254604 + ((i13 >>> 8 & 255) << 2) >> 2] ^ HEAP32[5255628 + ((i13 & 255) << 2) >> 2] ^ HEAP32[5253580 + ((i13 >>> 16 & 255) << 2) >> 2] ^ HEAP32[5252556 + (i13 >>> 24 << 2) >> 2] ^ HEAP32[i12 + 12 >> 2];
            i13 = HEAP32[5254604 + ((i14 >>> 8 & 255) << 2) >> 2] ^ HEAP32[5255628 + ((i14 & 255) << 2) >> 2] ^ HEAP32[5253580 + ((i14 >>> 16 & 255) << 2) >> 2] ^ HEAP32[5252556 + (i14 >>> 24 << 2) >> 2] ^ HEAP32[i12 + 16 >> 2];
            i14 = HEAP32[5254604 + ((i13 >>> 8 & 255) << 2) >> 2] ^ HEAP32[5255628 + ((i13 & 255) << 2) >> 2] ^ HEAP32[5253580 + ((i13 >>> 16 & 255) << 2) >> 2] ^ HEAP32[5252556 + (i13 >>> 24 << 2) >> 2] ^ HEAP32[i12 + 20 >> 2];
            i13 = HEAP32[5254604 + ((i14 >>> 8 & 255) << 2) >> 2] ^ HEAP32[5255628 + ((i14 & 255) << 2) >> 2] ^ HEAP32[5253580 + ((i14 >>> 16 & 255) << 2) >> 2] ^ HEAP32[5252556 + (i14 >>> 24 << 2) >> 2] ^ HEAP32[i12 + 24 >> 2];
            i14 = i12 + 32 | 0;
            i15 = HEAP32[5254604 + ((i13 >>> 8 & 255) << 2) >> 2] ^ HEAP32[5255628 + ((i13 & 255) << 2) >> 2] ^ HEAP32[5253580 + ((i13 >>> 16 & 255) << 2) >> 2] ^ HEAP32[5252556 + (i13 >>> 24 << 2) >> 2] ^ HEAP32[i12 + 28 >> 2];
            i13 = HEAP32[5254604 + ((i15 >>> 8 & 255) << 2) >> 2] ^ HEAP32[5255628 + ((i15 & 255) << 2) >> 2] ^ HEAP32[5253580 + ((i15 >>> 16 & 255) << 2) >> 2] ^ HEAP32[5252556 + (i15 >>> 24 << 2) >> 2];
            i15 = i10 - 32 | 0;
            if (i15 >>> 0 > 31) {
              i10 = i15;
              i11 = i13;
              i12 = i14;
            } else {
              i16 = i15;
              i17 = i13;
              i18 = i14;
              break L44;
            }
          }
        } else {
          i16 = i7;
          i17 = i8;
          i18 = i9;
        }
      } while (0);
      L48 : do {
        if (i16 >>> 0 > 3) {
          i9 = i16;
          i8 = i17;
          i7 = i18;
          while (1) {
            i1 = i7 + 4 | 0;
            i12 = HEAP32[i7 >> 2] ^ i8;
            i11 = HEAP32[5254604 + ((i12 >>> 8 & 255) << 2) >> 2] ^ HEAP32[5255628 + ((i12 & 255) << 2) >> 2] ^ HEAP32[5253580 + ((i12 >>> 16 & 255) << 2) >> 2] ^ HEAP32[5252556 + (i12 >>> 24 << 2) >> 2];
            i12 = i9 - 4 | 0;
            if (i12 >>> 0 > 3) {
              i9 = i12;
              i8 = i11;
              i7 = i1;
            } else {
              i19 = i12;
              i20 = i11;
              i21 = i1;
              break L48;
            }
          }
        } else {
          i19 = i16;
          i20 = i17;
          i21 = i18;
        }
      } while (0);
      if ((i19 | 0) == 0) {
        i6 = i20;
        break;
      }
      i7 = i20;
      i8 = i19;
      i9 = i21;
      while (1) {
        i1 = HEAP32[5252556 + (((HEAPU8[i9] | 0) ^ i7 & 255) << 2) >> 2] ^ i7 >>> 8;
        i11 = i8 - 1 | 0;
        if ((i11 | 0) == 0) {
          i6 = i1;
          break L39;
        } else {
          i7 = i1;
          i8 = i11;
          i9 = i9 + 1 | 0;
        }
      }
    }
  } while (0);
  i4 = i6 ^ -1;
  return i4 | 0;
}
function _inflate(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, i150 = 0, i151 = 0, i152 = 0, i153 = 0, i154 = 0, i155 = 0, i156 = 0, i157 = 0, i158 = 0, i159 = 0, i160 = 0, i161 = 0, i162 = 0, i163 = 0, i164 = 0, i165 = 0, i166 = 0, i167 = 0, i168 = 0, i169 = 0, i170 = 0, i171 = 0, i172 = 0, i173 = 0, i174 = 0, i175 = 0, i176 = 0, i177 = 0, i178 = 0, i179 = 0, i180 = 0, i181 = 0, i182 = 0, i183 = 0, i184 = 0, i185 = 0, i186 = 0, i187 = 0, i188 = 0, i189 = 0, i190 = 0, i191 = 0, i192 = 0, i193 = 0, i194 = 0, i195 = 0, i196 = 0, i197 = 0, i198 = 0, i199 = 0, i200 = 0, i201 = 0, i202 = 0, i203 = 0, i204 = 0, i205 = 0, i206 = 0, i207 = 0, i208 = 0, i209 = 0, i210 = 0, i211 = 0, i212 = 0, i213 = 0, i214 = 0, i215 = 0, i216 = 0, i217 = 0, i218 = 0, i219 = 0, i220 = 0, i221 = 0, i222 = 0, i223 = 0, i224 = 0, i225 = 0, i226 = 0, i227 = 0, i228 = 0, i229 = 0, i230 = 0, i231 = 0, i232 = 0, i233 = 0, i234 = 0, i235 = 0, i236 = 0, i237 = 0, i238 = 0, i239 = 0, i240 = 0, i241 = 0, i242 = 0, i243 = 0, i244 = 0, i245 = 0, i246 = 0, i247 = 0, i248 = 0, i249 = 0, i250 = 0, i251 = 0, i252 = 0, i253 = 0, i254 = 0, i255 = 0, i256 = 0, i257 = 0, i258 = 0, i259 = 0, i260 = 0, i261 = 0, i262 = 0, i263 = 0, i264 = 0, i265 = 0, i266 = 0, i267 = 0, i268 = 0, i269 = 0, i270 = 0, i271 = 0, i272 = 0, i273 = 0, i274 = 0, i275 = 0, i276 = 0, i277 = 0, i278 = 0, i279 = 0, i280 = 0, i281 = 0, i282 = 0, i283 = 0, i284 = 0, i285 = 0, i286 = 0, i287 = 0, i288 = 0, i289 = 0, i290 = 0, i291 = 0, i292 = 0, i293 = 0, i294 = 0, i295 = 0, i296 = 0, i297 = 0, i298 = 0, i299 = 0, i300 = 0, i301 = 0, i302 = 0, i303 = 0, i304 = 0, i305 = 0, i306 = 0, i307 = 0, i308 = 0, i309 = 0, i310 = 0, i311 = 0, i312 = 0, i313 = 0, i314 = 0, i315 = 0, i316 = 0, i317 = 0, i318 = 0, i319 = 0, i320 = 0, i321 = 0, i322 = 0, i323 = 0, i324 = 0, i325 = 0, i326 = 0, i327 = 0, i328 = 0, i329 = 0, i330 = 0, i331 = 0, i332 = 0, i333 = 0, i334 = 0, i335 = 0, i336 = 0, i337 = 0, i338 = 0, i339 = 0, i340 = 0, i341 = 0, i342 = 0, i343 = 0, i344 = 0, i345 = 0, i346 = 0, i347 = 0, i348 = 0, i349 = 0, i350 = 0, i351 = 0, i352 = 0, i353 = 0, i354 = 0, i355 = 0, i356 = 0, i357 = 0, i358 = 0, i359 = 0, i360 = 0, i361 = 0, i362 = 0, i363 = 0, i364 = 0, i365 = 0, i366 = 0, i367 = 0, i368 = 0, i369 = 0, i370 = 0, i371 = 0, i372 = 0, i373 = 0, i374 = 0, i375 = 0, i376 = 0, i377 = 0, i378 = 0, i379 = 0, i380 = 0, i381 = 0, i382 = 0, i383 = 0, i384 = 0, i385 = 0, i386 = 0, i387 = 0, i388 = 0, i389 = 0, i390 = 0, i391 = 0, i392 = 0, i393 = 0, i394 = 0, i395 = 0, i396 = 0, i397 = 0, i398 = 0, i399 = 0, i400 = 0, i401 = 0, i402 = 0, i403 = 0, i404 = 0, i405 = 0, i406 = 0, i407 = 0, i408 = 0, i409 = 0, i410 = 0, i411 = 0, i412 = 0, i413 = 0, i414 = 0, i415 = 0, i416 = 0, i417 = 0, i418 = 0, i419 = 0, i420 = 0, i421 = 0, i422 = 0, i423 = 0, i424 = 0, i425 = 0, i426 = 0, i427 = 0, i428 = 0, i429 = 0, i430 = 0, i431 = 0, i432 = 0, i433 = 0, i434 = 0, i435 = 0, i436 = 0, i437 = 0, i438 = 0, i439 = 0, i440 = 0, i441 = 0, i442 = 0, i443 = 0, i444 = 0, i445 = 0, i446 = 0, i447 = 0, i448 = 0, i449 = 0, i450 = 0, i451 = 0, i452 = 0, i453 = 0, i454 = 0, i455 = 0, i456 = 0, i457 = 0, i458 = 0, i459 = 0, i460 = 0, i461 = 0, i462 = 0, i463 = 0, i464 = 0, i465 = 0, i466 = 0, i467 = 0, i468 = 0, i469 = 0, i470 = 0, i471 = 0, i472 = 0, i473 = 0;
  i3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  i4 = i3 | 0;
  if ((i1 | 0) == 0) {
    i5 = -2;
    STACKTOP = i3;
    return i5 | 0;
  }
  i6 = i1 + 28 | 0;
  i7 = HEAP32[i6 >> 2] | 0;
  if ((i7 | 0) == 0) {
    i5 = -2;
    STACKTOP = i3;
    return i5 | 0;
  }
  i8 = i1 + 12 | 0;
  i9 = HEAP32[i8 >> 2] | 0;
  if ((i9 | 0) == 0) {
    i5 = -2;
    STACKTOP = i3;
    return i5 | 0;
  }
  i10 = i1 | 0;
  i11 = HEAP32[i10 >> 2] | 0;
  do {
    if ((i11 | 0) == 0) {
      if ((HEAP32[i1 + 4 >> 2] | 0) == 0) {
        break;
      } else {
        i5 = -2;
      }
      STACKTOP = i3;
      return i5 | 0;
    }
  } while (0);
  i12 = i7 | 0;
  i13 = HEAP32[i12 >> 2] | 0;
  if ((i13 | 0) == 11) {
    HEAP32[i12 >> 2] = 12;
    i14 = HEAP32[i8 >> 2] | 0;
    i15 = HEAP32[i10 >> 2] | 0;
    i16 = 12;
  } else {
    i14 = i9;
    i15 = i11;
    i16 = i13;
  }
  i13 = i1 + 16 | 0;
  i11 = HEAP32[i13 >> 2] | 0;
  i9 = i1 + 4 | 0;
  i17 = HEAP32[i9 >> 2] | 0;
  i18 = i7 + 56 | 0;
  i19 = i7 + 60 | 0;
  i20 = i7 + 8 | 0;
  i21 = i7 + 24 | 0;
  i22 = i4 | 0;
  i23 = i4 + 1 | 0;
  i24 = i7 + 16 | 0;
  i25 = i7 + 32 | 0;
  i26 = i1 + 24 | 0;
  i27 = i7 + 36 | 0;
  i28 = i7 + 20 | 0;
  i29 = i1 + 48 | 0;
  i30 = i7 + 64 | 0;
  i31 = i7 + 12 | 0;
  i32 = (i2 - 5 | 0) >>> 0 < 2;
  i33 = i7 + 4 | 0;
  i34 = i7 + 76 | 0;
  i35 = i7 + 84 | 0;
  i36 = i7 + 80 | 0;
  i37 = i7 + 88 | 0;
  i38 = (i2 | 0) == 6;
  i39 = i7 + 7108 | 0;
  i40 = i7 + 76 | 0;
  i41 = i7 + 72 | 0;
  i42 = i7 + 7112 | 0;
  i43 = i7 + 68 | 0;
  i44 = i7 + 44 | 0;
  i45 = i7 + 7104 | 0;
  i46 = i7 + 48 | 0;
  i47 = i7 + 52 | 0;
  i48 = i7 + 40 | 0;
  i49 = i1 + 20 | 0;
  i50 = i7 + 28 | 0;
  i51 = i7 + 96 | 0;
  i52 = i7 + 100 | 0;
  i53 = i7 + 92 | 0;
  i54 = i7 + 104 | 0;
  i55 = i7 + 108 | 0;
  i56 = i55;
  i57 = i55 | 0;
  i55 = i7 + 1328 | 0;
  i58 = i7 + 112 | 0;
  i59 = i58;
  i60 = i7 + 752 | 0;
  i61 = i58;
  i58 = i7 + 624 | 0;
  i62 = i7 + 80 | 0;
  i7 = i4 + 2 | 0;
  i63 = i4 + 3 | 0;
  i4 = 0;
  i64 = i11;
  i65 = HEAP32[i19 >> 2] | 0;
  i66 = HEAP32[i18 >> 2] | 0;
  i67 = i11;
  i11 = i17;
  i68 = i14;
  i14 = i15;
  i15 = i16;
  L74 : while (1) {
    L76 : do {
      if ((i15 | 0) == 2) {
        if (i65 >>> 0 < 32) {
          i69 = i14;
          i70 = i11;
          i71 = i66;
          i72 = i65;
          i73 = 86;
          break;
        } else {
          i74 = i14;
          i75 = i11;
          i76 = i66;
          i73 = 88;
          break;
        }
      } else if ((i15 | 0) == 3) {
        if (i65 >>> 0 < 16) {
          i77 = i14;
          i78 = i11;
          i79 = i66;
          i80 = i65;
          i73 = 94;
          break;
        } else {
          i81 = i14;
          i82 = i11;
          i83 = i66;
          i73 = 96;
          break;
        }
      } else if ((i15 | 0) == 4) {
        i84 = i65;
        i85 = i66;
        i86 = i11;
        i87 = i14;
        i73 = 101;
      } else if ((i15 | 0) == 6) {
        i88 = i65;
        i89 = i66;
        i90 = i11;
        i91 = i14;
        i92 = HEAP32[i24 >> 2] | 0;
        i73 = 122;
        break;
      } else if ((i15 | 0) == 21) {
        i93 = i4;
        i94 = i65;
        i95 = i66;
        i96 = i11;
        i97 = i14;
        i98 = HEAP32[i41 >> 2] | 0;
        i73 = 318;
        break;
      } else if ((i15 | 0) == 23) {
        i99 = i4;
        i100 = i65;
        i101 = i66;
        i102 = i11;
        i103 = i14;
        i104 = HEAP32[i41 >> 2] | 0;
        i73 = 337;
        break;
      } else if ((i15 | 0) == 18) {
        i105 = i4;
        i106 = i65;
        i107 = i66;
        i108 = i11;
        i109 = i14;
        i110 = HEAP32[i54 >> 2] | 0;
        i73 = 202;
        break;
      } else if ((i15 | 0) == 1) {
        L84 : do {
          if (i65 >>> 0 < 16) {
            i16 = i14;
            i111 = i11;
            i112 = i66;
            i113 = i65;
            while (1) {
              if ((i111 | 0) == 0) {
                i114 = i4;
                i115 = i64;
                i116 = i113;
                i117 = i112;
                i118 = 0;
                i119 = i16;
                i120 = i67;
                break L74;
              }
              i121 = i111 - 1 | 0;
              i122 = i16 + 1 | 0;
              i123 = ((HEAPU8[i16] | 0) << i113) + i112 | 0;
              i124 = i113 + 8 | 0;
              if (i124 >>> 0 < 16) {
                i16 = i122;
                i111 = i121;
                i112 = i123;
                i113 = i124;
              } else {
                i125 = i122;
                i126 = i121;
                i127 = i123;
                i128 = i124;
                break L84;
              }
            }
          } else {
            i125 = i14;
            i126 = i11;
            i127 = i66;
            i128 = i65;
          }
        } while (0);
        HEAP32[i24 >> 2] = i127;
        if ((i127 & 255 | 0) != 8) {
          HEAP32[i26 >> 2] = 5270436;
          HEAP32[i12 >> 2] = 29;
          i129 = i4;
          i130 = i64;
          i131 = i128;
          i132 = i127;
          i133 = i67;
          i134 = i126;
          i135 = i68;
          i136 = i125;
          break;
        }
        if ((i127 & 57344 | 0) != 0) {
          HEAP32[i26 >> 2] = 5267828;
          HEAP32[i12 >> 2] = 29;
          i129 = i4;
          i130 = i64;
          i131 = i128;
          i132 = i127;
          i133 = i67;
          i134 = i126;
          i135 = i68;
          i136 = i125;
          break;
        }
        i113 = HEAP32[i25 >> 2] | 0;
        if ((i113 | 0) == 0) {
          i137 = i127;
        } else {
          HEAP32[i113 >> 2] = i127 >>> 8 & 1;
          i137 = HEAP32[i24 >> 2] | 0;
        }
        if ((i137 & 512 | 0) != 0) {
          HEAP8[i22] = i127 & 255;
          HEAP8[i23] = i127 >>> 8 & 255;
          HEAP32[i21 >> 2] = _crc32(HEAP32[i21 >> 2] | 0, i22, 2) | 0;
        }
        HEAP32[i12 >> 2] = 2;
        i69 = i125;
        i70 = i126;
        i71 = 0;
        i72 = 0;
        i73 = 86;
        break;
      } else if ((i15 | 0) == 16) {
        L102 : do {
          if (i65 >>> 0 < 14) {
            i113 = i14;
            i112 = i11;
            i111 = i66;
            i16 = i65;
            while (1) {
              if ((i112 | 0) == 0) {
                i114 = i4;
                i115 = i64;
                i116 = i16;
                i117 = i111;
                i118 = 0;
                i119 = i113;
                i120 = i67;
                break L74;
              }
              i124 = i112 - 1 | 0;
              i123 = i113 + 1 | 0;
              i121 = ((HEAPU8[i113] | 0) << i16) + i111 | 0;
              i122 = i16 + 8 | 0;
              if (i122 >>> 0 < 14) {
                i113 = i123;
                i112 = i124;
                i111 = i121;
                i16 = i122;
              } else {
                i138 = i123;
                i139 = i124;
                i140 = i121;
                i141 = i122;
                break L102;
              }
            }
          } else {
            i138 = i14;
            i139 = i11;
            i140 = i66;
            i141 = i65;
          }
        } while (0);
        i16 = (i140 & 31) + 257 | 0;
        HEAP32[i51 >> 2] = i16;
        i111 = (i140 >>> 5 & 31) + 1 | 0;
        HEAP32[i52 >> 2] = i111;
        HEAP32[i53 >> 2] = (i140 >>> 10 & 15) + 4 | 0;
        i112 = i140 >>> 14;
        i113 = i141 - 14 | 0;
        if (i16 >>> 0 > 286 | i111 >>> 0 > 30) {
          HEAP32[i26 >> 2] = 5264248;
          HEAP32[i12 >> 2] = 29;
          i129 = i4;
          i130 = i64;
          i131 = i113;
          i132 = i112;
          i133 = i67;
          i134 = i139;
          i135 = i68;
          i136 = i138;
          break;
        } else {
          HEAP32[i54 >> 2] = 0;
          HEAP32[i12 >> 2] = 17;
          i142 = i138;
          i143 = i139;
          i144 = i112;
          i145 = i113;
          i146 = 0;
          i73 = 193;
          break;
        }
      } else if ((i15 | 0) == 0) {
        i113 = HEAP32[i20 >> 2] | 0;
        if ((i113 | 0) == 0) {
          HEAP32[i12 >> 2] = 12;
          i129 = i4;
          i130 = i64;
          i131 = i65;
          i132 = i66;
          i133 = i67;
          i134 = i11;
          i135 = i68;
          i136 = i14;
          break;
        }
        L114 : do {
          if (i65 >>> 0 < 16) {
            i112 = i14;
            i111 = i11;
            i16 = i66;
            i122 = i65;
            while (1) {
              if ((i111 | 0) == 0) {
                i114 = i4;
                i115 = i64;
                i116 = i122;
                i117 = i16;
                i118 = 0;
                i119 = i112;
                i120 = i67;
                break L74;
              }
              i121 = i111 - 1 | 0;
              i124 = i112 + 1 | 0;
              i123 = ((HEAPU8[i112] | 0) << i122) + i16 | 0;
              i147 = i122 + 8 | 0;
              if (i147 >>> 0 < 16) {
                i112 = i124;
                i111 = i121;
                i16 = i123;
                i122 = i147;
              } else {
                i148 = i124;
                i149 = i121;
                i150 = i123;
                i151 = i147;
                break L114;
              }
            }
          } else {
            i148 = i14;
            i149 = i11;
            i150 = i66;
            i151 = i65;
          }
        } while (0);
        if ((i113 & 2 | 0) != 0 & (i150 | 0) == 35615) {
          HEAP32[i21 >> 2] = 0;
          HEAP8[i22] = 31;
          HEAP8[i23] = -117;
          HEAP32[i21 >> 2] = _crc32(HEAP32[i21 >> 2] | 0, i22, 2) | 0;
          HEAP32[i12 >> 2] = 1;
          i129 = i4;
          i130 = i64;
          i131 = 0;
          i132 = 0;
          i133 = i67;
          i134 = i149;
          i135 = i68;
          i136 = i148;
          break;
        }
        HEAP32[i24 >> 2] = 0;
        i122 = HEAP32[i25 >> 2] | 0;
        if ((i122 | 0) == 0) {
          i152 = i113;
        } else {
          HEAP32[i122 + 48 >> 2] = -1;
          i152 = HEAP32[i20 >> 2] | 0;
        }
        do {
          if ((i152 & 1 | 0) != 0) {
            if (((((i150 << 8 & 65280) + (i150 >>> 8) | 0) >>> 0) % 31 | 0) != 0) {
              break;
            }
            if ((i150 & 15 | 0) != 8) {
              HEAP32[i26 >> 2] = 5270436;
              HEAP32[i12 >> 2] = 29;
              i129 = i4;
              i130 = i64;
              i131 = i151;
              i132 = i150;
              i133 = i67;
              i134 = i149;
              i135 = i68;
              i136 = i148;
              break L76;
            }
            i122 = i150 >>> 4;
            i16 = i151 - 4 | 0;
            i111 = (i122 & 15) + 8 | 0;
            i112 = HEAP32[i27 >> 2] | 0;
            do {
              if ((i112 | 0) == 0) {
                HEAP32[i27 >> 2] = i111;
              } else {
                if (i111 >>> 0 <= i112 >>> 0) {
                  break;
                }
                HEAP32[i26 >> 2] = 5268860;
                HEAP32[i12 >> 2] = 29;
                i129 = i4;
                i130 = i64;
                i131 = i16;
                i132 = i122;
                i133 = i67;
                i134 = i149;
                i135 = i68;
                i136 = i148;
                break L76;
              }
            } while (0);
            HEAP32[i28 >> 2] = 1 << i111;
            HEAP32[i21 >> 2] = 1;
            HEAP32[i29 >> 2] = 1;
            HEAP32[i12 >> 2] = i150 >>> 12 & 2 ^ 11;
            i129 = i4;
            i130 = i64;
            i131 = 0;
            i132 = 0;
            i133 = i67;
            i134 = i149;
            i135 = i68;
            i136 = i148;
            break L76;
          }
        } while (0);
        HEAP32[i26 >> 2] = 5273780;
        HEAP32[i12 >> 2] = 29;
        i129 = i4;
        i130 = i64;
        i131 = i151;
        i132 = i150;
        i133 = i67;
        i134 = i149;
        i135 = i68;
        i136 = i148;
        break;
      } else if ((i15 | 0) == 9) {
        L138 : do {
          if (i65 >>> 0 < 32) {
            i113 = i14;
            i122 = i11;
            i16 = i66;
            i112 = i65;
            while (1) {
              if ((i122 | 0) == 0) {
                i114 = i4;
                i115 = i64;
                i116 = i112;
                i117 = i16;
                i118 = 0;
                i119 = i113;
                i120 = i67;
                break L74;
              }
              i147 = i122 - 1 | 0;
              i123 = i113 + 1 | 0;
              i121 = ((HEAPU8[i113] | 0) << i112) + i16 | 0;
              i124 = i112 + 8 | 0;
              if (i124 >>> 0 < 32) {
                i113 = i123;
                i122 = i147;
                i16 = i121;
                i112 = i124;
              } else {
                i153 = i123;
                i154 = i147;
                i155 = i121;
                break L138;
              }
            }
          } else {
            i153 = i14;
            i154 = i11;
            i155 = i66;
          }
        } while (0);
        i112 = _llvm_bswap_i32(i155 | 0) | 0;
        HEAP32[i21 >> 2] = i112;
        HEAP32[i29 >> 2] = i112;
        HEAP32[i12 >> 2] = 10;
        i156 = 0;
        i157 = 0;
        i158 = i154;
        i159 = i153;
        i73 = 160;
        break;
      } else if ((i15 | 0) == 5) {
        i160 = i65;
        i161 = i66;
        i162 = i11;
        i163 = i14;
        i73 = 112;
      } else if ((i15 | 0) == 7) {
        i164 = i65;
        i165 = i66;
        i166 = i11;
        i167 = i14;
        i73 = 135;
      } else if ((i15 | 0) == 8) {
        i168 = i65;
        i169 = i66;
        i170 = i11;
        i171 = i14;
        i73 = 148;
      } else if ((i15 | 0) == 10) {
        i156 = i65;
        i157 = i66;
        i158 = i11;
        i159 = i14;
        i73 = 160;
      } else if ((i15 | 0) == 11) {
        i172 = i65;
        i173 = i66;
        i174 = i11;
        i175 = i14;
        i73 = 163;
      } else if ((i15 | 0) == 12) {
        i176 = i65;
        i177 = i66;
        i178 = i11;
        i179 = i14;
        i73 = 164;
      } else if ((i15 | 0) == 13) {
        i112 = i65 & 7;
        i16 = i66 >>> (i112 >>> 0);
        i122 = i65 - i112 | 0;
        L144 : do {
          if (i122 >>> 0 < 32) {
            i112 = i14;
            i113 = i11;
            i111 = i16;
            i121 = i122;
            while (1) {
              if ((i113 | 0) == 0) {
                i114 = i4;
                i115 = i64;
                i116 = i121;
                i117 = i111;
                i118 = 0;
                i119 = i112;
                i120 = i67;
                break L74;
              }
              i147 = i113 - 1 | 0;
              i123 = i112 + 1 | 0;
              i124 = ((HEAPU8[i112] | 0) << i121) + i111 | 0;
              i180 = i121 + 8 | 0;
              if (i180 >>> 0 < 32) {
                i112 = i123;
                i113 = i147;
                i111 = i124;
                i121 = i180;
              } else {
                i181 = i123;
                i182 = i147;
                i183 = i124;
                i184 = i180;
                break L144;
              }
            }
          } else {
            i181 = i14;
            i182 = i11;
            i183 = i16;
            i184 = i122;
          }
        } while (0);
        i122 = i183 & 65535;
        if ((i122 | 0) == (i183 >>> 16 ^ 65535 | 0)) {
          HEAP32[i30 >> 2] = i122;
          HEAP32[i12 >> 2] = 14;
          if (i38) {
            i114 = i4;
            i115 = i64;
            i116 = 0;
            i117 = 0;
            i118 = i182;
            i119 = i181;
            i120 = i67;
            break L74;
          } else {
            i185 = 0;
            i186 = 0;
            i187 = i182;
            i188 = i181;
            i73 = 182;
            break;
          }
        } else {
          HEAP32[i26 >> 2] = 5265204;
          HEAP32[i12 >> 2] = 29;
          i129 = i4;
          i130 = i64;
          i131 = i184;
          i132 = i183;
          i133 = i67;
          i134 = i182;
          i135 = i68;
          i136 = i181;
          break;
        }
      } else if ((i15 | 0) == 14) {
        i185 = i65;
        i186 = i66;
        i187 = i11;
        i188 = i14;
        i73 = 182;
      } else if ((i15 | 0) == 15) {
        i189 = i65;
        i190 = i66;
        i191 = i11;
        i192 = i14;
        i73 = 183;
      } else if ((i15 | 0) == 17) {
        i122 = HEAP32[i54 >> 2] | 0;
        if (i122 >>> 0 < (HEAP32[i53 >> 2] | 0) >>> 0) {
          i142 = i14;
          i143 = i11;
          i144 = i66;
          i145 = i65;
          i146 = i122;
          i73 = 193;
          break;
        } else {
          i193 = i14;
          i194 = i11;
          i195 = i66;
          i196 = i65;
          i197 = i122;
          i73 = 197;
          break;
        }
      } else if ((i15 | 0) == 19) {
        i198 = i4;
        i199 = i65;
        i200 = i66;
        i201 = i11;
        i202 = i14;
        i73 = 236;
      } else if ((i15 | 0) == 20) {
        i203 = i4;
        i204 = i65;
        i205 = i66;
        i206 = i11;
        i207 = i14;
        i73 = 237;
      } else if ((i15 | 0) == 22) {
        i208 = i4;
        i209 = i65;
        i210 = i66;
        i211 = i11;
        i212 = i14;
        i73 = 325;
      } else if ((i15 | 0) == 24) {
        i213 = i4;
        i214 = i65;
        i215 = i66;
        i216 = i11;
        i217 = i14;
        i73 = 343;
      } else if ((i15 | 0) == 25) {
        if ((i67 | 0) == 0) {
          i114 = i4;
          i115 = i64;
          i116 = i65;
          i117 = i66;
          i118 = i11;
          i119 = i14;
          i120 = 0;
          break L74;
        }
        HEAP8[i68] = HEAP32[i30 >> 2] & 255;
        HEAP32[i12 >> 2] = 20;
        i129 = i4;
        i130 = i64;
        i131 = i65;
        i132 = i66;
        i133 = i67 - 1 | 0;
        i134 = i11;
        i135 = i68 + 1 | 0;
        i136 = i14;
        break;
      } else if ((i15 | 0) == 26) {
        do {
          if ((HEAP32[i20 >> 2] | 0) == 0) {
            i218 = i64;
            i219 = i65;
            i220 = i66;
            i221 = i11;
            i222 = i14;
          } else {
            L158 : do {
              if (i65 >>> 0 < 32) {
                i122 = i14;
                i16 = i11;
                i121 = i66;
                i111 = i65;
                while (1) {
                  if ((i16 | 0) == 0) {
                    i114 = i4;
                    i115 = i64;
                    i116 = i111;
                    i117 = i121;
                    i118 = 0;
                    i119 = i122;
                    i120 = i67;
                    break L74;
                  }
                  i113 = i16 - 1 | 0;
                  i112 = i122 + 1 | 0;
                  i180 = ((HEAPU8[i122] | 0) << i111) + i121 | 0;
                  i124 = i111 + 8 | 0;
                  if (i124 >>> 0 < 32) {
                    i122 = i112;
                    i16 = i113;
                    i121 = i180;
                    i111 = i124;
                  } else {
                    i223 = i112;
                    i224 = i113;
                    i225 = i180;
                    i226 = i124;
                    break L158;
                  }
                }
              } else {
                i223 = i14;
                i224 = i11;
                i225 = i66;
                i226 = i65;
              }
            } while (0);
            i111 = i64 - i67 | 0;
            HEAP32[i49 >> 2] = (HEAP32[i49 >> 2] | 0) + i111 | 0;
            HEAP32[i50 >> 2] = (HEAP32[i50 >> 2] | 0) + i111 | 0;
            if ((i64 | 0) != (i67 | 0)) {
              i121 = HEAP32[i21 >> 2] | 0;
              i16 = i68 + (-i111 | 0) | 0;
              if ((HEAP32[i24 >> 2] | 0) == 0) {
                i227 = _adler32(i121, i16, i111) | 0;
              } else {
                i227 = _crc32(i121, i16, i111) | 0;
              }
              HEAP32[i21 >> 2] = i227;
              HEAP32[i29 >> 2] = i227;
            }
            if ((HEAP32[i24 >> 2] | 0) == 0) {
              i228 = _llvm_bswap_i32(i225 | 0) | 0;
            } else {
              i228 = i225;
            }
            if ((i228 | 0) == (HEAP32[i21 >> 2] | 0)) {
              i218 = i67;
              i219 = 0;
              i220 = 0;
              i221 = i224;
              i222 = i223;
              break;
            }
            HEAP32[i26 >> 2] = 5271180;
            HEAP32[i12 >> 2] = 29;
            i129 = i4;
            i130 = i67;
            i131 = i226;
            i132 = i225;
            i133 = i67;
            i134 = i224;
            i135 = i68;
            i136 = i223;
            break L76;
          }
        } while (0);
        HEAP32[i12 >> 2] = 27;
        i229 = i218;
        i230 = i219;
        i231 = i220;
        i232 = i221;
        i233 = i222;
        i73 = 374;
        break;
      } else if ((i15 | 0) == 27) {
        i229 = i64;
        i230 = i65;
        i231 = i66;
        i232 = i11;
        i233 = i14;
        i73 = 374;
      } else if ((i15 | 0) == 29) {
        i73 = 382;
        break L74;
      } else if ((i15 | 0) == 28) {
        i114 = 1;
        i115 = i64;
        i116 = i65;
        i117 = i66;
        i118 = i11;
        i119 = i14;
        i120 = i67;
        break L74;
      } else if ((i15 | 0) == 30) {
        i5 = -4;
        i73 = 415;
        break L74;
      } else {
        i73 = 409;
        break L74;
      }
    } while (0);
    L175 : do {
      if ((i73 | 0) == 86) {
        while (1) {
          i73 = 0;
          if ((i70 | 0) == 0) {
            i114 = i4;
            i115 = i64;
            i116 = i72;
            i117 = i71;
            i118 = 0;
            i119 = i69;
            i120 = i67;
            break L74;
          }
          i111 = i70 - 1 | 0;
          i16 = i69 + 1 | 0;
          i121 = ((HEAPU8[i69] | 0) << i72) + i71 | 0;
          i122 = i72 + 8 | 0;
          if (i122 >>> 0 < 32) {
            i69 = i16;
            i70 = i111;
            i71 = i121;
            i72 = i122;
            i73 = 86;
          } else {
            i74 = i16;
            i75 = i111;
            i76 = i121;
            i73 = 88;
            break L175;
          }
        }
      } else if ((i73 | 0) == 160) {
        i73 = 0;
        if ((HEAP32[i31 >> 2] | 0) == 0) {
          i73 = 161;
          break L74;
        }
        HEAP32[i21 >> 2] = 1;
        HEAP32[i29 >> 2] = 1;
        HEAP32[i12 >> 2] = 11;
        i172 = i156;
        i173 = i157;
        i174 = i158;
        i175 = i159;
        i73 = 163;
        break;
      } else if ((i73 | 0) == 182) {
        i73 = 0;
        HEAP32[i12 >> 2] = 15;
        i189 = i185;
        i190 = i186;
        i191 = i187;
        i192 = i188;
        i73 = 183;
        break;
      } else if ((i73 | 0) == 193) {
        while (1) {
          i73 = 0;
          L184 : do {
            if (i145 >>> 0 < 3) {
              i121 = i142;
              i111 = i143;
              i16 = i144;
              i122 = i145;
              while (1) {
                if ((i111 | 0) == 0) {
                  i114 = i4;
                  i115 = i64;
                  i116 = i122;
                  i117 = i16;
                  i118 = 0;
                  i119 = i121;
                  i120 = i67;
                  break L74;
                }
                i124 = i111 - 1 | 0;
                i180 = i121 + 1 | 0;
                i113 = ((HEAPU8[i121] | 0) << i122) + i16 | 0;
                i112 = i122 + 8 | 0;
                if (i112 >>> 0 < 3) {
                  i121 = i180;
                  i111 = i124;
                  i16 = i113;
                  i122 = i112;
                } else {
                  i234 = i180;
                  i235 = i124;
                  i236 = i113;
                  i237 = i112;
                  break L184;
                }
              }
            } else {
              i234 = i142;
              i235 = i143;
              i236 = i144;
              i237 = i145;
            }
          } while (0);
          HEAP32[i54 >> 2] = i146 + 1 | 0;
          HEAP16[i61 + ((HEAPU16[5249936 + (i146 << 1) >> 1] | 0) << 1) >> 1] = i236 & 7;
          i122 = i236 >>> 3;
          i16 = i237 - 3 | 0;
          i111 = HEAP32[i54 >> 2] | 0;
          if (i111 >>> 0 < (HEAP32[i53 >> 2] | 0) >>> 0) {
            i142 = i234;
            i143 = i235;
            i144 = i122;
            i145 = i16;
            i146 = i111;
            i73 = 193;
          } else {
            i193 = i234;
            i194 = i235;
            i195 = i122;
            i196 = i16;
            i197 = i111;
            i73 = 197;
            break L175;
          }
        }
      } else if ((i73 | 0) == 374) {
        i73 = 0;
        if ((HEAP32[i20 >> 2] | 0) == 0) {
          i238 = i230;
          i239 = i231;
          i240 = i232;
          i241 = i233;
          i73 = 381;
          break L74;
        }
        if ((HEAP32[i24 >> 2] | 0) == 0) {
          i238 = i230;
          i239 = i231;
          i240 = i232;
          i241 = i233;
          i73 = 381;
          break L74;
        }
        L192 : do {
          if (i230 >>> 0 < 32) {
            i111 = i233;
            i16 = i232;
            i122 = i231;
            i121 = i230;
            while (1) {
              if ((i16 | 0) == 0) {
                i114 = i4;
                i115 = i229;
                i116 = i121;
                i117 = i122;
                i118 = 0;
                i119 = i111;
                i120 = i67;
                break L74;
              }
              i112 = i16 - 1 | 0;
              i113 = i111 + 1 | 0;
              i124 = ((HEAPU8[i111] | 0) << i121) + i122 | 0;
              i180 = i121 + 8 | 0;
              if (i180 >>> 0 < 32) {
                i111 = i113;
                i16 = i112;
                i122 = i124;
                i121 = i180;
              } else {
                i242 = i113;
                i243 = i112;
                i244 = i124;
                i245 = i180;
                break L192;
              }
            }
          } else {
            i242 = i233;
            i243 = i232;
            i244 = i231;
            i245 = i230;
          }
        } while (0);
        if ((i244 | 0) == (HEAP32[i50 >> 2] | 0)) {
          i238 = 0;
          i239 = 0;
          i240 = i243;
          i241 = i242;
          i73 = 381;
          break L74;
        }
        HEAP32[i26 >> 2] = 5270992;
        HEAP32[i12 >> 2] = 29;
        i129 = i4;
        i130 = i229;
        i131 = i245;
        i132 = i244;
        i133 = i67;
        i134 = i243;
        i135 = i68;
        i136 = i242;
        break;
      }
    } while (0);
    do {
      if ((i73 | 0) == 88) {
        i73 = 0;
        i121 = HEAP32[i25 >> 2] | 0;
        if ((i121 | 0) != 0) {
          HEAP32[i121 + 4 >> 2] = i76;
        }
        if ((HEAP32[i24 >> 2] & 512 | 0) != 0) {
          HEAP8[i22] = i76 & 255;
          HEAP8[i23] = i76 >>> 8 & 255;
          HEAP8[i7] = i76 >>> 16 & 255;
          HEAP8[i63] = i76 >>> 24 & 255;
          HEAP32[i21 >> 2] = _crc32(HEAP32[i21 >> 2] | 0, i22, 4) | 0;
        }
        HEAP32[i12 >> 2] = 3;
        i77 = i74;
        i78 = i75;
        i79 = 0;
        i80 = 0;
        i73 = 94;
        break;
      } else if ((i73 | 0) == 163) {
        i73 = 0;
        if (i32) {
          i114 = i4;
          i115 = i64;
          i116 = i172;
          i117 = i173;
          i118 = i174;
          i119 = i175;
          i120 = i67;
          break L74;
        } else {
          i176 = i172;
          i177 = i173;
          i178 = i174;
          i179 = i175;
          i73 = 164;
          break;
        }
      } else if ((i73 | 0) == 183) {
        i73 = 0;
        i121 = HEAP32[i30 >> 2] | 0;
        if ((i121 | 0) == 0) {
          HEAP32[i12 >> 2] = 11;
          i129 = i4;
          i130 = i64;
          i131 = i189;
          i132 = i190;
          i133 = i67;
          i134 = i191;
          i135 = i68;
          i136 = i192;
          break;
        }
        i122 = i121 >>> 0 > i191 >>> 0 ? i191 : i121;
        i121 = i122 >>> 0 > i67 >>> 0 ? i67 : i122;
        if ((i121 | 0) == 0) {
          i114 = i4;
          i115 = i64;
          i116 = i189;
          i117 = i190;
          i118 = i191;
          i119 = i192;
          i120 = i67;
          break L74;
        }
        _memcpy(i68, i192, i121);
        HEAP32[i30 >> 2] = (HEAP32[i30 >> 2] | 0) - i121 | 0;
        i129 = i4;
        i130 = i64;
        i131 = i189;
        i132 = i190;
        i133 = i67 - i121 | 0;
        i134 = i191 - i121 | 0;
        i135 = i68 + i121 | 0;
        i136 = i192 + i121 | 0;
        break;
      } else if ((i73 | 0) == 197) {
        i73 = 0;
        L213 : do {
          if (i197 >>> 0 < 19) {
            i121 = i197;
            while (1) {
              HEAP32[i54 >> 2] = i121 + 1 | 0;
              HEAP16[i61 + ((HEAPU16[5249936 + (i121 << 1) >> 1] | 0) << 1) >> 1] = 0;
              i122 = HEAP32[i54 >> 2] | 0;
              if (i122 >>> 0 < 19) {
                i121 = i122;
              } else {
                break L213;
              }
            }
          }
        } while (0);
        HEAP32[i57 >> 2] = i55;
        HEAP32[i34 >> 2] = i55;
        HEAP32[i35 >> 2] = 7;
        i121 = _inflate_table(0, i59, 19, i56, i35, i60) | 0;
        if ((i121 | 0) == 0) {
          HEAP32[i54 >> 2] = 0;
          HEAP32[i12 >> 2] = 18;
          i105 = 0;
          i106 = i196;
          i107 = i195;
          i108 = i194;
          i109 = i193;
          i110 = 0;
          i73 = 202;
          break;
        } else {
          HEAP32[i26 >> 2] = 5263424;
          HEAP32[i12 >> 2] = 29;
          i129 = i121;
          i130 = i64;
          i131 = i196;
          i132 = i195;
          i133 = i67;
          i134 = i194;
          i135 = i68;
          i136 = i193;
          break;
        }
      }
    } while (0);
    L220 : do {
      if ((i73 | 0) == 94) {
        while (1) {
          i73 = 0;
          if ((i78 | 0) == 0) {
            i114 = i4;
            i115 = i64;
            i116 = i80;
            i117 = i79;
            i118 = 0;
            i119 = i77;
            i120 = i67;
            break L74;
          }
          i121 = i78 - 1 | 0;
          i122 = i77 + 1 | 0;
          i16 = ((HEAPU8[i77] | 0) << i80) + i79 | 0;
          i111 = i80 + 8 | 0;
          if (i111 >>> 0 < 16) {
            i77 = i122;
            i78 = i121;
            i79 = i16;
            i80 = i111;
            i73 = 94;
          } else {
            i81 = i122;
            i82 = i121;
            i83 = i16;
            i73 = 96;
            break L220;
          }
        }
      } else if ((i73 | 0) == 164) {
        i73 = 0;
        if ((HEAP32[i33 >> 2] | 0) != 0) {
          i16 = i176 & 7;
          HEAP32[i12 >> 2] = 26;
          i129 = i4;
          i130 = i64;
          i131 = i176 - i16 | 0;
          i132 = i177 >>> (i16 >>> 0);
          i133 = i67;
          i134 = i178;
          i135 = i68;
          i136 = i179;
          break;
        }
        L228 : do {
          if (i176 >>> 0 < 3) {
            i16 = i179;
            i121 = i178;
            i122 = i177;
            i111 = i176;
            while (1) {
              if ((i121 | 0) == 0) {
                i114 = i4;
                i115 = i64;
                i116 = i111;
                i117 = i122;
                i118 = 0;
                i119 = i16;
                i120 = i67;
                break L74;
              }
              i180 = i121 - 1 | 0;
              i124 = i16 + 1 | 0;
              i112 = ((HEAPU8[i16] | 0) << i111) + i122 | 0;
              i113 = i111 + 8 | 0;
              if (i113 >>> 0 < 3) {
                i16 = i124;
                i121 = i180;
                i122 = i112;
                i111 = i113;
              } else {
                i246 = i124;
                i247 = i180;
                i248 = i112;
                i249 = i113;
                break L228;
              }
            }
          } else {
            i246 = i179;
            i247 = i178;
            i248 = i177;
            i249 = i176;
          }
        } while (0);
        HEAP32[i33 >> 2] = i248 & 1;
        i111 = i248 >>> 1 & 3;
        if ((i111 | 0) == 0) {
          HEAP32[i12 >> 2] = 13;
        } else if ((i111 | 0) == 1) {
          HEAP32[i34 >> 2] = 5250232;
          HEAP32[i35 >> 2] = 9;
          HEAP32[i36 >> 2] = 5252280;
          HEAP32[i37 >> 2] = 5;
          HEAP32[i12 >> 2] = 19;
          if (i38) {
            i73 = 172;
            break L74;
          }
        } else if ((i111 | 0) == 2) {
          HEAP32[i12 >> 2] = 16;
        } else if ((i111 | 0) == 3) {
          HEAP32[i26 >> 2] = 5266064;
          HEAP32[i12 >> 2] = 29;
        }
        i129 = i4;
        i130 = i64;
        i131 = i249 - 3 | 0;
        i132 = i248 >>> 3;
        i133 = i67;
        i134 = i247;
        i135 = i68;
        i136 = i246;
        break;
      } else if ((i73 | 0) == 202) {
        i73 = 0;
        i111 = HEAP32[i51 >> 2] | 0;
        i122 = HEAP32[i52 >> 2] | 0;
        do {
          if (i110 >>> 0 < (i122 + i111 | 0) >>> 0) {
            i121 = i109;
            i16 = i108;
            i113 = i107;
            i112 = i106;
            i180 = i110;
            i124 = i111;
            i147 = i122;
            L241 : while (1) {
              i123 = (1 << HEAP32[i35 >> 2]) - 1 | 0;
              i250 = i123 & i113;
              i251 = HEAP32[i40 >> 2] | 0;
              i252 = HEAPU8[i251 + (i250 << 2) + 1 | 0] | 0;
              L243 : do {
                if (i252 >>> 0 > i112 >>> 0) {
                  i253 = i121;
                  i254 = i16;
                  i255 = i113;
                  i256 = i112;
                  while (1) {
                    if ((i254 | 0) == 0) {
                      i114 = i105;
                      i115 = i64;
                      i116 = i256;
                      i117 = i255;
                      i118 = 0;
                      i119 = i253;
                      i120 = i67;
                      break L74;
                    }
                    i257 = i254 - 1 | 0;
                    i258 = i253 + 1 | 0;
                    i259 = ((HEAPU8[i253] | 0) << i256) + i255 | 0;
                    i260 = i256 + 8 | 0;
                    i261 = i123 & i259;
                    i262 = HEAPU8[i251 + (i261 << 2) + 1 | 0] | 0;
                    if (i262 >>> 0 > i260 >>> 0) {
                      i253 = i258;
                      i254 = i257;
                      i255 = i259;
                      i256 = i260;
                    } else {
                      i263 = i258;
                      i264 = i257;
                      i265 = i259;
                      i266 = i260;
                      i267 = i261;
                      i268 = i262;
                      break L243;
                    }
                  }
                } else {
                  i263 = i121;
                  i264 = i16;
                  i265 = i113;
                  i266 = i112;
                  i267 = i250;
                  i268 = i252;
                }
              } while (0);
              i252 = HEAP16[i251 + (i267 << 2) + 2 >> 1] | 0;
              L248 : do {
                if ((i252 & 65535) < 16) {
                  HEAP32[i54 >> 2] = i180 + 1 | 0;
                  HEAP16[i61 + (i180 << 1) >> 1] = i252;
                  i269 = i266 - i268 | 0;
                  i270 = i265 >>> (i268 >>> 0);
                  i271 = i264;
                  i272 = i263;
                } else {
                  if ((i252 << 16 >> 16 | 0) == 16) {
                    i250 = i268 + 2 | 0;
                    L259 : do {
                      if (i266 >>> 0 < i250 >>> 0) {
                        i123 = i263;
                        i256 = i264;
                        i255 = i265;
                        i254 = i266;
                        while (1) {
                          if ((i256 | 0) == 0) {
                            i114 = i105;
                            i115 = i64;
                            i116 = i254;
                            i117 = i255;
                            i118 = 0;
                            i119 = i123;
                            i120 = i67;
                            break L74;
                          }
                          i253 = i256 - 1 | 0;
                          i262 = i123 + 1 | 0;
                          i261 = ((HEAPU8[i123] | 0) << i254) + i255 | 0;
                          i260 = i254 + 8 | 0;
                          if (i260 >>> 0 < i250 >>> 0) {
                            i123 = i262;
                            i256 = i253;
                            i255 = i261;
                            i254 = i260;
                          } else {
                            i273 = i262;
                            i274 = i253;
                            i275 = i261;
                            i276 = i260;
                            break L259;
                          }
                        }
                      } else {
                        i273 = i263;
                        i274 = i264;
                        i275 = i265;
                        i276 = i266;
                      }
                    } while (0);
                    i277 = i275 >>> (i268 >>> 0);
                    i278 = i276 - i268 | 0;
                    if ((i180 | 0) == 0) {
                      i73 = 216;
                      break L241;
                    }
                    i279 = HEAP16[i61 + (i180 - 1 << 1) >> 1] | 0;
                    i280 = (i277 & 3) + 3 | 0;
                    i281 = i278 - 2 | 0;
                    i282 = i277 >>> 2;
                    i283 = i274;
                    i284 = i273;
                  } else if ((i252 << 16 >> 16 | 0) == 17) {
                    i250 = i268 + 3 | 0;
                    L266 : do {
                      if (i266 >>> 0 < i250 >>> 0) {
                        i254 = i263;
                        i255 = i264;
                        i256 = i265;
                        i123 = i266;
                        while (1) {
                          if ((i255 | 0) == 0) {
                            i114 = i105;
                            i115 = i64;
                            i116 = i123;
                            i117 = i256;
                            i118 = 0;
                            i119 = i254;
                            i120 = i67;
                            break L74;
                          }
                          i260 = i255 - 1 | 0;
                          i261 = i254 + 1 | 0;
                          i253 = ((HEAPU8[i254] | 0) << i123) + i256 | 0;
                          i262 = i123 + 8 | 0;
                          if (i262 >>> 0 < i250 >>> 0) {
                            i254 = i261;
                            i255 = i260;
                            i256 = i253;
                            i123 = i262;
                          } else {
                            i285 = i261;
                            i286 = i260;
                            i287 = i253;
                            i288 = i262;
                            break L266;
                          }
                        }
                      } else {
                        i285 = i263;
                        i286 = i264;
                        i287 = i265;
                        i288 = i266;
                      }
                    } while (0);
                    i250 = i287 >>> (i268 >>> 0);
                    i279 = 0;
                    i280 = (i250 & 7) + 3 | 0;
                    i281 = (-3 - i268 | 0) + i288 | 0;
                    i282 = i250 >>> 3;
                    i283 = i286;
                    i284 = i285;
                  } else {
                    i250 = i268 + 7 | 0;
                    L253 : do {
                      if (i266 >>> 0 < i250 >>> 0) {
                        i123 = i263;
                        i256 = i264;
                        i255 = i265;
                        i254 = i266;
                        while (1) {
                          if ((i256 | 0) == 0) {
                            i114 = i105;
                            i115 = i64;
                            i116 = i254;
                            i117 = i255;
                            i118 = 0;
                            i119 = i123;
                            i120 = i67;
                            break L74;
                          }
                          i262 = i256 - 1 | 0;
                          i253 = i123 + 1 | 0;
                          i260 = ((HEAPU8[i123] | 0) << i254) + i255 | 0;
                          i261 = i254 + 8 | 0;
                          if (i261 >>> 0 < i250 >>> 0) {
                            i123 = i253;
                            i256 = i262;
                            i255 = i260;
                            i254 = i261;
                          } else {
                            i289 = i253;
                            i290 = i262;
                            i291 = i260;
                            i292 = i261;
                            break L253;
                          }
                        }
                      } else {
                        i289 = i263;
                        i290 = i264;
                        i291 = i265;
                        i292 = i266;
                      }
                    } while (0);
                    i250 = i291 >>> (i268 >>> 0);
                    i279 = 0;
                    i280 = (i250 & 127) + 11 | 0;
                    i281 = (-7 - i268 | 0) + i292 | 0;
                    i282 = i250 >>> 7;
                    i283 = i290;
                    i284 = i289;
                  }
                  if ((i180 + i280 | 0) >>> 0 > (i147 + i124 | 0) >>> 0) {
                    i73 = 225;
                    break L241;
                  } else {
                    i293 = i280;
                    i294 = i180;
                  }
                  while (1) {
                    i250 = i293 - 1 | 0;
                    HEAP32[i54 >> 2] = i294 + 1 | 0;
                    HEAP16[i61 + (i294 << 1) >> 1] = i279;
                    if ((i250 | 0) == 0) {
                      i269 = i281;
                      i270 = i282;
                      i271 = i283;
                      i272 = i284;
                      break L248;
                    }
                    i293 = i250;
                    i294 = HEAP32[i54 >> 2] | 0;
                  }
                }
              } while (0);
              i252 = HEAP32[i54 >> 2] | 0;
              i295 = HEAP32[i51 >> 2] | 0;
              i251 = HEAP32[i52 >> 2] | 0;
              if (i252 >>> 0 < (i251 + i295 | 0) >>> 0) {
                i121 = i272;
                i16 = i271;
                i113 = i270;
                i112 = i269;
                i180 = i252;
                i124 = i295;
                i147 = i251;
              } else {
                i73 = 228;
                break;
              }
            }
            if ((i73 | 0) == 216) {
              i73 = 0;
              HEAP32[i26 >> 2] = 5275440;
              HEAP32[i12 >> 2] = 29;
              i129 = i105;
              i130 = i64;
              i131 = i278;
              i132 = i277;
              i133 = i67;
              i134 = i274;
              i135 = i68;
              i136 = i273;
              break L220;
            } else if ((i73 | 0) == 225) {
              i73 = 0;
              HEAP32[i26 >> 2] = 5275440;
              HEAP32[i12 >> 2] = 29;
              i129 = i105;
              i130 = i64;
              i131 = i281;
              i132 = i282;
              i133 = i67;
              i134 = i283;
              i135 = i68;
              i136 = i284;
              break L220;
            } else if ((i73 | 0) == 228) {
              i73 = 0;
              if ((HEAP32[i12 >> 2] | 0) == 29) {
                i129 = i105;
                i130 = i64;
                i131 = i269;
                i132 = i270;
                i133 = i67;
                i134 = i271;
                i135 = i68;
                i136 = i272;
                break L220;
              } else {
                i296 = i295;
                i297 = i269;
                i298 = i270;
                i299 = i271;
                i300 = i272;
                break;
              }
            }
          } else {
            i296 = i111;
            i297 = i106;
            i298 = i107;
            i299 = i108;
            i300 = i109;
          }
        } while (0);
        if (HEAP16[i58 >> 1] << 16 >> 16 == 0) {
          HEAP32[i26 >> 2] = 5274420;
          HEAP32[i12 >> 2] = 29;
          i129 = i105;
          i130 = i64;
          i131 = i297;
          i132 = i298;
          i133 = i67;
          i134 = i299;
          i135 = i68;
          i136 = i300;
          break;
        }
        HEAP32[i57 >> 2] = i55;
        HEAP32[i34 >> 2] = i55;
        HEAP32[i35 >> 2] = 9;
        i111 = _inflate_table(1, i59, i296, i56, i35, i60) | 0;
        if ((i111 | 0) != 0) {
          HEAP32[i26 >> 2] = 5273252;
          HEAP32[i12 >> 2] = 29;
          i129 = i111;
          i130 = i64;
          i131 = i297;
          i132 = i298;
          i133 = i67;
          i134 = i299;
          i135 = i68;
          i136 = i300;
          break;
        }
        HEAP32[i36 >> 2] = HEAP32[i56 >> 2] | 0;
        HEAP32[i37 >> 2] = 6;
        i111 = _inflate_table(2, i59 + (HEAP32[i51 >> 2] << 1) | 0, HEAP32[i52 >> 2] | 0, i56, i37, i60) | 0;
        if ((i111 | 0) == 0) {
          HEAP32[i12 >> 2] = 19;
          if (i38) {
            i114 = 0;
            i115 = i64;
            i116 = i297;
            i117 = i298;
            i118 = i299;
            i119 = i300;
            i120 = i67;
            break L74;
          } else {
            i198 = 0;
            i199 = i297;
            i200 = i298;
            i201 = i299;
            i202 = i300;
            i73 = 236;
            break;
          }
        } else {
          HEAP32[i26 >> 2] = 5272756;
          HEAP32[i12 >> 2] = 29;
          i129 = i111;
          i130 = i64;
          i131 = i297;
          i132 = i298;
          i133 = i67;
          i134 = i299;
          i135 = i68;
          i136 = i300;
          break;
        }
      }
    } while (0);
    do {
      if ((i73 | 0) == 96) {
        i73 = 0;
        i111 = HEAP32[i25 >> 2] | 0;
        if ((i111 | 0) != 0) {
          HEAP32[i111 + 8 >> 2] = i83 & 255;
          HEAP32[(HEAP32[i25 >> 2] | 0) + 12 >> 2] = i83 >>> 8;
        }
        if ((HEAP32[i24 >> 2] & 512 | 0) != 0) {
          HEAP8[i22] = i83 & 255;
          HEAP8[i23] = i83 >>> 8 & 255;
          HEAP32[i21 >> 2] = _crc32(HEAP32[i21 >> 2] | 0, i22, 2) | 0;
        }
        HEAP32[i12 >> 2] = 4;
        i84 = 0;
        i85 = 0;
        i86 = i82;
        i87 = i81;
        i73 = 101;
        break;
      } else if ((i73 | 0) == 236) {
        i73 = 0;
        HEAP32[i12 >> 2] = 20;
        i203 = i198;
        i204 = i199;
        i205 = i200;
        i206 = i201;
        i207 = i202;
        i73 = 237;
        break;
      }
    } while (0);
    do {
      if ((i73 | 0) == 101) {
        i73 = 0;
        i111 = HEAP32[i24 >> 2] | 0;
        do {
          if ((i111 & 1024 | 0) == 0) {
            i122 = HEAP32[i25 >> 2] | 0;
            if ((i122 | 0) == 0) {
              i301 = i84;
              i302 = i85;
              i303 = i86;
              i304 = i87;
              break;
            }
            HEAP32[i122 + 16 >> 2] = 0;
            i301 = i84;
            i302 = i85;
            i303 = i86;
            i304 = i87;
          } else {
            L303 : do {
              if (i84 >>> 0 < 16) {
                i122 = i87;
                i147 = i86;
                i124 = i85;
                i180 = i84;
                while (1) {
                  if ((i147 | 0) == 0) {
                    i114 = i4;
                    i115 = i64;
                    i116 = i180;
                    i117 = i124;
                    i118 = 0;
                    i119 = i122;
                    i120 = i67;
                    break L74;
                  }
                  i112 = i147 - 1 | 0;
                  i113 = i122 + 1 | 0;
                  i16 = ((HEAPU8[i122] | 0) << i180) + i124 | 0;
                  i121 = i180 + 8 | 0;
                  if (i121 >>> 0 < 16) {
                    i122 = i113;
                    i147 = i112;
                    i124 = i16;
                    i180 = i121;
                  } else {
                    i305 = i113;
                    i306 = i112;
                    i307 = i16;
                    break L303;
                  }
                }
              } else {
                i305 = i87;
                i306 = i86;
                i307 = i85;
              }
            } while (0);
            HEAP32[i30 >> 2] = i307;
            i180 = HEAP32[i25 >> 2] | 0;
            if ((i180 | 0) == 0) {
              i308 = i111;
            } else {
              HEAP32[i180 + 20 >> 2] = i307;
              i308 = HEAP32[i24 >> 2] | 0;
            }
            if ((i308 & 512 | 0) == 0) {
              i301 = 0;
              i302 = 0;
              i303 = i306;
              i304 = i305;
              break;
            }
            HEAP8[i22] = i307 & 255;
            HEAP8[i23] = i307 >>> 8 & 255;
            HEAP32[i21 >> 2] = _crc32(HEAP32[i21 >> 2] | 0, i22, 2) | 0;
            i301 = 0;
            i302 = 0;
            i303 = i306;
            i304 = i305;
          }
        } while (0);
        HEAP32[i12 >> 2] = 5;
        i160 = i301;
        i161 = i302;
        i162 = i303;
        i163 = i304;
        i73 = 112;
        break;
      } else if ((i73 | 0) == 237) {
        i73 = 0;
        if (!(i206 >>> 0 > 5 & i67 >>> 0 > 257)) {
          HEAP32[i39 >> 2] = 0;
          i111 = (1 << HEAP32[i35 >> 2]) - 1 | 0;
          i180 = i111 & i205;
          i124 = HEAP32[i40 >> 2] | 0;
          i147 = HEAP8[i124 + (i180 << 2) + 1 | 0] | 0;
          i122 = i147 & 255;
          L318 : do {
            if (i122 >>> 0 > i204 >>> 0) {
              i16 = i207;
              i112 = i206;
              i113 = i205;
              i121 = i204;
              while (1) {
                if ((i112 | 0) == 0) {
                  i114 = i203;
                  i115 = i64;
                  i116 = i121;
                  i117 = i113;
                  i118 = 0;
                  i119 = i16;
                  i120 = i67;
                  break L74;
                }
                i251 = i112 - 1 | 0;
                i252 = i16 + 1 | 0;
                i250 = ((HEAPU8[i16] | 0) << i121) + i113 | 0;
                i254 = i121 + 8 | 0;
                i255 = i111 & i250;
                i256 = HEAP8[i124 + (i255 << 2) + 1 | 0] | 0;
                i123 = i256 & 255;
                if (i123 >>> 0 > i254 >>> 0) {
                  i16 = i252;
                  i112 = i251;
                  i113 = i250;
                  i121 = i254;
                } else {
                  i309 = i252;
                  i310 = i251;
                  i311 = i250;
                  i312 = i254;
                  i313 = i256;
                  i314 = i255;
                  i315 = i123;
                  break L318;
                }
              }
            } else {
              i309 = i207;
              i310 = i206;
              i311 = i205;
              i312 = i204;
              i313 = i147;
              i314 = i180;
              i315 = i122;
            }
          } while (0);
          i122 = HEAP8[i124 + (i314 << 2) | 0] | 0;
          i180 = HEAP16[i124 + (i314 << 2) + 2 >> 1] | 0;
          i147 = i122 & 255;
          do {
            if (i122 << 24 >> 24 == 0) {
              i316 = 0;
              i317 = i313;
              i318 = i180;
              i319 = i312;
              i320 = i311;
              i321 = i310;
              i322 = i309;
              i323 = 0;
            } else {
              if ((i147 & 240 | 0) != 0) {
                i316 = i122;
                i317 = i313;
                i318 = i180;
                i319 = i312;
                i320 = i311;
                i321 = i310;
                i322 = i309;
                i323 = 0;
                break;
              }
              i111 = i180 & 65535;
              i121 = (1 << i315 + i147) - 1 | 0;
              i113 = ((i311 & i121) >>> (i315 >>> 0)) + i111 | 0;
              i112 = HEAP8[i124 + (i113 << 2) + 1 | 0] | 0;
              L326 : do {
                if (((i112 & 255) + i315 | 0) >>> 0 > i312 >>> 0) {
                  i16 = i309;
                  i123 = i310;
                  i255 = i311;
                  i256 = i312;
                  while (1) {
                    if ((i123 | 0) == 0) {
                      i114 = i203;
                      i115 = i64;
                      i116 = i256;
                      i117 = i255;
                      i118 = 0;
                      i119 = i16;
                      i120 = i67;
                      break L74;
                    }
                    i254 = i123 - 1 | 0;
                    i250 = i16 + 1 | 0;
                    i251 = ((HEAPU8[i16] | 0) << i256) + i255 | 0;
                    i252 = i256 + 8 | 0;
                    i261 = ((i251 & i121) >>> (i315 >>> 0)) + i111 | 0;
                    i260 = HEAP8[i124 + (i261 << 2) + 1 | 0] | 0;
                    if (((i260 & 255) + i315 | 0) >>> 0 > i252 >>> 0) {
                      i16 = i250;
                      i123 = i254;
                      i255 = i251;
                      i256 = i252;
                    } else {
                      i324 = i250;
                      i325 = i254;
                      i326 = i251;
                      i327 = i252;
                      i328 = i261;
                      i329 = i260;
                      break L326;
                    }
                  }
                } else {
                  i324 = i309;
                  i325 = i310;
                  i326 = i311;
                  i327 = i312;
                  i328 = i113;
                  i329 = i112;
                }
              } while (0);
              i112 = HEAP16[i124 + (i328 << 2) + 2 >> 1] | 0;
              i113 = HEAP8[i124 + (i328 << 2) | 0] | 0;
              HEAP32[i39 >> 2] = i315;
              i316 = i113;
              i317 = i329;
              i318 = i112;
              i319 = i327 - i315 | 0;
              i320 = i326 >>> (i315 >>> 0);
              i321 = i325;
              i322 = i324;
              i323 = i315;
            }
          } while (0);
          i124 = i317 & 255;
          i147 = i320 >>> (i124 >>> 0);
          i180 = i319 - i124 | 0;
          HEAP32[i39 >> 2] = i323 + i124 | 0;
          HEAP32[i30 >> 2] = i318 & 65535;
          i124 = i316 & 255;
          if (i316 << 24 >> 24 == 0) {
            HEAP32[i12 >> 2] = 25;
            i129 = i203;
            i130 = i64;
            i131 = i180;
            i132 = i147;
            i133 = i67;
            i134 = i321;
            i135 = i68;
            i136 = i322;
            break;
          }
          if ((i124 & 32 | 0) != 0) {
            HEAP32[i39 >> 2] = -1;
            HEAP32[i12 >> 2] = 11;
            i129 = i203;
            i130 = i64;
            i131 = i180;
            i132 = i147;
            i133 = i67;
            i134 = i321;
            i135 = i68;
            i136 = i322;
            break;
          }
          if ((i124 & 64 | 0) == 0) {
            i122 = i124 & 15;
            HEAP32[i41 >> 2] = i122;
            HEAP32[i12 >> 2] = 21;
            i93 = i203;
            i94 = i180;
            i95 = i147;
            i96 = i321;
            i97 = i322;
            i98 = i122;
            i73 = 318;
            break;
          } else {
            HEAP32[i26 >> 2] = 5272128;
            HEAP32[i12 >> 2] = 29;
            i129 = i203;
            i130 = i64;
            i131 = i180;
            i132 = i147;
            i133 = i67;
            i134 = i321;
            i135 = i68;
            i136 = i322;
            break;
          }
        }
        HEAP32[i8 >> 2] = i68;
        HEAP32[i13 >> 2] = i67;
        HEAP32[i10 >> 2] = i207;
        HEAP32[i9 >> 2] = i206;
        HEAP32[i18 >> 2] = i205;
        HEAP32[i19 >> 2] = i204;
        i147 = HEAP32[i6 >> 2] | 0;
        i180 = HEAP32[i10 >> 2] | 0;
        i122 = i180 + ((HEAP32[i9 >> 2] | 0) - 6 | 0) | 0;
        i124 = HEAP32[i8 >> 2] | 0;
        i112 = HEAP32[i13 >> 2] | 0;
        i113 = i124 + (i112 - 258 | 0) | 0;
        i111 = HEAP32[i147 + 44 >> 2] | 0;
        i121 = HEAP32[i147 + 48 >> 2] | 0;
        i256 = HEAP32[i147 + 52 >> 2] | 0;
        i255 = i147 + 56 | 0;
        i123 = i147 + 60 | 0;
        i16 = HEAP32[i147 + 76 >> 2] | 0;
        i260 = HEAP32[i147 + 80 >> 2] | 0;
        i261 = (1 << HEAP32[i147 + 84 >> 2]) - 1 | 0;
        i252 = (1 << HEAP32[i147 + 88 >> 2]) - 1 | 0;
        i251 = i124 + (i112 + (i64 ^ -1) | 0) | 0;
        i112 = i147 + 7104 | 0;
        i254 = i256 - 1 | 0;
        i250 = (i121 | 0) == 0;
        i262 = (HEAP32[i147 + 40 >> 2] | 0) - 1 | 0;
        i253 = i262 + i121 | 0;
        i259 = i121 - 1 | 0;
        i257 = i251 - 1 | 0;
        i258 = i251 - i121 | 0;
        i330 = i180 - 1 | 0;
        i180 = i124 - 1 | 0;
        i124 = HEAP32[i255 >> 2] | 0;
        i331 = HEAP32[i123 >> 2] | 0;
        L342 : while (1) {
          if (i331 >>> 0 < 15) {
            i332 = i330 + 2 | 0;
            i333 = i332;
            i334 = (((HEAPU8[i330 + 1 | 0] | 0) << i331) + i124 | 0) + ((HEAPU8[i332] | 0) << i331 + 8) | 0;
            i335 = i331 + 16 | 0;
          } else {
            i333 = i330;
            i334 = i124;
            i335 = i331;
          }
          i332 = i334 & i261;
          i336 = HEAP8[i16 + (i332 << 2) | 0] | 0;
          i337 = HEAP16[i16 + (i332 << 2) + 2 >> 1] | 0;
          i338 = HEAPU8[i16 + (i332 << 2) + 1 | 0] | 0;
          i332 = i334 >>> (i338 >>> 0);
          i339 = i335 - i338 | 0;
          L347 : do {
            if (i336 << 24 >> 24 == 0) {
              i340 = i337;
              i341 = i332;
              i342 = i339;
              i73 = 242;
            } else {
              i338 = i337;
              i343 = i332;
              i344 = i339;
              i345 = i336;
              while (1) {
                i346 = i345 & 255;
                if ((i346 & 16 | 0) != 0) {
                  break;
                }
                if ((i346 & 64 | 0) != 0) {
                  i73 = 290;
                  break L342;
                }
                i347 = (i343 & (1 << i346) - 1) + (i338 & 65535) | 0;
                i348 = HEAP8[i16 + (i347 << 2) | 0] | 0;
                i349 = HEAP16[i16 + (i347 << 2) + 2 >> 1] | 0;
                i350 = HEAPU8[i16 + (i347 << 2) + 1 | 0] | 0;
                i347 = i343 >>> (i350 >>> 0);
                i351 = i344 - i350 | 0;
                if (i348 << 24 >> 24 == 0) {
                  i340 = i349;
                  i341 = i347;
                  i342 = i351;
                  i73 = 242;
                  break L347;
                } else {
                  i338 = i349;
                  i343 = i347;
                  i344 = i351;
                  i345 = i348;
                }
              }
              i345 = i338 & 65535;
              i348 = i346 & 15;
              if ((i348 | 0) == 0) {
                i352 = i345;
                i353 = i333;
                i354 = i343;
                i355 = i344;
              } else {
                if (i344 >>> 0 < i348 >>> 0) {
                  i351 = i333 + 1 | 0;
                  i356 = i351;
                  i357 = ((HEAPU8[i351] | 0) << i344) + i343 | 0;
                  i358 = i344 + 8 | 0;
                } else {
                  i356 = i333;
                  i357 = i343;
                  i358 = i344;
                }
                i352 = (i357 & (1 << i348) - 1) + i345 | 0;
                i353 = i356;
                i354 = i357 >>> (i348 >>> 0);
                i355 = i358 - i348 | 0;
              }
              if (i355 >>> 0 < 15) {
                i348 = i353 + 2 | 0;
                i359 = i348;
                i360 = (((HEAPU8[i353 + 1 | 0] | 0) << i355) + i354 | 0) + ((HEAPU8[i348] | 0) << i355 + 8) | 0;
                i361 = i355 + 16 | 0;
              } else {
                i359 = i353;
                i360 = i354;
                i361 = i355;
              }
              i348 = i360 & i252;
              i345 = HEAP16[i260 + (i348 << 2) + 2 >> 1] | 0;
              i351 = HEAPU8[i260 + (i348 << 2) + 1 | 0] | 0;
              i347 = i360 >>> (i351 >>> 0);
              i349 = i361 - i351 | 0;
              i351 = HEAPU8[i260 + (i348 << 2) | 0] | 0;
              L362 : do {
                if ((i351 & 16 | 0) == 0) {
                  i348 = i345;
                  i362 = i347;
                  i363 = i349;
                  i350 = i351;
                  while (1) {
                    if ((i350 & 64 | 0) != 0) {
                      i73 = 287;
                      break L342;
                    }
                    i364 = (i362 & (1 << i350) - 1) + (i348 & 65535) | 0;
                    i365 = HEAP16[i260 + (i364 << 2) + 2 >> 1] | 0;
                    i366 = HEAPU8[i260 + (i364 << 2) + 1 | 0] | 0;
                    i367 = i362 >>> (i366 >>> 0);
                    i368 = i363 - i366 | 0;
                    i366 = HEAPU8[i260 + (i364 << 2) | 0] | 0;
                    if ((i366 & 16 | 0) == 0) {
                      i348 = i365;
                      i362 = i367;
                      i363 = i368;
                      i350 = i366;
                    } else {
                      i369 = i365;
                      i370 = i367;
                      i371 = i368;
                      i372 = i366;
                      break L362;
                    }
                  }
                } else {
                  i369 = i345;
                  i370 = i347;
                  i371 = i349;
                  i372 = i351;
                }
              } while (0);
              i351 = i369 & 65535;
              i349 = i372 & 15;
              do {
                if (i371 >>> 0 < i349 >>> 0) {
                  i347 = i359 + 1 | 0;
                  i345 = ((HEAPU8[i347] | 0) << i371) + i370 | 0;
                  i338 = i371 + 8 | 0;
                  if (i338 >>> 0 >= i349 >>> 0) {
                    i373 = i347;
                    i374 = i345;
                    i375 = i338;
                    break;
                  }
                  i347 = i359 + 2 | 0;
                  i373 = i347;
                  i374 = ((HEAPU8[i347] | 0) << i338) + i345 | 0;
                  i375 = i371 + 16 | 0;
                } else {
                  i373 = i359;
                  i374 = i370;
                  i375 = i371;
                }
              } while (0);
              i345 = (i374 & (1 << i349) - 1) + i351 | 0;
              i376 = i374 >>> (i349 >>> 0);
              i377 = i375 - i349 | 0;
              i338 = i180;
              i347 = i338 - i251 | 0;
              if (i345 >>> 0 <= i347 >>> 0) {
                i350 = i180 + (-i345 | 0) | 0;
                i348 = i352;
                i366 = i180;
                while (1) {
                  HEAP8[i366 + 1 | 0] = HEAP8[i350 + 1 | 0] | 0;
                  HEAP8[i366 + 2 | 0] = HEAP8[i350 + 2 | 0] | 0;
                  i368 = i350 + 3 | 0;
                  i378 = i366 + 3 | 0;
                  HEAP8[i378] = HEAP8[i368] | 0;
                  i379 = i348 - 3 | 0;
                  if (i379 >>> 0 > 2) {
                    i350 = i368;
                    i348 = i379;
                    i366 = i378;
                  } else {
                    break;
                  }
                }
                if ((i379 | 0) == 0) {
                  i380 = i373;
                  i381 = i378;
                  i382 = i376;
                  i383 = i377;
                  break;
                }
                i348 = i366 + 4 | 0;
                HEAP8[i348] = HEAP8[i350 + 4 | 0] | 0;
                if (i379 >>> 0 <= 1) {
                  i380 = i373;
                  i381 = i348;
                  i382 = i376;
                  i383 = i377;
                  break;
                }
                i348 = i366 + 5 | 0;
                HEAP8[i348] = HEAP8[i350 + 5 | 0] | 0;
                i380 = i373;
                i381 = i348;
                i382 = i376;
                i383 = i377;
                break;
              }
              i348 = i345 - i347 | 0;
              if (i348 >>> 0 > i111 >>> 0) {
                if ((HEAP32[i112 >> 2] | 0) != 0) {
                  i73 = 257;
                  break L342;
                }
              }
              do {
                if (i250) {
                  i349 = i256 + (i262 - i348 | 0) | 0;
                  if (i348 >>> 0 >= i352 >>> 0) {
                    i384 = i349;
                    i385 = i352;
                    i386 = i180;
                    break;
                  }
                  i351 = i352 - i348 | 0;
                  i368 = i345 - i338 | 0;
                  i367 = i349;
                  i349 = i348;
                  i365 = i180;
                  while (1) {
                    i364 = i367 + 1 | 0;
                    i387 = i365 + 1 | 0;
                    HEAP8[i387] = HEAP8[i364] | 0;
                    i388 = i349 - 1 | 0;
                    if ((i388 | 0) == 0) {
                      break;
                    } else {
                      i367 = i364;
                      i349 = i388;
                      i365 = i387;
                    }
                  }
                  i384 = i180 + ((i257 + i368 | 0) + (1 - i345 | 0) | 0) | 0;
                  i385 = i351;
                  i386 = i180 + (i251 + i368 | 0) | 0;
                } else {
                  if (i121 >>> 0 >= i348 >>> 0) {
                    i365 = i256 + (i259 - i348 | 0) | 0;
                    if (i348 >>> 0 >= i352 >>> 0) {
                      i384 = i365;
                      i385 = i352;
                      i386 = i180;
                      break;
                    }
                    i349 = i352 - i348 | 0;
                    i367 = i345 - i338 | 0;
                    i387 = i365;
                    i365 = i348;
                    i388 = i180;
                    while (1) {
                      i364 = i387 + 1 | 0;
                      i389 = i388 + 1 | 0;
                      HEAP8[i389] = HEAP8[i364] | 0;
                      i390 = i365 - 1 | 0;
                      if ((i390 | 0) == 0) {
                        break;
                      } else {
                        i387 = i364;
                        i365 = i390;
                        i388 = i389;
                      }
                    }
                    i384 = i180 + ((i257 + i367 | 0) + (1 - i345 | 0) | 0) | 0;
                    i385 = i349;
                    i386 = i180 + (i251 + i367 | 0) | 0;
                    break;
                  }
                  i388 = i256 + (i253 - i348 | 0) | 0;
                  i365 = i348 - i121 | 0;
                  if (i365 >>> 0 >= i352 >>> 0) {
                    i384 = i388;
                    i385 = i352;
                    i386 = i180;
                    break;
                  }
                  i387 = i352 - i365 | 0;
                  i368 = i345 - i338 | 0;
                  i351 = i388;
                  i388 = i365;
                  i365 = i180;
                  while (1) {
                    i389 = i351 + 1 | 0;
                    i390 = i365 + 1 | 0;
                    HEAP8[i390] = HEAP8[i389] | 0;
                    i364 = i388 - 1 | 0;
                    if ((i364 | 0) == 0) {
                      break;
                    } else {
                      i351 = i389;
                      i388 = i364;
                      i365 = i390;
                    }
                  }
                  i365 = i180 + (i258 + i368 | 0) | 0;
                  if (i121 >>> 0 >= i387 >>> 0) {
                    i384 = i254;
                    i385 = i387;
                    i386 = i365;
                    break;
                  }
                  i388 = i387 - i121 | 0;
                  i351 = i254;
                  i367 = i121;
                  i349 = i365;
                  while (1) {
                    i365 = i351 + 1 | 0;
                    i390 = i349 + 1 | 0;
                    HEAP8[i390] = HEAP8[i365] | 0;
                    i364 = i367 - 1 | 0;
                    if ((i364 | 0) == 0) {
                      break;
                    } else {
                      i351 = i365;
                      i367 = i364;
                      i349 = i390;
                    }
                  }
                  i384 = i180 + ((i257 + i368 | 0) + (1 - i345 | 0) | 0) | 0;
                  i385 = i388;
                  i386 = i180 + (i251 + i368 | 0) | 0;
                }
              } while (0);
              L405 : do {
                if (i385 >>> 0 > 2) {
                  i345 = i386;
                  i338 = i385;
                  i348 = i384;
                  while (1) {
                    HEAP8[i345 + 1 | 0] = HEAP8[i348 + 1 | 0] | 0;
                    HEAP8[i345 + 2 | 0] = HEAP8[i348 + 2 | 0] | 0;
                    i347 = i348 + 3 | 0;
                    i350 = i345 + 3 | 0;
                    HEAP8[i350] = HEAP8[i347] | 0;
                    i366 = i338 - 3 | 0;
                    if (i366 >>> 0 > 2) {
                      i345 = i350;
                      i338 = i366;
                      i348 = i347;
                    } else {
                      i391 = i350;
                      i392 = i366;
                      i393 = i347;
                      break L405;
                    }
                  }
                } else {
                  i391 = i386;
                  i392 = i385;
                  i393 = i384;
                }
              } while (0);
              if ((i392 | 0) == 0) {
                i380 = i373;
                i381 = i391;
                i382 = i376;
                i383 = i377;
                break;
              }
              i348 = i391 + 1 | 0;
              HEAP8[i348] = HEAP8[i393 + 1 | 0] | 0;
              if (i392 >>> 0 <= 1) {
                i380 = i373;
                i381 = i348;
                i382 = i376;
                i383 = i377;
                break;
              }
              i348 = i391 + 2 | 0;
              HEAP8[i348] = HEAP8[i393 + 2 | 0] | 0;
              i380 = i373;
              i381 = i348;
              i382 = i376;
              i383 = i377;
              break;
            }
          } while (0);
          if ((i73 | 0) == 242) {
            i73 = 0;
            i336 = i180 + 1 | 0;
            HEAP8[i336] = i340 & 255;
            i380 = i333;
            i381 = i336;
            i382 = i341;
            i383 = i342;
          }
          if (i380 >>> 0 < i122 >>> 0 & i381 >>> 0 < i113 >>> 0) {
            i330 = i380;
            i180 = i381;
            i124 = i382;
            i331 = i383;
          } else {
            i394 = i380;
            i395 = i381;
            i396 = i382;
            i397 = i383;
            break;
          }
        }
        do {
          if ((i73 | 0) == 257) {
            i73 = 0;
            HEAP32[i26 >> 2] = 5271560;
            HEAP32[i147 >> 2] = 29;
            i394 = i373;
            i395 = i180;
            i396 = i376;
            i397 = i377;
          } else if ((i73 | 0) == 287) {
            i73 = 0;
            HEAP32[i26 >> 2] = 5271780;
            HEAP32[i147 >> 2] = 29;
            i394 = i359;
            i395 = i180;
            i396 = i362;
            i397 = i363;
          } else if ((i73 | 0) == 290) {
            i73 = 0;
            if ((i346 & 32 | 0) == 0) {
              HEAP32[i26 >> 2] = 5272128;
              HEAP32[i147 >> 2] = 29;
              i394 = i333;
              i395 = i180;
              i396 = i343;
              i397 = i344;
              break;
            } else {
              HEAP32[i147 >> 2] = 11;
              i394 = i333;
              i395 = i180;
              i396 = i343;
              i397 = i344;
              break;
            }
          }
        } while (0);
        i180 = i397 >>> 3;
        i147 = i394 + (-i180 | 0) | 0;
        i331 = i397 - (i180 << 3) | 0;
        HEAP32[i10 >> 2] = i394 + (1 - i180 | 0) | 0;
        HEAP32[i8 >> 2] = i395 + 1 | 0;
        if (i147 >>> 0 < i122 >>> 0) {
          i398 = i122 - i147 | 0;
        } else {
          i398 = i122 - i147 | 0;
        }
        HEAP32[i9 >> 2] = i398 + 5 | 0;
        if (i395 >>> 0 < i113 >>> 0) {
          i399 = i113 - i395 | 0;
        } else {
          i399 = i113 - i395 | 0;
        }
        HEAP32[i13 >> 2] = i399 + 257 | 0;
        HEAP32[i255 >> 2] = (1 << i331) - 1 & i396;
        HEAP32[i123 >> 2] = i331;
        i331 = HEAP32[i8 >> 2] | 0;
        i147 = HEAP32[i13 >> 2] | 0;
        i180 = HEAP32[i10 >> 2] | 0;
        i124 = HEAP32[i9 >> 2] | 0;
        i330 = HEAP32[i18 >> 2] | 0;
        i251 = HEAP32[i19 >> 2] | 0;
        if ((HEAP32[i12 >> 2] | 0) != 11) {
          i129 = i203;
          i130 = i64;
          i131 = i251;
          i132 = i330;
          i133 = i147;
          i134 = i124;
          i135 = i331;
          i136 = i180;
          break;
        }
        HEAP32[i39 >> 2] = -1;
        i129 = i203;
        i130 = i64;
        i131 = i251;
        i132 = i330;
        i133 = i147;
        i134 = i124;
        i135 = i331;
        i136 = i180;
        break;
      }
    } while (0);
    do {
      if ((i73 | 0) == 112) {
        i73 = 0;
        i180 = HEAP32[i24 >> 2] | 0;
        if ((i180 & 1024 | 0) == 0) {
          i400 = i162;
          i401 = i163;
          i402 = i180;
        } else {
          i331 = HEAP32[i30 >> 2] | 0;
          i124 = i331 >>> 0 > i162 >>> 0 ? i162 : i331;
          if ((i124 | 0) == 0) {
            i403 = i162;
            i404 = i163;
            i405 = i331;
            i406 = i180;
          } else {
            i147 = HEAP32[i25 >> 2] | 0;
            do {
              if ((i147 | 0) == 0) {
                i407 = i180;
              } else {
                i330 = HEAP32[i147 + 16 >> 2] | 0;
                if ((i330 | 0) == 0) {
                  i407 = i180;
                  break;
                }
                i251 = (HEAP32[i147 + 20 >> 2] | 0) - i331 | 0;
                i257 = HEAP32[i147 + 24 >> 2] | 0;
                _memcpy(i330 + i251 | 0, i163, (i251 + i124 | 0) >>> 0 > i257 >>> 0 ? i257 - i251 | 0 : i124);
                i407 = HEAP32[i24 >> 2] | 0;
              }
            } while (0);
            if ((i407 & 512 | 0) != 0) {
              HEAP32[i21 >> 2] = _crc32(HEAP32[i21 >> 2] | 0, i163, i124) | 0;
            }
            i147 = (HEAP32[i30 >> 2] | 0) - i124 | 0;
            HEAP32[i30 >> 2] = i147;
            i403 = i162 - i124 | 0;
            i404 = i163 + i124 | 0;
            i405 = i147;
            i406 = i407;
          }
          if ((i405 | 0) == 0) {
            i400 = i403;
            i401 = i404;
            i402 = i406;
          } else {
            i114 = i4;
            i115 = i64;
            i116 = i160;
            i117 = i161;
            i118 = i403;
            i119 = i404;
            i120 = i67;
            break L74;
          }
        }
        HEAP32[i30 >> 2] = 0;
        HEAP32[i12 >> 2] = 6;
        i88 = i160;
        i89 = i161;
        i90 = i400;
        i91 = i401;
        i92 = i402;
        i73 = 122;
        break;
      } else if ((i73 | 0) == 318) {
        i73 = 0;
        if ((i98 | 0) == 0) {
          i408 = i94;
          i409 = i95;
          i410 = i96;
          i411 = i97;
          i412 = HEAP32[i30 >> 2] | 0;
        } else {
          L450 : do {
            if (i94 >>> 0 < i98 >>> 0) {
              i147 = i97;
              i331 = i96;
              i180 = i95;
              i123 = i94;
              while (1) {
                if ((i331 | 0) == 0) {
                  i114 = i93;
                  i115 = i64;
                  i116 = i123;
                  i117 = i180;
                  i118 = 0;
                  i119 = i147;
                  i120 = i67;
                  break L74;
                }
                i255 = i331 - 1 | 0;
                i113 = i147 + 1 | 0;
                i122 = ((HEAPU8[i147] | 0) << i123) + i180 | 0;
                i251 = i123 + 8 | 0;
                if (i251 >>> 0 < i98 >>> 0) {
                  i147 = i113;
                  i331 = i255;
                  i180 = i122;
                  i123 = i251;
                } else {
                  i413 = i113;
                  i414 = i255;
                  i415 = i122;
                  i416 = i251;
                  break L450;
                }
              }
            } else {
              i413 = i97;
              i414 = i96;
              i415 = i95;
              i416 = i94;
            }
          } while (0);
          i124 = (HEAP32[i30 >> 2] | 0) + ((1 << i98) - 1 & i415) | 0;
          HEAP32[i30 >> 2] = i124;
          HEAP32[i39 >> 2] = (HEAP32[i39 >> 2] | 0) + i98 | 0;
          i408 = i416 - i98 | 0;
          i409 = i415 >>> (i98 >>> 0);
          i410 = i414;
          i411 = i413;
          i412 = i124;
        }
        HEAP32[i42 >> 2] = i412;
        HEAP32[i12 >> 2] = 22;
        i208 = i93;
        i209 = i408;
        i210 = i409;
        i211 = i410;
        i212 = i411;
        i73 = 325;
        break;
      }
    } while (0);
    do {
      if ((i73 | 0) == 122) {
        i73 = 0;
        do {
          if ((i92 & 2048 | 0) == 0) {
            i124 = HEAP32[i25 >> 2] | 0;
            if ((i124 | 0) == 0) {
              i417 = i90;
              i418 = i91;
              break;
            }
            HEAP32[i124 + 28 >> 2] = 0;
            i417 = i90;
            i418 = i91;
          } else {
            if ((i90 | 0) == 0) {
              i114 = i4;
              i115 = i64;
              i116 = i88;
              i117 = i89;
              i118 = 0;
              i119 = i91;
              i120 = i67;
              break L74;
            } else {
              i419 = 0;
            }
            while (1) {
              i420 = i419 + 1 | 0;
              i124 = HEAP8[i91 + i419 | 0] | 0;
              i123 = HEAP32[i25 >> 2] | 0;
              do {
                if ((i123 | 0) != 0) {
                  i180 = i123 + 28 | 0;
                  if ((HEAP32[i180 >> 2] | 0) == 0) {
                    break;
                  }
                  i331 = HEAP32[i30 >> 2] | 0;
                  if (i331 >>> 0 >= (HEAP32[i123 + 32 >> 2] | 0) >>> 0) {
                    break;
                  }
                  HEAP32[i30 >> 2] = i331 + 1 | 0;
                  HEAP8[(HEAP32[i180 >> 2] | 0) + i331 | 0] = i124;
                }
              } while (0);
              i421 = i124 << 24 >> 24 != 0;
              if (i421 & i420 >>> 0 < i90 >>> 0) {
                i419 = i420;
              } else {
                break;
              }
            }
            if ((HEAP32[i24 >> 2] & 512 | 0) != 0) {
              HEAP32[i21 >> 2] = _crc32(HEAP32[i21 >> 2] | 0, i91, i420) | 0;
            }
            i123 = i90 - i420 | 0;
            i331 = i91 + i420 | 0;
            if (i421) {
              i114 = i4;
              i115 = i64;
              i116 = i88;
              i117 = i89;
              i118 = i123;
              i119 = i331;
              i120 = i67;
              break L74;
            } else {
              i417 = i123;
              i418 = i331;
            }
          }
        } while (0);
        HEAP32[i30 >> 2] = 0;
        HEAP32[i12 >> 2] = 7;
        i164 = i88;
        i165 = i89;
        i166 = i417;
        i167 = i418;
        i73 = 135;
        break;
      } else if ((i73 | 0) == 325) {
        i73 = 0;
        i331 = (1 << HEAP32[i37 >> 2]) - 1 | 0;
        i123 = i331 & i210;
        i180 = HEAP32[i62 >> 2] | 0;
        i147 = HEAP8[i180 + (i123 << 2) + 1 | 0] | 0;
        i251 = i147 & 255;
        L475 : do {
          if (i251 >>> 0 > i209 >>> 0) {
            i122 = i212;
            i255 = i211;
            i113 = i210;
            i257 = i209;
            while (1) {
              if ((i255 | 0) == 0) {
                i114 = i208;
                i115 = i64;
                i116 = i257;
                i117 = i113;
                i118 = 0;
                i119 = i122;
                i120 = i67;
                break L74;
              }
              i330 = i255 - 1 | 0;
              i121 = i122 + 1 | 0;
              i254 = ((HEAPU8[i122] | 0) << i257) + i113 | 0;
              i258 = i257 + 8 | 0;
              i253 = i331 & i254;
              i256 = HEAP8[i180 + (i253 << 2) + 1 | 0] | 0;
              i259 = i256 & 255;
              if (i259 >>> 0 > i258 >>> 0) {
                i122 = i121;
                i255 = i330;
                i113 = i254;
                i257 = i258;
              } else {
                i422 = i121;
                i423 = i330;
                i424 = i254;
                i425 = i258;
                i426 = i256;
                i427 = i253;
                i428 = i259;
                break L475;
              }
            }
          } else {
            i422 = i212;
            i423 = i211;
            i424 = i210;
            i425 = i209;
            i426 = i147;
            i427 = i123;
            i428 = i251;
          }
        } while (0);
        i251 = HEAP8[i180 + (i427 << 2) | 0] | 0;
        i123 = HEAP16[i180 + (i427 << 2) + 2 >> 1] | 0;
        i147 = i251 & 255;
        if ((i147 & 240 | 0) == 0) {
          i331 = i123 & 65535;
          i257 = (1 << i428 + i147) - 1 | 0;
          i147 = ((i424 & i257) >>> (i428 >>> 0)) + i331 | 0;
          i113 = HEAP8[i180 + (i147 << 2) + 1 | 0] | 0;
          L483 : do {
            if (((i113 & 255) + i428 | 0) >>> 0 > i425 >>> 0) {
              i255 = i422;
              i122 = i423;
              i259 = i424;
              i253 = i425;
              while (1) {
                if ((i122 | 0) == 0) {
                  i114 = i208;
                  i115 = i64;
                  i116 = i253;
                  i117 = i259;
                  i118 = 0;
                  i119 = i255;
                  i120 = i67;
                  break L74;
                }
                i256 = i122 - 1 | 0;
                i258 = i255 + 1 | 0;
                i254 = ((HEAPU8[i255] | 0) << i253) + i259 | 0;
                i330 = i253 + 8 | 0;
                i121 = ((i254 & i257) >>> (i428 >>> 0)) + i331 | 0;
                i262 = HEAP8[i180 + (i121 << 2) + 1 | 0] | 0;
                if (((i262 & 255) + i428 | 0) >>> 0 > i330 >>> 0) {
                  i255 = i258;
                  i122 = i256;
                  i259 = i254;
                  i253 = i330;
                } else {
                  i429 = i258;
                  i430 = i256;
                  i431 = i254;
                  i432 = i330;
                  i433 = i121;
                  i434 = i262;
                  break L483;
                }
              }
            } else {
              i429 = i422;
              i430 = i423;
              i431 = i424;
              i432 = i425;
              i433 = i147;
              i434 = i113;
            }
          } while (0);
          i113 = HEAP16[i180 + (i433 << 2) + 2 >> 1] | 0;
          i147 = HEAP8[i180 + (i433 << 2) | 0] | 0;
          i331 = (HEAP32[i39 >> 2] | 0) + i428 | 0;
          HEAP32[i39 >> 2] = i331;
          i435 = i147;
          i436 = i434;
          i437 = i113;
          i438 = i432 - i428 | 0;
          i439 = i431 >>> (i428 >>> 0);
          i440 = i430;
          i441 = i429;
          i442 = i331;
        } else {
          i435 = i251;
          i436 = i426;
          i437 = i123;
          i438 = i425;
          i439 = i424;
          i440 = i423;
          i441 = i422;
          i442 = HEAP32[i39 >> 2] | 0;
        }
        i331 = i436 & 255;
        i113 = i439 >>> (i331 >>> 0);
        i147 = i438 - i331 | 0;
        HEAP32[i39 >> 2] = i442 + i331 | 0;
        i331 = i435 & 255;
        if ((i331 & 64 | 0) == 0) {
          HEAP32[i43 >> 2] = i437 & 65535;
          i257 = i331 & 15;
          HEAP32[i41 >> 2] = i257;
          HEAP32[i12 >> 2] = 23;
          i99 = i208;
          i100 = i147;
          i101 = i113;
          i102 = i440;
          i103 = i441;
          i104 = i257;
          i73 = 337;
          break;
        } else {
          HEAP32[i26 >> 2] = 5271780;
          HEAP32[i12 >> 2] = 29;
          i129 = i208;
          i130 = i64;
          i131 = i147;
          i132 = i113;
          i133 = i67;
          i134 = i440;
          i135 = i68;
          i136 = i441;
          break;
        }
      }
    } while (0);
    do {
      if ((i73 | 0) == 135) {
        i73 = 0;
        do {
          if ((HEAP32[i24 >> 2] & 4096 | 0) == 0) {
            i113 = HEAP32[i25 >> 2] | 0;
            if ((i113 | 0) == 0) {
              i443 = i166;
              i444 = i167;
              break;
            }
            HEAP32[i113 + 36 >> 2] = 0;
            i443 = i166;
            i444 = i167;
          } else {
            if ((i166 | 0) == 0) {
              i114 = i4;
              i115 = i64;
              i116 = i164;
              i117 = i165;
              i118 = 0;
              i119 = i167;
              i120 = i67;
              break L74;
            } else {
              i445 = 0;
            }
            while (1) {
              i446 = i445 + 1 | 0;
              i113 = HEAP8[i167 + i445 | 0] | 0;
              i147 = HEAP32[i25 >> 2] | 0;
              do {
                if ((i147 | 0) != 0) {
                  i257 = i147 + 36 | 0;
                  if ((HEAP32[i257 >> 2] | 0) == 0) {
                    break;
                  }
                  i331 = HEAP32[i30 >> 2] | 0;
                  if (i331 >>> 0 >= (HEAP32[i147 + 40 >> 2] | 0) >>> 0) {
                    break;
                  }
                  HEAP32[i30 >> 2] = i331 + 1 | 0;
                  HEAP8[(HEAP32[i257 >> 2] | 0) + i331 | 0] = i113;
                }
              } while (0);
              i447 = i113 << 24 >> 24 != 0;
              if (i447 & i446 >>> 0 < i166 >>> 0) {
                i445 = i446;
              } else {
                break;
              }
            }
            if ((HEAP32[i24 >> 2] & 512 | 0) != 0) {
              HEAP32[i21 >> 2] = _crc32(HEAP32[i21 >> 2] | 0, i167, i446) | 0;
            }
            i147 = i166 - i446 | 0;
            i124 = i167 + i446 | 0;
            if (i447) {
              i114 = i4;
              i115 = i64;
              i116 = i164;
              i117 = i165;
              i118 = i147;
              i119 = i124;
              i120 = i67;
              break L74;
            } else {
              i443 = i147;
              i444 = i124;
            }
          }
        } while (0);
        HEAP32[i12 >> 2] = 8;
        i168 = i164;
        i169 = i165;
        i170 = i443;
        i171 = i444;
        i73 = 148;
        break;
      } else if ((i73 | 0) == 337) {
        i73 = 0;
        if ((i104 | 0) == 0) {
          i448 = i100;
          i449 = i101;
          i450 = i102;
          i451 = i103;
        } else {
          L513 : do {
            if (i100 >>> 0 < i104 >>> 0) {
              i123 = i103;
              i251 = i102;
              i180 = i101;
              i124 = i100;
              while (1) {
                if ((i251 | 0) == 0) {
                  i114 = i99;
                  i115 = i64;
                  i116 = i124;
                  i117 = i180;
                  i118 = 0;
                  i119 = i123;
                  i120 = i67;
                  break L74;
                }
                i147 = i251 - 1 | 0;
                i331 = i123 + 1 | 0;
                i257 = ((HEAPU8[i123] | 0) << i124) + i180 | 0;
                i253 = i124 + 8 | 0;
                if (i253 >>> 0 < i104 >>> 0) {
                  i123 = i331;
                  i251 = i147;
                  i180 = i257;
                  i124 = i253;
                } else {
                  i452 = i331;
                  i453 = i147;
                  i454 = i257;
                  i455 = i253;
                  break L513;
                }
              }
            } else {
              i452 = i103;
              i453 = i102;
              i454 = i101;
              i455 = i100;
            }
          } while (0);
          HEAP32[i43 >> 2] = (HEAP32[i43 >> 2] | 0) + ((1 << i104) - 1 & i454) | 0;
          HEAP32[i39 >> 2] = (HEAP32[i39 >> 2] | 0) + i104 | 0;
          i448 = i455 - i104 | 0;
          i449 = i454 >>> (i104 >>> 0);
          i450 = i453;
          i451 = i452;
        }
        HEAP32[i12 >> 2] = 24;
        i213 = i99;
        i214 = i448;
        i215 = i449;
        i216 = i450;
        i217 = i451;
        i73 = 343;
        break;
      }
    } while (0);
    L519 : do {
      if ((i73 | 0) == 148) {
        i73 = 0;
        i124 = HEAP32[i24 >> 2] | 0;
        do {
          if ((i124 & 512 | 0) == 0) {
            i456 = i168;
            i457 = i169;
            i458 = i170;
            i459 = i171;
          } else {
            L523 : do {
              if (i168 >>> 0 < 16) {
                i180 = i171;
                i251 = i170;
                i123 = i169;
                i253 = i168;
                while (1) {
                  if ((i251 | 0) == 0) {
                    i114 = i4;
                    i115 = i64;
                    i116 = i253;
                    i117 = i123;
                    i118 = 0;
                    i119 = i180;
                    i120 = i67;
                    break L74;
                  }
                  i257 = i251 - 1 | 0;
                  i147 = i180 + 1 | 0;
                  i331 = ((HEAPU8[i180] | 0) << i253) + i123 | 0;
                  i259 = i253 + 8 | 0;
                  if (i259 >>> 0 < 16) {
                    i180 = i147;
                    i251 = i257;
                    i123 = i331;
                    i253 = i259;
                  } else {
                    i460 = i147;
                    i461 = i257;
                    i462 = i331;
                    i463 = i259;
                    break L523;
                  }
                }
              } else {
                i460 = i171;
                i461 = i170;
                i462 = i169;
                i463 = i168;
              }
            } while (0);
            if ((i462 | 0) == (HEAP32[i21 >> 2] & 65535 | 0)) {
              i456 = 0;
              i457 = 0;
              i458 = i461;
              i459 = i460;
              break;
            }
            HEAP32[i26 >> 2] = 5267064;
            HEAP32[i12 >> 2] = 29;
            i129 = i4;
            i130 = i64;
            i131 = i463;
            i132 = i462;
            i133 = i67;
            i134 = i461;
            i135 = i68;
            i136 = i460;
            break L519;
          }
        } while (0);
        i253 = HEAP32[i25 >> 2] | 0;
        if ((i253 | 0) != 0) {
          HEAP32[i253 + 44 >> 2] = i124 >>> 9 & 1;
          HEAP32[(HEAP32[i25 >> 2] | 0) + 48 >> 2] = 1;
        }
        HEAP32[i21 >> 2] = 0;
        HEAP32[i29 >> 2] = 0;
        HEAP32[i12 >> 2] = 11;
        i129 = i4;
        i130 = i64;
        i131 = i456;
        i132 = i457;
        i133 = i67;
        i134 = i458;
        i135 = i68;
        i136 = i459;
      } else if ((i73 | 0) == 343) {
        i73 = 0;
        if ((i67 | 0) == 0) {
          i114 = i213;
          i115 = i64;
          i116 = i214;
          i117 = i215;
          i118 = i216;
          i119 = i217;
          i120 = 0;
          break L74;
        }
        i253 = i64 - i67 | 0;
        i123 = HEAP32[i43 >> 2] | 0;
        if (i123 >>> 0 > i253 >>> 0) {
          i251 = i123 - i253 | 0;
          do {
            if (i251 >>> 0 > (HEAP32[i44 >> 2] | 0) >>> 0) {
              if ((HEAP32[i45 >> 2] | 0) == 0) {
                break;
              }
              HEAP32[i26 >> 2] = 5271560;
              HEAP32[i12 >> 2] = 29;
              i129 = i213;
              i130 = i64;
              i131 = i214;
              i132 = i215;
              i133 = i67;
              i134 = i216;
              i135 = i68;
              i136 = i217;
              break L519;
            }
          } while (0);
          i124 = HEAP32[i46 >> 2] | 0;
          if (i251 >>> 0 > i124 >>> 0) {
            i253 = i251 - i124 | 0;
            i464 = (HEAP32[i47 >> 2] | 0) + ((HEAP32[i48 >> 2] | 0) - i253 | 0) | 0;
            i465 = i253;
          } else {
            i464 = (HEAP32[i47 >> 2] | 0) + (i124 - i251 | 0) | 0;
            i465 = i251;
          }
          i124 = HEAP32[i30 >> 2] | 0;
          i466 = i464;
          i467 = i465 >>> 0 > i124 >>> 0 ? i124 : i465;
          i468 = i124;
        } else {
          i124 = HEAP32[i30 >> 2] | 0;
          i466 = i68 + (-i123 | 0) | 0;
          i467 = i124;
          i468 = i124;
        }
        i124 = i467 >>> 0 > i67 >>> 0 ? i67 : i467;
        HEAP32[i30 >> 2] = i468 - i124 | 0;
        i253 = i67 ^ -1;
        i180 = i467 ^ -1;
        i113 = i253 >>> 0 > i180 >>> 0 ? i253 : i180;
        i180 = i466;
        i253 = i124;
        i259 = i68;
        while (1) {
          HEAP8[i259] = HEAP8[i180] | 0;
          i331 = i253 - 1 | 0;
          if ((i331 | 0) == 0) {
            break;
          } else {
            i180 = i180 + 1 | 0;
            i253 = i331;
            i259 = i259 + 1 | 0;
          }
        }
        i259 = i67 - i124 | 0;
        i253 = i68 + (i113 ^ -1) | 0;
        if ((HEAP32[i30 >> 2] | 0) != 0) {
          i129 = i213;
          i130 = i64;
          i131 = i214;
          i132 = i215;
          i133 = i259;
          i134 = i216;
          i135 = i253;
          i136 = i217;
          break;
        }
        HEAP32[i12 >> 2] = 20;
        i129 = i213;
        i130 = i64;
        i131 = i214;
        i132 = i215;
        i133 = i259;
        i134 = i216;
        i135 = i253;
        i136 = i217;
      }
    } while (0);
    i4 = i129;
    i64 = i130;
    i65 = i131;
    i66 = i132;
    i67 = i133;
    i11 = i134;
    i68 = i135;
    i14 = i136;
    i15 = HEAP32[i12 >> 2] | 0;
  }
  if ((i73 | 0) == 161) {
    HEAP32[i8 >> 2] = i68;
    HEAP32[i13 >> 2] = i67;
    HEAP32[i10 >> 2] = i159;
    HEAP32[i9 >> 2] = i158;
    HEAP32[i18 >> 2] = i157;
    HEAP32[i19 >> 2] = i156;
    i5 = 2;
    STACKTOP = i3;
    return i5 | 0;
  } else if ((i73 | 0) == 172) {
    i114 = i4;
    i115 = i64;
    i116 = i249 - 3 | 0;
    i117 = i248 >>> 3;
    i118 = i247;
    i119 = i246;
    i120 = i67;
  } else if ((i73 | 0) == 381) {
    HEAP32[i12 >> 2] = 28;
    i114 = 1;
    i115 = i229;
    i116 = i238;
    i117 = i239;
    i118 = i240;
    i119 = i241;
    i120 = i67;
  } else if ((i73 | 0) == 382) {
    i114 = -3;
    i115 = i64;
    i116 = i65;
    i117 = i66;
    i118 = i11;
    i119 = i14;
    i120 = i67;
  } else if ((i73 | 0) == 409) {
    i5 = -2;
    STACKTOP = i3;
    return i5 | 0;
  } else if ((i73 | 0) == 415) {
    STACKTOP = i3;
    return i5 | 0;
  }
  HEAP32[i8 >> 2] = i68;
  HEAP32[i13 >> 2] = i120;
  HEAP32[i10 >> 2] = i119;
  HEAP32[i9 >> 2] = i118;
  HEAP32[i18 >> 2] = i117;
  HEAP32[i19 >> 2] = i116;
  do {
    if ((HEAP32[i48 >> 2] | 0) == 0) {
      i116 = HEAP32[i13 >> 2] | 0;
      if ((i115 | 0) == (i116 | 0)) {
        i469 = i115;
        break;
      }
      i117 = HEAP32[i12 >> 2] | 0;
      if (i117 >>> 0 >= 29) {
        i469 = i116;
        break;
      }
      if (i117 >>> 0 > 25 & (i2 | 0) == 4) {
        i469 = i116;
        break;
      } else {
        i73 = 387;
        break;
      }
    } else {
      i73 = 387;
    }
  } while (0);
  if ((i73 | 0) == 387) {
    i73 = HEAP32[i6 >> 2] | 0;
    i6 = i73 + 52 | 0;
    i48 = i6;
    i116 = HEAP32[i48 >> 2] | 0;
    do {
      if ((i116 | 0) == 0) {
        i117 = FUNCTION_TABLE_iiii[HEAP32[i1 + 32 >> 2] & 511](HEAP32[i1 + 40 >> 2] | 0, 1 << HEAP32[i73 + 36 >> 2], 1) | 0;
        HEAP32[i6 >> 2] = i117;
        if ((i117 | 0) != 0) {
          i470 = i117;
          break;
        }
        HEAP32[i12 >> 2] = 30;
        i5 = -4;
        STACKTOP = i3;
        return i5 | 0;
      } else {
        i470 = i116;
      }
    } while (0);
    i116 = i73 + 40 | 0;
    i6 = HEAP32[i116 >> 2] | 0;
    if ((i6 | 0) == 0) {
      i117 = 1 << HEAP32[i73 + 36 >> 2];
      HEAP32[i116 >> 2] = i117;
      HEAP32[i73 + 48 >> 2] = 0;
      HEAP32[i73 + 44 >> 2] = 0;
      i471 = i117;
    } else {
      i471 = i6;
    }
    i6 = i115 - (HEAP32[i13 >> 2] | 0) | 0;
    do {
      if (i6 >>> 0 < i471 >>> 0) {
        i117 = i73 + 48 | 0;
        i18 = HEAP32[i117 >> 2] | 0;
        i118 = i471 - i18 | 0;
        i119 = i118 >>> 0 > i6 >>> 0 ? i6 : i118;
        _memcpy(i470 + i18 | 0, (HEAP32[i8 >> 2] | 0) + (-i6 | 0) | 0, i119);
        i18 = i6 - i119 | 0;
        if ((i6 | 0) != (i119 | 0)) {
          _memcpy(HEAP32[i48 >> 2] | 0, (HEAP32[i8 >> 2] | 0) + (-i18 | 0) | 0, i18);
          HEAP32[i117 >> 2] = i18;
          HEAP32[i73 + 44 >> 2] = HEAP32[i116 >> 2] | 0;
          break;
        }
        i18 = (HEAP32[i117 >> 2] | 0) + i6 | 0;
        HEAP32[i117 >> 2] = i18;
        i119 = HEAP32[i116 >> 2] | 0;
        if ((i18 | 0) == (i119 | 0)) {
          HEAP32[i117 >> 2] = 0;
        }
        i117 = i73 + 44 | 0;
        i18 = HEAP32[i117 >> 2] | 0;
        if (i18 >>> 0 >= i119 >>> 0) {
          break;
        }
        HEAP32[i117 >> 2] = i18 + i6 | 0;
      } else {
        _memcpy(i470, (HEAP32[i8 >> 2] | 0) + (-i471 | 0) | 0, i471);
        HEAP32[i73 + 48 >> 2] = 0;
        HEAP32[i73 + 44 >> 2] = HEAP32[i116 >> 2] | 0;
      }
    } while (0);
    i469 = HEAP32[i13 >> 2] | 0;
  }
  i13 = HEAP32[i9 >> 2] | 0;
  i9 = i115 - i469 | 0;
  i116 = i1 + 8 | 0;
  HEAP32[i116 >> 2] = (i17 - i13 | 0) + (HEAP32[i116 >> 2] | 0) | 0;
  HEAP32[i49 >> 2] = (HEAP32[i49 >> 2] | 0) + i9 | 0;
  HEAP32[i50 >> 2] = (HEAP32[i50 >> 2] | 0) + i9 | 0;
  i50 = (i115 | 0) == (i469 | 0);
  if (!((HEAP32[i20 >> 2] | 0) == 0 | i50)) {
    i20 = HEAP32[i21 >> 2] | 0;
    i469 = (HEAP32[i8 >> 2] | 0) + (-i9 | 0) | 0;
    if ((HEAP32[i24 >> 2] | 0) == 0) {
      i472 = _adler32(i20, i469, i9) | 0;
    } else {
      i472 = _crc32(i20, i469, i9) | 0;
    }
    HEAP32[i21 >> 2] = i472;
    HEAP32[i29 >> 2] = i472;
  }
  i472 = HEAP32[i12 >> 2] | 0;
  if ((i472 | 0) == 19) {
    i473 = 256;
  } else {
    i473 = (i472 | 0) == 14 ? 256 : 0;
  }
  HEAP32[i1 + 44 >> 2] = ((((HEAP32[i33 >> 2] | 0) != 0 ? 64 : 0) + (HEAP32[i19 >> 2] | 0) | 0) + ((i472 | 0) == 11 ? 128 : 0) | 0) + i473 | 0;
  i5 = ((i17 | 0) == (i13 | 0) & i50 | (i2 | 0) == 4) & (i114 | 0) == 0 ? -5 : i114;
  STACKTOP = i3;
  return i5 | 0;
}
function _reset_error_mgr(i1) {
  i1 = i1 | 0;
  var i2 = 0;
  i2 = i1 | 0;
  HEAP32[(HEAP32[i2 >> 2] | 0) + 108 >> 2] = 0;
  HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] = 0;
  return;
}
function _inflate_table(i1, i2, i3, i4, i5, i6) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0;
  i7 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  i8 = i7 | 0;
  i9 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  _memset(i8 | 0, 0, 32);
  i10 = (i3 | 0) == 0;
  L601 : do {
    if (!i10) {
      i11 = 0;
      while (1) {
        i12 = i8 + ((HEAPU16[i2 + (i11 << 1) >> 1] | 0) << 1) | 0;
        HEAP16[i12 >> 1] = (HEAP16[i12 >> 1] | 0) + 1 & 65535;
        i12 = i11 + 1 | 0;
        if ((i12 | 0) == (i3 | 0)) {
          break L601;
        } else {
          i11 = i12;
        }
      }
    }
  } while (0);
  i11 = HEAP32[i5 >> 2] | 0;
  i12 = 15;
  while (1) {
    if ((i12 | 0) == 0) {
      i13 = 427;
      break;
    }
    if (HEAP16[i8 + (i12 << 1) >> 1] << 16 >> 16 == 0) {
      i12 = i12 - 1 | 0;
    } else {
      break;
    }
  }
  if ((i13 | 0) == 427) {
    i14 = HEAP32[i4 >> 2] | 0;
    HEAP32[i4 >> 2] = i14 + 4 | 0;
    HEAP8[i14 | 0] = 64;
    HEAP8[i14 + 1 | 0] = 1;
    HEAP16[i14 + 2 >> 1] = 0;
    i14 = HEAP32[i4 >> 2] | 0;
    HEAP32[i4 >> 2] = i14 + 4 | 0;
    HEAP8[i14 | 0] = 64;
    HEAP8[i14 + 1 | 0] = 1;
    HEAP16[i14 + 2 >> 1] = 0;
    HEAP32[i5 >> 2] = 1;
    i15 = 0;
    STACKTOP = i7;
    return i15 | 0;
  }
  i14 = i11 >>> 0 > i12 >>> 0 ? i12 : i11;
  i11 = 1;
  while (1) {
    if (i11 >>> 0 >= i12 >>> 0) {
      break;
    }
    if (HEAP16[i8 + (i11 << 1) >> 1] << 16 >> 16 == 0) {
      i11 = i11 + 1 | 0;
    } else {
      break;
    }
  }
  i16 = i14 >>> 0 < i11 >>> 0 ? i11 : i14;
  i14 = 1;
  i17 = 1;
  while (1) {
    if (i17 >>> 0 >= 16) {
      break;
    }
    i18 = (i14 << 1) - (HEAPU16[i8 + (i17 << 1) >> 1] | 0) | 0;
    if ((i18 | 0) < 0) {
      i15 = -1;
      i13 = 472;
      break;
    } else {
      i14 = i18;
      i17 = i17 + 1 | 0;
    }
  }
  if ((i13 | 0) == 472) {
    STACKTOP = i7;
    return i15 | 0;
  }
  do {
    if ((i14 | 0) > 0) {
      if ((i1 | 0) != 0 & (i12 | 0) == 1) {
        break;
      } else {
        i15 = -1;
      }
      STACKTOP = i7;
      return i15 | 0;
    }
  } while (0);
  HEAP16[i9 + 2 >> 1] = 0;
  i14 = HEAP16[i8 + 2 >> 1] | 0;
  HEAP16[i9 + 4 >> 1] = i14;
  i17 = (HEAP16[i8 + 4 >> 1] | 0) + i14 & 65535;
  HEAP16[i9 + 6 >> 1] = i17;
  i14 = (HEAP16[i8 + 6 >> 1] | 0) + i17 & 65535;
  HEAP16[i9 + 8 >> 1] = i14;
  i17 = (HEAP16[i8 + 8 >> 1] | 0) + i14 & 65535;
  HEAP16[i9 + 10 >> 1] = i17;
  i14 = (HEAP16[i8 + 10 >> 1] | 0) + i17 & 65535;
  HEAP16[i9 + 12 >> 1] = i14;
  i17 = (HEAP16[i8 + 12 >> 1] | 0) + i14 & 65535;
  HEAP16[i9 + 14 >> 1] = i17;
  i14 = (HEAP16[i8 + 14 >> 1] | 0) + i17 & 65535;
  HEAP16[i9 + 16 >> 1] = i14;
  i17 = (HEAP16[i8 + 16 >> 1] | 0) + i14 & 65535;
  HEAP16[i9 + 18 >> 1] = i17;
  i14 = (HEAP16[i8 + 18 >> 1] | 0) + i17 & 65535;
  HEAP16[i9 + 20 >> 1] = i14;
  i17 = (HEAP16[i8 + 20 >> 1] | 0) + i14 & 65535;
  HEAP16[i9 + 22 >> 1] = i17;
  i14 = (HEAP16[i8 + 22 >> 1] | 0) + i17 & 65535;
  HEAP16[i9 + 24 >> 1] = i14;
  i17 = (HEAP16[i8 + 24 >> 1] | 0) + i14 & 65535;
  HEAP16[i9 + 26 >> 1] = i17;
  i14 = (HEAP16[i8 + 26 >> 1] | 0) + i17 & 65535;
  HEAP16[i9 + 28 >> 1] = i14;
  HEAP16[i9 + 30 >> 1] = (HEAP16[i8 + 28 >> 1] | 0) + i14 & 65535;
  L626 : do {
    if (!i10) {
      i14 = 0;
      while (1) {
        i17 = HEAP16[i2 + (i14 << 1) >> 1] | 0;
        if (i17 << 16 >> 16 != 0) {
          i18 = i9 + ((i17 & 65535) << 1) | 0;
          i17 = HEAP16[i18 >> 1] | 0;
          HEAP16[i18 >> 1] = i17 + 1 & 65535;
          HEAP16[i6 + ((i17 & 65535) << 1) >> 1] = i14 & 65535;
        }
        i17 = i14 + 1 | 0;
        if ((i17 | 0) == (i3 | 0)) {
          break L626;
        } else {
          i14 = i17;
        }
      }
    }
  } while (0);
  do {
    if ((i1 | 0) == 0) {
      i19 = 0;
      i20 = 1 << i16;
      i21 = 19;
      i22 = i6;
      i23 = i6;
      i24 = 0;
    } else if ((i1 | 0) == 1) {
      i3 = 1 << i16;
      if (i3 >>> 0 > 851) {
        i15 = 1;
      } else {
        i19 = 1;
        i20 = i3;
        i21 = 256;
        i22 = 5249166;
        i23 = 5249230;
        i24 = 0;
        break;
      }
      STACKTOP = i7;
      return i15 | 0;
    } else {
      i3 = 1 << i16;
      i9 = (i1 | 0) == 2;
      if (i9 & i3 >>> 0 > 591) {
        i15 = 1;
      } else {
        i19 = 0;
        i20 = i3;
        i21 = -1;
        i22 = 5249808;
        i23 = 5249872;
        i24 = i9;
        break;
      }
      STACKTOP = i7;
      return i15 | 0;
    }
  } while (0);
  i1 = i20 - 1 | 0;
  i9 = i16 & 255;
  i3 = HEAP32[i4 >> 2] | 0;
  i10 = -1;
  i14 = 0;
  i17 = i20;
  i20 = 0;
  i18 = i16;
  i25 = 0;
  i26 = i11;
  L640 : while (1) {
    i11 = 1 << i18;
    i27 = i14;
    i28 = i25;
    i29 = i26;
    while (1) {
      i30 = i29 - i20 | 0;
      i31 = i30 & 255;
      i32 = HEAP16[i6 + (i28 << 1) >> 1] | 0;
      i33 = i32 & 65535;
      do {
        if ((i33 | 0) < (i21 | 0)) {
          i34 = 0;
          i35 = i32;
        } else {
          if ((i33 | 0) <= (i21 | 0)) {
            i34 = 96;
            i35 = 0;
            break;
          }
          i34 = HEAP16[i22 + (i33 << 1) >> 1] & 255;
          i35 = HEAP16[i23 + (i33 << 1) >> 1] | 0;
        }
      } while (0);
      i33 = 1 << i30;
      i32 = i27 >>> (i20 >>> 0);
      i36 = i11;
      while (1) {
        i37 = i36 - i33 | 0;
        i38 = i37 + i32 | 0;
        HEAP8[i3 + (i38 << 2) | 0] = i34;
        HEAP8[i3 + (i38 << 2) + 1 | 0] = i31;
        HEAP16[i3 + (i38 << 2) + 2 >> 1] = i35;
        if ((i36 | 0) == (i33 | 0)) {
          break;
        } else {
          i36 = i37;
        }
      }
      i36 = 1 << i29 - 1;
      while (1) {
        if ((i36 & i27 | 0) == 0) {
          break;
        } else {
          i36 = i36 >>> 1;
        }
      }
      if ((i36 | 0) == 0) {
        i39 = 0;
      } else {
        i39 = (i36 - 1 & i27) + i36 | 0;
      }
      i40 = i28 + 1 | 0;
      i33 = i8 + (i29 << 1) | 0;
      i32 = (HEAP16[i33 >> 1] | 0) - 1 & 65535;
      HEAP16[i33 >> 1] = i32;
      if (i32 << 16 >> 16 == 0) {
        if ((i29 | 0) == (i12 | 0)) {
          break L640;
        }
        i41 = HEAPU16[i2 + ((HEAPU16[i6 + (i40 << 1) >> 1] | 0) << 1) >> 1] | 0;
      } else {
        i41 = i29;
      }
      if (i41 >>> 0 <= i16 >>> 0) {
        i27 = i39;
        i28 = i40;
        i29 = i41;
        continue;
      }
      i42 = i39 & i1;
      if ((i42 | 0) == (i10 | 0)) {
        i27 = i39;
        i28 = i40;
        i29 = i41;
      } else {
        break;
      }
    }
    i29 = (i20 | 0) == 0 ? i16 : i20;
    i28 = i3 + (i11 << 2) | 0;
    i27 = i41 - i29 | 0;
    L663 : do {
      if (i41 >>> 0 < i12 >>> 0) {
        i32 = i27;
        i33 = 1 << i27;
        i30 = i41;
        while (1) {
          i37 = i33 - (HEAPU16[i8 + (i30 << 1) >> 1] | 0) | 0;
          if ((i37 | 0) < 1) {
            i43 = i32;
            break L663;
          }
          i38 = i32 + 1 | 0;
          i44 = i38 + i29 | 0;
          if (i44 >>> 0 < i12 >>> 0) {
            i32 = i38;
            i33 = i37 << 1;
            i30 = i44;
          } else {
            i43 = i38;
            break L663;
          }
        }
      } else {
        i43 = i27;
      }
    } while (0);
    i27 = (1 << i43) + i17 | 0;
    if (i19 & i27 >>> 0 > 851 | i24 & i27 >>> 0 > 591) {
      i15 = 1;
      i13 = 469;
      break;
    }
    HEAP8[(HEAP32[i4 >> 2] | 0) + (i42 << 2) | 0] = i43 & 255;
    HEAP8[(HEAP32[i4 >> 2] | 0) + (i42 << 2) + 1 | 0] = i9;
    i11 = HEAP32[i4 >> 2] | 0;
    HEAP16[i11 + (i42 << 2) + 2 >> 1] = (i28 - i11 | 0) >>> 2 & 65535;
    i3 = i28;
    i10 = i42;
    i14 = i39;
    i17 = i27;
    i20 = i29;
    i18 = i43;
    i25 = i40;
    i26 = i41;
  }
  if ((i13 | 0) == 469) {
    STACKTOP = i7;
    return i15 | 0;
  }
  if ((i39 | 0) != 0) {
    HEAP8[i3 + (i39 << 2) | 0] = 64;
    HEAP8[i3 + (i39 << 2) + 1 | 0] = i31;
    HEAP16[i3 + (i39 << 2) + 2 >> 1] = 0;
  }
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (i17 << 2) | 0;
  HEAP32[i5 >> 2] = i16;
  i15 = 0;
  STACKTOP = i7;
  return i15 | 0;
}
function _zcalloc(i1, i2, i3) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  return _malloc(Math_imul(i3, i2)) | 0;
}
function _zcfree(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  _free(i2);
  return;
}
function _emit_message(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
  i3 = HEAP32[i1 >> 2] | 0;
  if ((i2 | 0) >= 0) {
    if ((HEAP32[i3 + 104 >> 2] | 0) < (i2 | 0)) {
      return;
    }
    FUNCTION_TABLE_vi[HEAP32[i3 + 8 >> 2] & 511](i1);
    return;
  }
  i2 = i3 + 108 | 0;
  i4 = HEAP32[i2 >> 2] | 0;
  do {
    if ((i4 | 0) == 0) {
      i5 = 481;
    } else {
      if ((HEAP32[i3 + 104 >> 2] | 0) > 2) {
        i5 = 481;
        break;
      } else {
        i6 = i4;
        break;
      }
    }
  } while (0);
  if ((i5 | 0) == 481) {
    FUNCTION_TABLE_vi[HEAP32[i3 + 8 >> 2] & 511](i1);
    i6 = HEAP32[i2 >> 2] | 0;
  }
  HEAP32[i2 >> 2] = i6 + 1 | 0;
  return;
}
function _format_message(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
  i3 = STACKTOP;
  i4 = HEAP32[i1 >> 2] | 0;
  i1 = HEAP32[i4 + 20 >> 2] | 0;
  do {
    if ((i1 | 0) > 0) {
      if ((i1 | 0) > (HEAP32[i4 + 116 >> 2] | 0)) {
        i5 = 492;
        break;
      }
      i6 = (HEAP32[i4 + 112 >> 2] | 0) + (i1 << 2) | 0;
      i5 = 496;
      break;
    } else {
      i5 = 492;
    }
  } while (0);
  do {
    if ((i5 | 0) == 492) {
      i7 = HEAP32[i4 + 120 >> 2] | 0;
      if ((i7 | 0) == 0) {
        i5 = 497;
        break;
      }
      i8 = HEAP32[i4 + 124 >> 2] | 0;
      if ((i1 | 0) < (i8 | 0)) {
        i5 = 497;
        break;
      }
      if ((i1 | 0) > (HEAP32[i4 + 128 >> 2] | 0)) {
        i5 = 497;
        break;
      }
      i6 = i7 + (i1 - i8 << 2) | 0;
      i5 = 496;
      break;
    }
  } while (0);
  do {
    if ((i5 | 0) == 496) {
      i8 = HEAP32[i6 >> 2] | 0;
      if ((i8 | 0) == 0) {
        i5 = 497;
        break;
      } else {
        i9 = i8;
        break;
      }
    }
  } while (0);
  if ((i5 | 0) == 497) {
    HEAP32[i4 + 24 >> 2] = i1;
    i9 = HEAP32[HEAP32[i4 + 112 >> 2] >> 2] | 0;
  }
  i1 = i9;
  while (1) {
    i10 = i1 + 1 | 0;
    i6 = HEAP8[i1] | 0;
    if ((i6 << 24 >> 24 | 0) == 0) {
      i5 = 500;
      break;
    } else if ((i6 << 24 >> 24 | 0) == 37) {
      i5 = 501;
      break;
    } else {
      i1 = i10;
    }
  }
  do {
    if ((i5 | 0) == 500) {
      i11 = i4 + 24 | 0;
    } else if ((i5 | 0) == 501) {
      i1 = i4 + 24 | 0;
      if (HEAP8[i10] << 24 >> 24 != 115) {
        i11 = i1;
        break;
      }
      _sprintf(i2 | 0, i9 | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = i1, tempInt) | 0) | 0;
      STACKTOP = i3;
      return;
    }
  } while (0);
  i10 = HEAP32[i4 + 28 >> 2] | 0;
  i5 = HEAP32[i4 + 32 >> 2] | 0;
  i1 = HEAP32[i4 + 36 >> 2] | 0;
  i6 = HEAP32[i4 + 40 >> 2] | 0;
  i8 = HEAP32[i4 + 44 >> 2] | 0;
  i7 = HEAP32[i4 + 48 >> 2] | 0;
  i12 = HEAP32[i4 + 52 >> 2] | 0;
  _sprintf(i2 | 0, i9 | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempInt >> 2] = HEAP32[i11 >> 2] | 0, HEAP32[tempInt + 4 >> 2] = i10, HEAP32[tempInt + 8 >> 2] = i5, HEAP32[tempInt + 12 >> 2] = i1, HEAP32[tempInt + 16 >> 2] = i6, HEAP32[tempInt + 20 >> 2] = i8, HEAP32[tempInt + 24 >> 2] = i7, HEAP32[tempInt + 28 >> 2] = i12, tempInt) | 0) | 0;
  STACKTOP = i3;
  return;
}
function _alloc_small(i1, i2, i3) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
  i4 = HEAP32[i1 + 4 >> 2] | 0;
  if (i3 >>> 0 > 999999988) {
    i5 = i1 | 0;
    HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] = 54;
    HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] = 1;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i5 >> 2] >> 2] & 511](i1);
  }
  i5 = i3 & 7;
  if ((i5 | 0) == 0) {
    i6 = i3;
  } else {
    i6 = (i3 + 8 | 0) - i5 | 0;
  }
  if (i2 >>> 0 > 1) {
    i5 = i1 | 0;
    HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] = 14;
    HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] = i2;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i5 >> 2] >> 2] & 511](i1);
  }
  i5 = (i4 + 52 | 0) + (i2 << 2) | 0;
  i3 = i5;
  i7 = 0;
  while (1) {
    i8 = HEAP32[i3 >> 2] | 0;
    if ((i8 | 0) == 0) {
      i9 = 516;
      break;
    }
    if ((HEAP32[i8 + 8 >> 2] | 0) >>> 0 < i6 >>> 0) {
      i3 = i8 | 0;
      i7 = i8;
    } else {
      i10 = i8;
      break;
    }
  }
  do {
    if ((i9 | 0) == 516) {
      i3 = i6 + 12 | 0;
      i8 = (i7 | 0) == 0;
      i11 = HEAP32[(i8 ? 5252408 : 5252416) + (i2 << 2) >> 2] | 0;
      i12 = 999999988 - i6 | 0;
      i13 = i11 >>> 0 > i12 >>> 0 ? i12 : i11;
      i11 = i3 + i13 | 0;
      i12 = _malloc(i11) | 0;
      L731 : do {
        if ((i12 | 0) == 0) {
          i14 = i1 | 0;
          i15 = i13;
          while (1) {
            i16 = i15 >>> 1;
            if (i15 >>> 0 < 100) {
              HEAP32[(HEAP32[i14 >> 2] | 0) + 20 >> 2] = 54;
              HEAP32[(HEAP32[i14 >> 2] | 0) + 24 >> 2] = 2;
              FUNCTION_TABLE_vi[HEAP32[HEAP32[i14 >> 2] >> 2] & 511](i1);
            }
            i17 = i3 + i16 | 0;
            i18 = _malloc(i17) | 0;
            if ((i18 | 0) == 0) {
              i15 = i16;
            } else {
              i19 = i16;
              i20 = i17;
              i21 = i18;
              break L731;
            }
          }
        } else {
          i19 = i13;
          i20 = i11;
          i21 = i12;
        }
      } while (0);
      i12 = i21;
      i11 = i4 + 76 | 0;
      HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + i20 | 0;
      HEAP32[i21 >> 2] = 0;
      HEAP32[i21 + 4 >> 2] = 0;
      HEAP32[i21 + 8 >> 2] = i19 + i6 | 0;
      if (i8) {
        HEAP32[i5 >> 2] = i12;
        i10 = i12;
        break;
      } else {
        HEAP32[i7 >> 2] = i12;
        i10 = i12;
        break;
      }
    }
  } while (0);
  i7 = i10 + 4 | 0;
  i5 = HEAP32[i7 >> 2] | 0;
  HEAP32[i7 >> 2] = i5 + i6 | 0;
  i7 = i10 + 8 | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) - i6 | 0;
  return (i10 + 12 | 0) + i5 | 0;
}
function _alloc_large(i1, i2, i3) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
  i4 = HEAP32[i1 + 4 >> 2] | 0;
  if (i3 >>> 0 > 999999988) {
    i5 = i1 | 0;
    HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] = 54;
    HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] = 3;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i5 >> 2] >> 2] & 511](i1);
  }
  i5 = i3 & 7;
  if ((i5 | 0) == 0) {
    i6 = i3;
  } else {
    i6 = (i3 + 8 | 0) - i5 | 0;
  }
  if (i2 >>> 0 > 1) {
    i5 = i1 | 0;
    HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] = 14;
    HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] = i2;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i5 >> 2] >> 2] & 511](i1);
  }
  i5 = i6 + 12 | 0;
  i3 = _malloc(i5) | 0;
  if ((i3 | 0) == 0) {
    i7 = i1 | 0;
    HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] = 54;
    HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] = 4;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i7 >> 2] >> 2] & 511](i1);
  }
  i1 = i4 + 76 | 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + i5 | 0;
  i5 = (i4 + 60 | 0) + (i2 << 2) | 0;
  HEAP32[i3 >> 2] = HEAP32[i5 >> 2] | 0;
  HEAP32[i3 + 4 >> 2] = i6;
  HEAP32[i3 + 8 >> 2] = 0;
  HEAP32[i5 >> 2] = i3;
  return i3 + 12 | 0;
}
function _alloc_sarray(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
  i5 = HEAP32[i1 + 4 >> 2] | 0;
  i6 = 999999988 / (i3 >>> 0) >>> 0;
  if ((i6 | 0) == 0) {
    i7 = i1 | 0;
    HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] = 70;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i7 >> 2] >> 2] & 511](i1);
  }
  i7 = (i6 | 0) < (i4 | 0) ? i6 : i4;
  HEAP32[i5 + 80 >> 2] = i7;
  i5 = _alloc_small(i1, i2, i4 << 2) | 0;
  if ((i4 | 0) == 0) {
    return i5 | 0;
  }
  i6 = i4 ^ -1;
  i8 = i7;
  i7 = 0;
  while (1) {
    i9 = i4 - i7 | 0;
    i10 = i8 >>> 0 < i9 >>> 0 ? i8 : i9;
    i9 = _alloc_large(i1, i2, Math_imul(i10, i3)) | 0;
    if ((i10 | 0) == 0) {
      i11 = i7;
    } else {
      i12 = i8 ^ -1;
      i13 = i7 + i6 | 0;
      i14 = i13 >>> 0 < i12 >>> 0 ? i12 : i13;
      i13 = i7;
      i12 = i10;
      i15 = i9;
      while (1) {
        HEAP32[i5 + (i13 << 2) >> 2] = i15;
        i9 = i12 - 1 | 0;
        if ((i9 | 0) == 0) {
          break;
        } else {
          i13 = i13 + 1 | 0;
          i12 = i9;
          i15 = i15 + i3 | 0;
        }
      }
      i11 = (i7 - 1 | 0) - i14 | 0;
    }
    if (i11 >>> 0 < i4 >>> 0) {
      i8 = i10;
      i7 = i11;
    } else {
      break;
    }
  }
  return i5 | 0;
}
function _alloc_barray(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
  i5 = HEAP32[i1 + 4 >> 2] | 0;
  i6 = i3 << 7;
  i7 = 999999988 / (i6 >>> 0) >>> 0;
  if ((i7 | 0) == 0) {
    i8 = i1 | 0;
    HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 70;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i8 >> 2] >> 2] & 511](i1);
  }
  i8 = (i7 | 0) < (i4 | 0) ? i7 : i4;
  HEAP32[i5 + 80 >> 2] = i8;
  i5 = _alloc_small(i1, i2, i4 << 2) | 0;
  if ((i4 | 0) == 0) {
    return i5 | 0;
  }
  i7 = i4 ^ -1;
  i9 = i8;
  i8 = 0;
  while (1) {
    i10 = i4 - i8 | 0;
    i11 = i9 >>> 0 < i10 >>> 0 ? i9 : i10;
    i10 = _alloc_large(i1, i2, Math_imul(i6, i11)) | 0;
    if ((i11 | 0) == 0) {
      i12 = i8;
    } else {
      i13 = i9 ^ -1;
      i14 = i8 + i7 | 0;
      i15 = i14 >>> 0 < i13 >>> 0 ? i13 : i14;
      i14 = i8;
      i13 = i11;
      i16 = i10;
      while (1) {
        HEAP32[i5 + (i14 << 2) >> 2] = i16;
        i10 = i13 - 1 | 0;
        if ((i10 | 0) == 0) {
          break;
        } else {
          i14 = i14 + 1 | 0;
          i13 = i10;
          i16 = i16 + (i3 << 7) | 0;
        }
      }
      i12 = (i8 - 1 | 0) - i15 | 0;
    }
    if (i12 >>> 0 < i4 >>> 0) {
      i9 = i11;
      i8 = i12;
    } else {
      break;
    }
  }
  return i5 | 0;
}
function _request_virt_sarray(i1, i2, i3, i4, i5, i6) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  var i7 = 0, i8 = 0;
  i7 = HEAP32[i1 + 4 >> 2] | 0;
  if ((i2 | 0) != 1) {
    i8 = i1 | 0;
    HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 14;
    HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = i2;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i8 >> 2] >> 2] & 511](i1);
  }
  i8 = _alloc_small(i1, i2, 128) | 0;
  HEAP32[i8 >> 2] = 0;
  HEAP32[i8 + 4 >> 2] = i5;
  HEAP32[i8 + 8 >> 2] = i4;
  HEAP32[i8 + 12 >> 2] = i6;
  HEAP32[i8 + 32 >> 2] = i3;
  HEAP32[i8 + 40 >> 2] = 0;
  i3 = i7 + 68 | 0;
  HEAP32[i8 + 44 >> 2] = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = i8;
  return i8 | 0;
}
function _request_virt_barray(i1, i2, i3, i4, i5, i6) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  var i7 = 0, i8 = 0;
  i7 = HEAP32[i1 + 4 >> 2] | 0;
  if ((i2 | 0) != 1) {
    i8 = i1 | 0;
    HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 14;
    HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = i2;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i8 >> 2] >> 2] & 511](i1);
  }
  i8 = _alloc_small(i1, i2, 128) | 0;
  HEAP32[i8 >> 2] = 0;
  HEAP32[i8 + 4 >> 2] = i5;
  HEAP32[i8 + 8 >> 2] = i4;
  HEAP32[i8 + 12 >> 2] = i6;
  HEAP32[i8 + 32 >> 2] = i3;
  HEAP32[i8 + 40 >> 2] = 0;
  i3 = i7 + 72 | 0;
  HEAP32[i8 + 44 >> 2] = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = i8;
  return i8 | 0;
}
function _realize_virt_arrays(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
  i2 = HEAP32[i1 + 4 >> 2] | 0;
  i3 = HEAP32[i2 + 68 >> 2] | 0;
  i4 = (i3 | 0) == 0;
  L797 : do {
    if (i4) {
      i5 = 0;
    } else {
      i6 = 0;
      i7 = i3;
      while (1) {
        if ((HEAP32[i7 >> 2] | 0) == 0) {
          i8 = Math_imul(HEAP32[i7 + 8 >> 2] | 0, HEAP32[i7 + 12 >> 2] | 0) + i6 | 0;
        } else {
          i8 = i6;
        }
        i9 = HEAP32[i7 + 44 >> 2] | 0;
        if ((i9 | 0) == 0) {
          i5 = i8;
          break L797;
        } else {
          i6 = i8;
          i7 = i9;
        }
      }
    }
  } while (0);
  i8 = i2 + 72 | 0;
  i7 = HEAP32[i8 >> 2] | 0;
  L805 : do {
    if ((i7 | 0) == 0) {
      i10 = i5;
    } else {
      i6 = i5;
      i9 = i7;
      while (1) {
        if ((HEAP32[i9 >> 2] | 0) == 0) {
          i11 = Math_imul(HEAP32[i9 + 12 >> 2] << 7, HEAP32[i9 + 8 >> 2] | 0) + i6 | 0;
        } else {
          i11 = i6;
        }
        i12 = HEAP32[i9 + 44 >> 2] | 0;
        if ((i12 | 0) == 0) {
          i10 = i11;
          break L805;
        } else {
          i6 = i11;
          i9 = i12;
        }
      }
    }
  } while (0);
  if ((i10 | 0) < 1) {
    return;
  }
  if (i4) {
    i13 = i7;
  } else {
    i7 = i1;
    i4 = i1;
    i10 = i2 + 80 | 0;
    i11 = i3;
    while (1) {
      i3 = i11 | 0;
      if ((HEAP32[i3 >> 2] | 0) == 0) {
        i5 = HEAP32[i11 + 4 >> 2] | 0;
        i9 = HEAP32[i11 + 12 >> 2] | 0;
        if (((((i5 - 1 | 0) >>> 0) / (i9 >>> 0) >>> 0) + 1 | 0) > 1e9) {
          i6 = i11 + 16 | 0;
          HEAP32[i6 >> 2] = Math_imul(i9, 1e9);
          HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] = 49;
          FUNCTION_TABLE_vi[HEAP32[HEAP32[i4 >> 2] >> 2] & 511](i7);
          HEAP32[i11 + 40 >> 2] = 1;
          i14 = HEAP32[i6 >> 2] | 0;
        } else {
          HEAP32[i11 + 16 >> 2] = i5;
          i14 = i5;
        }
        HEAP32[i3 >> 2] = _alloc_sarray(i1, 1, HEAP32[i11 + 8 >> 2] | 0, i14) | 0;
        HEAP32[i11 + 20 >> 2] = HEAP32[i10 >> 2] | 0;
        HEAP32[i11 + 24 >> 2] = 0;
        HEAP32[i11 + 28 >> 2] = 0;
        HEAP32[i11 + 36 >> 2] = 0;
      }
      i3 = HEAP32[i11 + 44 >> 2] | 0;
      if ((i3 | 0) == 0) {
        break;
      } else {
        i11 = i3;
      }
    }
    i13 = HEAP32[i8 >> 2] | 0;
  }
  if ((i13 | 0) == 0) {
    return;
  }
  i8 = i1;
  i11 = i1;
  i10 = i2 + 80 | 0;
  i2 = i13;
  while (1) {
    i13 = i2 | 0;
    if ((HEAP32[i13 >> 2] | 0) == 0) {
      i14 = HEAP32[i2 + 4 >> 2] | 0;
      i7 = HEAP32[i2 + 12 >> 2] | 0;
      if (((((i14 - 1 | 0) >>> 0) / (i7 >>> 0) >>> 0) + 1 | 0) > 1e9) {
        i4 = i2 + 16 | 0;
        HEAP32[i4 >> 2] = Math_imul(i7, 1e9);
        HEAP32[(HEAP32[i11 >> 2] | 0) + 20 >> 2] = 49;
        FUNCTION_TABLE_vi[HEAP32[HEAP32[i11 >> 2] >> 2] & 511](i8);
        HEAP32[i2 + 40 >> 2] = 1;
        i15 = HEAP32[i4 >> 2] | 0;
      } else {
        HEAP32[i2 + 16 >> 2] = i14;
        i15 = i14;
      }
      HEAP32[i13 >> 2] = _alloc_barray(i1, 1, HEAP32[i2 + 8 >> 2] | 0, i15) | 0;
      HEAP32[i2 + 20 >> 2] = HEAP32[i10 >> 2] | 0;
      HEAP32[i2 + 24 >> 2] = 0;
      HEAP32[i2 + 28 >> 2] = 0;
      HEAP32[i2 + 36 >> 2] = 0;
    }
    i13 = HEAP32[i2 + 44 >> 2] | 0;
    if ((i13 | 0) == 0) {
      break;
    } else {
      i2 = i13;
    }
  }
  return;
}
function _access_virt_sarray(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0;
  i6 = i4 + i3 | 0;
  i7 = i2 + 4 | 0;
  do {
    if (i6 >>> 0 > (HEAP32[i7 >> 2] | 0) >>> 0) {
      i8 = 599;
    } else {
      if ((HEAP32[i2 + 12 >> 2] | 0) >>> 0 < i4 >>> 0) {
        i8 = 599;
        break;
      }
      if ((HEAP32[i2 >> 2] | 0) == 0) {
        i8 = 599;
        break;
      } else {
        break;
      }
    }
  } while (0);
  if ((i8 | 0) == 599) {
    i4 = i1 | 0;
    HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] = 22;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i4 >> 2] >> 2] & 511](i1);
  }
  i4 = i2 + 24 | 0;
  i9 = HEAP32[i4 >> 2] | 0;
  do {
    if (i9 >>> 0 > i3 >>> 0) {
      i8 = 602;
    } else {
      if (i6 >>> 0 > ((HEAP32[i2 + 16 >> 2] | 0) + i9 | 0) >>> 0) {
        i8 = 602;
        break;
      } else {
        break;
      }
    }
  } while (0);
  L851 : do {
    if ((i8 | 0) == 602) {
      if ((HEAP32[i2 + 40 >> 2] | 0) == 0) {
        i9 = i1 | 0;
        HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] = 69;
        FUNCTION_TABLE_vi[HEAP32[HEAP32[i9 >> 2] >> 2] & 511](i1);
      }
      i9 = i2 + 36 | 0;
      if ((HEAP32[i9 >> 2] | 0) == 0) {
        i10 = HEAP32[i2 + 16 >> 2] | 0;
      } else {
        i11 = HEAP32[i2 + 8 >> 2] | 0;
        i12 = HEAP32[i4 >> 2] | 0;
        i13 = i2 + 20 | 0;
        i14 = i2 + 16 | 0;
        i15 = HEAP32[i14 >> 2] | 0;
        L859 : do {
          if ((i15 | 0) > 0) {
            i16 = i2 + 28 | 0;
            i17 = i2 + 48 | 0;
            i18 = i2 | 0;
            i19 = i2 + 52 | 0;
            i20 = HEAP32[i13 >> 2] | 0;
            i21 = (i20 | 0) < (i15 | 0) ? i20 : i15;
            i20 = (HEAP32[i16 >> 2] | 0) - i12 | 0;
            i22 = (i21 | 0) < (i20 | 0) ? i21 : i20;
            i20 = (HEAP32[i7 >> 2] | 0) - i12 | 0;
            i21 = (i22 | 0) < (i20 | 0) ? i22 : i20;
            if ((i21 | 0) < 1) {
              i23 = i15;
              break;
            }
            i20 = 0;
            i22 = Math_imul(i12, i11);
            i24 = i21;
            while (1) {
              i21 = Math_imul(i24, i11);
              FUNCTION_TABLE_viiiii[HEAP32[i19 >> 2] & 511](i1, i17, HEAP32[(HEAP32[i18 >> 2] | 0) + (i20 << 2) >> 2] | 0, i22, i21);
              i25 = HEAP32[i13 >> 2] | 0;
              i26 = HEAP32[i14 >> 2] | 0;
              i27 = i25 + i20 | 0;
              if ((i27 | 0) >= (i26 | 0)) {
                i23 = i26;
                break L859;
              }
              i28 = i26 - i27 | 0;
              i29 = (i25 | 0) < (i28 | 0) ? i25 : i28;
              i28 = i27 + (HEAP32[i4 >> 2] | 0) | 0;
              i25 = (HEAP32[i16 >> 2] | 0) - i28 | 0;
              i30 = (i29 | 0) < (i25 | 0) ? i29 : i25;
              i25 = (HEAP32[i7 >> 2] | 0) - i28 | 0;
              i28 = (i30 | 0) < (i25 | 0) ? i30 : i25;
              if ((i28 | 0) < 1) {
                i23 = i26;
                break L859;
              }
              i20 = i27;
              i22 = i21 + i22 | 0;
              i24 = i28;
            }
          } else {
            i23 = i15;
          }
        } while (0);
        HEAP32[i9 >> 2] = 0;
        i10 = i23;
      }
      i15 = i2 + 16 | 0;
      if ((HEAP32[i4 >> 2] | 0) >>> 0 < i3 >>> 0) {
        i31 = i3;
      } else {
        i14 = i6 - i10 | 0;
        i31 = (i14 | 0) < 0 ? 0 : i14;
      }
      HEAP32[i4 >> 2] = i31;
      i14 = HEAP32[i2 + 8 >> 2] | 0;
      i13 = i2 + 20 | 0;
      if ((i10 | 0) <= 0) {
        break;
      }
      i11 = i2 + 28 | 0;
      i12 = i2 + 48 | 0;
      i24 = i12 | 0;
      i22 = i2 | 0;
      i20 = HEAP32[i13 >> 2] | 0;
      i16 = (i20 | 0) < (i10 | 0) ? i20 : i10;
      i20 = (HEAP32[i11 >> 2] | 0) - i31 | 0;
      i18 = (i16 | 0) < (i20 | 0) ? i16 : i20;
      i20 = (HEAP32[i7 >> 2] | 0) - i31 | 0;
      i16 = (i18 | 0) < (i20 | 0) ? i18 : i20;
      if ((i16 | 0) < 1) {
        break;
      }
      i20 = 0;
      i18 = Math_imul(i14, i31);
      i17 = i16;
      while (1) {
        i16 = Math_imul(i17, i14);
        FUNCTION_TABLE_viiiii[HEAP32[i24 >> 2] & 511](i1, i12, HEAP32[(HEAP32[i22 >> 2] | 0) + (i20 << 2) >> 2] | 0, i18, i16);
        i19 = HEAP32[i13 >> 2] | 0;
        i28 = HEAP32[i15 >> 2] | 0;
        i21 = i19 + i20 | 0;
        if ((i21 | 0) >= (i28 | 0)) {
          break L851;
        }
        i27 = i28 - i21 | 0;
        i28 = (i19 | 0) < (i27 | 0) ? i19 : i27;
        i27 = i21 + (HEAP32[i4 >> 2] | 0) | 0;
        i19 = (HEAP32[i11 >> 2] | 0) - i27 | 0;
        i26 = (i28 | 0) < (i19 | 0) ? i28 : i19;
        i19 = (HEAP32[i7 >> 2] | 0) - i27 | 0;
        i27 = (i26 | 0) < (i19 | 0) ? i26 : i19;
        if ((i27 | 0) < 1) {
          break L851;
        }
        i20 = i21;
        i18 = i16 + i18 | 0;
        i17 = i27;
      }
    }
  } while (0);
  i7 = i2 + 28 | 0;
  i31 = HEAP32[i7 >> 2] | 0;
  L878 : do {
    if (i31 >>> 0 < i6 >>> 0) {
      do {
        if (i31 >>> 0 < i3 >>> 0) {
          if ((i5 | 0) == 0) {
            i32 = i3;
            i33 = 0;
            break;
          }
          i10 = i1 | 0;
          HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] = 22;
          FUNCTION_TABLE_vi[HEAP32[HEAP32[i10 >> 2] >> 2] & 511](i1);
          i34 = i3;
          i8 = 625;
          break;
        } else {
          i34 = i31;
          i8 = 625;
        }
      } while (0);
      do {
        if ((i8 | 0) == 625) {
          if ((i5 | 0) == 0) {
            i32 = i34;
            i33 = 0;
            break;
          }
          HEAP32[i7 >> 2] = i6;
          i32 = i34;
          i33 = 1;
        }
      } while (0);
      if ((HEAP32[i2 + 32 >> 2] | 0) == 0) {
        if (i33) {
          break;
        }
        i10 = i1 | 0;
        HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] = 22;
        FUNCTION_TABLE_vi[HEAP32[HEAP32[i10 >> 2] >> 2] & 511](i1);
        break;
      }
      i10 = HEAP32[i2 + 8 >> 2] | 0;
      i23 = HEAP32[i4 >> 2] | 0;
      i17 = i32 - i23 | 0;
      i18 = i6 - i23 | 0;
      if (i17 >>> 0 >= i18 >>> 0) {
        break;
      }
      i23 = i2 | 0;
      i20 = i17;
      while (1) {
        _memset(HEAP32[(HEAP32[i23 >> 2] | 0) + (i20 << 2) >> 2] | 0, 0, i10 | 0);
        i17 = i20 + 1 | 0;
        if ((i17 | 0) == (i18 | 0)) {
          break L878;
        } else {
          i20 = i17;
        }
      }
    }
  } while (0);
  if ((i5 | 0) == 0) {
    i35 = i2 | 0;
    i36 = HEAP32[i35 >> 2] | 0;
    i37 = HEAP32[i4 >> 2] | 0;
    i38 = i3 - i37 | 0;
    i39 = i36 + (i38 << 2) | 0;
    return i39 | 0;
  }
  HEAP32[i2 + 36 >> 2] = 1;
  i35 = i2 | 0;
  i36 = HEAP32[i35 >> 2] | 0;
  i37 = HEAP32[i4 >> 2] | 0;
  i38 = i3 - i37 | 0;
  i39 = i36 + (i38 << 2) | 0;
  return i39 | 0;
}
function _access_virt_barray(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
  i6 = i4 + i3 | 0;
  i7 = i2 + 4 | 0;
  do {
    if (i6 >>> 0 > (HEAP32[i7 >> 2] | 0) >>> 0) {
      i8 = 641;
    } else {
      if ((HEAP32[i2 + 12 >> 2] | 0) >>> 0 < i4 >>> 0) {
        i8 = 641;
        break;
      }
      if ((HEAP32[i2 >> 2] | 0) == 0) {
        i8 = 641;
        break;
      } else {
        break;
      }
    }
  } while (0);
  if ((i8 | 0) == 641) {
    i4 = i1 | 0;
    HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] = 22;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i4 >> 2] >> 2] & 511](i1);
  }
  i4 = i2 + 24 | 0;
  i9 = HEAP32[i4 >> 2] | 0;
  do {
    if (i9 >>> 0 > i3 >>> 0) {
      i8 = 644;
    } else {
      if (i6 >>> 0 > ((HEAP32[i2 + 16 >> 2] | 0) + i9 | 0) >>> 0) {
        i8 = 644;
        break;
      } else {
        break;
      }
    }
  } while (0);
  L908 : do {
    if ((i8 | 0) == 644) {
      if ((HEAP32[i2 + 40 >> 2] | 0) == 0) {
        i9 = i1 | 0;
        HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] = 69;
        FUNCTION_TABLE_vi[HEAP32[HEAP32[i9 >> 2] >> 2] & 511](i1);
      }
      i9 = i2 + 36 | 0;
      if ((HEAP32[i9 >> 2] | 0) == 0) {
        i10 = HEAP32[i2 + 16 >> 2] | 0;
      } else {
        i11 = HEAP32[i2 + 8 >> 2] << 7;
        i12 = i2 + 20 | 0;
        i13 = i2 + 16 | 0;
        i14 = HEAP32[i13 >> 2] | 0;
        L916 : do {
          if ((i14 | 0) > 0) {
            i15 = HEAP32[i4 >> 2] | 0;
            i16 = i2 + 28 | 0;
            i17 = i2 + 48 | 0;
            i18 = i2 | 0;
            i19 = i2 + 52 | 0;
            i20 = HEAP32[i12 >> 2] | 0;
            i21 = (i20 | 0) < (i14 | 0) ? i20 : i14;
            i20 = (HEAP32[i16 >> 2] | 0) - i15 | 0;
            i22 = (i21 | 0) < (i20 | 0) ? i21 : i20;
            i20 = (HEAP32[i7 >> 2] | 0) - i15 | 0;
            i21 = (i22 | 0) < (i20 | 0) ? i22 : i20;
            if ((i21 | 0) < 1) {
              i23 = i14;
              break;
            }
            i20 = 0;
            i22 = Math_imul(i15, i11);
            i15 = i21;
            while (1) {
              i21 = Math_imul(i15, i11);
              FUNCTION_TABLE_viiiii[HEAP32[i19 >> 2] & 511](i1, i17, HEAP32[(HEAP32[i18 >> 2] | 0) + (i20 << 2) >> 2] | 0, i22, i21);
              i24 = HEAP32[i12 >> 2] | 0;
              i25 = i24 + i20 | 0;
              i26 = HEAP32[i13 >> 2] | 0;
              if ((i25 | 0) >= (i26 | 0)) {
                i23 = i26;
                break L916;
              }
              i27 = i26 - i25 | 0;
              i28 = (i24 | 0) < (i27 | 0) ? i24 : i27;
              i27 = i25 + (HEAP32[i4 >> 2] | 0) | 0;
              i24 = (HEAP32[i16 >> 2] | 0) - i27 | 0;
              i29 = (i28 | 0) < (i24 | 0) ? i28 : i24;
              i24 = (HEAP32[i7 >> 2] | 0) - i27 | 0;
              i27 = (i29 | 0) < (i24 | 0) ? i29 : i24;
              if ((i27 | 0) < 1) {
                i23 = i26;
                break L916;
              }
              i20 = i25;
              i22 = i21 + i22 | 0;
              i15 = i27;
            }
          } else {
            i23 = i14;
          }
        } while (0);
        HEAP32[i9 >> 2] = 0;
        i10 = i23;
      }
      i14 = i2 + 16 | 0;
      if ((HEAP32[i4 >> 2] | 0) >>> 0 < i3 >>> 0) {
        i30 = i3;
      } else {
        i13 = i6 - i10 | 0;
        i30 = (i13 | 0) < 0 ? 0 : i13;
      }
      HEAP32[i4 >> 2] = i30;
      i13 = HEAP32[i2 + 8 >> 2] << 7;
      i12 = i2 + 20 | 0;
      if ((i10 | 0) <= 0) {
        break;
      }
      i11 = i2 + 28 | 0;
      i15 = i2 + 48 | 0;
      i22 = i15 | 0;
      i20 = i2 | 0;
      i16 = HEAP32[i12 >> 2] | 0;
      i18 = (i16 | 0) < (i10 | 0) ? i16 : i10;
      i16 = (HEAP32[i11 >> 2] | 0) - i30 | 0;
      i17 = (i18 | 0) < (i16 | 0) ? i18 : i16;
      i16 = (HEAP32[i7 >> 2] | 0) - i30 | 0;
      i18 = (i17 | 0) < (i16 | 0) ? i17 : i16;
      if ((i18 | 0) < 1) {
        break;
      }
      i16 = 0;
      i17 = Math_imul(i13, i30);
      i19 = i18;
      while (1) {
        i18 = Math_imul(i19, i13);
        FUNCTION_TABLE_viiiii[HEAP32[i22 >> 2] & 511](i1, i15, HEAP32[(HEAP32[i20 >> 2] | 0) + (i16 << 2) >> 2] | 0, i17, i18);
        i27 = HEAP32[i12 >> 2] | 0;
        i21 = i27 + i16 | 0;
        i25 = HEAP32[i14 >> 2] | 0;
        if ((i21 | 0) >= (i25 | 0)) {
          break L908;
        }
        i26 = i25 - i21 | 0;
        i25 = (i27 | 0) < (i26 | 0) ? i27 : i26;
        i26 = i21 + (HEAP32[i4 >> 2] | 0) | 0;
        i27 = (HEAP32[i11 >> 2] | 0) - i26 | 0;
        i24 = (i25 | 0) < (i27 | 0) ? i25 : i27;
        i27 = (HEAP32[i7 >> 2] | 0) - i26 | 0;
        i26 = (i24 | 0) < (i27 | 0) ? i24 : i27;
        if ((i26 | 0) < 1) {
          break L908;
        }
        i16 = i21;
        i17 = i18 + i17 | 0;
        i19 = i26;
      }
    }
  } while (0);
  i7 = i2 + 28 | 0;
  i30 = HEAP32[i7 >> 2] | 0;
  L935 : do {
    if (i30 >>> 0 < i6 >>> 0) {
      do {
        if (i30 >>> 0 < i3 >>> 0) {
          if ((i5 | 0) == 0) {
            i31 = i3;
            i32 = 0;
            break;
          }
          i10 = i1 | 0;
          HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] = 22;
          FUNCTION_TABLE_vi[HEAP32[HEAP32[i10 >> 2] >> 2] & 511](i1);
          i33 = i3;
          i8 = 667;
          break;
        } else {
          i33 = i30;
          i8 = 667;
        }
      } while (0);
      do {
        if ((i8 | 0) == 667) {
          if ((i5 | 0) == 0) {
            i31 = i33;
            i32 = 0;
            break;
          }
          HEAP32[i7 >> 2] = i6;
          i31 = i33;
          i32 = 1;
        }
      } while (0);
      if ((HEAP32[i2 + 32 >> 2] | 0) == 0) {
        if (i32) {
          break;
        }
        i10 = i1 | 0;
        HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] = 22;
        FUNCTION_TABLE_vi[HEAP32[HEAP32[i10 >> 2] >> 2] & 511](i1);
        break;
      }
      i10 = HEAP32[i2 + 8 >> 2] << 7;
      i23 = HEAP32[i4 >> 2] | 0;
      i19 = i31 - i23 | 0;
      i17 = i6 - i23 | 0;
      if (i19 >>> 0 >= i17 >>> 0) {
        break;
      }
      i23 = i2 | 0;
      i16 = i19;
      while (1) {
        _memset(HEAP32[(HEAP32[i23 >> 2] | 0) + (i16 << 2) >> 2] | 0, 0, i10 | 0);
        i19 = i16 + 1 | 0;
        if ((i19 | 0) == (i17 | 0)) {
          break L935;
        } else {
          i16 = i19;
        }
      }
    }
  } while (0);
  if ((i5 | 0) == 0) {
    i34 = i2 | 0;
    i35 = HEAP32[i34 >> 2] | 0;
    i36 = HEAP32[i4 >> 2] | 0;
    i37 = i3 - i36 | 0;
    i38 = i35 + (i37 << 2) | 0;
    return i38 | 0;
  }
  HEAP32[i2 + 36 >> 2] = 1;
  i34 = i2 | 0;
  i35 = HEAP32[i34 >> 2] | 0;
  i36 = HEAP32[i4 >> 2] | 0;
  i37 = i3 - i36 | 0;
  i38 = i35 + (i37 << 2) | 0;
  return i38 | 0;
}
function _free_pool(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
  i3 = HEAP32[i1 + 4 >> 2] | 0;
  do {
    if (i2 >>> 0 > 1) {
      i4 = i1 | 0;
      HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] = 14;
      HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] = i2;
      FUNCTION_TABLE_vi[HEAP32[HEAP32[i4 >> 2] >> 2] & 511](i1);
    } else {
      if ((i2 | 0) != 1) {
        break;
      }
      i4 = i3 + 68 | 0;
      i5 = HEAP32[i4 >> 2] | 0;
      L961 : do {
        if ((i5 | 0) != 0) {
          i6 = i5;
          while (1) {
            i7 = i6 + 40 | 0;
            if ((HEAP32[i7 >> 2] | 0) != 0) {
              HEAP32[i7 >> 2] = 0;
              FUNCTION_TABLE_vii[HEAP32[i6 + 56 >> 2] & 511](i1, i6 + 48 | 0);
            }
            i7 = HEAP32[i6 + 44 >> 2] | 0;
            if ((i7 | 0) == 0) {
              break L961;
            } else {
              i6 = i7;
            }
          }
        }
      } while (0);
      HEAP32[i4 >> 2] = 0;
      i5 = i3 + 72 | 0;
      i6 = HEAP32[i5 >> 2] | 0;
      L969 : do {
        if ((i6 | 0) != 0) {
          i7 = i6;
          while (1) {
            i8 = i7 + 40 | 0;
            if ((HEAP32[i8 >> 2] | 0) != 0) {
              HEAP32[i8 >> 2] = 0;
              FUNCTION_TABLE_vii[HEAP32[i7 + 56 >> 2] & 511](i1, i7 + 48 | 0);
            }
            i8 = HEAP32[i7 + 44 >> 2] | 0;
            if ((i8 | 0) == 0) {
              break L969;
            } else {
              i7 = i8;
            }
          }
        }
      } while (0);
      HEAP32[i5 >> 2] = 0;
    }
  } while (0);
  i1 = (i3 + 60 | 0) + (i2 << 2) | 0;
  i6 = HEAP32[i1 >> 2] | 0;
  HEAP32[i1 >> 2] = 0;
  L978 : do {
    if ((i6 | 0) != 0) {
      i1 = i3 + 76 | 0;
      i4 = i1;
      i7 = i6;
      while (1) {
        i8 = HEAP32[i7 >> 2] | 0;
        i9 = HEAP32[i7 + 4 >> 2] | 0;
        i10 = HEAP32[i7 + 8 >> 2] | 0;
        _free(i7);
        HEAP32[i1 >> 2] = ((-12 - i9 | 0) - i10 | 0) + (HEAP32[i4 >> 2] | 0) | 0;
        if ((i8 | 0) == 0) {
          break L978;
        } else {
          i7 = i8;
        }
      }
    }
  } while (0);
  i6 = (i3 + 52 | 0) + (i2 << 2) | 0;
  i2 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = 0;
  if ((i2 | 0) == 0) {
    return;
  }
  i6 = i3 + 76 | 0;
  i3 = i6;
  i7 = i2;
  while (1) {
    i2 = HEAP32[i7 >> 2] | 0;
    i4 = HEAP32[i7 + 4 >> 2] | 0;
    i1 = HEAP32[i7 + 8 >> 2] | 0;
    _free(i7);
    HEAP32[i6 >> 2] = ((-12 - i4 | 0) - i1 | 0) + (HEAP32[i3 >> 2] | 0) | 0;
    if ((i2 | 0) == 0) {
      break;
    } else {
      i7 = i2;
    }
  }
  return;
}
function _self_destruct(i1) {
  i1 = i1 | 0;
  var i2 = 0;
  _free_pool(i1, 1);
  _free_pool(i1, 0);
  i2 = i1 + 4 | 0;
  _free(HEAP32[i2 >> 2] | 0);
  HEAP32[i2 >> 2] = 0;
  return;
}
function _prepare_for_output_pass(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
  i2 = HEAP32[i1 + 420 >> 2] | 0;
  i3 = i2 + 8 | 0;
  do {
    if ((HEAP32[i3 >> 2] | 0) == 0) {
      i4 = i1 + 84 | 0;
      L994 : do {
        if ((HEAP32[i4 >> 2] | 0) != 0) {
          if ((HEAP32[i1 + 136 >> 2] | 0) != 0) {
            break;
          }
          do {
            if ((HEAP32[i1 + 92 >> 2] | 0) != 0) {
              if ((HEAP32[i1 + 108 >> 2] | 0) == 0) {
                break;
              }
              HEAP32[i1 + 460 >> 2] = HEAP32[i2 + 24 >> 2] | 0;
              HEAP32[i3 >> 2] = 1;
              break L994;
            }
          } while (0);
          if ((HEAP32[i1 + 100 >> 2] | 0) == 0) {
            i5 = i1 | 0;
            HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] = 46;
            FUNCTION_TABLE_vi[HEAP32[HEAP32[i5 >> 2] >> 2] & 511](i1);
            break;
          } else {
            HEAP32[i1 + 460 >> 2] = HEAP32[i2 + 20 >> 2] | 0;
            break;
          }
        }
      } while (0);
      FUNCTION_TABLE_vi[HEAP32[HEAP32[i1 + 448 >> 2] >> 2] & 511](i1);
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 + 428 >> 2] | 0) + 8 >> 2] & 511](i1);
      if ((HEAP32[i1 + 68 >> 2] | 0) != 0) {
        break;
      }
      if ((HEAP32[i2 + 16 >> 2] | 0) == 0) {
        FUNCTION_TABLE_vi[HEAP32[HEAP32[i1 + 456 >> 2] >> 2] & 511](i1);
      }
      FUNCTION_TABLE_vi[HEAP32[HEAP32[i1 + 452 >> 2] >> 2] & 511](i1);
      if ((HEAP32[i4 >> 2] | 0) != 0) {
        FUNCTION_TABLE_vii[HEAP32[HEAP32[i1 + 460 >> 2] >> 2] & 511](i1, HEAP32[i3 >> 2] | 0);
      }
      FUNCTION_TABLE_vii[HEAP32[HEAP32[i1 + 432 >> 2] >> 2] & 511](i1, (HEAP32[i3 >> 2] | 0) != 0 ? 3 : 0);
      FUNCTION_TABLE_vii[HEAP32[HEAP32[i1 + 424 >> 2] >> 2] & 511](i1, 0);
    } else {
      HEAP32[i3 >> 2] = 0;
      FUNCTION_TABLE_vii[HEAP32[HEAP32[i1 + 460 >> 2] >> 2] & 511](i1, 0);
      FUNCTION_TABLE_vii[HEAP32[HEAP32[i1 + 432 >> 2] >> 2] & 511](i1, 2);
      FUNCTION_TABLE_vii[HEAP32[HEAP32[i1 + 424 >> 2] >> 2] & 511](i1, 2);
    }
  } while (0);
  i5 = i1 + 8 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  if ((i6 | 0) == 0) {
    return;
  }
  i7 = i2 + 12 | 0;
  HEAP32[i6 + 12 >> 2] = HEAP32[i7 >> 2] | 0;
  HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] = ((HEAP32[i3 >> 2] | 0) != 0 ? 2 : 1) + (HEAP32[i7 >> 2] | 0) | 0;
  if ((HEAP32[i1 + 64 >> 2] | 0) == 0) {
    return;
  }
  if ((HEAP32[(HEAP32[i1 + 436 >> 2] | 0) + 20 >> 2] | 0) != 0) {
    return;
  }
  i7 = (HEAP32[i5 >> 2] | 0) + 16 | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + ((HEAP32[i1 + 108 >> 2] | 0) != 0 ? 2 : 1) | 0;
  return;
}
function _finish_output_pass(i1) {
  i1 = i1 | 0;
  var i2 = 0;
  i2 = HEAP32[i1 + 420 >> 2] | 0;
  if ((HEAP32[i1 + 84 >> 2] | 0) != 0) {
    FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 + 460 >> 2] | 0) + 8 >> 2] & 511](i1);
  }
  i1 = i2 + 12 | 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1 | 0;
  return;
}
function _finish_input_pass(i1) {
  i1 = i1 | 0;
  HEAP32[HEAP32[i1 + 436 >> 2] >> 2] = 248;
  return;
}
function _reset_marker_reader(i1) {
  i1 = i1 | 0;
  var i2 = 0;
  i2 = HEAP32[i1 + 440 >> 2] | 0;
  HEAP32[i1 + 216 >> 2] = 0;
  HEAP32[i1 + 144 >> 2] = 0;
  HEAP32[i1 + 416 >> 2] = 0;
  HEAP32[i2 + 12 >> 2] = 0;
  HEAP32[i2 + 16 >> 2] = 0;
  HEAP32[i2 + 24 >> 2] = 0;
  HEAP32[i2 + 164 >> 2] = 0;
  return;
}
function _consume_markers(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0;
  i2 = i1 + 436 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  i4 = i3 + 20 | 0;
  if ((HEAP32[i4 >> 2] | 0) != 0) {
    i5 = 2;
    return i5 | 0;
  }
  i6 = i1 + 440 | 0;
  i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] & 511](i1) | 0;
  if ((i7 | 0) == 1) {
    i8 = i3 + 24 | 0;
    if ((HEAP32[i8 >> 2] | 0) == 0) {
      if ((HEAP32[i3 + 16 >> 2] | 0) == 0) {
        i9 = i1 | 0;
        HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] = 35;
        FUNCTION_TABLE_vi[HEAP32[HEAP32[i9 >> 2] >> 2] & 511](i1);
      }
      _start_input_pass(i1);
      i5 = 1;
      return i5 | 0;
    }
    i9 = i1 + 32 | 0;
    do {
      if ((HEAP32[i9 >> 2] | 0) > 65500) {
        i10 = 739;
      } else {
        if ((HEAP32[i1 + 28 >> 2] | 0) > 65500) {
          i10 = 739;
          break;
        } else {
          break;
        }
      }
    } while (0);
    if ((i10 | 0) == 739) {
      i11 = i1 | 0;
      HEAP32[(HEAP32[i11 >> 2] | 0) + 20 >> 2] = 41;
      HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2] = 65500;
      FUNCTION_TABLE_vi[HEAP32[HEAP32[i11 >> 2] >> 2] & 511](i1);
    }
    i11 = i1 + 212 | 0;
    if ((HEAP32[i11 >> 2] | 0) != 8) {
      i12 = i1 | 0;
      HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] = 15;
      HEAP32[(HEAP32[i12 >> 2] | 0) + 24 >> 2] = HEAP32[i11 >> 2] | 0;
      FUNCTION_TABLE_vi[HEAP32[HEAP32[i12 >> 2] >> 2] & 511](i1);
    }
    i12 = i1 + 36 | 0;
    i11 = HEAP32[i12 >> 2] | 0;
    if ((i11 | 0) > 10) {
      i13 = i1 | 0;
      HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2] = 26;
      HEAP32[(HEAP32[i13 >> 2] | 0) + 24 >> 2] = HEAP32[i12 >> 2] | 0;
      HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2] = 10;
      FUNCTION_TABLE_vi[HEAP32[HEAP32[i13 >> 2] >> 2] & 511](i1);
      i14 = HEAP32[i12 >> 2] | 0;
    } else {
      i14 = i11;
    }
    i11 = i1 + 308 | 0;
    HEAP32[i11 >> 2] = 1;
    i13 = i1 + 312 | 0;
    HEAP32[i13 >> 2] = 1;
    i15 = i1 + 216 | 0;
    do {
      if ((i14 | 0) > 0) {
        i16 = i1 | 0;
        i17 = i1;
        i18 = 0;
        i19 = HEAP32[i15 >> 2] | 0;
        i20 = 1;
        i21 = 1;
        i22 = i14;
        while (1) {
          i23 = i19 + 8 | 0;
          i24 = HEAP32[i23 >> 2] | 0;
          i25 = i19 + 12 | 0;
          do {
            if ((i24 - 1 | 0) >>> 0 > 3) {
              i10 = 749;
            } else {
              if (((HEAP32[i25 >> 2] | 0) - 1 | 0) >>> 0 > 3) {
                i10 = 749;
                break;
              } else {
                i26 = i20;
                i27 = i24;
                i28 = i21;
                i29 = i22;
                break;
              }
            }
          } while (0);
          if ((i10 | 0) == 749) {
            i10 = 0;
            HEAP32[(HEAP32[i16 >> 2] | 0) + 20 >> 2] = 18;
            FUNCTION_TABLE_vi[HEAP32[HEAP32[i16 >> 2] >> 2] & 511](i17);
            i26 = HEAP32[i11 >> 2] | 0;
            i27 = HEAP32[i23 >> 2] | 0;
            i28 = HEAP32[i13 >> 2] | 0;
            i29 = HEAP32[i12 >> 2] | 0;
          }
          i24 = (i26 | 0) > (i27 | 0) ? i26 : i27;
          HEAP32[i11 >> 2] = i24;
          i30 = HEAP32[i25 >> 2] | 0;
          i31 = (i28 | 0) > (i30 | 0) ? i28 : i30;
          HEAP32[i13 >> 2] = i31;
          i30 = i18 + 1 | 0;
          if ((i30 | 0) < (i29 | 0)) {
            i18 = i30;
            i19 = i19 + 84 | 0;
            i20 = i24;
            i21 = i31;
            i22 = i29;
          } else {
            break;
          }
        }
        HEAP32[i1 + 316 >> 2] = 8;
        if ((i29 | 0) <= 0) {
          i32 = i31;
          i33 = i29;
          break;
        }
        i22 = i1 + 28 | 0;
        i21 = 0;
        i20 = HEAP32[i15 >> 2] | 0;
        while (1) {
          HEAP32[i20 + 36 >> 2] = 8;
          i19 = HEAP32[i20 + 8 >> 2] | 0;
          i18 = Math_imul(i19, HEAP32[i22 >> 2] | 0);
          i17 = HEAP32[i11 >> 2] << 3;
          HEAP32[i20 + 28 >> 2] = ((i18 - 1 | 0) + i17 | 0) / (i17 | 0) & -1;
          i17 = HEAP32[i20 + 12 >> 2] | 0;
          i18 = Math_imul(i17, HEAP32[i9 >> 2] | 0);
          i16 = HEAP32[i13 >> 2] << 3;
          HEAP32[i20 + 32 >> 2] = ((i18 - 1 | 0) + i16 | 0) / (i16 | 0) & -1;
          i16 = Math_imul(HEAP32[i22 >> 2] | 0, i19);
          i19 = HEAP32[i11 >> 2] | 0;
          HEAP32[i20 + 40 >> 2] = ((i16 - 1 | 0) + i19 | 0) / (i19 | 0) & -1;
          i19 = Math_imul(HEAP32[i9 >> 2] | 0, i17);
          i17 = HEAP32[i13 >> 2] | 0;
          HEAP32[i20 + 44 >> 2] = ((i19 - 1 | 0) + i17 | 0) / (i17 | 0) & -1;
          HEAP32[i20 + 48 >> 2] = 1;
          HEAP32[i20 + 76 >> 2] = 0;
          i17 = i21 + 1 | 0;
          i34 = HEAP32[i12 >> 2] | 0;
          if ((i17 | 0) < (i34 | 0)) {
            i21 = i17;
            i20 = i20 + 84 | 0;
          } else {
            break;
          }
        }
        i32 = HEAP32[i13 >> 2] | 0;
        i33 = i34;
      } else {
        HEAP32[i1 + 316 >> 2] = 8;
        i32 = 1;
        i33 = i14;
      }
    } while (0);
    i14 = i32 << 3;
    HEAP32[i1 + 320 >> 2] = (((HEAP32[i9 >> 2] | 0) - 1 | 0) + i14 | 0) / (i14 | 0) & -1;
    do {
      if ((HEAP32[i1 + 328 >> 2] | 0) < (i33 | 0)) {
        i10 = 757;
      } else {
        if ((HEAP32[i1 + 220 >> 2] | 0) != 0) {
          i10 = 757;
          break;
        }
        HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] = 0;
        break;
      }
    } while (0);
    if ((i10 | 0) == 757) {
      HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] = 1;
    }
    HEAP32[i8 >> 2] = 0;
    i5 = 1;
    return i5 | 0;
  } else if ((i7 | 0) == 2) {
    HEAP32[i4 >> 2] = 1;
    if ((HEAP32[i3 + 24 >> 2] | 0) == 0) {
      i3 = i1 + 152 | 0;
      i4 = HEAP32[i1 + 144 >> 2] | 0;
      if ((HEAP32[i3 >> 2] | 0) <= (i4 | 0)) {
        i5 = 2;
        return i5 | 0;
      }
      HEAP32[i3 >> 2] = i4;
      i5 = 2;
      return i5 | 0;
    } else {
      if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] | 0) == 0) {
        i5 = 2;
        return i5 | 0;
      }
      i6 = i1 | 0;
      HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] = 59;
      FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 511](i1);
      i5 = 2;
      return i5 | 0;
    }
  } else {
    i5 = i7;
    return i5 | 0;
  }
  return 0;
}
function _reset_input_controller(i1) {
  i1 = i1 | 0;
  var i2 = 0;
  i2 = HEAP32[i1 + 436 >> 2] | 0;
  HEAP32[i2 >> 2] = 248;
  HEAP32[i2 + 16 >> 2] = 0;
  HEAP32[i2 + 20 >> 2] = 0;
  HEAP32[i2 + 24 >> 2] = 1;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 511](i1);
  FUNCTION_TABLE_vi[HEAP32[HEAP32[i1 + 440 >> 2] >> 2] & 511](i1);
  HEAP32[i1 + 160 >> 2] = 0;
  return;
}
function _start_input_pass(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
  i2 = i1 + 328 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  L1091 : do {
    if ((i3 | 0) == 1) {
      i4 = HEAP32[i1 + 332 >> 2] | 0;
      HEAP32[i1 + 348 >> 2] = HEAP32[i4 + 28 >> 2] | 0;
      i5 = i4 + 32 | 0;
      HEAP32[i1 + 352 >> 2] = HEAP32[i5 >> 2] | 0;
      HEAP32[i4 + 52 >> 2] = 1;
      HEAP32[i4 + 56 >> 2] = 1;
      HEAP32[i4 + 60 >> 2] = 1;
      HEAP32[i4 + 64 >> 2] = HEAP32[i4 + 36 >> 2] | 0;
      HEAP32[i4 + 68 >> 2] = 1;
      i6 = HEAP32[i4 + 12 >> 2] | 0;
      i7 = ((HEAP32[i5 >> 2] | 0) >>> 0) % (i6 >>> 0);
      HEAP32[i4 + 72 >> 2] = (i7 | 0) == 0 ? i6 : i7;
      HEAP32[i1 + 356 >> 2] = 1;
      HEAP32[i1 + 360 >> 2] = 0;
      i8 = HEAP32[i2 >> 2] | 0;
      i9 = 789;
      break;
    } else {
      if ((i3 - 1 | 0) >>> 0 > 3) {
        i7 = i1 | 0;
        HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] = 26;
        HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] = HEAP32[i2 >> 2] | 0;
        HEAP32[(HEAP32[i7 >> 2] | 0) + 28 >> 2] = 4;
        FUNCTION_TABLE_vi[HEAP32[HEAP32[i7 >> 2] >> 2] & 511](i1);
        i10 = HEAP32[i2 >> 2] | 0;
      } else {
        i10 = i3;
      }
      i7 = HEAP32[i1 + 308 >> 2] << 3;
      HEAP32[i1 + 348 >> 2] = (((HEAP32[i1 + 28 >> 2] | 0) - 1 | 0) + i7 | 0) / (i7 | 0) & -1;
      i7 = HEAP32[i1 + 312 >> 2] << 3;
      HEAP32[i1 + 352 >> 2] = (((HEAP32[i1 + 32 >> 2] | 0) - 1 | 0) + i7 | 0) / (i7 | 0) & -1;
      i7 = i1 + 356 | 0;
      HEAP32[i7 >> 2] = 0;
      if ((i10 | 0) <= 0) {
        break;
      }
      i6 = i1 | 0;
      i4 = i1;
      i5 = 0;
      while (1) {
        i11 = HEAP32[i1 + 332 + (i5 << 2) >> 2] | 0;
        i12 = HEAP32[i11 + 8 >> 2] | 0;
        HEAP32[i11 + 52 >> 2] = i12;
        i13 = HEAP32[i11 + 12 >> 2] | 0;
        HEAP32[i11 + 56 >> 2] = i13;
        i14 = Math_imul(i13, i12);
        HEAP32[i11 + 60 >> 2] = i14;
        HEAP32[i11 + 64 >> 2] = Math_imul(HEAP32[i11 + 36 >> 2] | 0, i12);
        i15 = ((HEAP32[i11 + 28 >> 2] | 0) >>> 0) % (i12 >>> 0);
        HEAP32[i11 + 68 >> 2] = (i15 | 0) == 0 ? i12 : i15;
        i15 = ((HEAP32[i11 + 32 >> 2] | 0) >>> 0) % (i13 >>> 0);
        HEAP32[i11 + 72 >> 2] = (i15 | 0) == 0 ? i13 : i15;
        if (((HEAP32[i7 >> 2] | 0) + i14 | 0) > 10) {
          HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] = 13;
          FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 511](i4);
        }
        L1102 : do {
          if ((i14 | 0) > 0) {
            i15 = i14;
            while (1) {
              i13 = i15 - 1 | 0;
              i11 = HEAP32[i7 >> 2] | 0;
              HEAP32[i7 >> 2] = i11 + 1 | 0;
              HEAP32[i1 + 360 + (i11 << 2) >> 2] = i5;
              if ((i13 | 0) > 0) {
                i15 = i13;
              } else {
                break L1102;
              }
            }
          }
        } while (0);
        i14 = i5 + 1 | 0;
        i15 = HEAP32[i2 >> 2] | 0;
        if ((i14 | 0) < (i15 | 0)) {
          i5 = i14;
        } else {
          i8 = i15;
          i9 = 789;
          break L1091;
        }
      }
    }
  } while (0);
  L1107 : do {
    if ((i9 | 0) == 789) {
      if ((i8 | 0) <= 0) {
        break;
      }
      i10 = i1 | 0;
      i3 = i1;
      i5 = i1 + 4 | 0;
      i7 = 0;
      i4 = i8;
      while (1) {
        i6 = HEAP32[i1 + 332 + (i7 << 2) >> 2] | 0;
        i15 = i6 + 76 | 0;
        if ((HEAP32[i15 >> 2] | 0) == 0) {
          i14 = HEAP32[i6 + 16 >> 2] | 0;
          i6 = i1 + 164 + (i14 << 2) | 0;
          do {
            if (i14 >>> 0 > 3) {
              i9 = 794;
            } else {
              if ((HEAP32[i6 >> 2] | 0) == 0) {
                i9 = 794;
                break;
              } else {
                break;
              }
            }
          } while (0);
          if ((i9 | 0) == 794) {
            i9 = 0;
            HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] = 52;
            HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2] = i14;
            FUNCTION_TABLE_vi[HEAP32[HEAP32[i10 >> 2] >> 2] & 511](i3);
          }
          i13 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i5 >> 2] >> 2] & 511](i3, 1, 132) | 0;
          _memcpy(i13, HEAP32[i6 >> 2] | 0, 132);
          HEAP32[i15 >> 2] = i13;
          i16 = HEAP32[i2 >> 2] | 0;
        } else {
          i16 = i4;
        }
        i13 = i7 + 1 | 0;
        if ((i13 | 0) < (i16 | 0)) {
          i7 = i13;
          i4 = i16;
        } else {
          break L1107;
        }
      }
    }
  } while (0);
  FUNCTION_TABLE_vi[HEAP32[HEAP32[i1 + 444 >> 2] >> 2] & 511](i1);
  i16 = i1 + 428 | 0;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[i16 >> 2] >> 2] & 511](i1);
  HEAP32[HEAP32[i1 + 436 >> 2] >> 2] = HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0;
  return;
}
function _jpeg_resync_to_restart(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
  i3 = i1 + 416 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  i5 = i1 | 0;
  HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] = 121;
  HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] = i4;
  HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] = i2;
  i6 = i1;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] & 511](i6, -1);
  i7 = i2 + 1 & 7 | 208;
  i8 = i2 + 2 & 7 | 208;
  i9 = i2 + 7 & 7 | 208;
  i10 = i2 + 6 & 7 | 208;
  i2 = i4;
  L1122 : while (1) {
    i4 = (i2 | 0) < 192;
    i11 = i4 | (i2 - 208 | 0) >>> 0 > 7;
    i12 = i11 | (i2 | 0) == (i7 | 0);
    i13 = i12 | (i2 | 0) == (i8 | 0);
    i14 = i12 ? i11 ? i4 ? 2 : 3 : 3 : 3;
    i4 = (i2 | 0) == (i9 | 0) ? 2 : (i2 | 0) == (i10 | 0) ? 2 : 1;
    while (1) {
      i11 = i13 ? i14 : i4;
      HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] = 97;
      HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] = i2;
      HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] = i11;
      FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] & 511](i6, 4);
      if ((i11 | 0) == 2) {
        break;
      } else if ((i11 | 0) == 1) {
        i15 = 801;
        break L1122;
      } else if ((i11 | 0) == 3) {
        i16 = 1;
        i15 = 807;
        break L1122;
      }
    }
    if ((_next_marker(i1) | 0) == 0) {
      i16 = 0;
      i15 = 805;
      break;
    }
    i2 = HEAP32[i3 >> 2] | 0;
  }
  if ((i15 | 0) == 801) {
    HEAP32[i3 >> 2] = 0;
    i16 = 1;
    return i16 | 0;
  } else if ((i15 | 0) == 805) {
    return i16 | 0;
  } else if ((i15 | 0) == 807) {
    return i16 | 0;
  }
  return 0;
}
function _next_marker(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
  i2 = HEAP32[i1 + 24 >> 2] | 0;
  i3 = i2 | 0;
  i4 = i2 + 4 | 0;
  i5 = i2 + 12 | 0;
  i2 = i1 + 440 | 0;
  i6 = HEAP32[i4 >> 2] | 0;
  i7 = HEAP32[i3 >> 2] | 0;
  L1134 : while (1) {
    if ((i6 | 0) == 0) {
      if ((FUNCTION_TABLE_ii[HEAP32[i5 >> 2] & 511](i1) | 0) == 0) {
        i8 = 0;
        i9 = 829;
        break;
      }
      i10 = HEAP32[i4 >> 2] | 0;
      i11 = HEAP32[i3 >> 2] | 0;
    } else {
      i10 = i6;
      i11 = i7;
    }
    i12 = i10 - 1 | 0;
    i13 = i11 + 1 | 0;
    L1140 : do {
      if (HEAP8[i11] << 24 >> 24 == -1) {
        i14 = i12;
        i15 = i13;
      } else {
        i16 = i12;
        i17 = i13;
        while (1) {
          i18 = (HEAP32[i2 >> 2] | 0) + 24 | 0;
          HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1 | 0;
          HEAP32[i3 >> 2] = i17;
          HEAP32[i4 >> 2] = i16;
          if ((i16 | 0) == 0) {
            if ((FUNCTION_TABLE_ii[HEAP32[i5 >> 2] & 511](i1) | 0) == 0) {
              i8 = 0;
              i9 = 828;
              break L1134;
            }
            i19 = HEAP32[i4 >> 2] | 0;
            i20 = HEAP32[i3 >> 2] | 0;
          } else {
            i19 = i16;
            i20 = i17;
          }
          i18 = i19 - 1 | 0;
          i21 = i20 + 1 | 0;
          if (HEAP8[i20] << 24 >> 24 == -1) {
            i14 = i18;
            i15 = i21;
            break L1140;
          } else {
            i16 = i18;
            i17 = i21;
          }
        }
      }
    } while (0);
    while (1) {
      if ((i14 | 0) == 0) {
        if ((FUNCTION_TABLE_ii[HEAP32[i5 >> 2] & 511](i1) | 0) == 0) {
          i8 = 0;
          i9 = 830;
          break L1134;
        }
        i22 = HEAP32[i4 >> 2] | 0;
        i23 = HEAP32[i3 >> 2] | 0;
      } else {
        i22 = i14;
        i23 = i15;
      }
      i24 = i22 - 1 | 0;
      i25 = i23 + 1 | 0;
      i26 = HEAP8[i23] | 0;
      if (i26 << 24 >> 24 == -1) {
        i14 = i24;
        i15 = i25;
      } else {
        break;
      }
    }
    i13 = (HEAP32[i2 >> 2] | 0) + 24 | 0;
    i27 = HEAP32[i13 >> 2] | 0;
    if (i26 << 24 >> 24 != 0) {
      i9 = 823;
      break;
    }
    HEAP32[i13 >> 2] = i27 + 2 | 0;
    HEAP32[i3 >> 2] = i25;
    HEAP32[i4 >> 2] = i24;
    i6 = i24;
    i7 = i25;
  }
  if ((i9 | 0) == 823) {
    i7 = i26 & 255;
    if ((i27 | 0) != 0) {
      i27 = i1 | 0;
      HEAP32[(HEAP32[i27 >> 2] | 0) + 20 >> 2] = 116;
      HEAP32[(HEAP32[i27 >> 2] | 0) + 24 >> 2] = HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] | 0;
      HEAP32[(HEAP32[i27 >> 2] | 0) + 28 >> 2] = i7;
      FUNCTION_TABLE_vii[HEAP32[(HEAP32[i27 >> 2] | 0) + 4 >> 2] & 511](i1, -1);
      HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] = 0;
    }
    HEAP32[i1 + 416 >> 2] = i7;
    HEAP32[i3 >> 2] = i25;
    HEAP32[i4 >> 2] = i24;
    i8 = 1;
    return i8 | 0;
  } else if ((i9 | 0) == 828) {
    return i8 | 0;
  } else if ((i9 | 0) == 829) {
    return i8 | 0;
  } else if ((i9 | 0) == 830) {
    return i8 | 0;
  }
  return 0;
}
function _read_markers(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, i150 = 0, i151 = 0, i152 = 0, i153 = 0, i154 = 0, i155 = 0, i156 = 0, i157 = 0, i158 = 0, i159 = 0, i160 = 0, i161 = 0, i162 = 0, i163 = 0, i164 = 0, i165 = 0, i166 = 0, i167 = 0, i168 = 0, i169 = 0, i170 = 0, i171 = 0, i172 = 0, i173 = 0, i174 = 0, i175 = 0, i176 = 0, i177 = 0, i178 = 0, i179 = 0, i180 = 0, i181 = 0, i182 = 0, i183 = 0, i184 = 0, i185 = 0, i186 = 0, i187 = 0, i188 = 0, i189 = 0, i190 = 0;
  i2 = STACKTOP;
  STACKTOP = STACKTOP + 276 | 0;
  i3 = i2 | 0;
  i4 = i2 + 20 | 0;
  i5 = i1 + 416 | 0;
  i6 = i1 + 440 | 0;
  i7 = i1 + 24 | 0;
  i8 = i1 | 0;
  i9 = i1;
  i10 = i1 + 228 | 0;
  i11 = i1 + 244 | 0;
  i12 = i1 + 260 | 0;
  i13 = i1 + 229 | 0;
  i14 = i1 + 245 | 0;
  i15 = i1 + 261 | 0;
  i16 = i1 + 230 | 0;
  i17 = i1 + 246 | 0;
  i18 = i1 + 262 | 0;
  i19 = i1 + 231 | 0;
  i20 = i1 + 247 | 0;
  i21 = i1 + 263 | 0;
  i22 = i1 + 232 | 0;
  i23 = i1 + 248 | 0;
  i24 = i1 + 264 | 0;
  i25 = i1 + 233 | 0;
  i26 = i1 + 249 | 0;
  i27 = i1 + 265 | 0;
  i28 = i1 + 234 | 0;
  i29 = i1 + 250 | 0;
  i30 = i1 + 266 | 0;
  i31 = i1 + 235 | 0;
  i32 = i1 + 251 | 0;
  i33 = i1 + 267 | 0;
  i34 = i1 + 236 | 0;
  i35 = i1 + 252 | 0;
  i36 = i1 + 268 | 0;
  i37 = i1 + 237 | 0;
  i38 = i1 + 253 | 0;
  i39 = i1 + 269 | 0;
  i40 = i1 + 238 | 0;
  i41 = i1 + 254 | 0;
  i42 = i1 + 270 | 0;
  i43 = i1 + 239 | 0;
  i44 = i1 + 255 | 0;
  i45 = i1 + 271 | 0;
  i46 = i1 + 240 | 0;
  i47 = i1 + 256 | 0;
  i48 = i1 + 272 | 0;
  i49 = i1 + 241 | 0;
  i50 = i1 + 257 | 0;
  i51 = i1 + 273 | 0;
  i52 = i1 + 242 | 0;
  i53 = i1 + 258 | 0;
  i54 = i1 + 274 | 0;
  i55 = i1 + 243 | 0;
  i56 = i1 + 259 | 0;
  i57 = i1 + 275 | 0;
  i58 = i1 + 276 | 0;
  i59 = i1 + 40 | 0;
  i60 = i1 + 300 | 0;
  i61 = i1 + 280 | 0;
  i62 = i1 + 284 | 0;
  i63 = i1 + 285 | 0;
  i64 = i1 + 286 | 0;
  i65 = i1 + 288 | 0;
  i66 = i1 + 290 | 0;
  i67 = i1 + 292 | 0;
  i68 = i1 + 296 | 0;
  i69 = i3 | 0;
  i70 = i4 | 0;
  i71 = i3 + 1 | 0;
  i72 = i3 + 2 | 0;
  i73 = i3 + 3 | 0;
  i74 = i3 + 4 | 0;
  i75 = i3 + 5 | 0;
  i76 = i3 + 6 | 0;
  i77 = i3 + 7 | 0;
  i78 = i3 + 8 | 0;
  i79 = i3 + 9 | 0;
  i80 = i3 + 10 | 0;
  i81 = i3 + 11 | 0;
  i82 = i3 + 12 | 0;
  i83 = i3 + 13 | 0;
  i84 = i3 + 14 | 0;
  i85 = i3 + 15 | 0;
  i86 = i3 + 16 | 0;
  i87 = i1;
  i88 = i1 + 4 | 0;
  i89 = HEAP32[i5 >> 2] | 0;
  L1165 : while (1) {
    if ((i89 | 0) == 0) {
      if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] | 0) == 0) {
        i90 = HEAP32[i7 >> 2] | 0;
        i91 = i90 | 0;
        i92 = i90 + 4 | 0;
        i93 = HEAP32[i92 >> 2] | 0;
        if ((i93 | 0) == 0) {
          if ((FUNCTION_TABLE_ii[HEAP32[i90 + 12 >> 2] & 511](i1) | 0) == 0) {
            i94 = 0;
            i95 = 1018;
            break;
          }
          i96 = HEAP32[i92 >> 2] | 0;
        } else {
          i96 = i93;
        }
        i93 = HEAP32[i91 >> 2] | 0;
        i97 = i96 - 1 | 0;
        i98 = i93 + 1 | 0;
        i99 = HEAP8[i93] | 0;
        i93 = i99 & 255;
        if ((i97 | 0) == 0) {
          if ((FUNCTION_TABLE_ii[HEAP32[i90 + 12 >> 2] & 511](i1) | 0) == 0) {
            i94 = 0;
            i95 = 1016;
            break;
          }
          i100 = HEAP32[i92 >> 2] | 0;
          i101 = HEAP32[i91 >> 2] | 0;
        } else {
          i100 = i97;
          i101 = i98;
        }
        i98 = HEAP8[i101] | 0;
        i97 = i98 & 255;
        if (!(i99 << 24 >> 24 == -1 & i98 << 24 >> 24 == -40)) {
          HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 53;
          HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = i93;
          HEAP32[(HEAP32[i8 >> 2] | 0) + 28 >> 2] = i97;
          FUNCTION_TABLE_vi[HEAP32[HEAP32[i8 >> 2] >> 2] & 511](i9);
        }
        HEAP32[i5 >> 2] = i97;
        HEAP32[i91 >> 2] = i101 + 1 | 0;
        HEAP32[i92 >> 2] = i100 - 1 | 0;
      } else {
        if ((_next_marker(i1) | 0) == 0) {
          i94 = 0;
          i95 = 1027;
          break;
        }
      }
      i102 = HEAP32[i5 >> 2] | 0;
    } else {
      i102 = i89;
    }
    do {
      if ((i102 | 0) == 217) {
        i95 = 892;
        break L1165;
      } else if ((i102 | 0) == 219) {
        i92 = HEAP32[i7 >> 2] | 0;
        i91 = i92 | 0;
        i97 = i92 + 4 | 0;
        i93 = HEAP32[i97 >> 2] | 0;
        if ((i93 | 0) == 0) {
          if ((FUNCTION_TABLE_ii[HEAP32[i92 + 12 >> 2] & 511](i1) | 0) == 0) {
            i94 = 0;
            i95 = 1003;
            break L1165;
          }
          i103 = HEAP32[i97 >> 2] | 0;
        } else {
          i103 = i93;
        }
        i93 = HEAP32[i91 >> 2] | 0;
        i98 = i103 - 1 | 0;
        i99 = i93 + 1 | 0;
        i90 = (HEAPU8[i93] | 0) << 8;
        if ((i98 | 0) == 0) {
          if ((FUNCTION_TABLE_ii[HEAP32[i92 + 12 >> 2] & 511](i1) | 0) == 0) {
            i94 = 0;
            i95 = 1030;
            break L1165;
          }
          i104 = HEAP32[i97 >> 2] | 0;
          i105 = HEAP32[i91 >> 2] | 0;
        } else {
          i104 = i98;
          i105 = i99;
        }
        i99 = i104 - 1 | 0;
        i98 = i105 + 1 | 0;
        i93 = (HEAPU8[i105] | 0 | i90) - 2 | 0;
        L1195 : do {
          if ((i93 | 0) > 0) {
            i90 = i92 + 12 | 0;
            i106 = i93;
            i107 = i98;
            i108 = i99;
            while (1) {
              if ((i108 | 0) == 0) {
                if ((FUNCTION_TABLE_ii[HEAP32[i90 >> 2] & 511](i1) | 0) == 0) {
                  i94 = 0;
                  i95 = 1031;
                  break L1165;
                }
                i109 = HEAP32[i97 >> 2] | 0;
                i110 = HEAP32[i91 >> 2] | 0;
              } else {
                i109 = i108;
                i110 = i107;
              }
              i111 = HEAPU8[i110] | 0;
              i112 = i111 >>> 4;
              i113 = i111 & 15;
              HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 81;
              HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = i113;
              HEAP32[(HEAP32[i8 >> 2] | 0) + 28 >> 2] = i112;
              FUNCTION_TABLE_vii[HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] & 511](i9, 1);
              if (i113 >>> 0 > 3) {
                HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 31;
                HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = i113;
                FUNCTION_TABLE_vi[HEAP32[HEAP32[i8 >> 2] >> 2] & 511](i9);
              }
              i111 = i1 + 164 + (i113 << 2) | 0;
              i113 = HEAP32[i111 >> 2] | 0;
              if ((i113 | 0) == 0) {
                i114 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i88 >> 2] >> 2] & 511](i87, 0, 132) | 0;
                i115 = i114;
                HEAP32[i114 + 128 >> 2] = 0;
                HEAP32[i111 >> 2] = i115;
                i116 = i115;
              } else {
                i116 = i113;
              }
              i113 = (i112 | 0) == 0;
              i112 = 0;
              i115 = i109 - 1 | 0;
              i111 = i110 + 1 | 0;
              while (1) {
                i114 = (i115 | 0) == 0;
                if (i113) {
                  if (i114) {
                    if ((FUNCTION_TABLE_ii[HEAP32[i90 >> 2] & 511](i1) | 0) == 0) {
                      i94 = 0;
                      i95 = 1034;
                      break L1165;
                    }
                    i117 = HEAP32[i97 >> 2] | 0;
                    i118 = HEAP32[i91 >> 2] | 0;
                  } else {
                    i117 = i115;
                    i118 = i111;
                  }
                  i119 = i117;
                  i120 = i118;
                  i121 = HEAPU8[i118] | 0;
                } else {
                  if (i114) {
                    if ((FUNCTION_TABLE_ii[HEAP32[i90 >> 2] & 511](i1) | 0) == 0) {
                      i94 = 0;
                      i95 = 1032;
                      break L1165;
                    }
                    i122 = HEAP32[i97 >> 2] | 0;
                    i123 = HEAP32[i91 >> 2] | 0;
                  } else {
                    i122 = i115;
                    i123 = i111;
                  }
                  i114 = i122 - 1 | 0;
                  i124 = i123 + 1 | 0;
                  i125 = (HEAPU8[i123] | 0) << 8;
                  if ((i114 | 0) == 0) {
                    if ((FUNCTION_TABLE_ii[HEAP32[i90 >> 2] & 511](i1) | 0) == 0) {
                      i94 = 0;
                      i95 = 1033;
                      break L1165;
                    }
                    i126 = HEAP32[i97 >> 2] | 0;
                    i127 = HEAP32[i91 >> 2] | 0;
                  } else {
                    i126 = i114;
                    i127 = i124;
                  }
                  i119 = i126;
                  i120 = i127;
                  i121 = HEAPU8[i127] | 0 | i125;
                }
                HEAP16[i116 + (HEAP32[5249360 + (i112 << 2) >> 2] << 1) >> 1] = i121;
                i125 = i112 + 1 | 0;
                i128 = i119 - 1 | 0;
                i129 = i120 + 1 | 0;
                if ((i125 | 0) < 64) {
                  i112 = i125;
                  i115 = i128;
                  i111 = i129;
                } else {
                  break;
                }
              }
              i111 = HEAP32[i8 >> 2] | 0;
              L1228 : do {
                if ((HEAP32[i111 + 104 >> 2] | 0) > 1) {
                  i115 = 0;
                  i112 = i111;
                  while (1) {
                    HEAP32[i112 + 24 >> 2] = HEAPU16[i116 + (i115 << 1) >> 1] | 0;
                    HEAP32[i112 + 28 >> 2] = HEAPU16[i116 + ((i115 | 1) << 1) >> 1] | 0;
                    HEAP32[i112 + 32 >> 2] = HEAPU16[i116 + ((i115 | 2) << 1) >> 1] | 0;
                    HEAP32[i112 + 36 >> 2] = HEAPU16[i116 + ((i115 | 3) << 1) >> 1] | 0;
                    HEAP32[i112 + 40 >> 2] = HEAPU16[i116 + ((i115 | 4) << 1) >> 1] | 0;
                    HEAP32[i112 + 44 >> 2] = HEAPU16[i116 + ((i115 | 5) << 1) >> 1] | 0;
                    HEAP32[i112 + 48 >> 2] = HEAPU16[i116 + ((i115 | 6) << 1) >> 1] | 0;
                    HEAP32[i112 + 52 >> 2] = HEAPU16[i116 + ((i115 | 7) << 1) >> 1] | 0;
                    HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 93;
                    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] & 511](i9, 2);
                    i125 = i115 + 8 | 0;
                    if ((i125 | 0) >= 64) {
                      break L1228;
                    }
                    i115 = i125;
                    i112 = HEAP32[i8 >> 2] | 0;
                  }
                }
              } while (0);
              i111 = (i113 ? -65 : -129) + i106 | 0;
              if ((i111 | 0) > 0) {
                i106 = i111;
                i107 = i129;
                i108 = i128;
              } else {
                i130 = i111;
                i131 = i129;
                i132 = i128;
                break L1195;
              }
            }
          } else {
            i130 = i93;
            i131 = i98;
            i132 = i99;
          }
        } while (0);
        if ((i130 | 0) != 0) {
          HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 11;
          FUNCTION_TABLE_vi[HEAP32[HEAP32[i8 >> 2] >> 2] & 511](i9);
        }
        HEAP32[i91 >> 2] = i131;
        HEAP32[i97 >> 2] = i132;
      } else if ((i102 | 0) == 201) {
        if ((_get_sof(i1, 0, 1) | 0) == 0) {
          i94 = 0;
          i95 = 1004;
          break L1165;
        }
      } else if ((i102 | 0) == 194) {
        if ((_get_sof(i1, 1, 0) | 0) == 0) {
          i94 = 0;
          i95 = 1006;
          break L1165;
        }
      } else if ((i102 | 0) == 192 | (i102 | 0) == 193) {
        if ((_get_sof(i1, 0, 0) | 0) == 0) {
          i94 = 0;
          i95 = 1009;
          break L1165;
        }
      } else if ((i102 | 0) == 196) {
        i99 = HEAP32[i7 >> 2] | 0;
        i98 = i99 | 0;
        i93 = i99 + 4 | 0;
        i92 = HEAP32[i93 >> 2] | 0;
        if ((i92 | 0) == 0) {
          if ((FUNCTION_TABLE_ii[HEAP32[i99 + 12 >> 2] & 511](i1) | 0) == 0) {
            i94 = 0;
            i95 = 1011;
            break L1165;
          }
          i133 = HEAP32[i93 >> 2] | 0;
        } else {
          i133 = i92;
        }
        i92 = HEAP32[i98 >> 2] | 0;
        i108 = i133 - 1 | 0;
        i107 = i92 + 1 | 0;
        i106 = (HEAPU8[i92] | 0) << 8;
        if ((i108 | 0) == 0) {
          if ((FUNCTION_TABLE_ii[HEAP32[i99 + 12 >> 2] & 511](i1) | 0) == 0) {
            i94 = 0;
            i95 = 1012;
            break L1165;
          }
          i134 = HEAP32[i93 >> 2] | 0;
          i135 = HEAP32[i98 >> 2] | 0;
        } else {
          i134 = i108;
          i135 = i107;
        }
        i107 = i134 - 1 | 0;
        i108 = i135 + 1 | 0;
        i92 = (HEAPU8[i135] | 0 | i106) - 2 | 0;
        L1249 : do {
          if ((i92 | 0) > 16) {
            i106 = i99 + 12 | 0;
            i90 = i108;
            i111 = i107;
            i112 = i92;
            while (1) {
              if ((i111 | 0) == 0) {
                if ((FUNCTION_TABLE_ii[HEAP32[i106 >> 2] & 511](i1) | 0) == 0) {
                  i94 = 0;
                  i95 = 1028;
                  break L1165;
                }
                i136 = HEAP32[i93 >> 2] | 0;
                i137 = HEAP32[i98 >> 2] | 0;
              } else {
                i136 = i111;
                i137 = i90;
              }
              i115 = HEAPU8[i137] | 0;
              HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 80;
              HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = i115;
              FUNCTION_TABLE_vii[HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] & 511](i9, 1);
              HEAP8[i69] = 0;
              i125 = 0;
              i124 = 1;
              i114 = i136 - 1 | 0;
              i138 = i137 + 1 | 0;
              while (1) {
                if ((i114 | 0) == 0) {
                  if ((FUNCTION_TABLE_ii[HEAP32[i106 >> 2] & 511](i1) | 0) == 0) {
                    i94 = 0;
                    i95 = 1029;
                    break L1165;
                  }
                  i139 = HEAP32[i93 >> 2] | 0;
                  i140 = HEAP32[i98 >> 2] | 0;
                } else {
                  i139 = i114;
                  i140 = i138;
                }
                i141 = HEAP8[i140] | 0;
                HEAP8[i3 + i124 | 0] = i141;
                i142 = (i141 & 255) + i125 | 0;
                i141 = i124 + 1 | 0;
                i143 = i139 - 1 | 0;
                i144 = i140 + 1 | 0;
                if ((i141 | 0) < 17) {
                  i125 = i142;
                  i124 = i141;
                  i114 = i143;
                  i138 = i144;
                } else {
                  break;
                }
              }
              i138 = i112 - 17 | 0;
              i114 = HEAP32[i8 >> 2] | 0;
              HEAP32[i114 + 24 >> 2] = HEAPU8[i71] | 0;
              HEAP32[i114 + 28 >> 2] = HEAPU8[i72] | 0;
              HEAP32[i114 + 32 >> 2] = HEAPU8[i73] | 0;
              HEAP32[i114 + 36 >> 2] = HEAPU8[i74] | 0;
              HEAP32[i114 + 40 >> 2] = HEAPU8[i75] | 0;
              HEAP32[i114 + 44 >> 2] = HEAPU8[i76] | 0;
              HEAP32[i114 + 48 >> 2] = HEAPU8[i77] | 0;
              HEAP32[i114 + 52 >> 2] = HEAPU8[i78] | 0;
              HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 86;
              FUNCTION_TABLE_vii[HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] & 511](i9, 2);
              i114 = HEAP32[i8 >> 2] | 0;
              HEAP32[i114 + 24 >> 2] = HEAPU8[i79] | 0;
              HEAP32[i114 + 28 >> 2] = HEAPU8[i80] | 0;
              HEAP32[i114 + 32 >> 2] = HEAPU8[i81] | 0;
              HEAP32[i114 + 36 >> 2] = HEAPU8[i82] | 0;
              HEAP32[i114 + 40 >> 2] = HEAPU8[i83] | 0;
              HEAP32[i114 + 44 >> 2] = HEAPU8[i84] | 0;
              HEAP32[i114 + 48 >> 2] = HEAPU8[i85] | 0;
              HEAP32[i114 + 52 >> 2] = HEAPU8[i86] | 0;
              HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 86;
              FUNCTION_TABLE_vii[HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] & 511](i9, 2);
              if ((i142 | 0) > 256 | (i142 | 0) > (i138 | 0)) {
                HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 8;
                FUNCTION_TABLE_vi[HEAP32[HEAP32[i8 >> 2] >> 2] & 511](i9);
              }
              L1267 : do {
                if ((i142 | 0) > 0) {
                  i114 = 0;
                  i124 = i144;
                  i125 = i143;
                  while (1) {
                    if ((i125 | 0) == 0) {
                      if ((FUNCTION_TABLE_ii[HEAP32[i106 >> 2] & 511](i1) | 0) == 0) {
                        i94 = 0;
                        i95 = 1036;
                        break L1165;
                      }
                      i145 = HEAP32[i93 >> 2] | 0;
                      i146 = HEAP32[i98 >> 2] | 0;
                    } else {
                      i145 = i125;
                      i146 = i124;
                    }
                    i113 = i145 - 1 | 0;
                    i141 = i146 + 1 | 0;
                    HEAP8[i4 + i114 | 0] = HEAP8[i146] | 0;
                    i147 = i114 + 1 | 0;
                    if ((i147 | 0) < (i142 | 0)) {
                      i114 = i147;
                      i124 = i141;
                      i125 = i113;
                    } else {
                      i148 = i141;
                      i149 = i113;
                      break L1267;
                    }
                  }
                } else {
                  i148 = i144;
                  i149 = i143;
                }
              } while (0);
              i125 = i138 - i142 | 0;
              if ((i115 & 16 | 0) == 0) {
                i150 = i1 + 180 + (i115 << 2) | 0;
                i151 = i115;
              } else {
                i124 = i115 - 16 | 0;
                i150 = i1 + 196 + (i124 << 2) | 0;
                i151 = i124;
              }
              if (i151 >>> 0 > 3) {
                HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 30;
                HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = i151;
                FUNCTION_TABLE_vi[HEAP32[HEAP32[i8 >> 2] >> 2] & 511](i9);
              }
              i124 = HEAP32[i150 >> 2] | 0;
              if ((i124 | 0) == 0) {
                i114 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i88 >> 2] >> 2] & 511](i87, 0, 280) | 0;
                i113 = i114;
                HEAP32[i114 + 276 >> 2] = 0;
                HEAP32[i150 >> 2] = i113;
                i152 = i113;
              } else {
                i152 = i124;
              }
              i124 = i152 | 0;
              HEAP8[i124] = HEAP8[i69] | 0;
              HEAP8[i124 + 1 | 0] = HEAP8[i69 + 1 | 0] | 0;
              HEAP8[i124 + 2 | 0] = HEAP8[i69 + 2 | 0] | 0;
              HEAP8[i124 + 3 | 0] = HEAP8[i69 + 3 | 0] | 0;
              HEAP8[i124 + 4 | 0] = HEAP8[i69 + 4 | 0] | 0;
              HEAP8[i124 + 5 | 0] = HEAP8[i69 + 5 | 0] | 0;
              HEAP8[i124 + 6 | 0] = HEAP8[i69 + 6 | 0] | 0;
              HEAP8[i124 + 7 | 0] = HEAP8[i69 + 7 | 0] | 0;
              HEAP8[i124 + 8 | 0] = HEAP8[i69 + 8 | 0] | 0;
              HEAP8[i124 + 9 | 0] = HEAP8[i69 + 9 | 0] | 0;
              HEAP8[i124 + 10 | 0] = HEAP8[i69 + 10 | 0] | 0;
              HEAP8[i124 + 11 | 0] = HEAP8[i69 + 11 | 0] | 0;
              HEAP8[i124 + 12 | 0] = HEAP8[i69 + 12 | 0] | 0;
              HEAP8[i124 + 13 | 0] = HEAP8[i69 + 13 | 0] | 0;
              HEAP8[i124 + 14 | 0] = HEAP8[i69 + 14 | 0] | 0;
              HEAP8[i124 + 15 | 0] = HEAP8[i69 + 15 | 0] | 0;
              HEAP8[i124 + 16 | 0] = HEAP8[i69 + 16 | 0] | 0;
              _memcpy((HEAP32[i150 >> 2] | 0) + 17 | 0, i70, 256);
              if ((i125 | 0) > 16) {
                i90 = i148;
                i111 = i149;
                i112 = i125;
              } else {
                i153 = i148;
                i154 = i149;
                i155 = i125;
                break L1249;
              }
            }
          } else {
            i153 = i108;
            i154 = i107;
            i155 = i92;
          }
        } while (0);
        if ((i155 | 0) != 0) {
          HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 11;
          FUNCTION_TABLE_vi[HEAP32[HEAP32[i8 >> 2] >> 2] & 511](i9);
        }
        HEAP32[i98 >> 2] = i153;
        HEAP32[i93 >> 2] = i154;
      } else if ((i102 | 0) == 202) {
        if ((_get_sof(i1, 1, 1) | 0) == 0) {
          i94 = 0;
          i95 = 1013;
          break L1165;
        }
      } else if ((i102 | 0) == 218) {
        i95 = 854;
        break L1165;
      } else if ((i102 | 0) == 195 | (i102 | 0) == 197 | (i102 | 0) == 198 | (i102 | 0) == 199 | (i102 | 0) == 200 | (i102 | 0) == 203 | (i102 | 0) == 205 | (i102 | 0) == 206 | (i102 | 0) == 207) {
        HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 60;
        HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = HEAP32[i5 >> 2] | 0;
        FUNCTION_TABLE_vi[HEAP32[HEAP32[i8 >> 2] >> 2] & 511](i9);
      } else if ((i102 | 0) == 221) {
        i92 = HEAP32[i7 >> 2] | 0;
        i107 = i92 | 0;
        i108 = i92 + 4 | 0;
        i99 = HEAP32[i108 >> 2] | 0;
        if ((i99 | 0) == 0) {
          if ((FUNCTION_TABLE_ii[HEAP32[i92 + 12 >> 2] & 511](i1) | 0) == 0) {
            i94 = 0;
            i95 = 1019;
            break L1165;
          }
          i156 = HEAP32[i108 >> 2] | 0;
        } else {
          i156 = i99;
        }
        i99 = HEAP32[i107 >> 2] | 0;
        i97 = i156 - 1 | 0;
        i91 = i99 + 1 | 0;
        i112 = (HEAPU8[i99] | 0) << 8;
        if ((i97 | 0) == 0) {
          if ((FUNCTION_TABLE_ii[HEAP32[i92 + 12 >> 2] & 511](i1) | 0) == 0) {
            i94 = 0;
            i95 = 1020;
            break L1165;
          }
          i157 = HEAP32[i108 >> 2] | 0;
          i158 = HEAP32[i107 >> 2] | 0;
        } else {
          i157 = i97;
          i158 = i91;
        }
        i91 = i157 - 1 | 0;
        i97 = i158 + 1 | 0;
        if ((HEAPU8[i158] | 0 | i112 | 0) != 4) {
          HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 11;
          FUNCTION_TABLE_vi[HEAP32[HEAP32[i8 >> 2] >> 2] & 511](i9);
        }
        if ((i91 | 0) == 0) {
          if ((FUNCTION_TABLE_ii[HEAP32[i92 + 12 >> 2] & 511](i1) | 0) == 0) {
            i94 = 0;
            i95 = 1021;
            break L1165;
          }
          i159 = HEAP32[i108 >> 2] | 0;
          i160 = HEAP32[i107 >> 2] | 0;
        } else {
          i159 = i91;
          i160 = i97;
        }
        i97 = i159 - 1 | 0;
        i91 = i160 + 1 | 0;
        i112 = (HEAPU8[i160] | 0) << 8;
        if ((i97 | 0) == 0) {
          if ((FUNCTION_TABLE_ii[HEAP32[i92 + 12 >> 2] & 511](i1) | 0) == 0) {
            i94 = 0;
            i95 = 1022;
            break L1165;
          }
          i161 = HEAP32[i108 >> 2] | 0;
          i162 = HEAP32[i107 >> 2] | 0;
        } else {
          i161 = i97;
          i162 = i91;
        }
        i91 = HEAPU8[i162] | 0 | i112;
        HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 82;
        HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = i91;
        FUNCTION_TABLE_vii[HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] & 511](i9, 1);
        HEAP32[i58 >> 2] = i91;
        HEAP32[i107 >> 2] = i162 + 1 | 0;
        HEAP32[i108 >> 2] = i161 - 1 | 0;
      } else if ((i102 | 0) == 224 | (i102 | 0) == 225 | (i102 | 0) == 226 | (i102 | 0) == 227 | (i102 | 0) == 228 | (i102 | 0) == 229 | (i102 | 0) == 230 | (i102 | 0) == 231 | (i102 | 0) == 232 | (i102 | 0) == 233 | (i102 | 0) == 234 | (i102 | 0) == 235 | (i102 | 0) == 236 | (i102 | 0) == 237 | (i102 | 0) == 238 | (i102 | 0) == 239) {
        if ((FUNCTION_TABLE_ii[HEAP32[((HEAP32[i6 >> 2] | 0) + 32 | 0) + (i102 - 224 << 2) >> 2] & 511](i1) | 0) == 0) {
          i94 = 0;
          i95 = 1023;
          break L1165;
        }
      } else if ((i102 | 0) == 254) {
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] & 511](i1) | 0) == 0) {
          i94 = 0;
          i95 = 1024;
          break L1165;
        }
      } else if ((i102 | 0) == 208 | (i102 | 0) == 209 | (i102 | 0) == 210 | (i102 | 0) == 211 | (i102 | 0) == 212 | (i102 | 0) == 213 | (i102 | 0) == 214 | (i102 | 0) == 215 | (i102 | 0) == 1) {
        HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 92;
        HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = HEAP32[i5 >> 2] | 0;
        FUNCTION_TABLE_vii[HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] & 511](i9, 1);
      } else if ((i102 | 0) == 220) {
        i108 = HEAP32[i7 >> 2] | 0;
        i107 = i108 | 0;
        i91 = i108 + 4 | 0;
        i112 = HEAP32[i91 >> 2] | 0;
        if ((i112 | 0) == 0) {
          if ((FUNCTION_TABLE_ii[HEAP32[i108 + 12 >> 2] & 511](i1) | 0) == 0) {
            i94 = 0;
            i95 = 1025;
            break L1165;
          }
          i163 = HEAP32[i91 >> 2] | 0;
        } else {
          i163 = i112;
        }
        i112 = HEAP32[i107 >> 2] | 0;
        i97 = i163 - 1 | 0;
        i92 = i112 + 1 | 0;
        i99 = (HEAPU8[i112] | 0) << 8;
        if ((i97 | 0) == 0) {
          if ((FUNCTION_TABLE_ii[HEAP32[i108 + 12 >> 2] & 511](i1) | 0) == 0) {
            i94 = 0;
            i95 = 1026;
            break L1165;
          }
          i164 = HEAP32[i91 >> 2] | 0;
          i165 = HEAP32[i107 >> 2] | 0;
        } else {
          i164 = i97;
          i165 = i92;
        }
        i92 = (HEAPU8[i165] | 0 | i99) - 2 | 0;
        HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 91;
        HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = HEAP32[i5 >> 2] | 0;
        HEAP32[(HEAP32[i8 >> 2] | 0) + 28 >> 2] = i92;
        FUNCTION_TABLE_vii[HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] & 511](i9, 1);
        HEAP32[i107 >> 2] = i165 + 1 | 0;
        HEAP32[i91 >> 2] = i164 - 1 | 0;
        if ((i92 | 0) <= 0) {
          break;
        }
        FUNCTION_TABLE_vii[HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] & 511](i1, i92);
      } else if ((i102 | 0) == 216) {
        HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 102;
        FUNCTION_TABLE_vii[HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] & 511](i9, 1);
        i92 = HEAP32[i6 >> 2] | 0;
        if ((HEAP32[i92 + 12 >> 2] | 0) == 0) {
          i166 = i92;
        } else {
          HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 61;
          FUNCTION_TABLE_vi[HEAP32[HEAP32[i8 >> 2] >> 2] & 511](i9);
          i166 = HEAP32[i6 >> 2] | 0;
        }
        HEAP8[i10] = 0;
        HEAP8[i11] = 1;
        HEAP8[i12] = 5;
        HEAP8[i13] = 0;
        HEAP8[i14] = 1;
        HEAP8[i15] = 5;
        HEAP8[i16] = 0;
        HEAP8[i17] = 1;
        HEAP8[i18] = 5;
        HEAP8[i19] = 0;
        HEAP8[i20] = 1;
        HEAP8[i21] = 5;
        HEAP8[i22] = 0;
        HEAP8[i23] = 1;
        HEAP8[i24] = 5;
        HEAP8[i25] = 0;
        HEAP8[i26] = 1;
        HEAP8[i27] = 5;
        HEAP8[i28] = 0;
        HEAP8[i29] = 1;
        HEAP8[i30] = 5;
        HEAP8[i31] = 0;
        HEAP8[i32] = 1;
        HEAP8[i33] = 5;
        HEAP8[i34] = 0;
        HEAP8[i35] = 1;
        HEAP8[i36] = 5;
        HEAP8[i37] = 0;
        HEAP8[i38] = 1;
        HEAP8[i39] = 5;
        HEAP8[i40] = 0;
        HEAP8[i41] = 1;
        HEAP8[i42] = 5;
        HEAP8[i43] = 0;
        HEAP8[i44] = 1;
        HEAP8[i45] = 5;
        HEAP8[i46] = 0;
        HEAP8[i47] = 1;
        HEAP8[i48] = 5;
        HEAP8[i49] = 0;
        HEAP8[i50] = 1;
        HEAP8[i51] = 5;
        HEAP8[i52] = 0;
        HEAP8[i53] = 1;
        HEAP8[i54] = 5;
        HEAP8[i55] = 0;
        HEAP8[i56] = 1;
        HEAP8[i57] = 5;
        HEAP32[i58 >> 2] = 0;
        HEAP32[i59 >> 2] = 0;
        HEAP32[i60 >> 2] = 0;
        HEAP32[i61 >> 2] = 0;
        HEAP8[i62] = 1;
        HEAP8[i63] = 1;
        HEAP8[i64] = 0;
        HEAP16[i65 >> 1] = 1;
        HEAP16[i66 >> 1] = 1;
        HEAP32[i67 >> 2] = 0;
        HEAP8[i68] = 0;
        HEAP32[i166 + 12 >> 2] = 1;
      } else if ((i102 | 0) == 204) {
        i92 = HEAP32[i7 >> 2] | 0;
        i91 = i92 | 0;
        i107 = i92 + 4 | 0;
        i99 = HEAP32[i107 >> 2] | 0;
        if ((i99 | 0) == 0) {
          if ((FUNCTION_TABLE_ii[HEAP32[i92 + 12 >> 2] & 511](i1) | 0) == 0) {
            i94 = 0;
            i95 = 1014;
            break L1165;
          }
          i167 = HEAP32[i107 >> 2] | 0;
        } else {
          i167 = i99;
        }
        i99 = HEAP32[i91 >> 2] | 0;
        i97 = i167 - 1 | 0;
        i108 = i99 + 1 | 0;
        i112 = (HEAPU8[i99] | 0) << 8;
        if ((i97 | 0) == 0) {
          if ((FUNCTION_TABLE_ii[HEAP32[i92 + 12 >> 2] & 511](i1) | 0) == 0) {
            i94 = 0;
            i95 = 1015;
            break L1165;
          }
          i168 = HEAP32[i107 >> 2] | 0;
          i169 = HEAP32[i91 >> 2] | 0;
        } else {
          i168 = i97;
          i169 = i108;
        }
        i108 = (HEAPU8[i169] | 0 | i112) - 2 | 0;
        HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 91;
        HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = HEAP32[i5 >> 2] | 0;
        HEAP32[(HEAP32[i8 >> 2] | 0) + 28 >> 2] = i108;
        FUNCTION_TABLE_vii[HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] & 511](i9, 1);
        HEAP32[i91 >> 2] = i169 + 1 | 0;
        HEAP32[i107 >> 2] = i168 - 1 | 0;
        if ((i108 | 0) <= 0) {
          break;
        }
        FUNCTION_TABLE_vii[HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] & 511](i1, i108);
      } else {
        HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 68;
        HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = HEAP32[i5 >> 2] | 0;
        FUNCTION_TABLE_vi[HEAP32[HEAP32[i8 >> 2] >> 2] & 511](i9);
      }
    } while (0);
    HEAP32[i5 >> 2] = 0;
    i89 = 0;
  }
  if ((i95 | 0) == 892) {
    HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 85;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] & 511](i9, 1);
    HEAP32[i5 >> 2] = 0;
    i94 = 2;
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 854) {
    i89 = HEAP32[i7 >> 2] | 0;
    i7 = i89 | 0;
    i168 = HEAP32[i7 >> 2] | 0;
    i169 = i89 + 4 | 0;
    i167 = HEAP32[i169 >> 2] | 0;
    if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] | 0) == 0) {
      HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 62;
      FUNCTION_TABLE_vi[HEAP32[HEAP32[i8 >> 2] >> 2] & 511](i9);
    }
    do {
      if ((i167 | 0) == 0) {
        if ((FUNCTION_TABLE_ii[HEAP32[i89 + 12 >> 2] & 511](i1) | 0) == 0) {
          i94 = 0;
          STACKTOP = i2;
          return i94 | 0;
        } else {
          i170 = HEAP32[i169 >> 2] | 0;
          i171 = HEAP32[i7 >> 2] | 0;
          break;
        }
      } else {
        i170 = i167;
        i171 = i168;
      }
    } while (0);
    i168 = i170 - 1 | 0;
    i170 = i171 + 1 | 0;
    i167 = (HEAPU8[i171] | 0) << 8;
    do {
      if ((i168 | 0) == 0) {
        if ((FUNCTION_TABLE_ii[HEAP32[i89 + 12 >> 2] & 511](i1) | 0) == 0) {
          i94 = 0;
          STACKTOP = i2;
          return i94 | 0;
        } else {
          i172 = HEAP32[i169 >> 2] | 0;
          i173 = HEAP32[i7 >> 2] | 0;
          break;
        }
      } else {
        i172 = i168;
        i173 = i170;
      }
    } while (0);
    i170 = i172 - 1 | 0;
    i172 = i173 + 1 | 0;
    i168 = HEAPU8[i173] | 0 | i167;
    do {
      if ((i170 | 0) == 0) {
        if ((FUNCTION_TABLE_ii[HEAP32[i89 + 12 >> 2] & 511](i1) | 0) == 0) {
          i94 = 0;
          STACKTOP = i2;
          return i94 | 0;
        } else {
          i174 = HEAP32[i169 >> 2] | 0;
          i175 = HEAP32[i7 >> 2] | 0;
          break;
        }
      } else {
        i174 = i170;
        i175 = i172;
      }
    } while (0);
    i172 = HEAP8[i175] | 0;
    i170 = i172 & 255;
    HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 103;
    HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = i170;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] & 511](i9, 1);
    do {
      if ((i168 | 0) == ((i170 << 1) + 6 | 0)) {
        if (i172 << 24 >> 24 == 0 | (i172 & 255) > 4) {
          i95 = 867;
          break;
        } else {
          break;
        }
      } else {
        i95 = 867;
      }
    } while (0);
    if ((i95 | 0) == 867) {
      HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 11;
      FUNCTION_TABLE_vi[HEAP32[HEAP32[i8 >> 2] >> 2] & 511](i9);
    }
    HEAP32[i1 + 328 >> 2] = i170;
    i168 = i174 - 1 | 0;
    i174 = i175 + 1 | 0;
    i175 = (i168 | 0) == 0;
    L1370 : do {
      if (i172 << 24 >> 24 == 0) {
        i176 = i168;
        i177 = i174;
        i178 = i175;
      } else {
        i167 = i89 + 12 | 0;
        i173 = i1 + 216 | 0;
        i171 = i1 + 36 | 0;
        i102 = 0;
        i166 = i168;
        i68 = i174;
        i67 = i175;
        while (1) {
          if (i67) {
            if ((FUNCTION_TABLE_ii[HEAP32[i167 >> 2] & 511](i1) | 0) == 0) {
              i94 = 0;
              i95 = 1005;
              break;
            }
            i179 = HEAP32[i169 >> 2] | 0;
            i180 = HEAP32[i7 >> 2] | 0;
          } else {
            i179 = i166;
            i180 = i68;
          }
          i66 = i179 - 1 | 0;
          i65 = i180 + 1 | 0;
          i64 = HEAPU8[i180] | 0;
          if ((i66 | 0) == 0) {
            if ((FUNCTION_TABLE_ii[HEAP32[i167 >> 2] & 511](i1) | 0) == 0) {
              i94 = 0;
              i95 = 1017;
              break;
            }
            i181 = HEAP32[i169 >> 2] | 0;
            i182 = HEAP32[i7 >> 2] | 0;
          } else {
            i181 = i66;
            i182 = i65;
          }
          i65 = HEAPU8[i182] | 0;
          i66 = HEAP32[i173 >> 2] | 0;
          i63 = HEAP32[i171 >> 2] | 0;
          L1382 : do {
            if ((i63 | 0) > 0) {
              i62 = 0;
              i61 = i66;
              while (1) {
                if ((i64 | 0) == (HEAP32[i61 >> 2] | 0)) {
                  i183 = i61;
                  break L1382;
                }
                i60 = i62 + 1 | 0;
                i59 = i61 + 84 | 0;
                if ((i60 | 0) < (i63 | 0)) {
                  i62 = i60;
                  i61 = i59;
                } else {
                  i184 = i59;
                  i95 = 879;
                  break L1382;
                }
              }
            } else {
              i184 = i66;
              i95 = 879;
            }
          } while (0);
          if ((i95 | 0) == 879) {
            i95 = 0;
            HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 5;
            HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = i64;
            FUNCTION_TABLE_vi[HEAP32[HEAP32[i8 >> 2] >> 2] & 511](i9);
            i183 = i184;
          }
          HEAP32[i1 + 332 + (i102 << 2) >> 2] = i183;
          i66 = i183 + 20 | 0;
          HEAP32[i66 >> 2] = i65 >>> 4;
          i63 = i183 + 24 | 0;
          HEAP32[i63 >> 2] = i65 & 15;
          i93 = HEAP32[i8 >> 2] | 0;
          HEAP32[i93 + 24 >> 2] = i64;
          HEAP32[i93 + 28 >> 2] = HEAP32[i66 >> 2] | 0;
          HEAP32[i93 + 32 >> 2] = HEAP32[i63 >> 2] | 0;
          HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 104;
          FUNCTION_TABLE_vii[HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] & 511](i9, 1);
          i63 = i102 + 1 | 0;
          i93 = i181 - 1 | 0;
          i66 = i182 + 1 | 0;
          i98 = (i93 | 0) == 0;
          if ((i63 | 0) < (i170 | 0)) {
            i102 = i63;
            i166 = i93;
            i68 = i66;
            i67 = i98;
          } else {
            i176 = i93;
            i177 = i66;
            i178 = i98;
            break L1370;
          }
        }
        if ((i95 | 0) == 1005) {
          STACKTOP = i2;
          return i94 | 0;
        } else if ((i95 | 0) == 1017) {
          STACKTOP = i2;
          return i94 | 0;
        }
      }
    } while (0);
    do {
      if (i178) {
        if ((FUNCTION_TABLE_ii[HEAP32[i89 + 12 >> 2] & 511](i1) | 0) == 0) {
          i94 = 0;
          STACKTOP = i2;
          return i94 | 0;
        } else {
          i185 = HEAP32[i169 >> 2] | 0;
          i186 = HEAP32[i7 >> 2] | 0;
          break;
        }
      } else {
        i185 = i176;
        i186 = i177;
      }
    } while (0);
    i177 = i185 - 1 | 0;
    i185 = i186 + 1 | 0;
    i176 = i1 + 400 | 0;
    HEAP32[i176 >> 2] = HEAPU8[i186] | 0;
    do {
      if ((i177 | 0) == 0) {
        if ((FUNCTION_TABLE_ii[HEAP32[i89 + 12 >> 2] & 511](i1) | 0) == 0) {
          i94 = 0;
          STACKTOP = i2;
          return i94 | 0;
        } else {
          i187 = HEAP32[i169 >> 2] | 0;
          i188 = HEAP32[i7 >> 2] | 0;
          break;
        }
      } else {
        i187 = i177;
        i188 = i185;
      }
    } while (0);
    i185 = i187 - 1 | 0;
    i187 = i1 + 404 | 0;
    HEAP32[i187 >> 2] = HEAPU8[i188] | 0;
    do {
      if ((i185 | 0) == 0) {
        if ((FUNCTION_TABLE_ii[HEAP32[i89 + 12 >> 2] & 511](i1) | 0) == 0) {
          i94 = 0;
          STACKTOP = i2;
          return i94 | 0;
        } else {
          i189 = HEAP32[i169 >> 2] | 0;
          i190 = HEAP32[i7 >> 2] | 0;
          break;
        }
      } else {
        i189 = i185;
        i190 = i188 + 1 | 0;
      }
    } while (0);
    i188 = HEAPU8[i190] | 0;
    i185 = i1 + 408 | 0;
    HEAP32[i185 >> 2] = i188 >>> 4;
    i89 = i1 + 412 | 0;
    HEAP32[i89 >> 2] = i188 & 15;
    i188 = HEAP32[i8 >> 2] | 0;
    HEAP32[i188 + 24 >> 2] = HEAP32[i176 >> 2] | 0;
    HEAP32[i188 + 28 >> 2] = HEAP32[i187 >> 2] | 0;
    HEAP32[i188 + 32 >> 2] = HEAP32[i185 >> 2] | 0;
    HEAP32[i188 + 36 >> 2] = HEAP32[i89 >> 2] | 0;
    HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 105;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] & 511](i9, 1);
    HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] = 0;
    i6 = i1 + 144 | 0;
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1 | 0;
    HEAP32[i7 >> 2] = i190 + 1 | 0;
    HEAP32[i169 >> 2] = i189 - 1 | 0;
    HEAP32[i5 >> 2] = 0;
    i94 = 1;
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1003) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1004) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1006) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1009) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1011) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1012) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1013) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1014) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1015) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1016) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1018) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1019) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1020) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1021) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1022) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1023) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1024) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1025) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1026) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1027) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1028) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1029) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1030) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1031) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1032) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1033) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1034) {
    STACKTOP = i2;
    return i94 | 0;
  } else if ((i95 | 0) == 1036) {
    STACKTOP = i2;
    return i94 | 0;
  }
  return 0;
}
function _read_restart_marker(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
  i2 = i1 + 416 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  do {
    if ((i3 | 0) == 0) {
      if ((_next_marker(i1) | 0) == 0) {
        i4 = 0;
        return i4 | 0;
      } else {
        i5 = HEAP32[i2 >> 2] | 0;
        break;
      }
    } else {
      i5 = i3;
    }
  } while (0);
  i3 = i1 + 440 | 0;
  i6 = HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] | 0;
  do {
    if ((i5 | 0) == (i6 + 208 | 0)) {
      i7 = i1 | 0;
      HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] = 98;
      HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] | 0;
      FUNCTION_TABLE_vii[HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] & 511](i1, 3);
      HEAP32[i2 >> 2] = 0;
    } else {
      if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 + 24 >> 2] | 0) + 20 >> 2] & 511](i1, i6) | 0) == 0) {
        i4 = 0;
      } else {
        break;
      }
      return i4 | 0;
    }
  } while (0);
  i6 = (HEAP32[i3 >> 2] | 0) + 20 | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1 & 7;
  i4 = 1;
  return i4 | 0;
}
function _skip_variable(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
  i2 = i1 + 24 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  i4 = i3 | 0;
  i5 = i3 + 4 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  do {
    if ((i6 | 0) == 0) {
      if ((FUNCTION_TABLE_ii[HEAP32[i3 + 12 >> 2] & 511](i1) | 0) == 0) {
        i7 = 0;
        return i7 | 0;
      } else {
        i8 = HEAP32[i5 >> 2] | 0;
        break;
      }
    } else {
      i8 = i6;
    }
  } while (0);
  i6 = HEAP32[i4 >> 2] | 0;
  i9 = i8 - 1 | 0;
  i8 = i6 + 1 | 0;
  i10 = (HEAPU8[i6] | 0) << 8;
  do {
    if ((i9 | 0) == 0) {
      if ((FUNCTION_TABLE_ii[HEAP32[i3 + 12 >> 2] & 511](i1) | 0) == 0) {
        i7 = 0;
        return i7 | 0;
      } else {
        i11 = HEAP32[i5 >> 2] | 0;
        i12 = HEAP32[i4 >> 2] | 0;
        break;
      }
    } else {
      i11 = i9;
      i12 = i8;
    }
  } while (0);
  i8 = (HEAPU8[i12] | 0 | i10) - 2 | 0;
  i10 = i1 | 0;
  HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] = 91;
  HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2] = HEAP32[i1 + 416 >> 2] | 0;
  HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] = i8;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] & 511](i1, 1);
  HEAP32[i4 >> 2] = i12 + 1 | 0;
  HEAP32[i5 >> 2] = i11 - 1 | 0;
  if ((i8 | 0) <= 0) {
    i7 = 1;
    return i7 | 0;
  }
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 511](i1, i8);
  i7 = 1;
  return i7 | 0;
}
function _get_interesting_appn(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
  i2 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  i3 = i2 | 0;
  i4 = i1 + 24 | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  i6 = i5 | 0;
  i7 = i5 + 4 | 0;
  i8 = HEAP32[i7 >> 2] | 0;
  do {
    if ((i8 | 0) == 0) {
      if ((FUNCTION_TABLE_ii[HEAP32[i5 + 12 >> 2] & 511](i1) | 0) == 0) {
        i9 = 0;
        STACKTOP = i2;
        return i9 | 0;
      } else {
        i10 = HEAP32[i7 >> 2] | 0;
        break;
      }
    } else {
      i10 = i8;
    }
  } while (0);
  i8 = HEAP32[i6 >> 2] | 0;
  i11 = i10 - 1 | 0;
  i10 = i8 + 1 | 0;
  i12 = (HEAPU8[i8] | 0) << 8;
  do {
    if ((i11 | 0) == 0) {
      if ((FUNCTION_TABLE_ii[HEAP32[i5 + 12 >> 2] & 511](i1) | 0) == 0) {
        i9 = 0;
        STACKTOP = i2;
        return i9 | 0;
      } else {
        i13 = HEAP32[i7 >> 2] | 0;
        i14 = HEAP32[i6 >> 2] | 0;
        break;
      }
    } else {
      i13 = i11;
      i14 = i10;
    }
  } while (0);
  i10 = HEAPU8[i14] | 0 | i12;
  i12 = i10 - 2 | 0;
  do {
    if ((i12 | 0) > 13) {
      i15 = 14;
      i16 = i13 - 1 | 0;
      i17 = i14 + 1 | 0;
      i18 = 1071;
      break;
    } else {
      i11 = (i12 | 0) > 0 ? i12 : 0;
      i8 = i13 - 1 | 0;
      i19 = i14 + 1 | 0;
      if ((i11 | 0) == 0) {
        i20 = i8;
        i21 = i19;
        i22 = 0;
        break;
      } else {
        i15 = i11;
        i16 = i8;
        i17 = i19;
        i18 = 1071;
        break;
      }
    }
  } while (0);
  L1487 : do {
    if ((i18 | 0) == 1071) {
      i14 = i5 + 12 | 0;
      i13 = 0;
      i19 = i16;
      i8 = i17;
      while (1) {
        if ((i19 | 0) == 0) {
          if ((FUNCTION_TABLE_ii[HEAP32[i14 >> 2] & 511](i1) | 0) == 0) {
            i9 = 0;
            break;
          }
          i23 = HEAP32[i7 >> 2] | 0;
          i24 = HEAP32[i6 >> 2] | 0;
        } else {
          i23 = i19;
          i24 = i8;
        }
        HEAP8[i3 + i13 | 0] = HEAP8[i24] | 0;
        i11 = i13 + 1 | 0;
        i25 = i23 - 1 | 0;
        i26 = i24 + 1 | 0;
        if (i11 >>> 0 < i15 >>> 0) {
          i13 = i11;
          i19 = i25;
          i8 = i26;
        } else {
          i20 = i25;
          i21 = i26;
          i22 = i15;
          break L1487;
        }
      }
      STACKTOP = i2;
      return i9 | 0;
    }
  } while (0);
  i15 = i12 - i22 | 0;
  i24 = i1 + 416 | 0;
  i23 = HEAP32[i24 >> 2] | 0;
  L1497 : do {
    if ((i23 | 0) == 224) {
      i17 = i3 | 0;
      do {
        if (i22 >>> 0 > 13) {
          if (HEAP8[i17] << 24 >> 24 != 74) {
            break;
          }
          if (HEAP8[i3 + 1 | 0] << 24 >> 24 != 70) {
            break;
          }
          if (HEAP8[i3 + 2 | 0] << 24 >> 24 != 73) {
            break;
          }
          if (HEAP8[i3 + 3 | 0] << 24 >> 24 != 70) {
            break;
          }
          if (HEAP8[i3 + 4 | 0] << 24 >> 24 != 0) {
            break;
          }
          HEAP32[i1 + 280 >> 2] = 1;
          i16 = HEAP8[i3 + 5 | 0] | 0;
          i5 = i1 + 284 | 0;
          HEAP8[i5] = i16;
          i18 = i1 + 285 | 0;
          HEAP8[i18] = HEAP8[i3 + 6 | 0] | 0;
          i8 = i1 + 286 | 0;
          HEAP8[i8] = HEAP8[i3 + 7 | 0] | 0;
          i19 = i1 + 288 | 0;
          HEAP16[i19 >> 1] = (HEAPU8[i3 + 8 | 0] | 0) << 8 | (HEAPU8[i3 + 9 | 0] | 0);
          i13 = i1 + 290 | 0;
          HEAP16[i13 >> 1] = (HEAPU8[i3 + 10 | 0] | 0) << 8 | (HEAPU8[i3 + 11 | 0] | 0);
          i14 = i1 | 0;
          if (i16 << 24 >> 24 == 1) {
            i27 = 1;
            i28 = i1;
          } else {
            HEAP32[(HEAP32[i14 >> 2] | 0) + 20 >> 2] = 119;
            HEAP32[(HEAP32[i14 >> 2] | 0) + 24 >> 2] = HEAPU8[i5] | 0;
            HEAP32[(HEAP32[i14 >> 2] | 0) + 28 >> 2] = HEAPU8[i18] | 0;
            i16 = i1;
            FUNCTION_TABLE_vii[HEAP32[(HEAP32[i14 >> 2] | 0) + 4 >> 2] & 511](i16, -1);
            i27 = HEAPU8[i5] | 0;
            i28 = i16;
          }
          i16 = HEAP32[i14 >> 2] | 0;
          HEAP32[i16 + 24 >> 2] = i27;
          HEAP32[i16 + 28 >> 2] = HEAPU8[i18] | 0;
          HEAP32[i16 + 32 >> 2] = HEAPU16[i19 >> 1] | 0;
          HEAP32[i16 + 36 >> 2] = HEAPU16[i13 >> 1] | 0;
          HEAP32[i16 + 40 >> 2] = HEAPU8[i8] | 0;
          HEAP32[(HEAP32[i14 >> 2] | 0) + 20 >> 2] = 87;
          FUNCTION_TABLE_vii[HEAP32[(HEAP32[i14 >> 2] | 0) + 4 >> 2] & 511](i28, 1);
          i8 = i3 + 12 | 0;
          i16 = HEAP8[i8] | 0;
          i13 = i3 + 13 | 0;
          i19 = HEAP8[i13] | 0;
          if ((i19 | i16) << 24 >> 24 == 0) {
            i29 = i16;
            i30 = i19;
          } else {
            HEAP32[(HEAP32[i14 >> 2] | 0) + 20 >> 2] = 90;
            HEAP32[(HEAP32[i14 >> 2] | 0) + 24 >> 2] = HEAPU8[i8] | 0;
            HEAP32[(HEAP32[i14 >> 2] | 0) + 28 >> 2] = HEAPU8[i13] | 0;
            FUNCTION_TABLE_vii[HEAP32[(HEAP32[i14 >> 2] | 0) + 4 >> 2] & 511](i28, 1);
            i29 = HEAP8[i8] | 0;
            i30 = HEAP8[i13] | 0;
          }
          i13 = i10 - 16 | 0;
          if ((i13 | 0) == (Math_imul((i29 & 255) * 3 & -1, i30 & 255) | 0)) {
            break L1497;
          }
          HEAP32[(HEAP32[i14 >> 2] | 0) + 20 >> 2] = 88;
          HEAP32[(HEAP32[i14 >> 2] | 0) + 24 >> 2] = i13;
          FUNCTION_TABLE_vii[HEAP32[(HEAP32[i14 >> 2] | 0) + 4 >> 2] & 511](i28, 1);
          break L1497;
        }
      } while (0);
      do {
        if (i22 >>> 0 > 5) {
          if (HEAP8[i17] << 24 >> 24 != 74) {
            break;
          }
          if (HEAP8[i3 + 1 | 0] << 24 >> 24 != 70) {
            break;
          }
          if (HEAP8[i3 + 2 | 0] << 24 >> 24 != 88) {
            break;
          }
          if (HEAP8[i3 + 3 | 0] << 24 >> 24 != 88) {
            break;
          }
          if (HEAP8[i3 + 4 | 0] << 24 >> 24 != 0) {
            break;
          }
          i14 = i3 + 5 | 0;
          i13 = HEAPU8[i14] | 0;
          if ((i13 | 0) == 16) {
            i8 = i1 | 0;
            HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 108;
            HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = i12;
            FUNCTION_TABLE_vii[HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] & 511](i1, 1);
            break L1497;
          } else if ((i13 | 0) == 17) {
            i8 = i1 | 0;
            HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 109;
            HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = i12;
            FUNCTION_TABLE_vii[HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] & 511](i1, 1);
            break L1497;
          } else if ((i13 | 0) == 19) {
            i13 = i1 | 0;
            HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2] = 110;
            HEAP32[(HEAP32[i13 >> 2] | 0) + 24 >> 2] = i12;
            FUNCTION_TABLE_vii[HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] & 511](i1, 1);
            break L1497;
          } else {
            i13 = i1 | 0;
            HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2] = 89;
            HEAP32[(HEAP32[i13 >> 2] | 0) + 24 >> 2] = HEAPU8[i14] | 0;
            HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2] = i12;
            FUNCTION_TABLE_vii[HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] & 511](i1, 1);
            break L1497;
          }
        }
      } while (0);
      i17 = i1 | 0;
      HEAP32[(HEAP32[i17 >> 2] | 0) + 20 >> 2] = 77;
      HEAP32[(HEAP32[i17 >> 2] | 0) + 24 >> 2] = i12;
      FUNCTION_TABLE_vii[HEAP32[(HEAP32[i17 >> 2] | 0) + 4 >> 2] & 511](i1, 1);
    } else if ((i23 | 0) == 238) {
      do {
        if (i22 >>> 0 > 11) {
          if (HEAP8[i3 | 0] << 24 >> 24 != 65) {
            break;
          }
          if (HEAP8[i3 + 1 | 0] << 24 >> 24 != 100) {
            break;
          }
          if (HEAP8[i3 + 2 | 0] << 24 >> 24 != 111) {
            break;
          }
          if (HEAP8[i3 + 3 | 0] << 24 >> 24 != 98) {
            break;
          }
          if (HEAP8[i3 + 4 | 0] << 24 >> 24 != 101) {
            break;
          }
          i17 = (HEAPU8[i3 + 7 | 0] | 0) << 8 | (HEAPU8[i3 + 8 | 0] | 0);
          i13 = (HEAPU8[i3 + 9 | 0] | 0) << 8 | (HEAPU8[i3 + 10 | 0] | 0);
          i14 = HEAP8[i3 + 11 | 0] | 0;
          i8 = i1 | 0;
          i19 = HEAP32[i8 >> 2] | 0;
          HEAP32[i19 + 24 >> 2] = (HEAPU8[i3 + 5 | 0] | 0) << 8 | (HEAPU8[i3 + 6 | 0] | 0);
          HEAP32[i19 + 28 >> 2] = i17;
          HEAP32[i19 + 32 >> 2] = i13;
          HEAP32[i19 + 36 >> 2] = i14 & 255;
          HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 76;
          FUNCTION_TABLE_vii[HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] & 511](i1, 1);
          HEAP32[i1 + 292 >> 2] = 1;
          HEAP8[i1 + 296 | 0] = i14;
          break L1497;
        }
      } while (0);
      i14 = i1 | 0;
      HEAP32[(HEAP32[i14 >> 2] | 0) + 20 >> 2] = 78;
      HEAP32[(HEAP32[i14 >> 2] | 0) + 24 >> 2] = i12;
      FUNCTION_TABLE_vii[HEAP32[(HEAP32[i14 >> 2] | 0) + 4 >> 2] & 511](i1, 1);
    } else {
      i14 = i1 | 0;
      HEAP32[(HEAP32[i14 >> 2] | 0) + 20 >> 2] = 68;
      HEAP32[(HEAP32[i14 >> 2] | 0) + 24 >> 2] = HEAP32[i24 >> 2] | 0;
      FUNCTION_TABLE_vi[HEAP32[HEAP32[i14 >> 2] >> 2] & 511](i1);
    }
  } while (0);
  HEAP32[i6 >> 2] = i21;
  HEAP32[i7 >> 2] = i20;
  if ((i15 | 0) <= 0) {
    i9 = 1;
    STACKTOP = i2;
    return i9 | 0;
  }
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 511](i1, i15);
  i9 = 1;
  STACKTOP = i2;
  return i9 | 0;
}
function _get_sof(i1, i2, i3) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
  i4 = HEAP32[i1 + 24 >> 2] | 0;
  i5 = i4 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  i7 = i4 + 4 | 0;
  i8 = HEAP32[i7 >> 2] | 0;
  HEAP32[i1 + 220 >> 2] = i2;
  HEAP32[i1 + 224 >> 2] = i3;
  do {
    if ((i8 | 0) == 0) {
      if ((FUNCTION_TABLE_ii[HEAP32[i4 + 12 >> 2] & 511](i1) | 0) == 0) {
        i9 = 0;
        return i9 | 0;
      } else {
        i10 = HEAP32[i7 >> 2] | 0;
        i11 = HEAP32[i5 >> 2] | 0;
        break;
      }
    } else {
      i10 = i8;
      i11 = i6;
    }
  } while (0);
  i6 = i10 - 1 | 0;
  i10 = i11 + 1 | 0;
  i8 = (HEAPU8[i11] | 0) << 8;
  do {
    if ((i6 | 0) == 0) {
      if ((FUNCTION_TABLE_ii[HEAP32[i4 + 12 >> 2] & 511](i1) | 0) == 0) {
        i9 = 0;
        return i9 | 0;
      } else {
        i12 = HEAP32[i7 >> 2] | 0;
        i13 = HEAP32[i5 >> 2] | 0;
        break;
      }
    } else {
      i12 = i6;
      i13 = i10;
    }
  } while (0);
  i10 = i12 - 1 | 0;
  i12 = i13 + 1 | 0;
  i6 = HEAPU8[i13] | 0 | i8;
  do {
    if ((i10 | 0) == 0) {
      if ((FUNCTION_TABLE_ii[HEAP32[i4 + 12 >> 2] & 511](i1) | 0) == 0) {
        i9 = 0;
        return i9 | 0;
      } else {
        i14 = HEAP32[i7 >> 2] | 0;
        i15 = HEAP32[i5 >> 2] | 0;
        break;
      }
    } else {
      i14 = i10;
      i15 = i12;
    }
  } while (0);
  i12 = i14 - 1 | 0;
  i14 = i15 + 1 | 0;
  HEAP32[i1 + 212 >> 2] = HEAPU8[i15] | 0;
  do {
    if ((i12 | 0) == 0) {
      if ((FUNCTION_TABLE_ii[HEAP32[i4 + 12 >> 2] & 511](i1) | 0) == 0) {
        i9 = 0;
        return i9 | 0;
      } else {
        i16 = HEAP32[i7 >> 2] | 0;
        i17 = HEAP32[i5 >> 2] | 0;
        break;
      }
    } else {
      i16 = i12;
      i17 = i14;
    }
  } while (0);
  i14 = i16 - 1 | 0;
  i16 = i17 + 1 | 0;
  i12 = (HEAPU8[i17] | 0) << 8;
  i17 = i1 + 32 | 0;
  HEAP32[i17 >> 2] = i12;
  do {
    if ((i14 | 0) == 0) {
      if ((FUNCTION_TABLE_ii[HEAP32[i4 + 12 >> 2] & 511](i1) | 0) == 0) {
        i9 = 0;
        return i9 | 0;
      } else {
        i18 = HEAP32[i7 >> 2] | 0;
        i19 = HEAP32[i5 >> 2] | 0;
        i20 = HEAP32[i17 >> 2] | 0;
        break;
      }
    } else {
      i18 = i14;
      i19 = i16;
      i20 = i12;
    }
  } while (0);
  i12 = i18 - 1 | 0;
  i18 = i19 + 1 | 0;
  HEAP32[i17 >> 2] = i20 + (HEAPU8[i19] | 0) | 0;
  do {
    if ((i12 | 0) == 0) {
      if ((FUNCTION_TABLE_ii[HEAP32[i4 + 12 >> 2] & 511](i1) | 0) == 0) {
        i9 = 0;
        return i9 | 0;
      } else {
        i21 = HEAP32[i7 >> 2] | 0;
        i22 = HEAP32[i5 >> 2] | 0;
        break;
      }
    } else {
      i21 = i12;
      i22 = i18;
    }
  } while (0);
  i18 = i21 - 1 | 0;
  i21 = i22 + 1 | 0;
  i12 = (HEAPU8[i22] | 0) << 8;
  i22 = i1 + 28 | 0;
  HEAP32[i22 >> 2] = i12;
  do {
    if ((i18 | 0) == 0) {
      if ((FUNCTION_TABLE_ii[HEAP32[i4 + 12 >> 2] & 511](i1) | 0) == 0) {
        i9 = 0;
        return i9 | 0;
      } else {
        i23 = HEAP32[i7 >> 2] | 0;
        i24 = HEAP32[i5 >> 2] | 0;
        i25 = HEAP32[i22 >> 2] | 0;
        break;
      }
    } else {
      i23 = i18;
      i24 = i21;
      i25 = i12;
    }
  } while (0);
  i12 = i23 - 1 | 0;
  i23 = i24 + 1 | 0;
  HEAP32[i22 >> 2] = i25 + (HEAPU8[i24] | 0) | 0;
  do {
    if ((i12 | 0) == 0) {
      if ((FUNCTION_TABLE_ii[HEAP32[i4 + 12 >> 2] & 511](i1) | 0) == 0) {
        i9 = 0;
        return i9 | 0;
      } else {
        i26 = HEAP32[i7 >> 2] | 0;
        i27 = HEAP32[i5 >> 2] | 0;
        break;
      }
    } else {
      i26 = i12;
      i27 = i23;
    }
  } while (0);
  i23 = i1 + 36 | 0;
  HEAP32[i23 >> 2] = HEAPU8[i27] | 0;
  i12 = i6 - 8 | 0;
  i6 = i1 | 0;
  i24 = HEAP32[i6 >> 2] | 0;
  HEAP32[i24 + 24 >> 2] = HEAP32[i1 + 416 >> 2] | 0;
  HEAP32[i24 + 28 >> 2] = HEAP32[i22 >> 2] | 0;
  HEAP32[i24 + 32 >> 2] = HEAP32[i17 >> 2] | 0;
  HEAP32[i24 + 36 >> 2] = HEAP32[i23 >> 2] | 0;
  HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] = 100;
  i24 = i1;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] & 511](i24, 1);
  i25 = i1 + 440 | 0;
  if ((HEAP32[(HEAP32[i25 >> 2] | 0) + 16 >> 2] | 0) != 0) {
    HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] = 58;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 511](i24);
  }
  do {
    if ((HEAP32[i17 >> 2] | 0) == 0) {
      i28 = 1148;
    } else {
      if ((HEAP32[i22 >> 2] | 0) == 0) {
        i28 = 1148;
        break;
      }
      i21 = HEAP32[i23 >> 2] | 0;
      if ((i21 | 0) < 1) {
        i28 = 1148;
        break;
      } else {
        i29 = i21;
        break;
      }
    }
  } while (0);
  if ((i28 | 0) == 1148) {
    HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] = 32;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 511](i24);
    i29 = HEAP32[i23 >> 2] | 0;
  }
  if ((i12 | 0) != (i29 * 3 & -1 | 0)) {
    HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] = 11;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 511](i24);
  }
  i29 = i1 + 216 | 0;
  i12 = HEAP32[i29 >> 2] | 0;
  if ((i12 | 0) == 0) {
    i22 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i1 + 4 >> 2] >> 2] & 511](i24, 1, (HEAP32[i23 >> 2] | 0) * 84 & -1) | 0;
    HEAP32[i29 >> 2] = i22;
    i30 = i22;
  } else {
    i30 = i12;
  }
  i12 = i26 - 1 | 0;
  i26 = i27 + 1 | 0;
  L1607 : do {
    if ((HEAP32[i23 >> 2] | 0) > 0) {
      i27 = i4 + 12 | 0;
      i22 = i30;
      i29 = 0;
      i17 = i12;
      i21 = i26;
      while (1) {
        HEAP32[i22 + 4 >> 2] = i29;
        if ((i17 | 0) == 0) {
          if ((FUNCTION_TABLE_ii[HEAP32[i27 >> 2] & 511](i1) | 0) == 0) {
            i9 = 0;
            i28 = 1175;
            break;
          }
          i31 = HEAP32[i7 >> 2] | 0;
          i32 = HEAP32[i5 >> 2] | 0;
        } else {
          i31 = i17;
          i32 = i21;
        }
        i18 = i31 - 1 | 0;
        i19 = i32 + 1 | 0;
        i20 = i22 | 0;
        HEAP32[i20 >> 2] = HEAPU8[i32] | 0;
        if ((i18 | 0) == 0) {
          if ((FUNCTION_TABLE_ii[HEAP32[i27 >> 2] & 511](i1) | 0) == 0) {
            i9 = 0;
            i28 = 1176;
            break;
          }
          i33 = HEAP32[i7 >> 2] | 0;
          i34 = HEAP32[i5 >> 2] | 0;
        } else {
          i33 = i18;
          i34 = i19;
        }
        i19 = i33 - 1 | 0;
        i18 = HEAPU8[i34] | 0;
        i16 = i22 + 8 | 0;
        HEAP32[i16 >> 2] = i18 >>> 4;
        i14 = i22 + 12 | 0;
        HEAP32[i14 >> 2] = i18 & 15;
        if ((i19 | 0) == 0) {
          if ((FUNCTION_TABLE_ii[HEAP32[i27 >> 2] & 511](i1) | 0) == 0) {
            i9 = 0;
            i28 = 1177;
            break;
          }
          i35 = HEAP32[i7 >> 2] | 0;
          i36 = HEAP32[i5 >> 2] | 0;
        } else {
          i35 = i19;
          i36 = i34 + 1 | 0;
        }
        i19 = i22 + 16 | 0;
        HEAP32[i19 >> 2] = HEAPU8[i36] | 0;
        i18 = HEAP32[i6 >> 2] | 0;
        HEAP32[i18 + 24 >> 2] = HEAP32[i20 >> 2] | 0;
        HEAP32[i18 + 28 >> 2] = HEAP32[i16 >> 2] | 0;
        HEAP32[i18 + 32 >> 2] = HEAP32[i14 >> 2] | 0;
        HEAP32[i18 + 36 >> 2] = HEAP32[i19 >> 2] | 0;
        HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] = 101;
        FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] & 511](i24, 1);
        i19 = i29 + 1 | 0;
        i18 = i35 - 1 | 0;
        i14 = i36 + 1 | 0;
        if ((i19 | 0) < (HEAP32[i23 >> 2] | 0)) {
          i22 = i22 + 84 | 0;
          i29 = i19;
          i17 = i18;
          i21 = i14;
        } else {
          i37 = i18;
          i38 = i14;
          break L1607;
        }
      }
      if ((i28 | 0) == 1175) {
        return i9 | 0;
      } else if ((i28 | 0) == 1176) {
        return i9 | 0;
      } else if ((i28 | 0) == 1177) {
        return i9 | 0;
      }
    } else {
      i37 = i12;
      i38 = i26;
    }
  } while (0);
  HEAP32[(HEAP32[i25 >> 2] | 0) + 16 >> 2] = 1;
  HEAP32[i5 >> 2] = i38;
  HEAP32[i7 >> 2] = i37;
  i9 = 1;
  return i9 | 0;
}
function _jpeg_make_d_derived_tbl(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
  i5 = STACKTOP;
  STACKTOP = STACKTOP + 1288 | 0;
  i6 = i5 | 0;
  i7 = i5 + 260 | 0;
  if (i3 >>> 0 > 3) {
    i8 = i1 | 0;
    HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 50;
    HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = i3;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i8 >> 2] >> 2] & 511](i1);
  }
  i8 = (i2 | 0) != 0;
  if (i8) {
    i9 = i1 + 180 + (i3 << 2) | 0;
  } else {
    i9 = i1 + 196 + (i3 << 2) | 0;
  }
  i2 = HEAP32[i9 >> 2] | 0;
  if ((i2 | 0) == 0) {
    i9 = i1 | 0;
    HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] = 50;
    HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] = i3;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i9 >> 2] >> 2] & 511](i1);
  }
  i9 = HEAP32[i4 >> 2] | 0;
  if ((i9 | 0) == 0) {
    i3 = i1;
    i10 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i1 + 4 >> 2] >> 2] & 511](i3, 1, 1424) | 0;
    HEAP32[i4 >> 2] = i10;
    i11 = i10;
    i12 = i3;
  } else {
    i11 = i9;
    i12 = i1;
  }
  HEAP32[i11 + 140 >> 2] = i2;
  i9 = i1 | 0;
  i1 = 1;
  i3 = 0;
  while (1) {
    i10 = HEAP8[i2 + i1 | 0] | 0;
    i4 = i10 & 255;
    i13 = i4 + i3 | 0;
    if ((i13 | 0) > 256) {
      HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] = 8;
      FUNCTION_TABLE_vi[HEAP32[HEAP32[i9 >> 2] >> 2] & 511](i12);
    }
    if (i10 << 24 >> 24 == 0) {
      i14 = i3;
    } else {
      _memset(i6 + i3 | 0, i1 & 255 | 0, i4 | 0);
      i14 = i13;
    }
    i13 = i1 + 1 | 0;
    if ((i13 | 0) == 17) {
      break;
    } else {
      i1 = i13;
      i3 = i14;
    }
  }
  HEAP8[i6 + i14 | 0] = 0;
  i3 = HEAP8[i6 | 0] | 0;
  L1654 : do {
    if (i3 << 24 >> 24 == 0) {
      i15 = 1;
      i16 = 0;
    } else {
      i1 = i3 << 24 >> 24;
      i13 = 0;
      i4 = 0;
      i10 = i3;
      while (1) {
        L1658 : do {
          if ((i10 << 24 >> 24 | 0) == (i1 | 0)) {
            i17 = i13;
            i18 = i4;
            while (1) {
              i19 = i18 + 1 | 0;
              HEAP32[i7 + (i18 << 2) >> 2] = i17;
              i20 = i17 + 1 | 0;
              i21 = HEAP8[i6 + i19 | 0] | 0;
              if ((i21 << 24 >> 24 | 0) == (i1 | 0)) {
                i17 = i20;
                i18 = i19;
              } else {
                i22 = i20;
                i23 = i19;
                i24 = i21;
                break L1658;
              }
            }
          } else {
            i22 = i13;
            i23 = i4;
            i24 = i10;
          }
        } while (0);
        if ((i22 | 0) >= (1 << i1 | 0)) {
          HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] = 8;
          FUNCTION_TABLE_vi[HEAP32[HEAP32[i9 >> 2] >> 2] & 511](i12);
        }
        if (i24 << 24 >> 24 == 0) {
          i15 = 1;
          i16 = 0;
          break L1654;
        } else {
          i1 = i1 + 1 | 0;
          i13 = i22 << 1;
          i4 = i23;
          i10 = i24;
        }
      }
    }
  } while (0);
  while (1) {
    i24 = i2 + i15 | 0;
    if (HEAP8[i24] << 24 >> 24 == 0) {
      HEAP32[i11 + (i15 << 2) >> 2] = -1;
      i25 = i16;
    } else {
      HEAP32[i11 + 72 + (i15 << 2) >> 2] = i16 - (HEAP32[i7 + (i16 << 2) >> 2] | 0) | 0;
      i23 = (HEAPU8[i24] | 0) + i16 | 0;
      HEAP32[i11 + (i15 << 2) >> 2] = HEAP32[i7 + (i23 - 1 << 2) >> 2] | 0;
      i25 = i23;
    }
    i23 = i15 + 1 | 0;
    if ((i23 | 0) == 17) {
      break;
    } else {
      i15 = i23;
      i16 = i25;
    }
  }
  HEAP32[i11 + 68 >> 2] = 1048575;
  _memset(i11 + 144 | 0, 0, 1024);
  i25 = 1;
  i16 = 0;
  while (1) {
    i15 = i2 + i25 | 0;
    i23 = HEAP8[i15] | 0;
    L1674 : do {
      if (i23 << 24 >> 24 == 0) {
        i26 = i16;
      } else {
        i24 = 8 - i25 | 0;
        i22 = 1 << i24;
        i6 = (i22 | 0) > 0;
        i3 = 1;
        i10 = i16;
        i4 = i23;
        while (1) {
          if (i6) {
            i13 = i10 + (i2 + 17) | 0;
            i1 = HEAP32[i7 + (i10 << 2) >> 2] << i24;
            i18 = i22;
            while (1) {
              HEAP32[i11 + 144 + (i1 << 2) >> 2] = i25;
              HEAP8[i1 + (i11 + 1168) | 0] = HEAP8[i13] | 0;
              i17 = i18 - 1 | 0;
              if ((i17 | 0) > 0) {
                i1 = i1 + 1 | 0;
                i18 = i17;
              } else {
                break;
              }
            }
            i27 = HEAP8[i15] | 0;
          } else {
            i27 = i4;
          }
          i18 = i3 + 1 | 0;
          i1 = i10 + 1 | 0;
          if ((i18 | 0) > (i27 & 255 | 0)) {
            i26 = i1;
            break L1674;
          } else {
            i3 = i18;
            i10 = i1;
            i4 = i27;
          }
        }
      }
    } while (0);
    i15 = i25 + 1 | 0;
    if ((i15 | 0) == 9) {
      break;
    } else {
      i25 = i15;
      i16 = i26;
    }
  }
  if (i8 & (i14 | 0) > 0) {
    i28 = 0;
  } else {
    STACKTOP = i5;
    return;
  }
  while (1) {
    if ((HEAPU8[i28 + (i2 + 17) | 0] | 0) > 15) {
      HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] = 8;
      FUNCTION_TABLE_vi[HEAP32[HEAP32[i9 >> 2] >> 2] & 511](i12);
    }
    i8 = i28 + 1 | 0;
    if ((i8 | 0) == (i14 | 0)) {
      break;
    } else {
      i28 = i8;
    }
  }
  STACKTOP = i5;
  return;
}
function _jpeg_fill_bit_buffer(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0;
  i5 = i1 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  i7 = i1 + 4 | 0;
  i8 = HEAP32[i7 >> 2] | 0;
  i9 = HEAP32[i1 + 16 >> 2] | 0;
  i10 = i9 + 416 | 0;
  L1695 : do {
    if ((HEAP32[i10 >> 2] | 0) == 0) {
      if ((i3 | 0) >= 25) {
        i11 = i8;
        i12 = i6;
        i13 = i2;
        i14 = i3;
        break;
      }
      i15 = i9 + 24 | 0;
      i16 = i3;
      i17 = i2;
      i18 = i6;
      i19 = i8;
      L1698 : while (1) {
        if ((i19 | 0) == 0) {
          if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i15 >> 2] | 0) + 12 >> 2] & 511](i9) | 0) == 0) {
            i20 = 0;
            i21 = 1243;
            break;
          }
          i22 = HEAP32[i15 >> 2] | 0;
          i23 = HEAP32[i22 + 4 >> 2] | 0;
          i24 = HEAP32[i22 >> 2] | 0;
        } else {
          i23 = i19;
          i24 = i18;
        }
        i22 = i23 - 1 | 0;
        i25 = i24 + 1 | 0;
        i26 = HEAP8[i24] | 0;
        i27 = i26 & 255;
        L1704 : do {
          if (i26 << 24 >> 24 == -1) {
            i28 = i22;
            i29 = i25;
            while (1) {
              if ((i28 | 0) == 0) {
                if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i15 >> 2] | 0) + 12 >> 2] & 511](i9) | 0) == 0) {
                  i20 = 0;
                  i21 = 1244;
                  break L1698;
                }
                i30 = HEAP32[i15 >> 2] | 0;
                i31 = HEAP32[i30 + 4 >> 2] | 0;
                i32 = HEAP32[i30 >> 2] | 0;
              } else {
                i31 = i28;
                i32 = i29;
              }
              i33 = i31 - 1 | 0;
              i34 = i32 + 1 | 0;
              i35 = HEAP8[i32] | 0;
              if ((i35 << 24 >> 24 | 0) == (-1 | 0)) {
                i28 = i33;
                i29 = i34;
              } else if ((i35 << 24 >> 24 | 0) == 0) {
                i36 = 255;
                i37 = i33;
                i38 = i34;
                break L1704;
              } else {
                i21 = 1234;
                break L1698;
              }
            }
          } else {
            i36 = i27;
            i37 = i22;
            i38 = i25;
          }
        } while (0);
        i25 = i36 | i17 << 8;
        i22 = i16 + 8 | 0;
        if ((i22 | 0) < 25) {
          i16 = i22;
          i17 = i25;
          i18 = i38;
          i19 = i37;
        } else {
          i11 = i37;
          i12 = i38;
          i13 = i25;
          i14 = i22;
          break L1695;
        }
      }
      if ((i21 | 0) == 1243) {
        return i20 | 0;
      } else if ((i21 | 0) == 1244) {
        return i20 | 0;
      } else if ((i21 | 0) == 1234) {
        HEAP32[i10 >> 2] = i35 & 255;
        i39 = i33;
        i40 = i34;
        i41 = i17;
        i42 = i16;
        i21 = 1236;
        break;
      }
    } else {
      i39 = i8;
      i40 = i6;
      i41 = i2;
      i42 = i3;
      i21 = 1236;
    }
  } while (0);
  do {
    if ((i21 | 0) == 1236) {
      if ((i42 | 0) >= (i4 | 0)) {
        i11 = i39;
        i12 = i40;
        i13 = i41;
        i14 = i42;
        break;
      }
      i3 = i9 + 444 | 0;
      if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) == 0) {
        i2 = i9 | 0;
        HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] = 117;
        FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 511](i9, -1);
        HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] = 1;
      }
      i11 = i39;
      i12 = i40;
      i13 = i41 << 25 - i42;
      i14 = 25;
    }
  } while (0);
  HEAP32[i5 >> 2] = i12;
  HEAP32[i7 >> 2] = i11;
  HEAP32[i1 + 8 >> 2] = i13;
  HEAP32[i1 + 12 >> 2] = i14;
  i20 = 1;
  return i20 | 0;
}
function _jpeg_huff_decode(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
  do {
    if ((i3 | 0) < (i5 | 0)) {
      if ((_jpeg_fill_bit_buffer(i1, i2, i3, i5) | 0) == 0) {
        i6 = -1;
        return i6 | 0;
      } else {
        i7 = i1 + 8 | 0;
        i8 = i1 + 12 | 0;
        i9 = HEAP32[i7 >> 2] | 0;
        i10 = HEAP32[i8 >> 2] | 0;
        i11 = i7;
        i12 = i8;
        break;
      }
    } else {
      i9 = i2;
      i10 = i3;
      i11 = i1 + 8 | 0;
      i12 = i1 + 12 | 0;
    }
  } while (0);
  i3 = i10 - i5 | 0;
  i10 = i9 >> i3 & (1 << i5) - 1;
  L1732 : do {
    if ((i10 | 0) > (HEAP32[i4 + (i5 << 2) >> 2] | 0)) {
      i2 = i3;
      i8 = i9;
      i7 = i5;
      i13 = i10;
      while (1) {
        i14 = i13 << 1;
        if ((i2 | 0) < 1) {
          if ((_jpeg_fill_bit_buffer(i1, i8, i2, 1) | 0) == 0) {
            i6 = -1;
            break;
          }
          i15 = HEAP32[i11 >> 2] | 0;
          i16 = HEAP32[i12 >> 2] | 0;
        } else {
          i15 = i8;
          i16 = i2;
        }
        i17 = i16 - 1 | 0;
        i18 = i15 >>> (i17 >>> 0) & 1 | i14;
        i14 = i7 + 1 | 0;
        if ((i18 | 0) > (HEAP32[i4 + (i14 << 2) >> 2] | 0)) {
          i2 = i17;
          i8 = i15;
          i7 = i14;
          i13 = i18;
        } else {
          i19 = i17;
          i20 = i15;
          i21 = i14;
          i22 = i18;
          break L1732;
        }
      }
      return i6 | 0;
    } else {
      i19 = i3;
      i20 = i9;
      i21 = i5;
      i22 = i10;
    }
  } while (0);
  HEAP32[i11 >> 2] = i20;
  HEAP32[i12 >> 2] = i19;
  if ((i21 | 0) > 16) {
    i19 = i1 + 16 | 0;
    HEAP32[(HEAP32[HEAP32[i19 >> 2] >> 2] | 0) + 20 >> 2] = 118;
    i1 = HEAP32[i19 >> 2] | 0;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1, -1);
    i6 = 0;
    return i6 | 0;
  } else {
    i6 = HEAPU8[((HEAP32[i4 + 72 + (i21 << 2) >> 2] | 0) + i22 | 0) + ((HEAP32[i4 + 140 >> 2] | 0) + 17) | 0] | 0;
    return i6 | 0;
  }
  return 0;
}
function _start_pass_huff_decoder(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
  i2 = HEAP32[i1 + 444 >> 2] | 0;
  do {
    if ((HEAP32[i1 + 400 >> 2] | 0) == 0) {
      if ((HEAP32[i1 + 404 >> 2] | 0) != 63) {
        i3 = 1266;
        break;
      }
      if ((HEAP32[i1 + 408 >> 2] | 0) != 0) {
        i3 = 1266;
        break;
      }
      if ((HEAP32[i1 + 412 >> 2] | 0) == 0) {
        break;
      } else {
        i3 = 1266;
        break;
      }
    } else {
      i3 = 1266;
    }
  } while (0);
  if ((i3 | 0) == 1266) {
    i3 = i1 | 0;
    HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] = 122;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] & 511](i1, -1);
  }
  i3 = i1 + 328 | 0;
  L1754 : do {
    if ((HEAP32[i3 >> 2] | 0) > 0) {
      i4 = i2 + 40 | 0;
      i5 = i2 + 56 | 0;
      i6 = i2 + 20 | 0;
      i7 = 0;
      while (1) {
        i8 = HEAP32[i1 + 332 + (i7 << 2) >> 2] | 0;
        i9 = HEAP32[i8 + 20 >> 2] | 0;
        i10 = HEAP32[i8 + 24 >> 2] | 0;
        _jpeg_make_d_derived_tbl(i1, 1, i9, i4 + (i9 << 2) | 0);
        _jpeg_make_d_derived_tbl(i1, 0, i10, i5 + (i10 << 2) | 0);
        HEAP32[i6 + (i7 << 2) >> 2] = 0;
        i10 = i7 + 1 | 0;
        if ((i10 | 0) < (HEAP32[i3 >> 2] | 0)) {
          i7 = i10;
        } else {
          break L1754;
        }
      }
    }
  } while (0);
  i3 = i1 + 356 | 0;
  if ((HEAP32[i3 >> 2] | 0) <= 0) {
    i11 = i2 + 16 | 0;
    HEAP32[i11 >> 2] = 0;
    i12 = i2 + 12 | 0;
    HEAP32[i12 >> 2] = 0;
    i13 = i2 + 8 | 0;
    HEAP32[i13 >> 2] = 0;
    i14 = i1 + 276 | 0;
    i15 = HEAP32[i14 >> 2] | 0;
    i16 = i2 + 36 | 0;
    i17 = i15;
    HEAP32[i16 >> 2] = i17;
    return;
  }
  i7 = i2 + 40 | 0;
  i6 = i2 + 72 | 0;
  i5 = i2 + 56 | 0;
  i4 = i2 + 112 | 0;
  i10 = i2 + 192 | 0;
  i9 = i2 + 152 | 0;
  i8 = 0;
  while (1) {
    i18 = HEAP32[i1 + 332 + (HEAP32[i1 + 360 + (i8 << 2) >> 2] << 2) >> 2] | 0;
    HEAP32[i6 + (i8 << 2) >> 2] = HEAP32[i7 + (HEAP32[i18 + 20 >> 2] << 2) >> 2] | 0;
    HEAP32[i4 + (i8 << 2) >> 2] = HEAP32[i5 + (HEAP32[i18 + 24 >> 2] << 2) >> 2] | 0;
    if ((HEAP32[i18 + 48 >> 2] | 0) == 0) {
      HEAP32[i10 + (i8 << 2) >> 2] = 0;
      HEAP32[i9 + (i8 << 2) >> 2] = 0;
    } else {
      HEAP32[i9 + (i8 << 2) >> 2] = 1;
      HEAP32[i10 + (i8 << 2) >> 2] = (HEAP32[i18 + 36 >> 2] | 0) > 1 & 1;
    }
    i18 = i8 + 1 | 0;
    if ((i18 | 0) < (HEAP32[i3 >> 2] | 0)) {
      i8 = i18;
    } else {
      break;
    }
  }
  i11 = i2 + 16 | 0;
  HEAP32[i11 >> 2] = 0;
  i12 = i2 + 12 | 0;
  HEAP32[i12 >> 2] = 0;
  i13 = i2 + 8 | 0;
  HEAP32[i13 >> 2] = 0;
  i14 = i1 + 276 | 0;
  i15 = HEAP32[i14 >> 2] | 0;
  i16 = i2 + 36 | 0;
  i17 = i15;
  HEAP32[i16 >> 2] = i17;
  return;
}
function _decode_mcu(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0;
  i3 = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  i4 = i3 | 0;
  i5 = i3 + 20 | 0;
  i6 = HEAP32[i1 + 444 >> 2] | 0;
  i7 = i1 + 276 | 0;
  do {
    if ((HEAP32[i7 >> 2] | 0) != 0) {
      if ((HEAP32[i6 + 36 >> 2] | 0) != 0) {
        break;
      }
      i8 = i6 + 16 | 0;
      i9 = i1 + 440 | 0;
      i10 = (HEAP32[i9 >> 2] | 0) + 24 | 0;
      HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + ((HEAP32[i8 >> 2] | 0) / 8 & -1) | 0;
      HEAP32[i8 >> 2] = 0;
      if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] & 511](i1) | 0) == 0) {
        i11 = 0;
        STACKTOP = i3;
        return i11 | 0;
      }
      i9 = i1 + 328 | 0;
      L1776 : do {
        if ((HEAP32[i9 >> 2] | 0) > 0) {
          i8 = i6 + 20 | 0;
          i10 = 0;
          while (1) {
            HEAP32[i8 + (i10 << 2) >> 2] = 0;
            i12 = i10 + 1 | 0;
            if ((i12 | 0) < (HEAP32[i9 >> 2] | 0)) {
              i10 = i12;
            } else {
              break L1776;
            }
          }
        }
      } while (0);
      HEAP32[i6 + 36 >> 2] = HEAP32[i7 >> 2] | 0;
      if ((HEAP32[i1 + 416 >> 2] | 0) != 0) {
        break;
      }
      HEAP32[i6 + 8 >> 2] = 0;
    }
  } while (0);
  if ((HEAP32[i6 + 8 >> 2] | 0) == 0) {
    HEAP32[i4 + 16 >> 2] = i1;
    i7 = i1 + 24 | 0;
    i9 = HEAP32[i7 >> 2] | 0;
    i10 = HEAP32[i9 >> 2] | 0;
    i8 = i4 | 0;
    HEAP32[i8 >> 2] = i10;
    i12 = HEAP32[i9 + 4 >> 2] | 0;
    i13 = i4 + 4 | 0;
    HEAP32[i13 >> 2] = i12;
    i14 = i6 + 12 | 0;
    i15 = HEAP32[i14 >> 2] | 0;
    i16 = i6 + 16 | 0;
    i17 = HEAP32[i16 >> 2] | 0;
    i18 = i5;
    i19 = i6 + 20 | 0;
    HEAP32[i18 >> 2] = HEAP32[i19 >> 2] | 0;
    HEAP32[i18 + 4 >> 2] = HEAP32[i19 + 4 >> 2] | 0;
    HEAP32[i18 + 8 >> 2] = HEAP32[i19 + 8 >> 2] | 0;
    HEAP32[i18 + 12 >> 2] = HEAP32[i19 + 12 >> 2] | 0;
    i20 = i1 + 356 | 0;
    do {
      if ((HEAP32[i20 >> 2] | 0) > 0) {
        i21 = i6 + 72 | 0;
        i22 = i6 + 112 | 0;
        i23 = i4 + 8 | 0;
        i24 = i4 + 12 | 0;
        i25 = i6 + 152 | 0;
        i26 = i6 + 192 | 0;
        i27 = i17;
        i28 = i15;
        i29 = 0;
        L1787 : while (1) {
          i30 = HEAP32[i2 + (i29 << 2) >> 2] | 0;
          i31 = HEAP32[i21 + (i29 << 2) >> 2] | 0;
          i32 = HEAP32[i22 + (i29 << 2) >> 2] | 0;
          do {
            if ((i27 | 0) < 8) {
              if ((_jpeg_fill_bit_buffer(i4, i28, i27, 0) | 0) == 0) {
                i11 = 0;
                i33 = 1351;
                break L1787;
              }
              i34 = HEAP32[i23 >> 2] | 0;
              i35 = HEAP32[i24 >> 2] | 0;
              if ((i35 | 0) < 8) {
                i36 = i34;
                i37 = i35;
                i38 = 1;
                i33 = 1295;
                break;
              } else {
                i39 = i34;
                i40 = i35;
                i33 = 1293;
                break;
              }
            } else {
              i39 = i28;
              i40 = i27;
              i33 = 1293;
            }
          } while (0);
          do {
            if ((i33 | 0) == 1293) {
              i33 = 0;
              i35 = i39 >> i40 - 8 & 255;
              i34 = HEAP32[i31 + 144 + (i35 << 2) >> 2] | 0;
              if ((i34 | 0) == 0) {
                i36 = i39;
                i37 = i40;
                i38 = 9;
                i33 = 1295;
                break;
              }
              i41 = i39;
              i42 = i40 - i34 | 0;
              i43 = HEAPU8[i35 + (i31 + 1168) | 0] | 0;
              break;
            }
          } while (0);
          if ((i33 | 0) == 1295) {
            i33 = 0;
            i35 = _jpeg_huff_decode(i4, i36, i37, i31, i38) | 0;
            if ((i35 | 0) < 0) {
              i11 = 0;
              i33 = 1344;
              break;
            }
            i41 = HEAP32[i23 >> 2] | 0;
            i42 = HEAP32[i24 >> 2] | 0;
            i43 = i35;
          }
          do {
            if ((i43 | 0) == 0) {
              i44 = i41;
              i45 = i42;
              i46 = 0;
            } else {
              if ((i42 | 0) < (i43 | 0)) {
                if ((_jpeg_fill_bit_buffer(i4, i41, i42, i43) | 0) == 0) {
                  i11 = 0;
                  i33 = 1346;
                  break L1787;
                }
                i47 = HEAP32[i23 >> 2] | 0;
                i48 = HEAP32[i24 >> 2] | 0;
              } else {
                i47 = i41;
                i48 = i42;
              }
              i35 = i48 - i43 | 0;
              i34 = i47 >> i35 & (1 << i43) - 1;
              if ((i34 | 0) >= (HEAP32[5252424 + (i43 << 2) >> 2] | 0)) {
                i44 = i47;
                i45 = i35;
                i46 = i34;
                break;
              }
              i44 = i47;
              i45 = i35;
              i46 = (HEAP32[5252488 + (i43 << 2) >> 2] | 0) + i34 | 0;
            }
          } while (0);
          if ((HEAP32[i25 + (i29 << 2) >> 2] | 0) != 0) {
            i31 = i5 + (HEAP32[i1 + 360 + (i29 << 2) >> 2] << 2) | 0;
            i34 = (HEAP32[i31 >> 2] | 0) + i46 | 0;
            HEAP32[i31 >> 2] = i34;
            HEAP16[i30 >> 1] = i34 & 65535;
          }
          L1810 : do {
            if ((HEAP32[i26 + (i29 << 2) >> 2] | 0) == 0) {
              i34 = 1;
              i31 = i45;
              i35 = i44;
              while (1) {
                do {
                  if ((i31 | 0) < 8) {
                    if ((_jpeg_fill_bit_buffer(i4, i35, i31, 0) | 0) == 0) {
                      i11 = 0;
                      i33 = 1345;
                      break L1787;
                    }
                    i49 = HEAP32[i23 >> 2] | 0;
                    i50 = HEAP32[i24 >> 2] | 0;
                    if ((i50 | 0) < 8) {
                      i51 = 1;
                      i52 = i49;
                      i53 = i50;
                      i33 = 1328;
                      break;
                    } else {
                      i54 = i49;
                      i55 = i50;
                      i33 = 1326;
                      break;
                    }
                  } else {
                    i54 = i35;
                    i55 = i31;
                    i33 = 1326;
                  }
                } while (0);
                do {
                  if ((i33 | 0) == 1326) {
                    i33 = 0;
                    i50 = i54 >> i55 - 8 & 255;
                    i49 = HEAP32[i32 + 144 + (i50 << 2) >> 2] | 0;
                    if ((i49 | 0) == 0) {
                      i51 = 9;
                      i52 = i54;
                      i53 = i55;
                      i33 = 1328;
                      break;
                    }
                    i56 = i54;
                    i57 = i55 - i49 | 0;
                    i58 = HEAPU8[i50 + (i32 + 1168) | 0] | 0;
                    break;
                  }
                } while (0);
                if ((i33 | 0) == 1328) {
                  i33 = 0;
                  i50 = _jpeg_huff_decode(i4, i52, i53, i32, i51) | 0;
                  if ((i50 | 0) < 0) {
                    i11 = 0;
                    i33 = 1347;
                    break L1787;
                  }
                  i56 = HEAP32[i23 >> 2] | 0;
                  i57 = HEAP32[i24 >> 2] | 0;
                  i58 = i50;
                }
                i50 = i58 >> 4;
                i49 = i58 & 15;
                if ((i49 | 0) == 0) {
                  if ((i50 | 0) == 15) {
                    i59 = i56;
                    i60 = i57;
                    i61 = 15;
                  } else {
                    i62 = i56;
                    i63 = i57;
                    break L1810;
                  }
                } else {
                  if ((i57 | 0) < (i49 | 0)) {
                    if ((_jpeg_fill_bit_buffer(i4, i56, i57, i49) | 0) == 0) {
                      i11 = 0;
                      i33 = 1348;
                      break L1787;
                    }
                    i64 = HEAP32[i23 >> 2] | 0;
                    i65 = HEAP32[i24 >> 2] | 0;
                  } else {
                    i64 = i56;
                    i65 = i57;
                  }
                  i59 = i64;
                  i60 = i65 - i49 | 0;
                  i61 = i50;
                }
                i50 = (i34 + 1 | 0) + i61 | 0;
                if ((i50 | 0) < 64) {
                  i34 = i50;
                  i31 = i60;
                  i35 = i59;
                } else {
                  i62 = i59;
                  i63 = i60;
                  break L1810;
                }
              }
            } else {
              i35 = 1;
              i31 = i45;
              i34 = i44;
              while (1) {
                do {
                  if ((i31 | 0) < 8) {
                    if ((_jpeg_fill_bit_buffer(i4, i34, i31, 0) | 0) == 0) {
                      i11 = 0;
                      i33 = 1343;
                      break L1787;
                    }
                    i50 = HEAP32[i23 >> 2] | 0;
                    i49 = HEAP32[i24 >> 2] | 0;
                    if ((i49 | 0) < 8) {
                      i66 = 1;
                      i67 = i50;
                      i68 = i49;
                      i33 = 1311;
                      break;
                    } else {
                      i69 = i50;
                      i70 = i49;
                      i33 = 1309;
                      break;
                    }
                  } else {
                    i69 = i34;
                    i70 = i31;
                    i33 = 1309;
                  }
                } while (0);
                do {
                  if ((i33 | 0) == 1309) {
                    i33 = 0;
                    i49 = i69 >> i70 - 8 & 255;
                    i50 = HEAP32[i32 + 144 + (i49 << 2) >> 2] | 0;
                    if ((i50 | 0) == 0) {
                      i66 = 9;
                      i67 = i69;
                      i68 = i70;
                      i33 = 1311;
                      break;
                    }
                    i71 = i69;
                    i72 = i70 - i50 | 0;
                    i73 = HEAPU8[i49 + (i32 + 1168) | 0] | 0;
                    break;
                  }
                } while (0);
                if ((i33 | 0) == 1311) {
                  i33 = 0;
                  i49 = _jpeg_huff_decode(i4, i67, i68, i32, i66) | 0;
                  if ((i49 | 0) < 0) {
                    i11 = 0;
                    i33 = 1350;
                    break L1787;
                  }
                  i71 = HEAP32[i23 >> 2] | 0;
                  i72 = HEAP32[i24 >> 2] | 0;
                  i73 = i49;
                }
                i49 = i73 >> 4;
                i50 = i73 & 15;
                if ((i50 | 0) == 0) {
                  if ((i49 | 0) != 15) {
                    i62 = i71;
                    i63 = i72;
                    break L1810;
                  }
                  i74 = i71;
                  i75 = i72;
                  i76 = i35 + 15 | 0;
                } else {
                  i77 = i49 + i35 | 0;
                  if ((i72 | 0) < (i50 | 0)) {
                    if ((_jpeg_fill_bit_buffer(i4, i71, i72, i50) | 0) == 0) {
                      i11 = 0;
                      i33 = 1342;
                      break L1787;
                    }
                    i78 = HEAP32[i23 >> 2] | 0;
                    i79 = HEAP32[i24 >> 2] | 0;
                  } else {
                    i78 = i71;
                    i79 = i72;
                  }
                  i49 = i79 - i50 | 0;
                  i80 = i78 >> i49 & (1 << i50) - 1;
                  if ((i80 | 0) < (HEAP32[5252424 + (i50 << 2) >> 2] | 0)) {
                    i81 = (HEAP32[5252488 + (i50 << 2) >> 2] | 0) + i80 | 0;
                  } else {
                    i81 = i80;
                  }
                  HEAP16[i30 + (HEAP32[5249360 + (i77 << 2) >> 2] << 1) >> 1] = i81 & 65535;
                  i74 = i78;
                  i75 = i49;
                  i76 = i77;
                }
                i77 = i76 + 1 | 0;
                if ((i77 | 0) < 64) {
                  i35 = i77;
                  i31 = i75;
                  i34 = i74;
                } else {
                  i62 = i74;
                  i63 = i75;
                  break L1810;
                }
              }
            }
          } while (0);
          i30 = i29 + 1 | 0;
          if ((i30 | 0) < (HEAP32[i20 >> 2] | 0)) {
            i27 = i63;
            i28 = i62;
            i29 = i30;
          } else {
            i33 = 1338;
            break;
          }
        }
        if ((i33 | 0) == 1350) {
          STACKTOP = i3;
          return i11 | 0;
        } else if ((i33 | 0) == 1342) {
          STACKTOP = i3;
          return i11 | 0;
        } else if ((i33 | 0) == 1343) {
          STACKTOP = i3;
          return i11 | 0;
        } else if ((i33 | 0) == 1344) {
          STACKTOP = i3;
          return i11 | 0;
        } else if ((i33 | 0) == 1345) {
          STACKTOP = i3;
          return i11 | 0;
        } else if ((i33 | 0) == 1338) {
          i82 = i63;
          i83 = i62;
          i84 = HEAP32[i8 >> 2] | 0;
          i85 = HEAP32[i7 >> 2] | 0;
          i86 = HEAP32[i13 >> 2] | 0;
          break;
        } else if ((i33 | 0) == 1351) {
          STACKTOP = i3;
          return i11 | 0;
        } else if ((i33 | 0) == 1346) {
          STACKTOP = i3;
          return i11 | 0;
        } else if ((i33 | 0) == 1347) {
          STACKTOP = i3;
          return i11 | 0;
        } else if ((i33 | 0) == 1348) {
          STACKTOP = i3;
          return i11 | 0;
        }
      } else {
        i82 = i17;
        i83 = i15;
        i84 = i10;
        i85 = i9;
        i86 = i12;
      }
    } while (0);
    HEAP32[i85 >> 2] = i84;
    HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] = i86;
    HEAP32[i14 >> 2] = i83;
    HEAP32[i16 >> 2] = i82;
    HEAP32[i19 >> 2] = HEAP32[i18 >> 2] | 0;
    HEAP32[i19 + 4 >> 2] = HEAP32[i18 + 4 >> 2] | 0;
    HEAP32[i19 + 8 >> 2] = HEAP32[i18 + 8 >> 2] | 0;
    HEAP32[i19 + 12 >> 2] = HEAP32[i18 + 12 >> 2] | 0;
  }
  i18 = i6 + 36 | 0;
  HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) - 1 | 0;
  i11 = 1;
  STACKTOP = i3;
  return i11 | 0;
}
function _start_pass_phuff_decoder(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
  i2 = HEAP32[i1 + 444 >> 2] | 0;
  i3 = i1 + 400 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  i5 = (i4 | 0) == 0;
  i6 = i1 + 404 | 0;
  i7 = HEAP32[i6 >> 2] | 0;
  if (i5) {
    i8 = (i7 | 0) != 0 & 1;
  } else {
    i8 = (HEAP32[i1 + 328 >> 2] | 0) == 1 ? ((i4 | 0) > (i7 | 0) | (i7 | 0) > 63) & 1 : 1;
  }
  i7 = i1 + 408 | 0;
  i4 = HEAP32[i7 >> 2] | 0;
  i9 = i1 + 412 | 0;
  i10 = HEAP32[i9 >> 2] | 0;
  if ((i4 | 0) == 0) {
    i11 = i8;
  } else {
    i11 = (i10 | 0) == (i4 - 1 | 0) ? i8 : 1;
  }
  if (!((i11 | 0) == 0 & (i10 | 0) < 14)) {
    i10 = i1 | 0;
    HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] = 16;
    HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2] = HEAP32[i3 >> 2] | 0;
    HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] = HEAP32[i6 >> 2] | 0;
    HEAP32[(HEAP32[i10 >> 2] | 0) + 32 >> 2] = HEAP32[i7 >> 2] | 0;
    HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] = HEAP32[i9 >> 2] | 0;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i10 >> 2] >> 2] & 511](i1);
  }
  i10 = i1 + 328 | 0;
  L1881 : do {
    if ((HEAP32[i10 >> 2] | 0) > 0) {
      i11 = i1 + 160 | 0;
      i8 = i1 | 0;
      i4 = i1;
      i12 = 0;
      while (1) {
        i13 = HEAP32[(HEAP32[i1 + 332 + (i12 << 2) >> 2] | 0) + 4 >> 2] | 0;
        i14 = HEAP32[i11 >> 2] | 0;
        do {
          if (!i5) {
            if ((HEAP32[i14 + (i13 << 8) >> 2] | 0) >= 0) {
              break;
            }
            HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 115;
            HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = i13;
            HEAP32[(HEAP32[i8 >> 2] | 0) + 28 >> 2] = 0;
            FUNCTION_TABLE_vii[HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] & 511](i4, -1);
          }
        } while (0);
        i15 = HEAP32[i3 >> 2] | 0;
        L1889 : do {
          if ((i15 | 0) <= (HEAP32[i6 >> 2] | 0)) {
            i16 = i15;
            while (1) {
              i17 = i14 + (i13 << 8) + (i16 << 2) | 0;
              i18 = HEAP32[i17 >> 2] | 0;
              if ((HEAP32[i7 >> 2] | 0) != (((i18 | 0) < 0 ? 0 : i18) | 0)) {
                HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 115;
                HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = i13;
                HEAP32[(HEAP32[i8 >> 2] | 0) + 28 >> 2] = i16;
                FUNCTION_TABLE_vii[HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] & 511](i4, -1);
              }
              HEAP32[i17 >> 2] = HEAP32[i9 >> 2] | 0;
              i17 = i16 + 1 | 0;
              if ((i17 | 0) > (HEAP32[i6 >> 2] | 0)) {
                break L1889;
              } else {
                i16 = i17;
              }
            }
          }
        } while (0);
        i13 = i12 + 1 | 0;
        if ((i13 | 0) < (HEAP32[i10 >> 2] | 0)) {
          i12 = i13;
        } else {
          break L1881;
        }
      }
    }
  } while (0);
  i6 = i2 + 4 | 0;
  do {
    if ((HEAP32[i7 >> 2] | 0) == 0) {
      if (i5) {
        HEAP32[i6 >> 2] = 250;
        break;
      } else {
        HEAP32[i6 >> 2] = 44;
        break;
      }
    } else {
      if (i5) {
        HEAP32[i6 >> 2] = 270;
        break;
      } else {
        HEAP32[i6 >> 2] = 76;
        break;
      }
    }
  } while (0);
  if ((HEAP32[i10 >> 2] | 0) <= 0) {
    i19 = i2 + 20 | 0;
    i20 = i2 + 16 | 0;
    HEAP32[i20 >> 2] = 0;
    i21 = i2 + 12 | 0;
    HEAP32[i21 >> 2] = 0;
    i22 = i2 + 8 | 0;
    HEAP32[i22 >> 2] = 0;
    HEAP32[i19 >> 2] = 0;
    i23 = i1 + 276 | 0;
    i24 = HEAP32[i23 >> 2] | 0;
    i25 = i2 + 40 | 0;
    i26 = i24;
    HEAP32[i25 >> 2] = i26;
    return;
  }
  i6 = i2 + 44 | 0;
  i9 = i1;
  i3 = i2 + 20 | 0;
  i12 = i2 + 60 | 0;
  i4 = 0;
  while (1) {
    i8 = HEAP32[i1 + 332 + (i4 << 2) >> 2] | 0;
    do {
      if (i5) {
        if ((HEAP32[i7 >> 2] | 0) != 0) {
          break;
        }
        i11 = HEAP32[i8 + 20 >> 2] | 0;
        _jpeg_make_d_derived_tbl(i9, 1, i11, i6 + (i11 << 2) | 0);
      } else {
        i11 = HEAP32[i8 + 24 >> 2] | 0;
        i13 = i6 + (i11 << 2) | 0;
        _jpeg_make_d_derived_tbl(i9, 0, i11, i13);
        HEAP32[i12 >> 2] = HEAP32[i13 >> 2] | 0;
      }
    } while (0);
    i8 = i4 + 1 | 0;
    HEAP32[i3 + (i8 << 2) >> 2] = 0;
    if ((i8 | 0) < (HEAP32[i10 >> 2] | 0)) {
      i4 = i8;
    } else {
      i19 = i3;
      break;
    }
  }
  i20 = i2 + 16 | 0;
  HEAP32[i20 >> 2] = 0;
  i21 = i2 + 12 | 0;
  HEAP32[i21 >> 2] = 0;
  i22 = i2 + 8 | 0;
  HEAP32[i22 >> 2] = 0;
  HEAP32[i19 >> 2] = 0;
  i23 = i1 + 276 | 0;
  i24 = HEAP32[i23 >> 2] | 0;
  i25 = i2 + 40 | 0;
  i26 = i24;
  HEAP32[i25 >> 2] = i26;
  return;
}
function _decode_mcu_DC_first(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0;
  i3 = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  i4 = i3 | 0;
  i5 = i3 + 20 | 0;
  i6 = HEAP32[i1 + 444 >> 2] | 0;
  i7 = HEAP32[i1 + 412 >> 2] | 0;
  i8 = i1 + 276 | 0;
  do {
    if ((HEAP32[i8 >> 2] | 0) != 0) {
      i9 = i6 + 40 | 0;
      if ((HEAP32[i9 >> 2] | 0) != 0) {
        break;
      }
      i10 = i6 + 16 | 0;
      i11 = i1 + 440 | 0;
      i12 = (HEAP32[i11 >> 2] | 0) + 24 | 0;
      HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) / 8 & -1) | 0;
      HEAP32[i10 >> 2] = 0;
      if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i11 >> 2] | 0) + 8 >> 2] & 511](i1) | 0) == 0) {
        i13 = 0;
        STACKTOP = i3;
        return i13 | 0;
      }
      i11 = i1 + 328 | 0;
      i10 = i6 + 20 | 0;
      L1926 : do {
        if ((HEAP32[i11 >> 2] | 0) > 0) {
          i12 = 0;
          while (1) {
            i14 = i12 + 1 | 0;
            HEAP32[i10 + (i14 << 2) >> 2] = 0;
            if ((i14 | 0) < (HEAP32[i11 >> 2] | 0)) {
              i12 = i14;
            } else {
              break L1926;
            }
          }
        }
      } while (0);
      HEAP32[i10 >> 2] = 0;
      HEAP32[i9 >> 2] = HEAP32[i8 >> 2] | 0;
      if ((HEAP32[i1 + 416 >> 2] | 0) != 0) {
        break;
      }
      HEAP32[i6 + 8 >> 2] = 0;
    }
  } while (0);
  if ((HEAP32[i6 + 8 >> 2] | 0) == 0) {
    HEAP32[i4 + 16 >> 2] = i1;
    i8 = i1 + 24 | 0;
    i11 = HEAP32[i8 >> 2] | 0;
    i12 = HEAP32[i11 >> 2] | 0;
    i14 = i4 | 0;
    HEAP32[i14 >> 2] = i12;
    i15 = HEAP32[i11 + 4 >> 2] | 0;
    i16 = i4 + 4 | 0;
    HEAP32[i16 >> 2] = i15;
    i17 = i6 + 12 | 0;
    i18 = HEAP32[i17 >> 2] | 0;
    i19 = i6 + 16 | 0;
    i20 = HEAP32[i19 >> 2] | 0;
    i21 = i5;
    i22 = i6 + 20 | 0;
    HEAP32[i21 >> 2] = HEAP32[i22 >> 2] | 0;
    HEAP32[i21 + 4 >> 2] = HEAP32[i22 + 4 >> 2] | 0;
    HEAP32[i21 + 8 >> 2] = HEAP32[i22 + 8 >> 2] | 0;
    HEAP32[i21 + 12 >> 2] = HEAP32[i22 + 12 >> 2] | 0;
    HEAP32[i21 + 16 >> 2] = HEAP32[i22 + 16 >> 2] | 0;
    i23 = i1 + 356 | 0;
    do {
      if ((HEAP32[i23 >> 2] | 0) > 0) {
        i24 = i6 + 44 | 0;
        i25 = i4;
        i26 = i4 + 8 | 0;
        i27 = i4 + 12 | 0;
        i28 = i18;
        i29 = i20;
        i30 = 0;
        L1936 : while (1) {
          i31 = HEAP32[i2 + (i30 << 2) >> 2] | 0;
          i32 = HEAP32[i1 + 360 + (i30 << 2) >> 2] | 0;
          i33 = HEAP32[i24 + (HEAP32[(HEAP32[i1 + 332 + (i32 << 2) >> 2] | 0) + 20 >> 2] << 2) >> 2] | 0;
          do {
            if ((i29 | 0) < 8) {
              if ((_jpeg_fill_bit_buffer(i25, i28, i29, 0) | 0) == 0) {
                i13 = 0;
                i34 = 1416;
                break L1936;
              }
              i35 = HEAP32[i26 >> 2] | 0;
              i36 = HEAP32[i27 >> 2] | 0;
              if ((i36 | 0) < 8) {
                i37 = 1;
                i38 = i36;
                i39 = i35;
                i34 = 1403;
                break;
              } else {
                i40 = i36;
                i41 = i35;
                i34 = 1401;
                break;
              }
            } else {
              i40 = i29;
              i41 = i28;
              i34 = 1401;
            }
          } while (0);
          do {
            if ((i34 | 0) == 1401) {
              i34 = 0;
              i35 = i41 >> i40 - 8 & 255;
              i36 = HEAP32[i33 + 144 + (i35 << 2) >> 2] | 0;
              if ((i36 | 0) == 0) {
                i37 = 9;
                i38 = i40;
                i39 = i41;
                i34 = 1403;
                break;
              }
              i42 = HEAPU8[i35 + (i33 + 1168) | 0] | 0;
              i43 = i40 - i36 | 0;
              i44 = i41;
              break;
            }
          } while (0);
          if ((i34 | 0) == 1403) {
            i34 = 0;
            i36 = _jpeg_huff_decode(i25, i39, i38, i33, i37) | 0;
            if ((i36 | 0) < 0) {
              i13 = 0;
              i34 = 1419;
              break;
            }
            i42 = i36;
            i43 = HEAP32[i27 >> 2] | 0;
            i44 = HEAP32[i26 >> 2] | 0;
          }
          do {
            if ((i42 | 0) == 0) {
              i45 = 0;
              i46 = i43;
              i47 = i44;
            } else {
              if ((i43 | 0) < (i42 | 0)) {
                if ((_jpeg_fill_bit_buffer(i25, i44, i43, i42) | 0) == 0) {
                  i13 = 0;
                  i34 = 1418;
                  break L1936;
                }
                i48 = HEAP32[i27 >> 2] | 0;
                i49 = HEAP32[i26 >> 2] | 0;
              } else {
                i48 = i43;
                i49 = i44;
              }
              i36 = i48 - i42 | 0;
              i35 = i49 >> i36 & (1 << i42) - 1;
              if ((i35 | 0) >= (HEAP32[5252424 + (i42 << 2) >> 2] | 0)) {
                i45 = i35;
                i46 = i36;
                i47 = i49;
                break;
              }
              i45 = (HEAP32[5252488 + (i42 << 2) >> 2] | 0) + i35 | 0;
              i46 = i36;
              i47 = i49;
            }
          } while (0);
          i33 = i5 + 4 + (i32 << 2) | 0;
          i36 = (HEAP32[i33 >> 2] | 0) + i45 | 0;
          HEAP32[i33 >> 2] = i36;
          HEAP16[i31 >> 1] = i36 << i7 & 65535;
          i36 = i30 + 1 | 0;
          if ((i36 | 0) < (HEAP32[i23 >> 2] | 0)) {
            i28 = i47;
            i29 = i46;
            i30 = i36;
          } else {
            i34 = 1412;
            break;
          }
        }
        if ((i34 | 0) == 1412) {
          i50 = i47;
          i51 = i46;
          i52 = HEAP32[i14 >> 2] | 0;
          i53 = HEAP32[i8 >> 2] | 0;
          i54 = HEAP32[i16 >> 2] | 0;
          break;
        } else if ((i34 | 0) == 1416) {
          STACKTOP = i3;
          return i13 | 0;
        } else if ((i34 | 0) == 1418) {
          STACKTOP = i3;
          return i13 | 0;
        } else if ((i34 | 0) == 1419) {
          STACKTOP = i3;
          return i13 | 0;
        }
      } else {
        i50 = i18;
        i51 = i20;
        i52 = i12;
        i53 = i11;
        i54 = i15;
      }
    } while (0);
    HEAP32[i53 >> 2] = i52;
    HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] = i54;
    HEAP32[i17 >> 2] = i50;
    HEAP32[i19 >> 2] = i51;
    HEAP32[i22 >> 2] = HEAP32[i21 >> 2] | 0;
    HEAP32[i22 + 4 >> 2] = HEAP32[i21 + 4 >> 2] | 0;
    HEAP32[i22 + 8 >> 2] = HEAP32[i21 + 8 >> 2] | 0;
    HEAP32[i22 + 12 >> 2] = HEAP32[i21 + 12 >> 2] | 0;
    HEAP32[i22 + 16 >> 2] = HEAP32[i21 + 16 >> 2] | 0;
  }
  i21 = i6 + 40 | 0;
  HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) - 1 | 0;
  i13 = 1;
  STACKTOP = i3;
  return i13 | 0;
}
function _decode_mcu_AC_first(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0;
  i3 = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  i4 = i3 | 0;
  i5 = HEAP32[i1 + 444 >> 2] | 0;
  i6 = HEAP32[i1 + 404 >> 2] | 0;
  i7 = HEAP32[i1 + 412 >> 2] | 0;
  i8 = i1 + 276 | 0;
  do {
    if ((HEAP32[i8 >> 2] | 0) != 0) {
      i9 = i5 + 40 | 0;
      if ((HEAP32[i9 >> 2] | 0) != 0) {
        break;
      }
      i10 = i5 + 16 | 0;
      i11 = i1 + 440 | 0;
      i12 = (HEAP32[i11 >> 2] | 0) + 24 | 0;
      HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) / 8 & -1) | 0;
      HEAP32[i10 >> 2] = 0;
      if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i11 >> 2] | 0) + 8 >> 2] & 511](i1) | 0) == 0) {
        i13 = 0;
        STACKTOP = i3;
        return i13 | 0;
      }
      i11 = i1 + 328 | 0;
      i10 = i5 + 20 | 0;
      L1971 : do {
        if ((HEAP32[i11 >> 2] | 0) > 0) {
          i12 = 0;
          while (1) {
            i14 = i12 + 1 | 0;
            HEAP32[i10 + (i14 << 2) >> 2] = 0;
            if ((i14 | 0) < (HEAP32[i11 >> 2] | 0)) {
              i12 = i14;
            } else {
              break L1971;
            }
          }
        }
      } while (0);
      HEAP32[i10 >> 2] = 0;
      HEAP32[i9 >> 2] = HEAP32[i8 >> 2] | 0;
      if ((HEAP32[i1 + 416 >> 2] | 0) != 0) {
        break;
      }
      HEAP32[i5 + 8 >> 2] = 0;
    }
  } while (0);
  if ((HEAP32[i5 + 8 >> 2] | 0) == 0) {
    i8 = i5 + 20 | 0;
    i11 = HEAP32[i8 >> 2] | 0;
    if ((i11 | 0) == 0) {
      HEAP32[i4 + 16 >> 2] = i1;
      i12 = i1 + 24 | 0;
      i14 = HEAP32[i12 >> 2] | 0;
      i15 = i4 | 0;
      HEAP32[i15 >> 2] = HEAP32[i14 >> 2] | 0;
      i16 = i4 + 4 | 0;
      HEAP32[i16 >> 2] = HEAP32[i14 + 4 >> 2] | 0;
      i14 = i5 + 12 | 0;
      i17 = HEAP32[i14 >> 2] | 0;
      i18 = i5 + 16 | 0;
      i19 = HEAP32[i18 >> 2] | 0;
      i20 = HEAP32[i2 >> 2] | 0;
      i2 = HEAP32[i5 + 60 >> 2] | 0;
      i21 = HEAP32[i1 + 400 >> 2] | 0;
      L1981 : do {
        if ((i21 | 0) > (i6 | 0)) {
          i22 = i19;
          i23 = i17;
          i24 = 0;
        } else {
          i1 = i4;
          i25 = i4 + 8 | 0;
          i26 = i4 + 12 | 0;
          i27 = i21;
          i28 = i17;
          i29 = i19;
          L1983 : while (1) {
            do {
              if ((i29 | 0) < 8) {
                if ((_jpeg_fill_bit_buffer(i1, i28, i29, 0) | 0) == 0) {
                  i13 = 0;
                  i30 = 1461;
                  break L1983;
                }
                i31 = HEAP32[i25 >> 2] | 0;
                i32 = HEAP32[i26 >> 2] | 0;
                if ((i32 | 0) < 8) {
                  i33 = 1;
                  i34 = i32;
                  i35 = i31;
                  i30 = 1438;
                  break;
                } else {
                  i36 = i32;
                  i37 = i31;
                  i30 = 1436;
                  break;
                }
              } else {
                i36 = i29;
                i37 = i28;
                i30 = 1436;
              }
            } while (0);
            do {
              if ((i30 | 0) == 1436) {
                i30 = 0;
                i31 = i37 >> i36 - 8 & 255;
                i32 = HEAP32[i2 + 144 + (i31 << 2) >> 2] | 0;
                if ((i32 | 0) == 0) {
                  i33 = 9;
                  i34 = i36;
                  i35 = i37;
                  i30 = 1438;
                  break;
                }
                i38 = HEAPU8[i31 + (i2 + 1168) | 0] | 0;
                i39 = i36 - i32 | 0;
                i40 = i37;
                break;
              }
            } while (0);
            if ((i30 | 0) == 1438) {
              i30 = 0;
              i32 = _jpeg_huff_decode(i1, i35, i34, i2, i33) | 0;
              if ((i32 | 0) < 0) {
                i13 = 0;
                i30 = 1465;
                break;
              }
              i38 = i32;
              i39 = HEAP32[i26 >> 2] | 0;
              i40 = HEAP32[i25 >> 2] | 0;
            }
            i41 = i38 >> 4;
            i32 = i38 & 15;
            if ((i32 | 0) == 0) {
              if ((i41 | 0) != 15) {
                i30 = 1449;
                break;
              }
              i42 = i39;
              i43 = i40;
              i44 = i27 + 15 | 0;
            } else {
              i31 = i41 + i27 | 0;
              if ((i39 | 0) < (i32 | 0)) {
                if ((_jpeg_fill_bit_buffer(i1, i40, i39, i32) | 0) == 0) {
                  i13 = 0;
                  i30 = 1464;
                  break;
                }
                i45 = HEAP32[i26 >> 2] | 0;
                i46 = HEAP32[i25 >> 2] | 0;
              } else {
                i45 = i39;
                i46 = i40;
              }
              i47 = i45 - i32 | 0;
              i48 = i46 >> i47 & (1 << i32) - 1;
              if ((i48 | 0) < (HEAP32[5252424 + (i32 << 2) >> 2] | 0)) {
                i49 = (HEAP32[5252488 + (i32 << 2) >> 2] | 0) + i48 | 0;
              } else {
                i49 = i48;
              }
              HEAP16[i20 + (HEAP32[5249360 + (i31 << 2) >> 2] << 1) >> 1] = i49 << i7 & 65535;
              i42 = i47;
              i43 = i46;
              i44 = i31;
            }
            i31 = i44 + 1 | 0;
            if ((i31 | 0) > (i6 | 0)) {
              i22 = i42;
              i23 = i43;
              i24 = 0;
              break L1981;
            } else {
              i27 = i31;
              i28 = i43;
              i29 = i42;
            }
          }
          if ((i30 | 0) == 1464) {
            STACKTOP = i3;
            return i13 | 0;
          } else if ((i30 | 0) == 1449) {
            i29 = 1 << i41;
            if ((i41 | 0) == 0) {
              i50 = i39;
              i51 = i40;
              i52 = i29;
            } else {
              do {
                if ((i39 | 0) < (i41 | 0)) {
                  if ((_jpeg_fill_bit_buffer(i1, i40, i39, i41) | 0) == 0) {
                    i13 = 0;
                    STACKTOP = i3;
                    return i13 | 0;
                  } else {
                    i53 = HEAP32[i26 >> 2] | 0;
                    i54 = HEAP32[i25 >> 2] | 0;
                    break;
                  }
                } else {
                  i53 = i39;
                  i54 = i40;
                }
              } while (0);
              i25 = i53 - i41 | 0;
              i50 = i25;
              i51 = i54;
              i52 = (i54 >> i25 & i29 - 1) + i29 | 0;
            }
            i22 = i50;
            i23 = i51;
            i24 = i52 - 1 | 0;
            break;
          } else if ((i30 | 0) == 1465) {
            STACKTOP = i3;
            return i13 | 0;
          } else if ((i30 | 0) == 1461) {
            STACKTOP = i3;
            return i13 | 0;
          }
        }
      } while (0);
      HEAP32[HEAP32[i12 >> 2] >> 2] = HEAP32[i15 >> 2] | 0;
      HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] = HEAP32[i16 >> 2] | 0;
      HEAP32[i14 >> 2] = i23;
      HEAP32[i18 >> 2] = i22;
      i55 = i24;
    } else {
      i55 = i11 - 1 | 0;
    }
    HEAP32[i8 >> 2] = i55;
  }
  i55 = i5 + 40 | 0;
  HEAP32[i55 >> 2] = (HEAP32[i55 >> 2] | 0) - 1 | 0;
  i13 = 1;
  STACKTOP = i3;
  return i13 | 0;
}
function _decode_mcu_DC_refine(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0;
  i3 = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  i4 = i3 | 0;
  i5 = HEAP32[i1 + 444 >> 2] | 0;
  i6 = 1 << HEAP32[i1 + 412 >> 2];
  i7 = i1 + 276 | 0;
  do {
    if ((HEAP32[i7 >> 2] | 0) != 0) {
      i8 = i5 + 40 | 0;
      if ((HEAP32[i8 >> 2] | 0) != 0) {
        break;
      }
      i9 = i5 + 16 | 0;
      i10 = i1 + 440 | 0;
      i11 = (HEAP32[i10 >> 2] | 0) + 24 | 0;
      HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) / 8 & -1) | 0;
      HEAP32[i9 >> 2] = 0;
      if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] & 511](i1) | 0) == 0) {
        i12 = 0;
        STACKTOP = i3;
        return i12 | 0;
      }
      i10 = i1 + 328 | 0;
      i9 = i5 + 20 | 0;
      L2033 : do {
        if ((HEAP32[i10 >> 2] | 0) > 0) {
          i11 = 0;
          while (1) {
            i13 = i11 + 1 | 0;
            HEAP32[i9 + (i13 << 2) >> 2] = 0;
            if ((i13 | 0) < (HEAP32[i10 >> 2] | 0)) {
              i11 = i13;
            } else {
              break L2033;
            }
          }
        }
      } while (0);
      HEAP32[i9 >> 2] = 0;
      HEAP32[i8 >> 2] = HEAP32[i7 >> 2] | 0;
      if ((HEAP32[i1 + 416 >> 2] | 0) != 0) {
        break;
      }
      HEAP32[i5 + 8 >> 2] = 0;
    }
  } while (0);
  HEAP32[i4 + 16 >> 2] = i1;
  i7 = i1 + 24 | 0;
  i10 = HEAP32[i7 >> 2] | 0;
  i11 = HEAP32[i10 >> 2] | 0;
  i13 = i4 | 0;
  HEAP32[i13 >> 2] = i11;
  i14 = HEAP32[i10 + 4 >> 2] | 0;
  i15 = i4 + 4 | 0;
  HEAP32[i15 >> 2] = i14;
  i16 = i5 + 12 | 0;
  i17 = HEAP32[i16 >> 2] | 0;
  i18 = i5 + 16 | 0;
  i19 = HEAP32[i18 >> 2] | 0;
  i20 = i1 + 356 | 0;
  do {
    if ((HEAP32[i20 >> 2] | 0) > 0) {
      i1 = i4;
      i21 = i4 + 8 | 0;
      i22 = i4 + 12 | 0;
      i23 = 0;
      i24 = i17;
      i25 = i19;
      while (1) {
        i26 = HEAP32[i2 + (i23 << 2) >> 2] | 0;
        if ((i25 | 0) < 1) {
          if ((_jpeg_fill_bit_buffer(i1, i24, i25, 1) | 0) == 0) {
            i12 = 0;
            i27 = 1484;
            break;
          }
          i28 = HEAP32[i22 >> 2] | 0;
          i29 = HEAP32[i21 >> 2] | 0;
        } else {
          i28 = i25;
          i29 = i24;
        }
        i30 = i28 - 1 | 0;
        if ((1 << i30 & i29 | 0) != 0) {
          i31 = i26 | 0;
          HEAP16[i31 >> 1] = (HEAPU16[i31 >> 1] | 0 | i6) & 65535;
        }
        i31 = i23 + 1 | 0;
        if ((i31 | 0) < (HEAP32[i20 >> 2] | 0)) {
          i23 = i31;
          i24 = i29;
          i25 = i30;
        } else {
          i27 = 1481;
          break;
        }
      }
      if ((i27 | 0) == 1481) {
        i32 = i29;
        i33 = i30;
        i34 = HEAP32[i13 >> 2] | 0;
        i35 = HEAP32[i7 >> 2] | 0;
        i36 = HEAP32[i15 >> 2] | 0;
        break;
      } else if ((i27 | 0) == 1484) {
        STACKTOP = i3;
        return i12 | 0;
      }
    } else {
      i32 = i17;
      i33 = i19;
      i34 = i11;
      i35 = i10;
      i36 = i14;
    }
  } while (0);
  HEAP32[i35 >> 2] = i34;
  HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] = i36;
  HEAP32[i16 >> 2] = i32;
  HEAP32[i18 >> 2] = i33;
  i33 = i5 + 40 | 0;
  HEAP32[i33 >> 2] = (HEAP32[i33 >> 2] | 0) - 1 | 0;
  i12 = 1;
  STACKTOP = i3;
  return i12 | 0;
}
function _decode_mcu_AC_refine(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0;
  i3 = STACKTOP;
  STACKTOP = STACKTOP + 276 | 0;
  i4 = i3 | 0;
  i5 = i3 + 20 | 0;
  i6 = HEAP32[i1 + 444 >> 2] | 0;
  i7 = HEAP32[i1 + 404 >> 2] | 0;
  i8 = HEAP32[i1 + 412 >> 2] | 0;
  i9 = 1 << i8;
  i10 = -1 << i8;
  i8 = i1 + 276 | 0;
  do {
    if ((HEAP32[i8 >> 2] | 0) != 0) {
      i11 = i6 + 40 | 0;
      if ((HEAP32[i11 >> 2] | 0) != 0) {
        break;
      }
      i12 = i6 + 16 | 0;
      i13 = i1 + 440 | 0;
      i14 = (HEAP32[i13 >> 2] | 0) + 24 | 0;
      HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) / 8 & -1) | 0;
      HEAP32[i12 >> 2] = 0;
      if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i13 >> 2] | 0) + 8 >> 2] & 511](i1) | 0) == 0) {
        i15 = 0;
        STACKTOP = i3;
        return i15 | 0;
      }
      i13 = i1 + 328 | 0;
      i12 = i6 + 20 | 0;
      L2062 : do {
        if ((HEAP32[i13 >> 2] | 0) > 0) {
          i14 = 0;
          while (1) {
            i16 = i14 + 1 | 0;
            HEAP32[i12 + (i16 << 2) >> 2] = 0;
            if ((i16 | 0) < (HEAP32[i13 >> 2] | 0)) {
              i14 = i16;
            } else {
              break L2062;
            }
          }
        }
      } while (0);
      HEAP32[i12 >> 2] = 0;
      HEAP32[i11 >> 2] = HEAP32[i8 >> 2] | 0;
      if ((HEAP32[i1 + 416 >> 2] | 0) != 0) {
        break;
      }
      HEAP32[i6 + 8 >> 2] = 0;
    }
  } while (0);
  do {
    if ((HEAP32[i6 + 8 >> 2] | 0) == 0) {
      HEAP32[i4 + 16 >> 2] = i1;
      i8 = i1 + 24 | 0;
      i13 = HEAP32[i8 >> 2] | 0;
      i14 = i4 | 0;
      HEAP32[i14 >> 2] = HEAP32[i13 >> 2] | 0;
      i16 = i4 + 4 | 0;
      HEAP32[i16 >> 2] = HEAP32[i13 + 4 >> 2] | 0;
      i13 = i6 + 12 | 0;
      i17 = HEAP32[i13 >> 2] | 0;
      i18 = i6 + 16 | 0;
      i19 = HEAP32[i18 >> 2] | 0;
      i20 = i6 + 20 | 0;
      i21 = HEAP32[i20 >> 2] | 0;
      i22 = HEAP32[i2 >> 2] | 0;
      i23 = HEAP32[i6 + 60 >> 2] | 0;
      i24 = HEAP32[i1 + 400 >> 2] | 0;
      L2070 : do {
        if ((i21 | 0) == 0) {
          if ((i24 | 0) > (i7 | 0)) {
            i25 = i19;
            i26 = i17;
            i27 = 0;
            i28 = 1546;
            break;
          }
          i29 = i4;
          i30 = i4 + 8 | 0;
          i31 = i4 + 12 | 0;
          i32 = i1 | 0;
          i33 = i1;
          i34 = i17;
          i35 = i19;
          i36 = i24;
          i37 = 0;
          L2073 : while (1) {
            do {
              if ((i35 | 0) < 8) {
                if ((_jpeg_fill_bit_buffer(i29, i34, i35, 0) | 0) == 0) {
                  i38 = i37;
                  break L2070;
                }
                i39 = HEAP32[i30 >> 2] | 0;
                i40 = HEAP32[i31 >> 2] | 0;
                if ((i40 | 0) < 8) {
                  i41 = 1;
                  i42 = i40;
                  i43 = i39;
                  i28 = 1504;
                  break;
                } else {
                  i44 = i40;
                  i45 = i39;
                  i28 = 1502;
                  break;
                }
              } else {
                i44 = i35;
                i45 = i34;
                i28 = 1502;
              }
            } while (0);
            do {
              if ((i28 | 0) == 1502) {
                i28 = 0;
                i39 = i45 >> i44 - 8 & 255;
                i40 = HEAP32[i23 + 144 + (i39 << 2) >> 2] | 0;
                if ((i40 | 0) == 0) {
                  i41 = 9;
                  i42 = i44;
                  i43 = i45;
                  i28 = 1504;
                  break;
                }
                i46 = HEAPU8[i39 + (i23 + 1168) | 0] | 0;
                i47 = i44 - i40 | 0;
                i48 = i45;
                break;
              }
            } while (0);
            if ((i28 | 0) == 1504) {
              i28 = 0;
              i40 = _jpeg_huff_decode(i29, i43, i42, i23, i41) | 0;
              if ((i40 | 0) < 0) {
                i38 = i37;
                break L2070;
              }
              i46 = i40;
              i47 = HEAP32[i31 >> 2] | 0;
              i48 = HEAP32[i30 >> 2] | 0;
            }
            i49 = i46 >> 4;
            i40 = i46 & 15;
            do {
              if ((i40 | 0) == 1) {
                i28 = 1508;
              } else if ((i40 | 0) == 0) {
                if ((i49 | 0) == 15) {
                  i50 = 0;
                  i51 = i47;
                  i52 = i48;
                  i53 = 15;
                  break;
                } else {
                  break L2073;
                }
              } else {
                HEAP32[(HEAP32[i32 >> 2] | 0) + 20 >> 2] = 118;
                FUNCTION_TABLE_vii[HEAP32[(HEAP32[i32 >> 2] | 0) + 4 >> 2] & 511](i33, -1);
                i28 = 1508;
                break;
              }
            } while (0);
            if ((i28 | 0) == 1508) {
              i28 = 0;
              if ((i47 | 0) < 1) {
                if ((_jpeg_fill_bit_buffer(i29, i48, i47, 1) | 0) == 0) {
                  i38 = i37;
                  break L2070;
                }
                i54 = HEAP32[i31 >> 2] | 0;
                i55 = HEAP32[i30 >> 2] | 0;
              } else {
                i54 = i47;
                i55 = i48;
              }
              i40 = i54 - 1 | 0;
              i50 = (1 << i40 & i55 | 0) == 0 ? i10 : i9;
              i51 = i40;
              i52 = i55;
              i53 = i49;
            }
            i40 = i36;
            i39 = i51;
            i56 = i52;
            i57 = i53;
            L2095 : while (1) {
              i58 = i22 + (HEAP32[5249360 + (i40 << 2) >> 2] << 1) | 0;
              do {
                if (HEAP16[i58 >> 1] << 16 >> 16 == 0) {
                  i59 = i57 - 1 | 0;
                  if ((i59 | 0) < 0) {
                    i60 = i40;
                    i61 = i39;
                    i62 = i56;
                    break L2095;
                  } else {
                    i63 = i39;
                    i64 = i56;
                    i65 = i59;
                  }
                } else {
                  if ((i39 | 0) < 1) {
                    if ((_jpeg_fill_bit_buffer(i29, i56, i39, 1) | 0) == 0) {
                      i38 = i37;
                      break L2070;
                    }
                    i66 = HEAP32[i31 >> 2] | 0;
                    i67 = HEAP32[i30 >> 2] | 0;
                  } else {
                    i66 = i39;
                    i67 = i56;
                  }
                  i59 = i66 - 1 | 0;
                  if ((1 << i59 & i67 | 0) == 0) {
                    i63 = i59;
                    i64 = i67;
                    i65 = i57;
                    break;
                  }
                  i68 = HEAP16[i58 >> 1] | 0;
                  i69 = i68 << 16 >> 16;
                  if ((i69 & i9 | 0) != 0) {
                    i63 = i59;
                    i64 = i67;
                    i65 = i57;
                    break;
                  }
                  if (i68 << 16 >> 16 > -1) {
                    HEAP16[i58 >> 1] = i69 + i9 & 65535;
                    i63 = i59;
                    i64 = i67;
                    i65 = i57;
                    break;
                  } else {
                    HEAP16[i58 >> 1] = i69 + i10 & 65535;
                    i63 = i59;
                    i64 = i67;
                    i65 = i57;
                    break;
                  }
                }
              } while (0);
              i58 = i40 + 1 | 0;
              if ((i58 | 0) > (i7 | 0)) {
                i60 = i58;
                i61 = i63;
                i62 = i64;
                break;
              } else {
                i40 = i58;
                i39 = i63;
                i56 = i64;
                i57 = i65;
              }
            }
            if ((i50 | 0) == 0) {
              i70 = i37;
            } else {
              i57 = HEAP32[5249360 + (i60 << 2) >> 2] | 0;
              HEAP16[i22 + (i57 << 1) >> 1] = i50 & 65535;
              HEAP32[i5 + (i37 << 2) >> 2] = i57;
              i70 = i37 + 1 | 0;
            }
            i57 = i60 + 1 | 0;
            if ((i57 | 0) > (i7 | 0)) {
              i25 = i61;
              i26 = i62;
              i27 = 0;
              i28 = 1546;
              break L2070;
            } else {
              i34 = i62;
              i35 = i61;
              i36 = i57;
              i37 = i70;
            }
          }
          i35 = 1 << i49;
          if ((i49 | 0) == 0) {
            i71 = i36;
            i72 = i47;
            i73 = i48;
            i74 = i35;
            i75 = i37;
            i28 = 1533;
            break;
          }
          if ((i47 | 0) < (i49 | 0)) {
            if ((_jpeg_fill_bit_buffer(i29, i48, i47, i49) | 0) == 0) {
              i38 = i37;
              break;
            }
            i76 = HEAP32[i31 >> 2] | 0;
            i77 = HEAP32[i30 >> 2] | 0;
          } else {
            i76 = i47;
            i77 = i48;
          }
          i34 = i76 - i49 | 0;
          i33 = (i77 >> i34 & i35 - 1) + i35 | 0;
          if ((i33 | 0) == 0) {
            i25 = i34;
            i26 = i77;
            i27 = 0;
            i28 = 1546;
            break;
          } else {
            i71 = i36;
            i72 = i34;
            i73 = i77;
            i74 = i33;
            i75 = i37;
            i28 = 1533;
            break;
          }
        } else {
          i71 = i24;
          i72 = i19;
          i73 = i17;
          i74 = i21;
          i75 = 0;
          i28 = 1533;
        }
      } while (0);
      L2120 : do {
        if ((i28 | 0) == 1533) {
          L2122 : do {
            if ((i71 | 0) > (i7 | 0)) {
              i78 = i73;
              i79 = i72;
            } else {
              i21 = i4;
              i17 = i4 + 8 | 0;
              i19 = i4 + 12 | 0;
              i24 = i73;
              i23 = i72;
              i11 = i71;
              while (1) {
                i12 = i22 + (HEAP32[5249360 + (i11 << 2) >> 2] << 1) | 0;
                do {
                  if (HEAP16[i12 >> 1] << 16 >> 16 == 0) {
                    i80 = i23;
                    i81 = i24;
                  } else {
                    if ((i23 | 0) < 1) {
                      if ((_jpeg_fill_bit_buffer(i21, i24, i23, 1) | 0) == 0) {
                        i38 = i75;
                        break L2120;
                      }
                      i82 = HEAP32[i19 >> 2] | 0;
                      i83 = HEAP32[i17 >> 2] | 0;
                    } else {
                      i82 = i23;
                      i83 = i24;
                    }
                    i33 = i82 - 1 | 0;
                    if ((1 << i33 & i83 | 0) == 0) {
                      i80 = i33;
                      i81 = i83;
                      break;
                    }
                    i34 = HEAP16[i12 >> 1] | 0;
                    i35 = i34 << 16 >> 16;
                    if ((i35 & i9 | 0) != 0) {
                      i80 = i33;
                      i81 = i83;
                      break;
                    }
                    if (i34 << 16 >> 16 > -1) {
                      HEAP16[i12 >> 1] = i35 + i9 & 65535;
                      i80 = i33;
                      i81 = i83;
                      break;
                    } else {
                      HEAP16[i12 >> 1] = i35 + i10 & 65535;
                      i80 = i33;
                      i81 = i83;
                      break;
                    }
                  }
                } while (0);
                i12 = i11 + 1 | 0;
                if ((i12 | 0) > (i7 | 0)) {
                  i78 = i81;
                  i79 = i80;
                  break L2122;
                } else {
                  i24 = i81;
                  i23 = i80;
                  i11 = i12;
                }
              }
            }
          } while (0);
          i25 = i79;
          i26 = i78;
          i27 = i74 - 1 | 0;
          i28 = 1546;
          break;
        }
      } while (0);
      if ((i28 | 0) == 1546) {
        HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[i14 >> 2] | 0;
        HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] = HEAP32[i16 >> 2] | 0;
        HEAP32[i13 >> 2] = i26;
        HEAP32[i18 >> 2] = i25;
        HEAP32[i20 >> 2] = i27;
        break;
      }
      if ((i38 | 0) > 0) {
        i84 = i38;
      } else {
        i15 = 0;
        STACKTOP = i3;
        return i15 | 0;
      }
      while (1) {
        i37 = i84 - 1 | 0;
        HEAP16[i22 + (HEAP32[i5 + (i37 << 2) >> 2] << 1) >> 1] = 0;
        if ((i37 | 0) > 0) {
          i84 = i37;
        } else {
          i15 = 0;
          break;
        }
      }
      STACKTOP = i3;
      return i15 | 0;
    }
  } while (0);
  i84 = i6 + 40 | 0;
  HEAP32[i84 >> 2] = (HEAP32[i84 >> 2] | 0) - 1 | 0;
  i15 = 1;
  STACKTOP = i3;
  return i15 | 0;
}
function _start_pass_main166(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
  i3 = i1 + 424 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i2 | 0) == 2) {
    HEAP32[i4 + 4 >> 2] = 60;
    return;
  } else if ((i2 | 0) == 0) {
    i2 = i4 + 4 | 0;
    if ((HEAP32[(HEAP32[i1 + 452 >> 2] | 0) + 8 >> 2] | 0) == 0) {
      HEAP32[i2 >> 2] = 336;
    } else {
      HEAP32[i2 >> 2] = 40;
      i2 = HEAP32[i3 >> 2] | 0;
      i3 = i1 + 316 | 0;
      i5 = HEAP32[i3 >> 2] | 0;
      i6 = i1 + 36 | 0;
      L2159 : do {
        if ((HEAP32[i6 >> 2] | 0) > 0) {
          i7 = i2 + 56 | 0;
          i8 = i2 + 60 | 0;
          i9 = i2 + 8 | 0;
          i10 = i5 + 2 | 0;
          i11 = i5 - 2 | 0;
          i12 = HEAP32[i1 + 216 >> 2] | 0;
          i13 = 0;
          i14 = i5;
          while (1) {
            i15 = (Math_imul(HEAP32[i12 + 36 >> 2] | 0, HEAP32[i12 + 12 >> 2] | 0) | 0) / (i14 | 0) & -1;
            i16 = HEAP32[(HEAP32[i7 >> 2] | 0) + (i13 << 2) >> 2] | 0;
            i17 = HEAP32[(HEAP32[i8 >> 2] | 0) + (i13 << 2) >> 2] | 0;
            i18 = HEAP32[i9 + (i13 << 2) >> 2] | 0;
            i19 = Math_imul(i15, i10);
            L2163 : do {
              if ((i19 | 0) > 0) {
                i20 = 0;
                while (1) {
                  i21 = HEAP32[i18 + (i20 << 2) >> 2] | 0;
                  HEAP32[i17 + (i20 << 2) >> 2] = i21;
                  HEAP32[i16 + (i20 << 2) >> 2] = i21;
                  i21 = i20 + 1 | 0;
                  if ((i21 | 0) == (i19 | 0)) {
                    break L2163;
                  } else {
                    i20 = i21;
                  }
                }
              }
            } while (0);
            i19 = i15 << 1;
            L2167 : do {
              if ((i19 | 0) > 0) {
                i20 = Math_imul(i15, i5);
                i21 = Math_imul(i15, i11);
                i22 = 0;
                while (1) {
                  i23 = i22 + i20 | 0;
                  i24 = i22 + i21 | 0;
                  HEAP32[i17 + (i24 << 2) >> 2] = HEAP32[i18 + (i23 << 2) >> 2] | 0;
                  HEAP32[i17 + (i23 << 2) >> 2] = HEAP32[i18 + (i24 << 2) >> 2] | 0;
                  i24 = i22 + 1 | 0;
                  if ((i24 | 0) == (i19 | 0)) {
                    break L2167;
                  } else {
                    i22 = i24;
                  }
                }
              }
            } while (0);
            L2172 : do {
              if ((i15 | 0) > 0) {
                i19 = 0;
                while (1) {
                  HEAP32[i16 + (i19 - i15 << 2) >> 2] = HEAP32[i16 >> 2] | 0;
                  i18 = i19 + 1 | 0;
                  if ((i18 | 0) == (i15 | 0)) {
                    break L2172;
                  } else {
                    i19 = i18;
                  }
                }
              }
            } while (0);
            i15 = i13 + 1 | 0;
            if ((i15 | 0) >= (HEAP32[i6 >> 2] | 0)) {
              break L2159;
            }
            i12 = i12 + 84 | 0;
            i13 = i15;
            i14 = HEAP32[i3 >> 2] | 0;
          }
        }
      } while (0);
      HEAP32[i4 + 64 >> 2] = 0;
      HEAP32[i4 + 68 >> 2] = 0;
      HEAP32[i4 + 76 >> 2] = 0;
    }
    HEAP32[i4 + 48 >> 2] = 0;
    HEAP32[i4 + 52 >> 2] = 0;
    return;
  } else {
    i4 = i1 | 0;
    HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] = 4;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i4 >> 2] >> 2] & 511](i1);
    return;
  }
}
function _start_input_pass170(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0;
  HEAP32[i1 + 148 >> 2] = 0;
  i2 = HEAP32[i1 + 428 >> 2] | 0;
  do {
    if ((HEAP32[i1 + 328 >> 2] | 0) > 1) {
      HEAP32[i2 + 28 >> 2] = 1;
    } else {
      i3 = HEAP32[i1 + 332 >> 2] | 0;
      if ((HEAP32[i1 + 320 >> 2] | 0) == 1) {
        HEAP32[i2 + 28 >> 2] = HEAP32[i3 + 72 >> 2] | 0;
        break;
      } else {
        HEAP32[i2 + 28 >> 2] = HEAP32[i3 + 12 >> 2] | 0;
        break;
      }
    }
  } while (0);
  HEAP32[i2 + 20 >> 2] = 0;
  HEAP32[i2 + 24 >> 2] = 0;
  return;
}
function _process_data_context_main(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
  i5 = i1 + 424 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  i7 = i6 + 48 | 0;
  do {
    if ((HEAP32[i7 >> 2] | 0) == 0) {
      if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 + 428 >> 2] | 0) + 12 >> 2] & 511](i1, HEAP32[(i6 + 56 | 0) + (HEAP32[i6 + 64 >> 2] << 2) >> 2] | 0) | 0) == 0) {
        return;
      } else {
        HEAP32[i7 >> 2] = 1;
        i8 = i6 + 76 | 0;
        HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1 | 0;
        break;
      }
    }
  } while (0);
  i8 = i6 + 68 | 0;
  i9 = HEAP32[i8 >> 2] | 0;
  do {
    if ((i9 | 0) == 2) {
      i10 = i6 + 52 | 0;
      i11 = i10;
      i12 = i6 + 72 | 0;
      FUNCTION_TABLE_viiiiiii[HEAP32[(HEAP32[i1 + 432 >> 2] | 0) + 4 >> 2] & 511](i1, HEAP32[(i6 + 56 | 0) + (HEAP32[i6 + 64 >> 2] << 2) >> 2] | 0, i11, HEAP32[i12 >> 2] | 0, i2, i3, i4);
      if ((HEAP32[i11 >> 2] | 0) >>> 0 < (HEAP32[i12 >> 2] | 0) >>> 0) {
        return;
      }
      HEAP32[i8 >> 2] = 0;
      if ((HEAP32[i3 >> 2] | 0) >>> 0 < i4 >>> 0) {
        i13 = i10;
        i14 = 1590;
        break;
      }
      return;
    } else if ((i9 | 0) == 0) {
      i13 = i6 + 52 | 0;
      i14 = 1590;
      break;
    } else if ((i9 | 0) == 1) {
      i15 = i6 + 52 | 0;
      break;
    } else {
      return;
    }
  } while (0);
  if ((i14 | 0) == 1590) {
    HEAP32[i13 >> 2] = 0;
    i14 = i1 + 316 | 0;
    HEAP32[i6 + 72 >> 2] = (HEAP32[i14 >> 2] | 0) - 1 | 0;
    L2206 : do {
      if ((HEAP32[i6 + 76 >> 2] | 0) == (HEAP32[i1 + 320 >> 2] | 0)) {
        i9 = HEAP32[i5 >> 2] | 0;
        i10 = i1 + 36 | 0;
        if ((HEAP32[i10 >> 2] | 0) <= 0) {
          break;
        }
        i12 = i9 + 72 | 0;
        i11 = i9 + 64 | 0;
        i16 = i9 + 56 | 0;
        i9 = HEAP32[i1 + 216 >> 2] | 0;
        i17 = 0;
        while (1) {
          i18 = Math_imul(HEAP32[i9 + 36 >> 2] | 0, HEAP32[i9 + 12 >> 2] | 0);
          i19 = (i18 | 0) / (HEAP32[i14 >> 2] | 0) & -1;
          i20 = ((HEAP32[i9 + 44 >> 2] | 0) >>> 0) % (i18 >>> 0);
          i21 = (i20 | 0) == 0 ? i18 : i20;
          if ((i17 | 0) == 0) {
            HEAP32[i12 >> 2] = ((i21 - 1 | 0) / (i19 | 0) & -1) + 1 | 0;
          }
          i20 = HEAP32[(HEAP32[i16 + (HEAP32[i11 >> 2] << 2) >> 2] | 0) + (i17 << 2) >> 2] | 0;
          i18 = i19 << 1;
          L2214 : do {
            if ((i18 | 0) > 0) {
              i19 = i20 + (i21 - 1 << 2) | 0;
              i22 = 0;
              while (1) {
                HEAP32[i20 + (i22 + i21 << 2) >> 2] = HEAP32[i19 >> 2] | 0;
                i23 = i22 + 1 | 0;
                if ((i23 | 0) == (i18 | 0)) {
                  break L2214;
                } else {
                  i22 = i23;
                }
              }
            }
          } while (0);
          i18 = i17 + 1 | 0;
          if ((i18 | 0) >= (HEAP32[i10 >> 2] | 0)) {
            break L2206;
          }
          i9 = i9 + 84 | 0;
          i17 = i18;
        }
      }
    } while (0);
    HEAP32[i8 >> 2] = 1;
    i15 = i13;
  }
  i13 = i6 + 64 | 0;
  i14 = i13;
  i17 = i15;
  i9 = i6 + 72 | 0;
  i10 = i9;
  FUNCTION_TABLE_viiiiiii[HEAP32[(HEAP32[i1 + 432 >> 2] | 0) + 4 >> 2] & 511](i1, HEAP32[(i6 + 56 | 0) + (HEAP32[i14 >> 2] << 2) >> 2] | 0, i17, HEAP32[i10 >> 2] | 0, i2, i3, i4);
  if ((HEAP32[i17 >> 2] | 0) >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
    return;
  }
  L2225 : do {
    if ((HEAP32[i6 + 76 >> 2] | 0) == 1) {
      i10 = HEAP32[i5 >> 2] | 0;
      i17 = i1 + 316 | 0;
      i4 = HEAP32[i17 >> 2] | 0;
      i3 = i1 + 36 | 0;
      i2 = HEAP32[i3 >> 2] | 0;
      if ((i2 | 0) <= 0) {
        i24 = i17;
        break;
      }
      i11 = i10 + 56 | 0;
      i16 = i10 + 60 | 0;
      i10 = i4 + 1 | 0;
      i12 = i4 + 2 | 0;
      i18 = HEAP32[i1 + 216 >> 2] | 0;
      i21 = 0;
      i20 = i2;
      i2 = i4;
      while (1) {
        i4 = (Math_imul(HEAP32[i18 + 36 >> 2] | 0, HEAP32[i18 + 12 >> 2] | 0) | 0) / (i2 | 0) & -1;
        i22 = HEAP32[(HEAP32[i11 >> 2] | 0) + (i21 << 2) >> 2] | 0;
        i19 = HEAP32[(HEAP32[i16 >> 2] | 0) + (i21 << 2) >> 2] | 0;
        if ((i4 | 0) > 0) {
          i23 = Math_imul(i4, i10);
          i25 = Math_imul(i4, i12);
          i26 = 0;
          while (1) {
            i27 = i26 + i23 | 0;
            i28 = i26 - i4 | 0;
            HEAP32[i22 + (i28 << 2) >> 2] = HEAP32[i22 + (i27 << 2) >> 2] | 0;
            HEAP32[i19 + (i28 << 2) >> 2] = HEAP32[i19 + (i27 << 2) >> 2] | 0;
            i27 = i26 + i25 | 0;
            HEAP32[i22 + (i27 << 2) >> 2] = HEAP32[i22 + (i26 << 2) >> 2] | 0;
            HEAP32[i19 + (i27 << 2) >> 2] = HEAP32[i19 + (i26 << 2) >> 2] | 0;
            i27 = i26 + 1 | 0;
            if ((i27 | 0) == (i4 | 0)) {
              break;
            } else {
              i26 = i27;
            }
          }
          i29 = HEAP32[i3 >> 2] | 0;
        } else {
          i29 = i20;
        }
        i26 = i21 + 1 | 0;
        if ((i26 | 0) >= (i29 | 0)) {
          i24 = i17;
          break L2225;
        }
        i18 = i18 + 84 | 0;
        i21 = i26;
        i20 = i29;
        i2 = HEAP32[i17 >> 2] | 0;
      }
    } else {
      i24 = i1 + 316 | 0;
    }
  } while (0);
  HEAP32[i13 >> 2] = HEAP32[i14 >> 2] ^ 1;
  HEAP32[i7 >> 2] = 0;
  HEAP32[i15 >> 2] = (HEAP32[i24 >> 2] | 0) + 1 | 0;
  HEAP32[i9 >> 2] = (HEAP32[i24 >> 2] | 0) + 2 | 0;
  HEAP32[i8 >> 2] = 2;
  return;
}
function _process_data_simple_main167(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
  i5 = HEAP32[i1 + 424 >> 2] | 0;
  i6 = i5 + 48 | 0;
  do {
    if ((HEAP32[i6 >> 2] | 0) == 0) {
      i7 = i5 + 8 | 0;
      if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 + 428 >> 2] | 0) + 12 >> 2] & 511](i1, i7) | 0) == 0) {
        return;
      } else {
        HEAP32[i6 >> 2] = 1;
        i8 = i7;
        break;
      }
    } else {
      i8 = i5 + 8 | 0;
    }
  } while (0);
  i7 = HEAP32[i1 + 316 >> 2] | 0;
  i9 = i5 + 52 | 0;
  i5 = i9;
  FUNCTION_TABLE_viiiiiii[HEAP32[(HEAP32[i1 + 432 >> 2] | 0) + 4 >> 2] & 511](i1, i8, i5, i7, i2, i3, i4);
  if ((HEAP32[i5 >> 2] | 0) >>> 0 < i7 >>> 0) {
    return;
  }
  HEAP32[i6 >> 2] = 0;
  HEAP32[i9 >> 2] = 0;
  return;
}
function _process_data_crank_post(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  FUNCTION_TABLE_viiiiiii[HEAP32[(HEAP32[i1 + 432 >> 2] | 0) + 4 >> 2] & 511](i1, 0, 0, 0, i2, i3, i4);
  return;
}
function _start_output_pass(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
  i2 = HEAP32[i1 + 428 >> 2] | 0;
  if ((HEAP32[i2 + 16 >> 2] | 0) == 0) {
    i3 = i1 + 156 | 0;
    HEAP32[i3 >> 2] = 0;
    return;
  }
  L2257 : do {
    if ((HEAP32[i1 + 80 >> 2] | 0) != 0) {
      if ((HEAP32[i1 + 220 >> 2] | 0) == 0) {
        break;
      }
      i4 = i1 + 160 | 0;
      if ((HEAP32[i4 >> 2] | 0) == 0) {
        break;
      }
      i5 = i2 + 112 | 0;
      i6 = HEAP32[i5 >> 2] | 0;
      if ((i6 | 0) == 0) {
        i7 = i1 + 36 | 0;
        i8 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i1 + 4 >> 2] >> 2] & 511](i1, 1, (HEAP32[i7 >> 2] | 0) * 24 & -1) | 0;
        HEAP32[i5 >> 2] = i8;
        i9 = i8;
        i10 = i7;
      } else {
        i9 = i6;
        i10 = i1 + 36 | 0;
      }
      if ((HEAP32[i10 >> 2] | 0) <= 0) {
        break;
      }
      i6 = 0;
      i7 = HEAP32[i1 + 216 >> 2] | 0;
      i8 = 0;
      i5 = i9;
      while (1) {
        i11 = HEAP32[i7 + 76 >> 2] | 0;
        if ((i11 | 0) == 0) {
          break L2257;
        }
        if (HEAP16[i11 >> 1] << 16 >> 16 == 0) {
          break L2257;
        }
        if (HEAP16[i11 + 2 >> 1] << 16 >> 16 == 0) {
          break L2257;
        }
        if (HEAP16[i11 + 16 >> 1] << 16 >> 16 == 0) {
          break L2257;
        }
        if (HEAP16[i11 + 32 >> 1] << 16 >> 16 == 0) {
          break L2257;
        }
        if (HEAP16[i11 + 18 >> 1] << 16 >> 16 == 0) {
          break L2257;
        }
        if (HEAP16[i11 + 4 >> 1] << 16 >> 16 == 0) {
          break L2257;
        }
        i11 = HEAP32[i4 >> 2] | 0;
        if ((HEAP32[i11 + (i6 << 8) >> 2] | 0) < 0) {
          break L2257;
        }
        i12 = i11 + (i6 << 8) + 4 | 0;
        HEAP32[i5 + 4 >> 2] = HEAP32[i12 >> 2] | 0;
        i13 = (HEAP32[i12 >> 2] | 0) == 0 ? i8 : 1;
        i12 = i11 + (i6 << 8) + 8 | 0;
        HEAP32[i5 + 8 >> 2] = HEAP32[i12 >> 2] | 0;
        i14 = (HEAP32[i12 >> 2] | 0) == 0 ? i13 : 1;
        i13 = i11 + (i6 << 8) + 12 | 0;
        HEAP32[i5 + 12 >> 2] = HEAP32[i13 >> 2] | 0;
        i12 = (HEAP32[i13 >> 2] | 0) == 0 ? i14 : 1;
        i14 = i11 + (i6 << 8) + 16 | 0;
        HEAP32[i5 + 16 >> 2] = HEAP32[i14 >> 2] | 0;
        i13 = (HEAP32[i14 >> 2] | 0) == 0 ? i12 : 1;
        i12 = i11 + (i6 << 8) + 20 | 0;
        HEAP32[i5 + 20 >> 2] = HEAP32[i12 >> 2] | 0;
        i15 = (HEAP32[i12 >> 2] | 0) == 0 ? i13 : 1;
        i13 = i6 + 1 | 0;
        if ((i13 | 0) < (HEAP32[i10 >> 2] | 0)) {
          i6 = i13;
          i7 = i7 + 84 | 0;
          i8 = i15;
          i5 = i5 + 24 | 0;
        } else {
          break;
        }
      }
      if ((i15 | 0) == 0) {
        break;
      }
      HEAP32[i2 + 12 >> 2] = 238;
      i3 = i1 + 156 | 0;
      HEAP32[i3 >> 2] = 0;
      return;
    }
  } while (0);
  HEAP32[i2 + 12 >> 2] = 278;
  i3 = i1 + 156 | 0;
  HEAP32[i3 >> 2] = 0;
  return;
}
function _consume_data(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0;
  i2 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  i3 = i2 | 0;
  i4 = i1 + 428 | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  i6 = i1 + 328 | 0;
  L2282 : do {
    if ((HEAP32[i6 >> 2] | 0) > 0) {
      i7 = i1 + 4 | 0;
      i8 = i1;
      i9 = i5 + 72 | 0;
      i10 = i1 + 148 | 0;
      i11 = 0;
      while (1) {
        i12 = HEAP32[i1 + 332 + (i11 << 2) >> 2] | 0;
        i13 = HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2] | 0;
        i14 = HEAP32[i9 + (HEAP32[i12 + 4 >> 2] << 2) >> 2] | 0;
        i15 = HEAP32[i12 + 12 >> 2] | 0;
        i12 = Math_imul(i15, HEAP32[i10 >> 2] | 0);
        HEAP32[i3 + (i11 << 2) >> 2] = FUNCTION_TABLE_iiiiii[i13 & 511](i8, i14, i12, i15, 1) | 0;
        i15 = i11 + 1 | 0;
        if ((i15 | 0) < (HEAP32[i6 >> 2] | 0)) {
          i11 = i15;
        } else {
          break L2282;
        }
      }
    }
  } while (0);
  i11 = i5 + 24 | 0;
  i8 = HEAP32[i11 >> 2] | 0;
  i10 = i5 + 28 | 0;
  L2287 : do {
    if ((i8 | 0) < (HEAP32[i10 >> 2] | 0)) {
      i9 = i5 + 20 | 0;
      i7 = i1 + 348 | 0;
      i15 = i1 + 444 | 0;
      i12 = i5 + 32 | 0;
      i14 = i12;
      i13 = i12;
      i12 = i9 | 0;
      i16 = i8;
      i17 = HEAP32[i9 >> 2] | 0;
      L2289 : while (1) {
        i18 = i17;
        while (1) {
          if (i18 >>> 0 >= (HEAP32[i7 >> 2] | 0) >>> 0) {
            break;
          }
          i9 = HEAP32[i6 >> 2] | 0;
          L2294 : do {
            if ((i9 | 0) > 0) {
              i19 = 0;
              i20 = 0;
              i21 = i9;
              while (1) {
                i22 = HEAP32[i1 + 332 + (i20 << 2) >> 2] | 0;
                i23 = i22 + 52 | 0;
                i24 = HEAP32[i23 >> 2] | 0;
                i25 = Math_imul(i24, i18);
                i26 = i22 + 56 | 0;
                i22 = HEAP32[i26 >> 2] | 0;
                if ((i22 | 0) > 0) {
                  i27 = HEAP32[i3 + (i20 << 2) >> 2] | 0;
                  i28 = i19;
                  i29 = 0;
                  i30 = i24;
                  i24 = i22;
                  while (1) {
                    if ((i30 | 0) > 0) {
                      i22 = i28;
                      i31 = 0;
                      i32 = (HEAP32[i27 + (i29 + i16 << 2) >> 2] | 0) + (i25 << 7) | 0;
                      while (1) {
                        i33 = i22 + 1 | 0;
                        HEAP32[i13 + (i22 << 2) >> 2] = i32;
                        i34 = i31 + 1 | 0;
                        i35 = HEAP32[i23 >> 2] | 0;
                        if ((i34 | 0) < (i35 | 0)) {
                          i22 = i33;
                          i31 = i34;
                          i32 = i32 + 128 | 0;
                        } else {
                          break;
                        }
                      }
                      i36 = i33;
                      i37 = i35;
                      i38 = HEAP32[i26 >> 2] | 0;
                    } else {
                      i36 = i28;
                      i37 = i30;
                      i38 = i24;
                    }
                    i32 = i29 + 1 | 0;
                    if ((i32 | 0) < (i38 | 0)) {
                      i28 = i36;
                      i29 = i32;
                      i30 = i37;
                      i24 = i38;
                    } else {
                      break;
                    }
                  }
                  i39 = i36;
                  i40 = HEAP32[i6 >> 2] | 0;
                } else {
                  i39 = i19;
                  i40 = i21;
                }
                i24 = i20 + 1 | 0;
                if ((i24 | 0) < (i40 | 0)) {
                  i19 = i39;
                  i20 = i24;
                  i21 = i40;
                } else {
                  break L2294;
                }
              }
            }
          } while (0);
          if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i15 >> 2] | 0) + 4 >> 2] & 511](i1, i14) | 0) == 0) {
            break L2289;
          } else {
            i18 = i18 + 1 | 0;
          }
        }
        HEAP32[i12 >> 2] = 0;
        i9 = i16 + 1 | 0;
        if ((i9 | 0) < (HEAP32[i10 >> 2] | 0)) {
          i16 = i9;
          i17 = 0;
        } else {
          break L2287;
        }
      }
      HEAP32[i11 >> 2] = i16;
      HEAP32[i12 >> 2] = i18;
      i41 = 0;
      STACKTOP = i2;
      return i41 | 0;
    }
  } while (0);
  i18 = i1 + 148 | 0;
  i11 = (HEAP32[i18 >> 2] | 0) + 1 | 0;
  HEAP32[i18 >> 2] = i11;
  i18 = HEAP32[i1 + 320 >> 2] | 0;
  if (i11 >>> 0 >= i18 >>> 0) {
    FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 + 436 >> 2] | 0) + 12 >> 2] & 511](i1);
    i41 = 4;
    STACKTOP = i2;
    return i41 | 0;
  }
  i10 = HEAP32[i4 >> 2] | 0;
  do {
    if ((HEAP32[i6 >> 2] | 0) > 1) {
      HEAP32[i10 + 28 >> 2] = 1;
    } else {
      i4 = HEAP32[i1 + 332 >> 2] | 0;
      if (i11 >>> 0 < (i18 - 1 | 0) >>> 0) {
        HEAP32[i10 + 28 >> 2] = HEAP32[i4 + 12 >> 2] | 0;
        break;
      } else {
        HEAP32[i10 + 28 >> 2] = HEAP32[i4 + 72 >> 2] | 0;
        break;
      }
    }
  } while (0);
  HEAP32[i10 + 20 >> 2] = 0;
  HEAP32[i10 + 24 >> 2] = 0;
  i41 = 3;
  STACKTOP = i2;
  return i41 | 0;
}
function _dummy_consume_data(i1) {
  i1 = i1 | 0;
  return 0;
}
function _decompress_data(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0;
  i3 = HEAP32[i1 + 428 >> 2] | 0;
  i4 = i1 + 320 | 0;
  i5 = (HEAP32[i4 >> 2] | 0) - 1 | 0;
  i6 = i1 + 144 | 0;
  i7 = i1 + 152 | 0;
  i8 = i1 + 436 | 0;
  i9 = i1 + 148 | 0;
  i10 = i1 + 156 | 0;
  while (1) {
    i11 = HEAP32[i6 >> 2] | 0;
    i12 = HEAP32[i7 >> 2] | 0;
    if ((i11 | 0) >= (i12 | 0)) {
      if ((i11 | 0) != (i12 | 0)) {
        break;
      }
      if ((HEAP32[i9 >> 2] | 0) >>> 0 > (HEAP32[i10 >> 2] | 0) >>> 0) {
        break;
      }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[HEAP32[i8 >> 2] >> 2] & 511](i1) | 0) == 0) {
      i13 = 0;
      i14 = 1712;
      break;
    }
  }
  if ((i14 | 0) == 1712) {
    return i13 | 0;
  }
  i14 = i1 + 36 | 0;
  i8 = HEAP32[i14 >> 2] | 0;
  L2337 : do {
    if ((i8 | 0) > 0) {
      i9 = i1 + 4 | 0;
      i7 = i1;
      i6 = i3 + 72 | 0;
      i12 = i1 + 448 | 0;
      i11 = 0;
      i15 = HEAP32[i1 + 216 >> 2] | 0;
      i16 = i8;
      while (1) {
        if ((HEAP32[i15 + 48 >> 2] | 0) == 0) {
          i17 = i16;
        } else {
          i18 = HEAP32[(HEAP32[i9 >> 2] | 0) + 32 >> 2] | 0;
          i19 = HEAP32[i6 + (i11 << 2) >> 2] | 0;
          i20 = i15 + 12 | 0;
          i21 = HEAP32[i20 >> 2] | 0;
          i22 = Math_imul(i21, HEAP32[i10 >> 2] | 0);
          i23 = FUNCTION_TABLE_iiiiii[i18 & 511](i7, i19, i22, i21, 0) | 0;
          if ((HEAP32[i10 >> 2] | 0) >>> 0 < i5 >>> 0) {
            i24 = HEAP32[i20 >> 2] | 0;
          } else {
            i21 = HEAP32[i20 >> 2] | 0;
            i20 = ((HEAP32[i15 + 32 >> 2] | 0) >>> 0) % (i21 >>> 0);
            i24 = (i20 | 0) == 0 ? i21 : i20;
          }
          i20 = HEAP32[(HEAP32[i12 >> 2] | 0) + 4 + (i11 << 2) >> 2] | 0;
          L2347 : do {
            if ((i24 | 0) > 0) {
              i21 = i15 + 28 | 0;
              i22 = i15 + 36 | 0;
              i19 = 0;
              i18 = HEAP32[i2 + (i11 << 2) >> 2] | 0;
              i25 = HEAP32[i21 >> 2] | 0;
              while (1) {
                L2351 : do {
                  if ((i25 | 0) == 0) {
                    i26 = 0;
                    i27 = HEAP32[i22 >> 2] | 0;
                  } else {
                    i28 = 0;
                    i29 = HEAP32[i23 + (i19 << 2) >> 2] | 0;
                    i30 = 0;
                    while (1) {
                      FUNCTION_TABLE_viiiii[i20 & 511](i1, i15, i29 | 0, i18, i30);
                      i31 = HEAP32[i22 >> 2] | 0;
                      i32 = i28 + 1 | 0;
                      i33 = HEAP32[i21 >> 2] | 0;
                      if (i32 >>> 0 < i33 >>> 0) {
                        i28 = i32;
                        i29 = i29 + 128 | 0;
                        i30 = i31 + i30 | 0;
                      } else {
                        i26 = i33;
                        i27 = i31;
                        break L2351;
                      }
                    }
                  }
                } while (0);
                i30 = i19 + 1 | 0;
                if ((i30 | 0) == (i24 | 0)) {
                  break L2347;
                } else {
                  i19 = i30;
                  i18 = i18 + (i27 << 2) | 0;
                  i25 = i26;
                }
              }
            }
          } while (0);
          i17 = HEAP32[i14 >> 2] | 0;
        }
        i20 = i11 + 1 | 0;
        if ((i20 | 0) < (i17 | 0)) {
          i11 = i20;
          i15 = i15 + 84 | 0;
          i16 = i17;
        } else {
          break L2337;
        }
      }
    }
  } while (0);
  i17 = (HEAP32[i10 >> 2] | 0) + 1 | 0;
  HEAP32[i10 >> 2] = i17;
  i13 = i17 >>> 0 < (HEAP32[i4 >> 2] | 0) >>> 0 ? 3 : 4;
  return i13 | 0;
}
function _decompress_onepass(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0;
  i3 = i1 + 428 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  i5 = (HEAP32[i1 + 348 >> 2] | 0) - 1 | 0;
  i6 = i1 + 320 | 0;
  i7 = HEAP32[i6 >> 2] | 0;
  i8 = i7 - 1 | 0;
  i9 = i4 + 24 | 0;
  i10 = HEAP32[i9 >> 2] | 0;
  i11 = i4 + 28 | 0;
  i12 = HEAP32[i11 >> 2] | 0;
  do {
    if ((i10 | 0) < (i12 | 0)) {
      i13 = i4 + 20 | 0;
      i14 = i13 | 0;
      i15 = i4 + 32 | 0;
      i16 = i15;
      i17 = i15;
      i18 = i1 + 356 | 0;
      i19 = i1 + 444 | 0;
      i20 = i1 + 328 | 0;
      i21 = i1 + 448 | 0;
      i22 = i1 + 148 | 0;
      i23 = i10;
      i24 = HEAP32[i13 >> 2] | 0;
      i13 = i12;
      L2365 : while (1) {
        if (i24 >>> 0 > i5 >>> 0) {
          i25 = i13;
        } else {
          i26 = i24;
          while (1) {
            _memset(HEAP32[i15 >> 2] | 0, 0, HEAP32[i18 >> 2] << 7 | 0);
            if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i19 >> 2] | 0) + 4 >> 2] & 511](i1, i17) | 0) == 0) {
              break L2365;
            }
            i27 = HEAP32[i20 >> 2] | 0;
            L2371 : do {
              if ((i27 | 0) > 0) {
                i28 = i26 >>> 0 < i5 >>> 0;
                i29 = 0;
                i30 = 0;
                i31 = i27;
                while (1) {
                  i32 = HEAP32[i1 + 332 + (i29 << 2) >> 2] | 0;
                  do {
                    if ((HEAP32[i32 + 48 >> 2] | 0) == 0) {
                      i33 = (HEAP32[i32 + 60 >> 2] | 0) + i30 | 0;
                      i34 = i31;
                    } else {
                      i35 = HEAP32[i32 + 4 >> 2] | 0;
                      i36 = HEAP32[(HEAP32[i21 >> 2] | 0) + 4 + (i35 << 2) >> 2] | 0;
                      i37 = i32 + 52 | 0;
                      i38 = HEAP32[(i28 ? i37 : i32 + 68 | 0) >> 2] | 0;
                      i39 = i32 + 36 | 0;
                      i40 = Math_imul(HEAP32[i32 + 64 >> 2] | 0, i26);
                      i41 = i32 + 56 | 0;
                      i42 = HEAP32[i41 >> 2] | 0;
                      if ((i42 | 0) <= 0) {
                        i33 = i30;
                        i34 = i31;
                        break;
                      }
                      i43 = HEAP32[i39 >> 2] | 0;
                      i44 = Math_imul(i43, i23);
                      i45 = i32 + 72 | 0;
                      i46 = (i38 | 0) > 0;
                      i47 = i46 ^ 1;
                      i48 = 0;
                      i49 = (HEAP32[i2 + (i35 << 2) >> 2] | 0) + (i44 << 2) | 0;
                      i44 = i30;
                      i35 = i43;
                      i43 = i42;
                      while (1) {
                        do {
                          if ((HEAP32[i22 >> 2] | 0) >>> 0 < i8 >>> 0) {
                            if (i46) {
                              i50 = 0;
                              i51 = i40;
                              i52 = 1728;
                              break;
                            } else {
                              i53 = i35;
                              i54 = i43;
                              break;
                            }
                          } else {
                            if ((i48 + i23 | 0) >= (HEAP32[i45 >> 2] | 0) | i47) {
                              i53 = i35;
                              i54 = i43;
                              break;
                            } else {
                              i50 = 0;
                              i51 = i40;
                              i52 = 1728;
                              break;
                            }
                          }
                        } while (0);
                        if ((i52 | 0) == 1728) {
                          while (1) {
                            i52 = 0;
                            FUNCTION_TABLE_viiiii[i36 & 511](i1, i32, HEAP32[i16 + (i50 + i44 << 2) >> 2] | 0, i49, i51);
                            i55 = HEAP32[i39 >> 2] | 0;
                            i42 = i50 + 1 | 0;
                            if ((i42 | 0) == (i38 | 0)) {
                              break;
                            } else {
                              i50 = i42;
                              i51 = i55 + i51 | 0;
                              i52 = 1728;
                            }
                          }
                          i53 = i55;
                          i54 = HEAP32[i41 >> 2] | 0;
                        }
                        i56 = (HEAP32[i37 >> 2] | 0) + i44 | 0;
                        i42 = i48 + 1 | 0;
                        if ((i42 | 0) >= (i54 | 0)) {
                          break;
                        }
                        i48 = i42;
                        i49 = i49 + (i53 << 2) | 0;
                        i44 = i56;
                        i35 = i53;
                        i43 = i54;
                      }
                      i33 = i56;
                      i34 = HEAP32[i20 >> 2] | 0;
                    }
                  } while (0);
                  i32 = i29 + 1 | 0;
                  if ((i32 | 0) < (i34 | 0)) {
                    i29 = i32;
                    i30 = i33;
                    i31 = i34;
                  } else {
                    break L2371;
                  }
                }
              }
            } while (0);
            i27 = i26 + 1 | 0;
            if (i27 >>> 0 > i5 >>> 0) {
              break;
            } else {
              i26 = i27;
            }
          }
          i25 = HEAP32[i11 >> 2] | 0;
        }
        HEAP32[i14 >> 2] = 0;
        i27 = i23 + 1 | 0;
        if ((i27 | 0) < (i25 | 0)) {
          i23 = i27;
          i24 = 0;
          i13 = i25;
        } else {
          i52 = 1737;
          break;
        }
      }
      if ((i52 | 0) == 1737) {
        i57 = HEAP32[i6 >> 2] | 0;
        i58 = i22;
        break;
      }
      HEAP32[i9 >> 2] = i23;
      HEAP32[i14 >> 2] = i26;
      i59 = 0;
      return i59 | 0;
    } else {
      i57 = i7;
      i58 = i1 + 148 | 0;
    }
  } while (0);
  i7 = i1 + 156 | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1 | 0;
  i7 = (HEAP32[i58 >> 2] | 0) + 1 | 0;
  HEAP32[i58 >> 2] = i7;
  if (i7 >>> 0 >= i57 >>> 0) {
    FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 + 436 >> 2] | 0) + 12 >> 2] & 511](i1);
    i59 = 4;
    return i59 | 0;
  }
  i58 = HEAP32[i3 >> 2] | 0;
  do {
    if ((HEAP32[i1 + 328 >> 2] | 0) > 1) {
      HEAP32[i58 + 28 >> 2] = 1;
    } else {
      i3 = HEAP32[i1 + 332 >> 2] | 0;
      if (i7 >>> 0 < (i57 - 1 | 0) >>> 0) {
        HEAP32[i58 + 28 >> 2] = HEAP32[i3 + 12 >> 2] | 0;
        break;
      } else {
        HEAP32[i58 + 28 >> 2] = HEAP32[i3 + 72 >> 2] | 0;
        break;
      }
    }
  } while (0);
  HEAP32[i58 + 20 >> 2] = 0;
  HEAP32[i58 + 24 >> 2] = 0;
  i59 = 3;
  return i59 | 0;
}
function _decompress_smooth_data(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0;
  i3 = STACKTOP;
  STACKTOP = STACKTOP + 128 | 0;
  i4 = i3 | 0;
  i5 = HEAP32[i1 + 428 >> 2] | 0;
  i6 = i1 + 320 | 0;
  i7 = (HEAP32[i6 >> 2] | 0) - 1 | 0;
  i8 = i1 + 144 | 0;
  i9 = i1 + 152 | 0;
  i10 = i1 + 436 | 0;
  i11 = i1 + 400 | 0;
  i12 = i1 + 148 | 0;
  i13 = i1 + 156 | 0;
  while (1) {
    i14 = HEAP32[i8 >> 2] | 0;
    i15 = HEAP32[i9 >> 2] | 0;
    if ((i14 | 0) > (i15 | 0)) {
      break;
    }
    i16 = HEAP32[i10 >> 2] | 0;
    if ((HEAP32[i16 + 20 >> 2] | 0) != 0) {
      break;
    }
    if ((i14 | 0) == (i15 | 0)) {
      if ((HEAP32[i12 >> 2] | 0) >>> 0 > ((HEAP32[i13 >> 2] | 0) + ((HEAP32[i11 >> 2] | 0) == 0 & 1) | 0) >>> 0) {
        break;
      }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[i16 >> 2] & 511](i1) | 0) == 0) {
      i17 = 0;
      i18 = 1826;
      break;
    }
  }
  if ((i18 | 0) == 1826) {
    STACKTOP = i3;
    return i17 | 0;
  }
  i18 = i1 + 36 | 0;
  i11 = HEAP32[i18 >> 2] | 0;
  L2423 : do {
    if ((i11 | 0) > 0) {
      i12 = i1 + 4 | 0;
      i10 = i1;
      i9 = i5 + 72 | 0;
      i8 = i5 + 112 | 0;
      i16 = i1 + 448 | 0;
      i15 = i4 | 0;
      i14 = i4;
      i19 = i4 + 4 | 0;
      i20 = i4 + 18 | 0;
      i21 = i4 + 32 | 0;
      i22 = i4 + 16 | 0;
      i23 = i4 + 2 | 0;
      i24 = HEAP32[i1 + 216 >> 2] | 0;
      i25 = 0;
      i26 = i11;
      while (1) {
        if ((HEAP32[i24 + 48 >> 2] | 0) == 0) {
          i27 = i26;
        } else {
          i28 = HEAP32[i13 >> 2] | 0;
          if (i28 >>> 0 < i7 >>> 0) {
            i29 = HEAP32[i24 + 12 >> 2] | 0;
            i30 = i29;
            i31 = i29 << 1;
            i32 = 0;
            i33 = i29;
          } else {
            i29 = HEAP32[i24 + 12 >> 2] | 0;
            i34 = ((HEAP32[i24 + 32 >> 2] | 0) >>> 0) % (i29 >>> 0);
            i35 = (i34 | 0) == 0 ? i29 : i34;
            i30 = i35;
            i31 = i35;
            i32 = 1;
            i33 = i29;
          }
          if ((i28 | 0) == 0) {
            i36 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 32 >> 2] & 511](i10, HEAP32[i9 + (i25 << 2) >> 2] | 0, 0, i31, 0) | 0;
            i37 = 1;
          } else {
            i29 = HEAP32[(HEAP32[i12 >> 2] | 0) + 32 >> 2] | 0;
            i35 = HEAP32[i9 + (i25 << 2) >> 2] | 0;
            i34 = Math_imul(i33, i28 - 1 | 0);
            i28 = FUNCTION_TABLE_iiiiii[i29 & 511](i10, i35, i34, i33 + i31 | 0, 0) | 0;
            i36 = i28 + (HEAP32[i24 + 12 >> 2] << 2) | 0;
            i37 = 0;
          }
          i28 = HEAP32[i8 >> 2] | 0;
          i34 = i25 * 6 & -1;
          i35 = HEAP32[i24 + 76 >> 2] | 0;
          i29 = HEAPU16[i35 >> 1] | 0;
          i38 = HEAPU16[i35 + 2 >> 1] | 0;
          i39 = HEAPU16[i35 + 16 >> 1] | 0;
          i40 = HEAPU16[i35 + 32 >> 1] | 0;
          i41 = HEAPU16[i35 + 18 >> 1] | 0;
          i42 = HEAPU16[i35 + 4 >> 1] | 0;
          i35 = HEAP32[(HEAP32[i16 >> 2] | 0) + 4 + (i25 << 2) >> 2] | 0;
          L2437 : do {
            if ((i30 | 0) > 0) {
              i43 = (i37 | 0) != 0;
              i44 = (i32 | 0) != 0;
              i45 = i24 + 28 | 0;
              i46 = i28 + ((i34 | 1) << 2) | 0;
              i47 = i28 + (i34 + 2 << 2) | 0;
              i48 = i28 + (i34 + 3 << 2) | 0;
              i49 = i28 + (i34 + 4 << 2) | 0;
              i50 = i28 + (i34 + 5 << 2) | 0;
              i51 = i24 + 36 | 0;
              i52 = i29 * 9 & -1;
              i53 = i42 << 7;
              i54 = i42 << 8;
              i55 = i29 * 5 & -1;
              i56 = i41 << 7;
              i57 = i41 << 8;
              i58 = i40 << 7;
              i59 = i40 << 8;
              i60 = i29 * 36 & -1;
              i61 = i39 << 7;
              i62 = i39 << 8;
              i63 = i38 << 7;
              i64 = i38 << 8;
              i65 = i30 - 1 | 0;
              i66 = HEAP32[i2 + (i25 << 2) >> 2] | 0;
              i67 = 0;
              while (1) {
                i68 = HEAP32[i36 + (i67 << 2) >> 2] | 0;
                if (i43 & (i67 | 0) == 0) {
                  i69 = i68;
                } else {
                  i69 = HEAP32[i36 + (i67 - 1 << 2) >> 2] | 0;
                }
                if (i44 & (i67 | 0) == (i65 | 0)) {
                  i70 = i68;
                } else {
                  i70 = HEAP32[i36 + (i67 + 1 << 2) >> 2] | 0;
                }
                i71 = HEAP16[i69 >> 1] << 16 >> 16;
                i72 = HEAP16[i68 >> 1] << 16 >> 16;
                i73 = HEAP16[i70 >> 1] << 16 >> 16;
                i74 = (HEAP32[i45 >> 2] | 0) - 1 | 0;
                i75 = 0;
                i76 = i70;
                i77 = i69;
                i78 = i68;
                i68 = 0;
                i79 = i71;
                i80 = i71;
                i71 = i72;
                i81 = i72;
                i72 = i73;
                i82 = i73;
                while (1) {
                  _memcpy(i14, i78, 128);
                  if (i68 >>> 0 < i74 >>> 0) {
                    i83 = HEAP16[i76 + 128 >> 1] << 16 >> 16;
                    i84 = HEAP16[i78 + 128 >> 1] << 16 >> 16;
                    i85 = HEAP16[i77 + 128 >> 1] << 16 >> 16;
                  } else {
                    i83 = i82;
                    i84 = i81;
                    i85 = i80;
                  }
                  i73 = HEAP32[i46 >> 2] | 0;
                  do {
                    if ((i73 | 0) != 0) {
                      if (HEAP16[i23 >> 1] << 16 >> 16 != 0) {
                        break;
                      }
                      i86 = Math_imul(i60, i71 - i84 | 0);
                      do {
                        if ((i86 | 0) > -1) {
                          i87 = (i86 + i63 | 0) / (i64 | 0) & -1;
                          if ((i73 | 0) <= 0) {
                            i88 = i87;
                            break;
                          }
                          i89 = 1 << i73;
                          i88 = (i87 | 0) < (i89 | 0) ? i87 : i89 - 1 | 0;
                        } else {
                          i89 = (i63 - i86 | 0) / (i64 | 0) & -1;
                          if ((i73 | 0) > 0) {
                            i87 = 1 << i73;
                            i90 = (i89 | 0) < (i87 | 0) ? i89 : i87 - 1 | 0;
                          } else {
                            i90 = i89;
                          }
                          i88 = -i90 | 0;
                        }
                      } while (0);
                      HEAP16[i23 >> 1] = i88 & 65535;
                    }
                  } while (0);
                  i73 = HEAP32[i47 >> 2] | 0;
                  do {
                    if ((i73 | 0) != 0) {
                      if (HEAP16[i22 >> 1] << 16 >> 16 != 0) {
                        break;
                      }
                      i86 = Math_imul(i60, i80 - i82 | 0);
                      do {
                        if ((i86 | 0) > -1) {
                          i89 = (i86 + i61 | 0) / (i62 | 0) & -1;
                          if ((i73 | 0) <= 0) {
                            i91 = i89;
                            break;
                          }
                          i87 = 1 << i73;
                          i91 = (i89 | 0) < (i87 | 0) ? i89 : i87 - 1 | 0;
                        } else {
                          i87 = (i61 - i86 | 0) / (i62 | 0) & -1;
                          if ((i73 | 0) > 0) {
                            i89 = 1 << i73;
                            i92 = (i87 | 0) < (i89 | 0) ? i87 : i89 - 1 | 0;
                          } else {
                            i92 = i87;
                          }
                          i91 = -i92 | 0;
                        }
                      } while (0);
                      HEAP16[i22 >> 1] = i91 & 65535;
                    }
                  } while (0);
                  i73 = HEAP32[i48 >> 2] | 0;
                  do {
                    if ((i73 | 0) != 0) {
                      if (HEAP16[i21 >> 1] << 16 >> 16 != 0) {
                        break;
                      }
                      i86 = Math_imul(i52, (i80 - (i81 << 1) | 0) + i82 | 0);
                      do {
                        if ((i86 | 0) > -1) {
                          i87 = (i86 + i58 | 0) / (i59 | 0) & -1;
                          if ((i73 | 0) <= 0) {
                            i93 = i87;
                            break;
                          }
                          i89 = 1 << i73;
                          i93 = (i87 | 0) < (i89 | 0) ? i87 : i89 - 1 | 0;
                        } else {
                          i89 = (i58 - i86 | 0) / (i59 | 0) & -1;
                          if ((i73 | 0) > 0) {
                            i87 = 1 << i73;
                            i94 = (i89 | 0) < (i87 | 0) ? i89 : i87 - 1 | 0;
                          } else {
                            i94 = i89;
                          }
                          i93 = -i94 | 0;
                        }
                      } while (0);
                      HEAP16[i21 >> 1] = i93 & 65535;
                    }
                  } while (0);
                  i73 = HEAP32[i49 >> 2] | 0;
                  do {
                    if ((i73 | 0) != 0) {
                      if (HEAP16[i20 >> 1] << 16 >> 16 != 0) {
                        break;
                      }
                      i86 = Math_imul(i55, ((i79 - i72 | 0) - i85 | 0) + i83 | 0);
                      do {
                        if ((i86 | 0) > -1) {
                          i89 = (i86 + i56 | 0) / (i57 | 0) & -1;
                          if ((i73 | 0) <= 0) {
                            i95 = i89;
                            break;
                          }
                          i87 = 1 << i73;
                          i95 = (i89 | 0) < (i87 | 0) ? i89 : i87 - 1 | 0;
                        } else {
                          i87 = (i56 - i86 | 0) / (i57 | 0) & -1;
                          if ((i73 | 0) > 0) {
                            i89 = 1 << i73;
                            i96 = (i87 | 0) < (i89 | 0) ? i87 : i89 - 1 | 0;
                          } else {
                            i96 = i87;
                          }
                          i95 = -i96 | 0;
                        }
                      } while (0);
                      HEAP16[i20 >> 1] = i95 & 65535;
                    }
                  } while (0);
                  i73 = HEAP32[i50 >> 2] | 0;
                  do {
                    if ((i73 | 0) != 0) {
                      if (HEAP16[i19 >> 1] << 16 >> 16 != 0) {
                        break;
                      }
                      i86 = Math_imul(i52, (i71 - (i81 << 1) | 0) + i84 | 0);
                      do {
                        if ((i86 | 0) > -1) {
                          i87 = (i86 + i53 | 0) / (i54 | 0) & -1;
                          if ((i73 | 0) <= 0) {
                            i97 = i87;
                            break;
                          }
                          i89 = 1 << i73;
                          i97 = (i87 | 0) < (i89 | 0) ? i87 : i89 - 1 | 0;
                        } else {
                          i89 = (i53 - i86 | 0) / (i54 | 0) & -1;
                          if ((i73 | 0) > 0) {
                            i87 = 1 << i73;
                            i98 = (i89 | 0) < (i87 | 0) ? i89 : i87 - 1 | 0;
                          } else {
                            i98 = i89;
                          }
                          i97 = -i98 | 0;
                        }
                      } while (0);
                      HEAP16[i19 >> 1] = i97 & 65535;
                    }
                  } while (0);
                  FUNCTION_TABLE_viiiii[i35 & 511](i1, i24, i15, i66, i75);
                  i99 = HEAP32[i51 >> 2] | 0;
                  i73 = i68 + 1 | 0;
                  if (i73 >>> 0 > i74 >>> 0) {
                    break;
                  } else {
                    i75 = i99 + i75 | 0;
                    i76 = i76 + 128 | 0;
                    i77 = i77 + 128 | 0;
                    i78 = i78 + 128 | 0;
                    i68 = i73;
                    i79 = i80;
                    i80 = i85;
                    i71 = i81;
                    i81 = i84;
                    i72 = i82;
                    i82 = i83;
                  }
                }
                i82 = i67 + 1 | 0;
                if ((i82 | 0) == (i30 | 0)) {
                  break L2437;
                } else {
                  i66 = i66 + (i99 << 2) | 0;
                  i67 = i82;
                }
              }
            }
          } while (0);
          i27 = HEAP32[i18 >> 2] | 0;
        }
        i35 = i25 + 1 | 0;
        if ((i35 | 0) < (i27 | 0)) {
          i24 = i24 + 84 | 0;
          i25 = i35;
          i26 = i27;
        } else {
          break L2423;
        }
      }
    }
  } while (0);
  i27 = (HEAP32[i13 >> 2] | 0) + 1 | 0;
  HEAP32[i13 >> 2] = i27;
  i17 = i27 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0 ? 3 : 4;
  STACKTOP = i3;
  return i17 | 0;
}
function _start_pass_dpost(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0;
  i3 = HEAP32[i1 + 432 >> 2] | 0;
  do {
    if ((i2 | 0) == 2) {
      if ((HEAP32[i3 + 8 >> 2] | 0) == 0) {
        i4 = i1 | 0;
        HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] = 4;
        FUNCTION_TABLE_vi[HEAP32[HEAP32[i4 >> 2] >> 2] & 511](i1);
      }
      HEAP32[i3 + 4 >> 2] = 118;
    } else if ((i2 | 0) == 3) {
      if ((HEAP32[i3 + 8 >> 2] | 0) == 0) {
        i4 = i1 | 0;
        HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] = 4;
        FUNCTION_TABLE_vi[HEAP32[HEAP32[i4 >> 2] >> 2] & 511](i1);
      }
      HEAP32[i3 + 4 >> 2] = 162;
    } else if ((i2 | 0) == 0) {
      if ((HEAP32[i1 + 84 >> 2] | 0) == 0) {
        HEAP32[i3 + 4 >> 2] = HEAP32[(HEAP32[i1 + 452 >> 2] | 0) + 4 >> 2] | 0;
        break;
      }
      HEAP32[i3 + 4 >> 2] = 276;
      i4 = i3 + 12 | 0;
      if ((HEAP32[i4 >> 2] | 0) != 0) {
        break;
      }
      HEAP32[i4 >> 2] = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i1 + 4 >> 2] | 0) + 28 >> 2] & 511](i1, HEAP32[i3 + 8 >> 2] | 0, 0, HEAP32[i3 + 16 >> 2] | 0, 1) | 0;
    } else {
      i4 = i1 | 0;
      HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] = 4;
      FUNCTION_TABLE_vi[HEAP32[HEAP32[i4 >> 2] >> 2] & 511](i1);
    }
  } while (0);
  HEAP32[i3 + 24 >> 2] = 0;
  HEAP32[i3 + 20 >> 2] = 0;
  return;
}
function _post_process_1pass(i1, i2, i3, i4, i5, i6, i7) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  i7 = i7 | 0;
  var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
  i8 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  i9 = i8 | 0;
  i10 = HEAP32[i1 + 432 >> 2] | 0;
  i11 = i7 - (HEAP32[i6 >> 2] | 0) | 0;
  i7 = HEAP32[i10 + 16 >> 2] | 0;
  HEAP32[i9 >> 2] = 0;
  i12 = i10 + 12 | 0;
  FUNCTION_TABLE_viiiiiii[HEAP32[(HEAP32[i1 + 452 >> 2] | 0) + 4 >> 2] & 511](i1, i2, i3, i4, HEAP32[i12 >> 2] | 0, i9, i11 >>> 0 > i7 >>> 0 ? i7 : i11);
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 + 460 >> 2] | 0) + 4 >> 2] & 511](i1, HEAP32[i12 >> 2] | 0, i5 + (HEAP32[i6 >> 2] << 2) | 0, HEAP32[i9 >> 2] | 0);
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) | 0;
  STACKTOP = i8;
  return;
}
function _post_process_prepass(i1, i2, i3, i4, i5, i6, i7) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  i7 = i7 | 0;
  var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
  i7 = HEAP32[i1 + 432 >> 2] | 0;
  i5 = i7 + 24 | 0;
  i8 = i5;
  i9 = HEAP32[i8 >> 2] | 0;
  if ((i9 | 0) == 0) {
    i10 = i7 + 16 | 0;
    i11 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i1 + 4 >> 2] | 0) + 28 >> 2] & 511](i1, HEAP32[i7 + 8 >> 2] | 0, HEAP32[i7 + 20 >> 2] | 0, HEAP32[i10 >> 2] | 0, 1) | 0;
    HEAP32[i7 + 12 >> 2] = i11;
    i12 = HEAP32[i8 >> 2] | 0;
    i13 = i11;
    i14 = i10;
  } else {
    i12 = i9;
    i13 = HEAP32[i7 + 12 >> 2] | 0;
    i14 = i7 + 16 | 0;
  }
  FUNCTION_TABLE_viiiiiii[HEAP32[(HEAP32[i1 + 452 >> 2] | 0) + 4 >> 2] & 511](i1, i2, i3, i4, i13, i8, HEAP32[i14 >> 2] | 0);
  i13 = HEAP32[i8 >> 2] | 0;
  if (i13 >>> 0 > i12 >>> 0) {
    i4 = i13 - i12 | 0;
    FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 + 460 >> 2] | 0) + 4 >> 2] & 511](i1, (HEAP32[i7 + 12 >> 2] | 0) + (i12 << 2) | 0, 0, i4);
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i4 | 0;
    i15 = HEAP32[i8 >> 2] | 0;
  } else {
    i15 = i13;
  }
  i13 = HEAP32[i14 >> 2] | 0;
  if (i15 >>> 0 < i13 >>> 0) {
    return;
  }
  i15 = i7 + 20 | 0;
  HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + i13 | 0;
  HEAP32[i5 >> 2] = 0;
  return;
}
function _post_process_2pass(i1, i2, i3, i4, i5, i6, i7) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  i7 = i7 | 0;
  var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
  i4 = HEAP32[i1 + 432 >> 2] | 0;
  i3 = i4 + 24 | 0;
  i2 = i3;
  i8 = HEAP32[i2 >> 2] | 0;
  if ((i8 | 0) == 0) {
    i9 = i4 + 20 | 0;
    i10 = i9;
    i11 = i4 + 16 | 0;
    i12 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i1 + 4 >> 2] | 0) + 28 >> 2] & 511](i1, HEAP32[i4 + 8 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, 0) | 0;
    HEAP32[i4 + 12 >> 2] = i12;
    i13 = HEAP32[i2 >> 2] | 0;
    i14 = i12;
    i15 = i11;
    i16 = i9;
    i17 = i10;
  } else {
    i10 = i4 + 20 | 0;
    i13 = i8;
    i14 = HEAP32[i4 + 12 >> 2] | 0;
    i15 = i4 + 16 | 0;
    i16 = i10;
    i17 = i10;
  }
  i10 = (HEAP32[i15 >> 2] | 0) - i13 | 0;
  i4 = HEAP32[i6 >> 2] | 0;
  i8 = i7 - i4 | 0;
  i7 = i10 >>> 0 > i8 >>> 0 ? i8 : i10;
  i10 = (HEAP32[i1 + 116 >> 2] | 0) - (HEAP32[i17 >> 2] | 0) | 0;
  i8 = i7 >>> 0 > i10 >>> 0 ? i10 : i7;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 + 460 >> 2] | 0) + 4 >> 2] & 511](i1, i14 + (i13 << 2) | 0, i5 + (i4 << 2) | 0, i8);
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i8 | 0;
  i6 = (HEAP32[i2 >> 2] | 0) + i8 | 0;
  i8 = i3 | 0;
  HEAP32[i8 >> 2] = i6;
  i3 = HEAP32[i15 >> 2] | 0;
  if (i6 >>> 0 < i3 >>> 0) {
    return;
  }
  HEAP32[i16 >> 2] = (HEAP32[i17 >> 2] | 0) + i3 | 0;
  HEAP32[i8 >> 2] = 0;
  return;
}
function _jpeg_idct_ifast(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
  i6 = STACKTOP;
  STACKTOP = STACKTOP + 256 | 0;
  i7 = HEAP32[i1 + 324 >> 2] | 0;
  i1 = i6 | 0;
  i8 = i3;
  i3 = HEAP32[i2 + 80 >> 2] | 0;
  i2 = i1;
  i9 = 8;
  while (1) {
    i10 = HEAP16[i8 + 16 >> 1] | 0;
    i11 = HEAP16[i8 + 32 >> 1] | 0;
    i12 = HEAP16[i8 + 48 >> 1] | 0;
    do {
      if ((i10 | i11) << 16 >> 16 == 0) {
        if (i12 << 16 >> 16 != 0) {
          i13 = 0;
          i14 = i12;
          i15 = 1869;
          break;
        }
        if (HEAP16[i8 + 64 >> 1] << 16 >> 16 != 0) {
          i13 = 0;
          i14 = 0;
          i15 = 1869;
          break;
        }
        if (HEAP16[i8 + 80 >> 1] << 16 >> 16 != 0) {
          i13 = 0;
          i14 = 0;
          i15 = 1869;
          break;
        }
        if (HEAP16[i8 + 96 >> 1] << 16 >> 16 != 0) {
          i13 = 0;
          i14 = 0;
          i15 = 1869;
          break;
        }
        if (HEAP16[i8 + 112 >> 1] << 16 >> 16 != 0) {
          i13 = 0;
          i14 = 0;
          i15 = 1869;
          break;
        }
        i16 = Math_imul(HEAP16[i8 >> 1] << 16 >> 16, HEAP32[i3 >> 2] | 0);
        HEAP32[i2 >> 2] = i16;
        HEAP32[i2 + 32 >> 2] = i16;
        HEAP32[i2 + 64 >> 2] = i16;
        HEAP32[i2 + 96 >> 2] = i16;
        HEAP32[i2 + 128 >> 2] = i16;
        HEAP32[i2 + 160 >> 2] = i16;
        HEAP32[i2 + 192 >> 2] = i16;
        HEAP32[i2 + 224 >> 2] = i16;
        break;
      } else {
        i13 = i11 << 16 >> 16;
        i14 = i12;
        i15 = 1869;
        break;
      }
    } while (0);
    if ((i15 | 0) == 1869) {
      i15 = 0;
      i12 = Math_imul(HEAP16[i8 >> 1] << 16 >> 16, HEAP32[i3 >> 2] | 0);
      i11 = Math_imul(i13, HEAP32[i3 + 64 >> 2] | 0);
      i16 = Math_imul(HEAP16[i8 + 64 >> 1] << 16 >> 16, HEAP32[i3 + 128 >> 2] | 0);
      i17 = Math_imul(HEAP16[i8 + 96 >> 1] << 16 >> 16, HEAP32[i3 + 192 >> 2] | 0);
      i18 = i16 + i12 | 0;
      i19 = i12 - i16 | 0;
      i16 = i17 + i11 | 0;
      i12 = (((i11 - i17 | 0) * 362 & -1) >> 8) - i16 | 0;
      i17 = i16 + i18 | 0;
      i11 = i18 - i16 | 0;
      i16 = i12 + i19 | 0;
      i18 = i19 - i12 | 0;
      i12 = Math_imul(i10 << 16 >> 16, HEAP32[i3 + 32 >> 2] | 0);
      i19 = Math_imul(i14 << 16 >> 16, HEAP32[i3 + 96 >> 2] | 0);
      i20 = Math_imul(HEAP16[i8 + 80 >> 1] << 16 >> 16, HEAP32[i3 + 160 >> 2] | 0);
      i21 = Math_imul(HEAP16[i8 + 112 >> 1] << 16 >> 16, HEAP32[i3 + 224 >> 2] | 0);
      i22 = i20 + i19 | 0;
      i23 = i20 - i19 | 0;
      i19 = i21 + i12 | 0;
      i20 = i12 - i21 | 0;
      i21 = i19 + i22 | 0;
      i12 = ((i20 + i23 | 0) * 473 & -1) >> 8;
      i24 = (((i23 * -669 & -1) >> 8) - i21 | 0) + i12 | 0;
      i23 = (((i19 - i22 | 0) * 362 & -1) >> 8) - i24 | 0;
      i22 = i23 + (((i20 * 277 & -1) >> 8) - i12 | 0) | 0;
      HEAP32[i2 >> 2] = i21 + i17 | 0;
      HEAP32[i2 + 224 >> 2] = i17 - i21 | 0;
      HEAP32[i2 + 32 >> 2] = i24 + i16 | 0;
      HEAP32[i2 + 192 >> 2] = i16 - i24 | 0;
      HEAP32[i2 + 64 >> 2] = i23 + i18 | 0;
      HEAP32[i2 + 160 >> 2] = i18 - i23 | 0;
      HEAP32[i2 + 128 >> 2] = i22 + i11 | 0;
      HEAP32[i2 + 96 >> 2] = i11 - i22 | 0;
    }
    i22 = i9 - 1 | 0;
    if ((i22 | 0) > 0) {
      i8 = i8 + 2 | 0;
      i3 = i3 + 4 | 0;
      i2 = i2 + 4 | 0;
      i9 = i22;
    } else {
      break;
    }
  }
  i9 = i5 + 1 | 0;
  i2 = i5 + 2 | 0;
  i3 = i5 + 3 | 0;
  i8 = i5 + 4 | 0;
  i14 = i5 + 5 | 0;
  i13 = i5 + 6 | 0;
  i22 = i5 + 7 | 0;
  i11 = i1;
  i1 = 0;
  while (1) {
    i23 = HEAP32[i4 + (i1 << 2) >> 2] | 0;
    i18 = i23 + i5 | 0;
    i24 = HEAP32[i11 + 4 >> 2] | 0;
    i16 = HEAP32[i11 + 8 >> 2] | 0;
    i21 = HEAP32[i11 + 12 >> 2] | 0;
    do {
      if ((i24 | i16 | 0) == 0) {
        if ((i21 | 0) != 0) {
          i25 = 0;
          i26 = i21;
          i15 = 1878;
          break;
        }
        if ((HEAP32[i11 + 16 >> 2] | 0) != 0) {
          i25 = 0;
          i26 = 0;
          i15 = 1878;
          break;
        }
        if ((HEAP32[i11 + 20 >> 2] | 0) != 0) {
          i25 = 0;
          i26 = 0;
          i15 = 1878;
          break;
        }
        if ((HEAP32[i11 + 24 >> 2] | 0) != 0) {
          i25 = 0;
          i26 = 0;
          i15 = 1878;
          break;
        }
        if ((HEAP32[i11 + 28 >> 2] | 0) != 0) {
          i25 = 0;
          i26 = 0;
          i15 = 1878;
          break;
        }
        i17 = HEAP8[i7 + (((HEAP32[i11 >> 2] | 0) >>> 5 & 1023) + 128 | 0) | 0] | 0;
        HEAP8[i18] = i17;
        HEAP8[i23 + i9 | 0] = i17;
        HEAP8[i23 + i2 | 0] = i17;
        HEAP8[i23 + i3 | 0] = i17;
        HEAP8[i23 + i8 | 0] = i17;
        HEAP8[i23 + i14 | 0] = i17;
        HEAP8[i23 + i13 | 0] = i17;
        HEAP8[i23 + i22 | 0] = i17;
        break;
      } else {
        i25 = i16;
        i26 = i21;
        i15 = 1878;
      }
    } while (0);
    if ((i15 | 0) == 1878) {
      i15 = 0;
      i21 = HEAP32[i11 >> 2] | 0;
      i16 = HEAP32[i11 + 16 >> 2] | 0;
      i10 = i16 + i21 | 0;
      i17 = i21 - i16 | 0;
      i16 = HEAP32[i11 + 24 >> 2] | 0;
      i21 = i16 + i25 | 0;
      i12 = (((i25 - i16 | 0) * 362 & -1) >> 8) - i21 | 0;
      i16 = i21 + i10 | 0;
      i20 = i10 - i21 | 0;
      i21 = i12 + i17 | 0;
      i10 = i17 - i12 | 0;
      i12 = HEAP32[i11 + 20 >> 2] | 0;
      i17 = i26 + i12 | 0;
      i19 = i12 - i26 | 0;
      i12 = HEAP32[i11 + 28 >> 2] | 0;
      i27 = i12 + i24 | 0;
      i28 = i24 - i12 | 0;
      i12 = i27 + i17 | 0;
      i29 = ((i28 + i19 | 0) * 473 & -1) >> 8;
      i30 = (((i19 * -669 & -1) >> 8) - i12 | 0) + i29 | 0;
      i19 = (((i27 - i17 | 0) * 362 & -1) >> 8) - i30 | 0;
      i17 = i19 + (((i28 * 277 & -1) >> 8) - i29 | 0) | 0;
      HEAP8[i18] = HEAP8[i7 + (((i12 + i16 | 0) >>> 5 & 1023) + 128 | 0) | 0] | 0;
      HEAP8[i23 + i22 | 0] = HEAP8[i7 + (((i16 - i12 | 0) >>> 5 & 1023) + 128 | 0) | 0] | 0;
      HEAP8[i23 + i9 | 0] = HEAP8[i7 + (((i30 + i21 | 0) >>> 5 & 1023) + 128 | 0) | 0] | 0;
      HEAP8[i23 + i13 | 0] = HEAP8[i7 + (((i21 - i30 | 0) >>> 5 & 1023) + 128 | 0) | 0] | 0;
      HEAP8[i23 + i2 | 0] = HEAP8[i7 + (((i19 + i10 | 0) >>> 5 & 1023) + 128 | 0) | 0] | 0;
      HEAP8[i23 + i14 | 0] = HEAP8[i7 + (((i10 - i19 | 0) >>> 5 & 1023) + 128 | 0) | 0] | 0;
      HEAP8[i23 + i8 | 0] = HEAP8[i7 + (((i17 + i20 | 0) >>> 5 & 1023) + 128 | 0) | 0] | 0;
      HEAP8[i23 + i3 | 0] = HEAP8[i7 + (((i20 - i17 | 0) >>> 5 & 1023) + 128 | 0) | 0] | 0;
    }
    i17 = i1 + 1 | 0;
    if ((i17 | 0) == 8) {
      break;
    } else {
      i11 = i11 + 32 | 0;
      i1 = i17;
    }
  }
  STACKTOP = i6;
  return;
}
function _jpeg_idct_float(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, d13 = 0.0, i14 = 0, i15 = 0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, i27 = 0;
  i6 = STACKTOP;
  STACKTOP = STACKTOP + 256 | 0;
  i7 = HEAP32[i1 + 324 >> 2] | 0;
  i1 = i6 | 0;
  i8 = i3;
  i3 = HEAP32[i2 + 80 >> 2] | 0;
  i2 = i1;
  i9 = 8;
  while (1) {
    i10 = HEAP16[i8 + 16 >> 1] | 0;
    i11 = HEAP16[i8 + 32 >> 1] | 0;
    i12 = HEAP16[i8 + 48 >> 1] | 0;
    do {
      if ((i10 | i11) << 16 >> 16 == 0) {
        if (i12 << 16 >> 16 != 0) {
          d13 = 0.0;
          i14 = i12;
          i15 = 1891;
          break;
        }
        if (HEAP16[i8 + 64 >> 1] << 16 >> 16 != 0) {
          d13 = 0.0;
          i14 = 0;
          i15 = 1891;
          break;
        }
        if (HEAP16[i8 + 80 >> 1] << 16 >> 16 != 0) {
          d13 = 0.0;
          i14 = 0;
          i15 = 1891;
          break;
        }
        if (HEAP16[i8 + 96 >> 1] << 16 >> 16 != 0) {
          d13 = 0.0;
          i14 = 0;
          i15 = 1891;
          break;
        }
        if (HEAP16[i8 + 112 >> 1] << 16 >> 16 != 0) {
          d13 = 0.0;
          i14 = 0;
          i15 = 1891;
          break;
        }
        d16 = +(HEAP16[i8 >> 1] << 16 >> 16 | 0) * +HEAPF32[i3 >> 2];
        HEAPF32[i2 >> 2] = d16;
        HEAPF32[i2 + 32 >> 2] = d16;
        HEAPF32[i2 + 64 >> 2] = d16;
        HEAPF32[i2 + 96 >> 2] = d16;
        HEAPF32[i2 + 128 >> 2] = d16;
        HEAPF32[i2 + 160 >> 2] = d16;
        HEAPF32[i2 + 192 >> 2] = d16;
        HEAPF32[i2 + 224 >> 2] = d16;
        break;
      } else {
        d13 = +(i11 << 16 >> 16 | 0);
        i14 = i12;
        i15 = 1891;
        break;
      }
    } while (0);
    if ((i15 | 0) == 1891) {
      i15 = 0;
      d16 = +(HEAP16[i8 >> 1] << 16 >> 16 | 0) * +HEAPF32[i3 >> 2];
      d17 = d13 * +HEAPF32[i3 + 64 >> 2];
      d18 = +(HEAP16[i8 + 64 >> 1] << 16 >> 16 | 0) * +HEAPF32[i3 + 128 >> 2];
      d19 = +(HEAP16[i8 + 96 >> 1] << 16 >> 16 | 0) * +HEAPF32[i3 + 192 >> 2];
      d20 = d16 + d18;
      d21 = d16 - d18;
      d18 = d17 + d19;
      d16 = (d17 - d19) * 1.4142135381698608 - d18;
      d19 = d20 + d18;
      d17 = d20 - d18;
      d18 = d21 + d16;
      d20 = d21 - d16;
      d16 = +(i10 << 16 >> 16 | 0) * +HEAPF32[i3 + 32 >> 2];
      d21 = +(i14 << 16 >> 16 | 0) * +HEAPF32[i3 + 96 >> 2];
      d22 = +(HEAP16[i8 + 80 >> 1] << 16 >> 16 | 0) * +HEAPF32[i3 + 160 >> 2];
      d23 = +(HEAP16[i8 + 112 >> 1] << 16 >> 16 | 0) * +HEAPF32[i3 + 224 >> 2];
      d24 = d21 + d22;
      d25 = d22 - d21;
      d21 = d16 + d23;
      d22 = d16 - d23;
      d23 = d24 + d21;
      d16 = (d25 + d22) * 1.8477590084075928;
      d26 = d25 * -2.613126039505005 + d16 - d23;
      d25 = (d21 - d24) * 1.4142135381698608 - d26;
      d24 = d22 * 1.0823922157287598 - d16 + d25;
      HEAPF32[i2 >> 2] = d19 + d23;
      HEAPF32[i2 + 224 >> 2] = d19 - d23;
      HEAPF32[i2 + 32 >> 2] = d18 + d26;
      HEAPF32[i2 + 192 >> 2] = d18 - d26;
      HEAPF32[i2 + 64 >> 2] = d20 + d25;
      HEAPF32[i2 + 160 >> 2] = d20 - d25;
      HEAPF32[i2 + 128 >> 2] = d17 + d24;
      HEAPF32[i2 + 96 >> 2] = d17 - d24;
    }
    i12 = i9 - 1 | 0;
    if ((i12 | 0) > 0) {
      i8 = i8 + 2 | 0;
      i3 = i3 + 4 | 0;
      i2 = i2 + 4 | 0;
      i9 = i12;
    } else {
      break;
    }
  }
  i9 = i5 + 7 | 0;
  i2 = i5 + 1 | 0;
  i3 = i5 + 6 | 0;
  i8 = i5 + 2 | 0;
  i14 = i5 + 5 | 0;
  i15 = i5 + 4 | 0;
  i12 = i5 + 3 | 0;
  i11 = i1;
  i1 = 0;
  while (1) {
    i27 = HEAP32[i4 + (i1 << 2) >> 2] | 0;
    d13 = +HEAPF32[i11 >> 2];
    d24 = +HEAPF32[i11 + 16 >> 2];
    d17 = d13 + d24;
    d25 = d13 - d24;
    d24 = +HEAPF32[i11 + 8 >> 2];
    d13 = +HEAPF32[i11 + 24 >> 2];
    d20 = d24 + d13;
    d26 = (d24 - d13) * 1.4142135381698608 - d20;
    d13 = d17 + d20;
    d24 = d17 - d20;
    d20 = d25 + d26;
    d17 = d25 - d26;
    d26 = +HEAPF32[i11 + 20 >> 2];
    d25 = +HEAPF32[i11 + 12 >> 2];
    d18 = d26 + d25;
    d23 = d26 - d25;
    d25 = +HEAPF32[i11 + 4 >> 2];
    d26 = +HEAPF32[i11 + 28 >> 2];
    d19 = d25 + d26;
    d16 = d25 - d26;
    d26 = d18 + d19;
    d25 = (d23 + d16) * 1.8477590084075928;
    d22 = d23 * -2.613126039505005 + d25 - d26;
    d23 = (d19 - d18) * 1.4142135381698608 - d22;
    d18 = d16 * 1.0823922157287598 - d25 + d23;
    HEAP8[i27 + i5 | 0] = HEAP8[i7 + (((~~(d13 + d26) + 4 | 0) >>> 3 & 1023) + 128 | 0) | 0] | 0;
    HEAP8[i27 + i9 | 0] = HEAP8[i7 + (((~~(d13 - d26) + 4 | 0) >>> 3 & 1023) + 128 | 0) | 0] | 0;
    HEAP8[i27 + i2 | 0] = HEAP8[i7 + (((~~(d20 + d22) + 4 | 0) >>> 3 & 1023) + 128 | 0) | 0] | 0;
    HEAP8[i27 + i3 | 0] = HEAP8[i7 + (((~~(d20 - d22) + 4 | 0) >>> 3 & 1023) + 128 | 0) | 0] | 0;
    HEAP8[i27 + i8 | 0] = HEAP8[i7 + (((~~(d17 + d23) + 4 | 0) >>> 3 & 1023) + 128 | 0) | 0] | 0;
    HEAP8[i27 + i14 | 0] = HEAP8[i7 + (((~~(d17 - d23) + 4 | 0) >>> 3 & 1023) + 128 | 0) | 0] | 0;
    HEAP8[i27 + i15 | 0] = HEAP8[i7 + (((~~(d24 + d18) + 4 | 0) >>> 3 & 1023) + 128 | 0) | 0] | 0;
    HEAP8[i27 + i12 | 0] = HEAP8[i7 + (((~~(d24 - d18) + 4 | 0) >>> 3 & 1023) + 128 | 0) | 0] | 0;
    i27 = i1 + 1 | 0;
    if ((i27 | 0) == 8) {
      break;
    } else {
      i11 = i11 + 32 | 0;
      i1 = i27;
    }
  }
  STACKTOP = i6;
  return;
}
function _start_pass(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, d17 = 0.0, i18 = 0, i19 = 0;
  i2 = HEAP32[i1 + 448 >> 2] | 0;
  i3 = i1 + 36 | 0;
  if ((HEAP32[i3 >> 2] | 0) <= 0) {
    return;
  }
  i4 = i1 | 0;
  i5 = i1;
  i6 = i2 + 44 | 0;
  i7 = i1 + 72 | 0;
  i8 = 0;
  i9 = 0;
  i10 = HEAP32[i1 + 216 >> 2] | 0;
  i1 = 0;
  while (1) {
    i11 = i10 + 36 | 0;
    i12 = HEAP32[i11 >> 2] | 0;
    do {
      if ((i12 | 0) == 4) {
        i13 = 0;
        i14 = 208;
      } else if ((i12 | 0) == 8) {
        i15 = HEAP32[i7 >> 2] | 0;
        if ((i15 | 0) == 1) {
          i13 = i15;
          i14 = 126;
          break;
        } else if ((i15 | 0) == 0) {
          i13 = 0;
          i14 = 226;
          break;
        } else if ((i15 | 0) == 2) {
          i13 = i15;
          i14 = 306;
          break;
        } else {
          HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] = 48;
          FUNCTION_TABLE_vi[HEAP32[HEAP32[i4 >> 2] >> 2] & 511](i5);
          i13 = i9;
          i14 = i8;
          break;
        }
      } else if ((i12 | 0) == 1) {
        i13 = 0;
        i14 = 16;
      } else if ((i12 | 0) == 2) {
        i13 = 0;
        i14 = 202;
      } else {
        HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] = 7;
        HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] = HEAP32[i11 >> 2] | 0;
        FUNCTION_TABLE_vi[HEAP32[HEAP32[i4 >> 2] >> 2] & 511](i5);
        i13 = i9;
        i14 = i8;
      }
    } while (0);
    HEAP32[i2 + 4 + (i1 << 2) >> 2] = i14;
    L2618 : do {
      if ((HEAP32[i10 + 48 >> 2] | 0) != 0) {
        i11 = i6 + (i1 << 2) | 0;
        if ((HEAP32[i11 >> 2] | 0) == (i13 | 0)) {
          break;
        }
        i12 = HEAP32[i10 + 76 >> 2] | 0;
        if ((i12 | 0) == 0) {
          break;
        }
        HEAP32[i11 >> 2] = i13;
        if ((i13 | 0) == 0) {
          i11 = HEAP32[i10 + 80 >> 2] | 0;
          i15 = 0;
          while (1) {
            HEAP32[i11 + (i15 << 2) >> 2] = HEAPU16[i12 + (i15 << 1) >> 1] | 0;
            i16 = i15 + 1 | 0;
            if ((i16 | 0) == 64) {
              break L2618;
            } else {
              i15 = i16;
            }
          }
        } else if ((i13 | 0) == 2) {
          i15 = HEAP32[i10 + 80 >> 2] | 0;
          i11 = 0;
          i16 = 0;
          while (1) {
            d17 = (copyTempDouble(5243392 + (i16 << 3) | 0), +HEAPF64[tempDoublePtr >> 3]);
            HEAPF32[i15 + (i11 << 2) >> 2] = +((HEAPU16[i12 + (i11 << 1) >> 1] | 0) >>> 0) * d17;
            i18 = i11 | 1;
            HEAPF32[i15 + (i18 << 2) >> 2] = +((HEAPU16[i12 + (i18 << 1) >> 1] | 0) >>> 0) * d17 * 1.387039845;
            i19 = i18 + 1 | 0;
            HEAPF32[i15 + (i19 << 2) >> 2] = +((HEAPU16[i12 + (i19 << 1) >> 1] | 0) >>> 0) * d17 * 1.306562965;
            i19 = i11 | 3;
            HEAPF32[i15 + (i19 << 2) >> 2] = +((HEAPU16[i12 + (i19 << 1) >> 1] | 0) >>> 0) * d17 * 1.175875602;
            i18 = i19 + 1 | 0;
            HEAPF32[i15 + (i18 << 2) >> 2] = +((HEAPU16[i12 + (i18 << 1) >> 1] | 0) >>> 0) * d17;
            i18 = i19 + 2 | 0;
            HEAPF32[i15 + (i18 << 2) >> 2] = +((HEAPU16[i12 + (i18 << 1) >> 1] | 0) >>> 0) * d17 * .785694958;
            i18 = i19 + 3 | 0;
            HEAPF32[i15 + (i18 << 2) >> 2] = +((HEAPU16[i12 + (i18 << 1) >> 1] | 0) >>> 0) * d17 * .5411961;
            i18 = i11 | 7;
            HEAPF32[i15 + (i18 << 2) >> 2] = +((HEAPU16[i12 + (i18 << 1) >> 1] | 0) >>> 0) * d17 * .275899379;
            i18 = i16 + 1 | 0;
            if ((i18 | 0) == 8) {
              break L2618;
            } else {
              i11 = i11 + 8 | 0;
              i16 = i18;
            }
          }
        } else if ((i13 | 0) == 1) {
          i16 = HEAP32[i10 + 80 >> 2] | 0;
          i11 = 0;
          while (1) {
            HEAP32[i16 + (i11 << 2) >> 2] = Math_imul(HEAP16[5243264 + (i11 << 1) >> 1] << 16 >> 16, HEAPU16[i12 + (i11 << 1) >> 1] | 0) + 2048 >> 12;
            i15 = i11 + 1 | 0;
            if ((i15 | 0) == 64) {
              break L2618;
            } else {
              i11 = i15;
            }
          }
        } else {
          HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] = 48;
          FUNCTION_TABLE_vi[HEAP32[HEAP32[i4 >> 2] >> 2] & 511](i5);
          break;
        }
      }
    } while (0);
    i11 = i1 + 1 | 0;
    if ((i11 | 0) < (HEAP32[i3 >> 2] | 0)) {
      i8 = i14;
      i9 = i13;
      i10 = i10 + 84 | 0;
      i1 = i11;
    } else {
      break;
    }
  }
  return;
}
function _jpeg_idct_islow(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
  i6 = STACKTOP;
  STACKTOP = STACKTOP + 256 | 0;
  i7 = HEAP32[i1 + 324 >> 2] | 0;
  i1 = i6 | 0;
  i8 = i3;
  i3 = HEAP32[i2 + 80 >> 2] | 0;
  i2 = i1;
  i9 = 8;
  while (1) {
    i10 = HEAP16[i8 + 16 >> 1] | 0;
    i11 = HEAP16[i8 + 32 >> 1] | 0;
    i12 = HEAP16[i8 + 48 >> 1] | 0;
    do {
      if ((i10 | i11) << 16 >> 16 == 0) {
        if (i12 << 16 >> 16 != 0) {
          i13 = 0;
          i14 = i12;
          i15 = 1930;
          break;
        }
        if (HEAP16[i8 + 64 >> 1] << 16 >> 16 != 0) {
          i13 = 0;
          i14 = 0;
          i15 = 1930;
          break;
        }
        if (HEAP16[i8 + 80 >> 1] << 16 >> 16 != 0) {
          i13 = 0;
          i14 = 0;
          i15 = 1930;
          break;
        }
        if (HEAP16[i8 + 96 >> 1] << 16 >> 16 != 0) {
          i13 = 0;
          i14 = 0;
          i15 = 1930;
          break;
        }
        if (HEAP16[i8 + 112 >> 1] << 16 >> 16 != 0) {
          i13 = 0;
          i14 = 0;
          i15 = 1930;
          break;
        }
        i16 = Math_imul(HEAP32[i3 >> 2] << 2, HEAP16[i8 >> 1] << 16 >> 16);
        HEAP32[i2 >> 2] = i16;
        HEAP32[i2 + 32 >> 2] = i16;
        HEAP32[i2 + 64 >> 2] = i16;
        HEAP32[i2 + 96 >> 2] = i16;
        HEAP32[i2 + 128 >> 2] = i16;
        HEAP32[i2 + 160 >> 2] = i16;
        HEAP32[i2 + 192 >> 2] = i16;
        HEAP32[i2 + 224 >> 2] = i16;
        break;
      } else {
        i13 = i11 << 16 >> 16;
        i14 = i12;
        i15 = 1930;
        break;
      }
    } while (0);
    if ((i15 | 0) == 1930) {
      i15 = 0;
      i12 = Math_imul(i13, HEAP32[i3 + 64 >> 2] | 0);
      i11 = Math_imul(HEAP16[i8 + 96 >> 1] << 16 >> 16, HEAP32[i3 + 192 >> 2] | 0);
      i16 = (i11 + i12 | 0) * 4433 & -1;
      i17 = i16 + (i11 * -15137 & -1) | 0;
      i11 = i16 + (i12 * 6270 & -1) | 0;
      i12 = Math_imul(HEAP16[i8 >> 1] << 16 >> 16, HEAP32[i3 >> 2] | 0);
      i16 = Math_imul(HEAP16[i8 + 64 >> 1] << 16 >> 16, HEAP32[i3 + 128 >> 2] | 0);
      i18 = i16 + i12 << 13;
      i19 = i12 - i16 << 13;
      i16 = Math_imul(HEAP16[i8 + 112 >> 1] << 16 >> 16, HEAP32[i3 + 224 >> 2] | 0);
      i12 = Math_imul(HEAP16[i8 + 80 >> 1] << 16 >> 16, HEAP32[i3 + 160 >> 2] | 0);
      i20 = Math_imul(i14 << 16 >> 16, HEAP32[i3 + 96 >> 2] | 0);
      i21 = Math_imul(i10 << 16 >> 16, HEAP32[i3 + 32 >> 2] | 0);
      i22 = i20 + i16 | 0;
      i23 = i21 + i12 | 0;
      i24 = (i23 + i22 | 0) * 9633 & -1;
      i25 = (i21 + i16 | 0) * -7373 & -1;
      i26 = (i20 + i12 | 0) * -20995 & -1;
      i27 = i24 + (i22 * -16069 & -1) | 0;
      i22 = i24 + (i23 * -3196 & -1) | 0;
      i23 = (i25 + (i16 * 2446 & -1) | 0) + i27 | 0;
      i16 = (i26 + (i12 * 16819 & -1) | 0) + i22 | 0;
      i12 = (i26 + (i20 * 25172 & -1) | 0) + i27 | 0;
      i27 = (i25 + (i21 * 12299 & -1) | 0) + i22 | 0;
      i22 = (i18 + i11 | 0) + 1024 | 0;
      HEAP32[i2 >> 2] = i22 + i27 >> 11;
      HEAP32[i2 + 224 >> 2] = i22 - i27 >> 11;
      i27 = (i19 + i17 | 0) + 1024 | 0;
      HEAP32[i2 + 32 >> 2] = i27 + i12 >> 11;
      HEAP32[i2 + 192 >> 2] = i27 - i12 >> 11;
      i12 = (i19 - i17 | 0) + 1024 | 0;
      HEAP32[i2 + 64 >> 2] = i12 + i16 >> 11;
      HEAP32[i2 + 160 >> 2] = i12 - i16 >> 11;
      i16 = (i18 - i11 | 0) + 1024 | 0;
      HEAP32[i2 + 96 >> 2] = i16 + i23 >> 11;
      HEAP32[i2 + 128 >> 2] = i16 - i23 >> 11;
    }
    i23 = i9 - 1 | 0;
    if ((i23 | 0) > 0) {
      i8 = i8 + 2 | 0;
      i3 = i3 + 4 | 0;
      i2 = i2 + 4 | 0;
      i9 = i23;
    } else {
      break;
    }
  }
  i9 = i5 + 1 | 0;
  i2 = i5 + 2 | 0;
  i3 = i5 + 3 | 0;
  i8 = i5 + 4 | 0;
  i14 = i5 + 5 | 0;
  i13 = i5 + 6 | 0;
  i23 = i5 + 7 | 0;
  i16 = i1;
  i1 = 0;
  while (1) {
    i11 = HEAP32[i4 + (i1 << 2) >> 2] | 0;
    i18 = i11 + i5 | 0;
    i12 = HEAP32[i16 + 4 >> 2] | 0;
    i17 = HEAP32[i16 + 8 >> 2] | 0;
    i19 = HEAP32[i16 + 12 >> 2] | 0;
    do {
      if ((i12 | i17 | 0) == 0) {
        if ((i19 | 0) != 0) {
          i28 = 0;
          i29 = i19;
          i15 = 1939;
          break;
        }
        if ((HEAP32[i16 + 16 >> 2] | 0) != 0) {
          i28 = 0;
          i29 = 0;
          i15 = 1939;
          break;
        }
        if ((HEAP32[i16 + 20 >> 2] | 0) != 0) {
          i28 = 0;
          i29 = 0;
          i15 = 1939;
          break;
        }
        if ((HEAP32[i16 + 24 >> 2] | 0) != 0) {
          i28 = 0;
          i29 = 0;
          i15 = 1939;
          break;
        }
        if ((HEAP32[i16 + 28 >> 2] | 0) != 0) {
          i28 = 0;
          i29 = 0;
          i15 = 1939;
          break;
        }
        i27 = HEAP8[i7 + ((((HEAP32[i16 >> 2] | 0) + 16 | 0) >>> 5 & 1023) + 128 | 0) | 0] | 0;
        HEAP8[i18] = i27;
        HEAP8[i11 + i9 | 0] = i27;
        HEAP8[i11 + i2 | 0] = i27;
        HEAP8[i11 + i3 | 0] = i27;
        HEAP8[i11 + i8 | 0] = i27;
        HEAP8[i11 + i14 | 0] = i27;
        HEAP8[i11 + i13 | 0] = i27;
        HEAP8[i11 + i23 | 0] = i27;
        break;
      } else {
        i28 = i17;
        i29 = i19;
        i15 = 1939;
      }
    } while (0);
    if ((i15 | 0) == 1939) {
      i15 = 0;
      i19 = HEAP32[i16 + 24 >> 2] | 0;
      i17 = (i19 + i28 | 0) * 4433 & -1;
      i10 = i17 + (i19 * -15137 & -1) | 0;
      i19 = i17 + (i28 * 6270 & -1) | 0;
      i17 = HEAP32[i16 >> 2] | 0;
      i27 = HEAP32[i16 + 16 >> 2] | 0;
      i22 = i27 + i17 << 13;
      i21 = i17 - i27 << 13;
      i27 = HEAP32[i16 + 28 >> 2] | 0;
      i17 = HEAP32[i16 + 20 >> 2] | 0;
      i25 = i29 + i27 | 0;
      i20 = i12 + i17 | 0;
      i26 = (i20 + i25 | 0) * 9633 & -1;
      i24 = (i12 + i27 | 0) * -7373 & -1;
      i30 = (i29 + i17 | 0) * -20995 & -1;
      i31 = i26 + (i25 * -16069 & -1) | 0;
      i25 = i26 + (i20 * -3196 & -1) | 0;
      i20 = (i24 + (i27 * 2446 & -1) | 0) + i31 | 0;
      i27 = (i30 + (i17 * 16819 & -1) | 0) + i25 | 0;
      i17 = (i30 + (i29 * 25172 & -1) | 0) + i31 | 0;
      i31 = (i24 + (i12 * 12299 & -1) | 0) + i25 | 0;
      i25 = (i22 + i19 | 0) + 131072 | 0;
      HEAP8[i18] = HEAP8[i7 + (((i25 + i31 | 0) >>> 18 & 1023) + 128 | 0) | 0] | 0;
      HEAP8[i11 + i23 | 0] = HEAP8[i7 + (((i25 - i31 | 0) >>> 18 & 1023) + 128 | 0) | 0] | 0;
      i31 = (i21 + i10 | 0) + 131072 | 0;
      HEAP8[i11 + i9 | 0] = HEAP8[i7 + (((i31 + i17 | 0) >>> 18 & 1023) + 128 | 0) | 0] | 0;
      HEAP8[i11 + i13 | 0] = HEAP8[i7 + (((i31 - i17 | 0) >>> 18 & 1023) + 128 | 0) | 0] | 0;
      i17 = (i21 - i10 | 0) + 131072 | 0;
      HEAP8[i11 + i2 | 0] = HEAP8[i7 + (((i17 + i27 | 0) >>> 18 & 1023) + 128 | 0) | 0] | 0;
      HEAP8[i11 + i14 | 0] = HEAP8[i7 + (((i17 - i27 | 0) >>> 18 & 1023) + 128 | 0) | 0] | 0;
      i27 = (i22 - i19 | 0) + 131072 | 0;
      HEAP8[i11 + i3 | 0] = HEAP8[i7 + (((i27 + i20 | 0) >>> 18 & 1023) + 128 | 0) | 0] | 0;
      HEAP8[i11 + i8 | 0] = HEAP8[i7 + (((i27 - i20 | 0) >>> 18 & 1023) + 128 | 0) | 0] | 0;
    }
    i20 = i1 + 1 | 0;
    if ((i20 | 0) == 8) {
      break;
    } else {
      i16 = i16 + 32 | 0;
      i1 = i20;
    }
  }
  STACKTOP = i6;
  return;
}
function _jpeg_idct_4x4(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
  i6 = STACKTOP;
  STACKTOP = STACKTOP + 128 | 0;
  i7 = HEAP32[i1 + 324 >> 2] | 0;
  i1 = i6 | 0;
  i8 = i3;
  i3 = HEAP32[i2 + 80 >> 2] | 0;
  i2 = i1;
  i9 = 8;
  while (1) {
    if ((i9 | 0) == 4) {
      i10 = 3;
    } else {
      i11 = HEAP16[i8 + 16 >> 1] | 0;
      i12 = HEAP16[i8 + 32 >> 1] | 0;
      i13 = HEAP16[i8 + 48 >> 1] | 0;
      do {
        if ((i11 | i12) << 16 >> 16 == 0) {
          if (i13 << 16 >> 16 != 0) {
            i14 = 0;
            i15 = i13;
            i16 = 1953;
            break;
          }
          if (HEAP16[i8 + 80 >> 1] << 16 >> 16 != 0) {
            i14 = 0;
            i15 = 0;
            i16 = 1953;
            break;
          }
          if (HEAP16[i8 + 96 >> 1] << 16 >> 16 != 0) {
            i14 = 0;
            i15 = 0;
            i16 = 1953;
            break;
          }
          if (HEAP16[i8 + 112 >> 1] << 16 >> 16 != 0) {
            i14 = 0;
            i15 = 0;
            i16 = 1953;
            break;
          }
          i17 = Math_imul(HEAP32[i3 >> 2] << 2, HEAP16[i8 >> 1] << 16 >> 16);
          HEAP32[i2 >> 2] = i17;
          HEAP32[i2 + 32 >> 2] = i17;
          HEAP32[i2 + 64 >> 2] = i17;
          HEAP32[i2 + 96 >> 2] = i17;
          break;
        } else {
          i14 = i12 << 16 >> 16;
          i15 = i13;
          i16 = 1953;
          break;
        }
      } while (0);
      if ((i16 | 0) == 1953) {
        i16 = 0;
        i13 = Math_imul(HEAP32[i3 >> 2] << 14, HEAP16[i8 >> 1] << 16 >> 16);
        i12 = HEAP16[i8 + 96 >> 1] << 16 >> 16;
        i17 = HEAP32[i3 + 192 >> 2] | 0;
        i18 = Math_imul((HEAP32[i3 + 64 >> 2] | 0) * 15137 & -1, i14);
        i19 = Math_imul(i17 * -6270 & -1, i12) + i18 | 0;
        i18 = Math_imul(HEAP16[i8 + 112 >> 1] << 16 >> 16, HEAP32[i3 + 224 >> 2] | 0);
        i12 = Math_imul(HEAP16[i8 + 80 >> 1] << 16 >> 16, HEAP32[i3 + 160 >> 2] | 0);
        i17 = Math_imul(i15 << 16 >> 16, HEAP32[i3 + 96 >> 2] | 0);
        i20 = Math_imul(i11 << 16 >> 16, HEAP32[i3 + 32 >> 2] | 0);
        i21 = (((i12 * 11893 & -1) + (i18 * -1730 & -1) | 0) + (i17 * -17799 & -1) | 0) + (i20 * 8697 & -1) | 0;
        i22 = (((i12 * -4926 & -1) + (i18 * -4176 & -1) | 0) + (i17 * 7373 & -1) | 0) + (i20 * 20995 & -1) | 0;
        i20 = (i19 + i13 | 0) + 2048 | 0;
        HEAP32[i2 >> 2] = i20 + i22 >> 12;
        HEAP32[i2 + 96 >> 2] = i20 - i22 >> 12;
        i22 = (i13 - i19 | 0) + 2048 | 0;
        HEAP32[i2 + 32 >> 2] = i22 + i21 >> 12;
        HEAP32[i2 + 64 >> 2] = i22 - i21 >> 12;
      }
      i21 = i9 - 1 | 0;
      if ((i21 | 0) > 0) {
        i10 = i21;
      } else {
        break;
      }
    }
    i8 = i8 + 2 | 0;
    i3 = i3 + 4 | 0;
    i2 = i2 + 4 | 0;
    i9 = i10;
  }
  i10 = i5 + 1 | 0;
  i9 = i5 + 2 | 0;
  i2 = i5 + 3 | 0;
  i3 = i1;
  i1 = 0;
  while (1) {
    i8 = HEAP32[i4 + (i1 << 2) >> 2] | 0;
    i15 = i8 + i5 | 0;
    i14 = HEAP32[i3 + 4 >> 2] | 0;
    i21 = HEAP32[i3 + 8 >> 2] | 0;
    i22 = HEAP32[i3 + 12 >> 2] | 0;
    do {
      if ((i14 | i21 | 0) == 0) {
        if ((i22 | 0) != 0) {
          i23 = 0;
          i24 = i22;
          i16 = 1962;
          break;
        }
        if ((HEAP32[i3 + 20 >> 2] | 0) != 0) {
          i23 = 0;
          i24 = 0;
          i16 = 1962;
          break;
        }
        if ((HEAP32[i3 + 24 >> 2] | 0) != 0) {
          i23 = 0;
          i24 = 0;
          i16 = 1962;
          break;
        }
        if ((HEAP32[i3 + 28 >> 2] | 0) != 0) {
          i23 = 0;
          i24 = 0;
          i16 = 1962;
          break;
        }
        i19 = HEAP8[i7 + ((((HEAP32[i3 >> 2] | 0) + 16 | 0) >>> 5 & 1023) + 128 | 0) | 0] | 0;
        HEAP8[i15] = i19;
        HEAP8[i8 + i10 | 0] = i19;
        HEAP8[i8 + i9 | 0] = i19;
        HEAP8[i8 + i2 | 0] = i19;
        break;
      } else {
        i23 = i21 * 15137 & -1;
        i24 = i22;
        i16 = 1962;
        break;
      }
    } while (0);
    if ((i16 | 0) == 1962) {
      i16 = 0;
      i22 = HEAP32[i3 >> 2] << 14;
      i21 = ((HEAP32[i3 + 24 >> 2] | 0) * -6270 & -1) + i23 | 0;
      i11 = HEAP32[i3 + 28 >> 2] | 0;
      i19 = HEAP32[i3 + 20 >> 2] | 0;
      i13 = (((i19 * 11893 & -1) + (i11 * -1730 & -1) | 0) + (i24 * -17799 & -1) | 0) + (i14 * 8697 & -1) | 0;
      i20 = (((i19 * -4926 & -1) + (i11 * -4176 & -1) | 0) + (i24 * 7373 & -1) | 0) + (i14 * 20995 & -1) | 0;
      i11 = (i21 + i22 | 0) + 262144 | 0;
      HEAP8[i15] = HEAP8[i7 + (((i11 + i20 | 0) >>> 19 & 1023) + 128 | 0) | 0] | 0;
      HEAP8[i8 + i2 | 0] = HEAP8[i7 + (((i11 - i20 | 0) >>> 19 & 1023) + 128 | 0) | 0] | 0;
      i20 = (i22 - i21 | 0) + 262144 | 0;
      HEAP8[i8 + i10 | 0] = HEAP8[i7 + (((i20 + i13 | 0) >>> 19 & 1023) + 128 | 0) | 0] | 0;
      HEAP8[i8 + i9 | 0] = HEAP8[i7 + (((i20 - i13 | 0) >>> 19 & 1023) + 128 | 0) | 0] | 0;
    }
    i13 = i1 + 1 | 0;
    if ((i13 | 0) == 4) {
      break;
    } else {
      i3 = i3 + 32 | 0;
      i1 = i13;
    }
  }
  STACKTOP = i6;
  return;
}
function _jpeg_idct_2x2(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
  i6 = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  i7 = i6 | 0;
  i8 = HEAP32[i1 + 324 >> 2] | 0;
  i1 = i7 | 0;
  i9 = i1;
  i10 = HEAP32[i2 + 80 >> 2] | 0;
  i2 = i3;
  i3 = 8;
  while (1) {
    L2696 : do {
      if (!((i3 | 0) == 6 | (i3 | 0) == 4 | (i3 | 0) == 2)) {
        i11 = HEAP16[i2 + 16 >> 1] | 0;
        i12 = HEAP16[i2 + 48 >> 1] | 0;
        i13 = HEAP16[i2 + 80 >> 1] | 0;
        do {
          if ((i11 | i12) << 16 >> 16 == 0) {
            if (i13 << 16 >> 16 != 0) {
              i14 = 0;
              i15 = i13;
              break;
            }
            if (HEAP16[i2 + 112 >> 1] << 16 >> 16 != 0) {
              i14 = 0;
              i15 = 0;
              break;
            }
            i16 = Math_imul(HEAP32[i10 >> 2] << 2, HEAP16[i2 >> 1] << 16 >> 16);
            HEAP32[i9 >> 2] = i16;
            HEAP32[i9 + 32 >> 2] = i16;
            break L2696;
          } else {
            i14 = i12 << 16 >> 16;
            i15 = i13;
          }
        } while (0);
        i13 = Math_imul(HEAP32[i10 >> 2] << 15, HEAP16[i2 >> 1] << 16 >> 16);
        i12 = Math_imul((HEAP32[i10 + 224 >> 2] | 0) * -5906 & -1, HEAP16[i2 + 112 >> 1] << 16 >> 16);
        i16 = Math_imul((HEAP32[i10 + 160 >> 2] | 0) * 6967 & -1, i15 << 16 >> 16) + i12 | 0;
        i12 = i16 + Math_imul((HEAP32[i10 + 96 >> 2] | 0) * -10426 & -1, i14) | 0;
        i16 = i12 + Math_imul((HEAP32[i10 + 32 >> 2] | 0) * 29692 & -1, i11 << 16 >> 16) | 0;
        i12 = i13 | 4096;
        HEAP32[i9 >> 2] = i12 + i16 >> 13;
        HEAP32[i9 + 32 >> 2] = i12 - i16 >> 13;
      }
    } while (0);
    i16 = i3 - 1 | 0;
    if ((i16 | 0) > 0) {
      i9 = i9 + 4 | 0;
      i10 = i10 + 4 | 0;
      i2 = i2 + 2 | 0;
      i3 = i16;
    } else {
      break;
    }
  }
  i3 = i5 + 1 | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  i10 = i2 + i5 | 0;
  i9 = HEAP32[i7 + 4 >> 2] | 0;
  i14 = HEAP32[i7 + 12 >> 2] | 0;
  i15 = HEAP32[i7 + 20 >> 2] | 0;
  do {
    if ((i9 | i14 | 0) == 0) {
      if ((i15 | 0) != 0) {
        i17 = 0;
        i18 = i15;
        i19 = 1979;
        break;
      }
      if ((HEAP32[i7 + 28 >> 2] | 0) != 0) {
        i17 = 0;
        i18 = 0;
        i19 = 1979;
        break;
      }
      i16 = HEAP8[i8 + ((((HEAP32[i1 >> 2] | 0) + 16 | 0) >>> 5 & 1023) + 128 | 0) | 0] | 0;
      HEAP8[i10] = i16;
      HEAP8[i2 + i3 | 0] = i16;
      break;
    } else {
      i17 = i14 * -10426 & -1;
      i18 = i15;
      i19 = 1979;
      break;
    }
  } while (0);
  if ((i19 | 0) == 1979) {
    i19 = (((i18 * 6967 & -1) + ((HEAP32[i7 + 28 >> 2] | 0) * -5906 & -1) | 0) + i17 | 0) + (i9 * 29692 & -1) | 0;
    i9 = (HEAP32[i1 >> 2] << 15) + 524288 | 0;
    HEAP8[i10] = HEAP8[i8 + (((i9 + i19 | 0) >>> 20 & 1023) + 128 | 0) | 0] | 0;
    HEAP8[i2 + i3 | 0] = HEAP8[i8 + (((i9 - i19 | 0) >>> 20 & 1023) + 128 | 0) | 0] | 0;
  }
  i19 = i7 + 32 | 0;
  i9 = HEAP32[i4 + 4 >> 2] | 0;
  i4 = i9 + i5 | 0;
  i5 = HEAP32[i7 + 36 >> 2] | 0;
  i2 = HEAP32[i7 + 44 >> 2] | 0;
  i10 = HEAP32[i7 + 52 >> 2] | 0;
  do {
    if ((i5 | i2 | 0) == 0) {
      if ((i10 | 0) != 0) {
        i20 = 0;
        i21 = i10;
        break;
      }
      if ((HEAP32[i7 + 60 >> 2] | 0) != 0) {
        i20 = 0;
        i21 = 0;
        break;
      }
      i1 = HEAP8[i8 + ((((HEAP32[i19 >> 2] | 0) + 16 | 0) >>> 5 & 1023) + 128 | 0) | 0] | 0;
      HEAP8[i4] = i1;
      HEAP8[i9 + i3 | 0] = i1;
      STACKTOP = i6;
      return;
    } else {
      i20 = i2 * -10426 & -1;
      i21 = i10;
    }
  } while (0);
  i10 = (((i21 * 6967 & -1) + ((HEAP32[i7 + 60 >> 2] | 0) * -5906 & -1) | 0) + i20 | 0) + (i5 * 29692 & -1) | 0;
  i5 = (HEAP32[i19 >> 2] << 15) + 524288 | 0;
  HEAP8[i4] = HEAP8[i8 + (((i5 + i10 | 0) >>> 20 & 1023) + 128 | 0) | 0] | 0;
  HEAP8[i9 + i3 | 0] = HEAP8[i8 + (((i5 - i10 | 0) >>> 20 & 1023) + 128 | 0) | 0] | 0;
  STACKTOP = i6;
  return;
}
function _jpeg_idct_1x1(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0;
  i6 = HEAP32[i1 + 324 >> 2] | 0;
  i1 = HEAP8[i6 + (((Math_imul(HEAP16[i3 >> 1] << 16 >> 16, HEAP32[HEAP32[i2 + 80 >> 2] >> 2] | 0) + 4 | 0) >>> 3 & 1023) + 128 | 0) | 0] | 0;
  HEAP8[(HEAP32[i4 >> 2] | 0) + i5 | 0] = i1;
  return;
}
function _start_pass_upsample(i1) {
  i1 = i1 | 0;
  var i2 = 0;
  i2 = HEAP32[i1 + 452 >> 2] | 0;
  HEAP32[i2 + 92 >> 2] = HEAP32[i1 + 312 >> 2] | 0;
  HEAP32[i2 + 96 >> 2] = HEAP32[i1 + 116 >> 2] | 0;
  return;
}
function _noop_upsample(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  HEAP32[i4 >> 2] = 0;
  return;
}
function _fullsize_upsample(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  HEAP32[i4 >> 2] = i3;
  return;
}
function _start_pass_dcolor(i1) {
  i1 = i1 | 0;
  return;
}
function _h2v1_fancy_upsample(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
  i5 = HEAP32[i4 >> 2] | 0;
  i4 = i1 + 312 | 0;
  if ((HEAP32[i4 >> 2] | 0) <= 0) {
    return;
  }
  i1 = i2 + 40 | 0;
  i2 = 0;
  while (1) {
    i6 = HEAP32[i3 + (i2 << 2) >> 2] | 0;
    i7 = HEAP32[i5 + (i2 << 2) >> 2] | 0;
    i8 = i6 + 1 | 0;
    i9 = HEAP8[i6] | 0;
    HEAP8[i7] = i9;
    HEAP8[i7 + 1 | 0] = (((HEAPU8[i8] | 0) + 2 | 0) + ((i9 & 255) * 3 & -1) | 0) >>> 2 & 255;
    i9 = HEAP32[i1 >> 2] | 0;
    i10 = i9 - 2 | 0;
    i11 = i7 + 2 | 0;
    if ((i10 | 0) == 0) {
      i12 = i8;
      i13 = i7;
      i14 = i11;
    } else {
      i15 = i9 << 1;
      i16 = i8;
      i8 = i7;
      i17 = i10;
      i10 = i11;
      while (1) {
        i11 = i16 + 1 | 0;
        i18 = (HEAPU8[i16] | 0) * 3 & -1;
        HEAP8[i10] = (((HEAPU8[i16 - 1 | 0] | 0) + 1 | 0) + i18 | 0) >>> 2 & 255;
        HEAP8[i8 + 3 | 0] = ((i18 + 2 | 0) + (HEAPU8[i11] | 0) | 0) >>> 2 & 255;
        i18 = i17 - 1 | 0;
        if ((i18 | 0) == 0) {
          break;
        } else {
          i16 = i11;
          i8 = i10;
          i17 = i18;
          i10 = i10 + 2 | 0;
        }
      }
      i12 = i6 + (i9 - 1 | 0) | 0;
      i13 = i7 + (i15 - 4 | 0) | 0;
      i14 = i7 + (i15 - 2 | 0) | 0;
    }
    i10 = HEAP8[i12] | 0;
    HEAP8[i14] = (((HEAPU8[i12 - 1 | 0] | 0) + 1 | 0) + ((i10 & 255) * 3 & -1) | 0) >>> 2 & 255;
    HEAP8[i13 + 3 | 0] = i10;
    i10 = i2 + 1 | 0;
    if ((i10 | 0) < (HEAP32[i4 >> 2] | 0)) {
      i2 = i10;
    } else {
      break;
    }
  }
  return;
}
function _h2v1_upsample(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
  i2 = HEAP32[i4 >> 2] | 0;
  i4 = i1 + 312 | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  if ((i5 | 0) <= 0) {
    return;
  }
  i6 = i1 + 112 | 0;
  i1 = 0;
  i7 = i5;
  while (1) {
    i5 = HEAP32[i2 + (i1 << 2) >> 2] | 0;
    i8 = HEAP32[i6 >> 2] | 0;
    i9 = i5 + i8 | 0;
    if ((i8 | 0) > 0) {
      i8 = i5;
      i5 = HEAP32[i3 + (i1 << 2) >> 2] | 0;
      while (1) {
        i10 = HEAP8[i5] | 0;
        HEAP8[i8] = i10;
        i11 = i8 + 2 | 0;
        HEAP8[i8 + 1 | 0] = i10;
        if (i11 >>> 0 < i9 >>> 0) {
          i8 = i11;
          i5 = i5 + 1 | 0;
        } else {
          break;
        }
      }
      i12 = HEAP32[i4 >> 2] | 0;
    } else {
      i12 = i7;
    }
    i5 = i1 + 1 | 0;
    if ((i5 | 0) < (i12 | 0)) {
      i1 = i5;
      i7 = i12;
    } else {
      break;
    }
  }
  return;
}
function _h2v2_fancy_upsample(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
  i5 = HEAP32[i4 >> 2] | 0;
  i4 = i1 + 312 | 0;
  if ((HEAP32[i4 >> 2] | 0) <= 0) {
    return;
  }
  i1 = i2 + 40 | 0;
  i2 = 0;
  i6 = 0;
  while (1) {
    i7 = i3 + (i2 << 2) | 0;
    i8 = HEAP32[i7 >> 2] | 0;
    i9 = HEAP32[i3 + (i2 - 1 << 2) >> 2] | 0;
    i10 = i6 | 1;
    i11 = HEAP32[i5 + (i6 << 2) >> 2] | 0;
    i12 = ((HEAPU8[i8] | 0) * 3 & -1) + (HEAPU8[i9] | 0) | 0;
    i13 = ((HEAPU8[i8 + 1 | 0] | 0) * 3 & -1) + (HEAPU8[i9 + 1 | 0] | 0) | 0;
    HEAP8[i11] = ((i12 << 2) + 8 | 0) >>> 4 & 255;
    HEAP8[i11 + 1 | 0] = (((i12 * 3 & -1) + 7 | 0) + i13 | 0) >>> 4 & 255;
    i14 = HEAP32[i1 >> 2] | 0;
    i15 = i14 - 2 | 0;
    i16 = i11 + 2 | 0;
    if ((i15 | 0) == 0) {
      i17 = i11;
      i18 = i13;
      i19 = i12;
      i20 = i16;
    } else {
      i21 = i14 << 1;
      i14 = i8 + 2 | 0;
      i8 = i9 + 2 | 0;
      i9 = i11;
      i22 = i13;
      i13 = i12;
      i12 = i15;
      i15 = i16;
      while (1) {
        i23 = ((HEAPU8[i14] | 0) * 3 & -1) + (HEAPU8[i8] | 0) | 0;
        i16 = i22 * 3 & -1;
        HEAP8[i15] = ((i13 + 8 | 0) + i16 | 0) >>> 4 & 255;
        HEAP8[i9 + 3 | 0] = ((i16 + 7 | 0) + i23 | 0) >>> 4 & 255;
        i16 = i12 - 1 | 0;
        if ((i16 | 0) == 0) {
          break;
        } else {
          i14 = i14 + 1 | 0;
          i8 = i8 + 1 | 0;
          i9 = i15;
          i13 = i22;
          i22 = i23;
          i12 = i16;
          i15 = i15 + 2 | 0;
        }
      }
      i17 = i11 + (i21 - 4 | 0) | 0;
      i18 = i23;
      i19 = i22;
      i20 = i11 + (i21 - 2 | 0) | 0;
    }
    HEAP8[i20] = ((i19 + 8 | 0) + (i18 * 3 & -1) | 0) >>> 4 & 255;
    HEAP8[i17 + 3 | 0] = ((i18 << 2) + 7 | 0) >>> 4 & 255;
    i15 = HEAP32[i7 >> 2] | 0;
    i12 = i2 + 1 | 0;
    i13 = HEAP32[i3 + (i12 << 2) >> 2] | 0;
    i9 = HEAP32[i5 + (i10 << 2) >> 2] | 0;
    i8 = ((HEAPU8[i15] | 0) * 3 & -1) + (HEAPU8[i13] | 0) | 0;
    i14 = ((HEAPU8[i15 + 1 | 0] | 0) * 3 & -1) + (HEAPU8[i13 + 1 | 0] | 0) | 0;
    HEAP8[i9] = ((i8 << 2) + 8 | 0) >>> 4 & 255;
    HEAP8[i9 + 1 | 0] = (((i8 * 3 & -1) + 7 | 0) + i14 | 0) >>> 4 & 255;
    i16 = HEAP32[i1 >> 2] | 0;
    i24 = i16 - 2 | 0;
    i25 = i9 + 2 | 0;
    if ((i24 | 0) == 0) {
      i26 = i9;
      i27 = i14;
      i28 = i8;
      i29 = i25;
    } else {
      i30 = i16 << 1;
      i16 = i15 + 2 | 0;
      i15 = i13 + 2 | 0;
      i13 = i9;
      i31 = i14;
      i14 = i8;
      i8 = i24;
      i24 = i25;
      while (1) {
        i32 = ((HEAPU8[i16] | 0) * 3 & -1) + (HEAPU8[i15] | 0) | 0;
        i25 = i31 * 3 & -1;
        HEAP8[i24] = ((i14 + 8 | 0) + i25 | 0) >>> 4 & 255;
        HEAP8[i13 + 3 | 0] = ((i25 + 7 | 0) + i32 | 0) >>> 4 & 255;
        i25 = i8 - 1 | 0;
        if ((i25 | 0) == 0) {
          break;
        } else {
          i16 = i16 + 1 | 0;
          i15 = i15 + 1 | 0;
          i13 = i24;
          i14 = i31;
          i31 = i32;
          i8 = i25;
          i24 = i24 + 2 | 0;
        }
      }
      i26 = i9 + (i30 - 4 | 0) | 0;
      i27 = i32;
      i28 = i31;
      i29 = i9 + (i30 - 2 | 0) | 0;
    }
    HEAP8[i29] = ((i28 + 8 | 0) + (i27 * 3 & -1) | 0) >>> 4 & 255;
    HEAP8[i26 + 3 | 0] = ((i27 << 2) + 7 | 0) >>> 4 & 255;
    i24 = i6 + 2 | 0;
    if ((i24 | 0) < (HEAP32[i4 >> 2] | 0)) {
      i2 = i12;
      i6 = i24;
    } else {
      break;
    }
  }
  return;
}
function _ycc_rgb_convert(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
  i6 = HEAP32[i1 + 456 >> 2] | 0;
  i7 = HEAP32[i1 + 112 >> 2] | 0;
  i8 = HEAP32[i1 + 324 >> 2] | 0;
  i1 = HEAP32[i6 + 8 >> 2] | 0;
  i9 = HEAP32[i6 + 12 >> 2] | 0;
  i10 = HEAP32[i6 + 16 >> 2] | 0;
  i11 = HEAP32[i6 + 20 >> 2] | 0;
  if ((i5 | 0) <= 0) {
    return;
  }
  i6 = i2 + 4 | 0;
  i12 = i2 + 8 | 0;
  i13 = (i7 | 0) == 0;
  i14 = i4;
  i4 = i3;
  i3 = i5;
  while (1) {
    i5 = i3 - 1 | 0;
    i15 = HEAP32[(HEAP32[i2 >> 2] | 0) + (i4 << 2) >> 2] | 0;
    i16 = HEAP32[(HEAP32[i6 >> 2] | 0) + (i4 << 2) >> 2] | 0;
    i17 = HEAP32[(HEAP32[i12 >> 2] | 0) + (i4 << 2) >> 2] | 0;
    i18 = i4 + 1 | 0;
    i19 = i14 + 4 | 0;
    L2778 : do {
      if (!i13) {
        i20 = 0;
        i21 = HEAP32[i14 >> 2] | 0;
        while (1) {
          i22 = HEAPU8[i15 + i20 | 0] | 0;
          i23 = HEAPU8[i16 + i20 | 0] | 0;
          i24 = HEAPU8[i17 + i20 | 0] | 0;
          HEAP8[i21] = HEAP8[i8 + ((HEAP32[i1 + (i24 << 2) >> 2] | 0) + i22 | 0) | 0] | 0;
          HEAP8[i21 + 1 | 0] = HEAP8[i8 + (((HEAP32[i10 + (i24 << 2) >> 2] | 0) + (HEAP32[i11 + (i23 << 2) >> 2] | 0) >> 16) + i22 | 0) | 0] | 0;
          HEAP8[i21 + 2 | 0] = HEAP8[i8 + ((HEAP32[i9 + (i23 << 2) >> 2] | 0) + i22 | 0) | 0] | 0;
          i22 = i20 + 1 | 0;
          if ((i22 | 0) == (i7 | 0)) {
            break L2778;
          } else {
            i20 = i22;
            i21 = i21 + 3 | 0;
          }
        }
      }
    } while (0);
    if ((i5 | 0) > 0) {
      i14 = i19;
      i4 = i18;
      i3 = i5;
    } else {
      break;
    }
  }
  return;
}
function _gray_rgb_convert(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
  i6 = HEAP32[i1 + 112 >> 2] | 0;
  if ((i5 | 0) <= 0) {
    return;
  }
  i1 = (i6 | 0) == 0;
  i7 = i4;
  i4 = i3;
  i3 = i5;
  while (1) {
    i5 = i3 - 1 | 0;
    i8 = i4 + 1 | 0;
    i9 = HEAP32[(HEAP32[i2 >> 2] | 0) + (i4 << 2) >> 2] | 0;
    i10 = i7 + 4 | 0;
    L2790 : do {
      if (!i1) {
        i11 = HEAP32[i7 >> 2] | 0;
        i12 = 0;
        while (1) {
          i13 = HEAP8[i9 + i12 | 0] | 0;
          HEAP8[i11 + 2 | 0] = i13;
          HEAP8[i11 + 1 | 0] = i13;
          HEAP8[i11] = i13;
          i13 = i12 + 1 | 0;
          if ((i13 | 0) == (i6 | 0)) {
            break L2790;
          } else {
            i11 = i11 + 3 | 0;
            i12 = i13;
          }
        }
      }
    } while (0);
    if ((i5 | 0) > 0) {
      i7 = i10;
      i4 = i8;
      i3 = i5;
    } else {
      break;
    }
  }
  return;
}
function _null_convert193(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
  i6 = HEAP32[i1 + 36 >> 2] | 0;
  i7 = HEAP32[i1 + 112 >> 2] | 0;
  if ((i5 | 0) <= 0) {
    return;
  }
  i1 = (i6 | 0) > 0;
  i8 = (i7 | 0) == 0;
  i9 = i4;
  i4 = i3;
  i3 = i5;
  while (1) {
    i5 = i3 - 1 | 0;
    L2802 : do {
      if (i1) {
        i10 = 0;
        while (1) {
          L2805 : do {
            if (!i8) {
              i11 = HEAP32[(HEAP32[i2 + (i10 << 2) >> 2] | 0) + (i4 << 2) >> 2] | 0;
              i12 = (HEAP32[i9 >> 2] | 0) + i10 | 0;
              i13 = i7;
              while (1) {
                HEAP8[i12] = HEAP8[i11] | 0;
                i14 = i13 - 1 | 0;
                if ((i14 | 0) == 0) {
                  break L2805;
                } else {
                  i11 = i11 + 1 | 0;
                  i12 = i12 + i6 | 0;
                  i13 = i14;
                }
              }
            }
          } while (0);
          i13 = i10 + 1 | 0;
          if ((i13 | 0) == (i6 | 0)) {
            break L2802;
          } else {
            i10 = i13;
          }
        }
      }
    } while (0);
    if ((i5 | 0) > 0) {
      i9 = i9 + 4 | 0;
      i4 = i4 + 1 | 0;
      i3 = i5;
    } else {
      break;
    }
  }
  return;
}
function _ycck_cmyk_convert(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
  i6 = HEAP32[i1 + 456 >> 2] | 0;
  i7 = HEAP32[i1 + 112 >> 2] | 0;
  i8 = HEAP32[i1 + 324 >> 2] | 0;
  i1 = HEAP32[i6 + 8 >> 2] | 0;
  i9 = HEAP32[i6 + 12 >> 2] | 0;
  i10 = HEAP32[i6 + 16 >> 2] | 0;
  i11 = HEAP32[i6 + 20 >> 2] | 0;
  if ((i5 | 0) <= 0) {
    return;
  }
  i6 = i2 + 4 | 0;
  i12 = i2 + 8 | 0;
  i13 = i2 + 12 | 0;
  i14 = (i7 | 0) == 0;
  i15 = i4;
  i4 = i3;
  i3 = i5;
  while (1) {
    i5 = i3 - 1 | 0;
    i16 = HEAP32[(HEAP32[i2 >> 2] | 0) + (i4 << 2) >> 2] | 0;
    i17 = HEAP32[(HEAP32[i6 >> 2] | 0) + (i4 << 2) >> 2] | 0;
    i18 = HEAP32[(HEAP32[i12 >> 2] | 0) + (i4 << 2) >> 2] | 0;
    i19 = HEAP32[(HEAP32[i13 >> 2] | 0) + (i4 << 2) >> 2] | 0;
    i20 = i4 + 1 | 0;
    i21 = i15 + 4 | 0;
    L2818 : do {
      if (!i14) {
        i22 = 0;
        i23 = HEAP32[i15 >> 2] | 0;
        while (1) {
          i24 = HEAPU8[i17 + i22 | 0] | 0;
          i25 = HEAPU8[i18 + i22 | 0] | 0;
          i26 = (HEAPU8[i16 + i22 | 0] | 0) ^ 255;
          HEAP8[i23] = HEAP8[i8 + (i26 - (HEAP32[i1 + (i25 << 2) >> 2] | 0) | 0) | 0] | 0;
          HEAP8[i23 + 1 | 0] = HEAP8[i8 + (i26 - ((HEAP32[i10 + (i25 << 2) >> 2] | 0) + (HEAP32[i11 + (i24 << 2) >> 2] | 0) >> 16) | 0) | 0] | 0;
          HEAP8[i23 + 2 | 0] = HEAP8[i8 + (i26 - (HEAP32[i9 + (i24 << 2) >> 2] | 0) | 0) | 0] | 0;
          HEAP8[i23 + 3 | 0] = HEAP8[i19 + i22 | 0] | 0;
          i24 = i22 + 1 | 0;
          if ((i24 | 0) == (i7 | 0)) {
            break L2818;
          } else {
            i22 = i24;
            i23 = i23 + 4 | 0;
          }
        }
      }
    } while (0);
    if ((i5 | 0) > 0) {
      i15 = i21;
      i4 = i20;
      i3 = i5;
    } else {
      break;
    }
  }
  return;
}
function _sep_upsample(i1, i2, i3, i4, i5, i6, i7) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  i7 = i7 | 0;
  var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
  i4 = HEAP32[i1 + 452 >> 2] | 0;
  i8 = i4 + 92 | 0;
  i9 = HEAP32[i8 >> 2] | 0;
  i10 = i1 + 312 | 0;
  i11 = HEAP32[i10 >> 2] | 0;
  if ((i9 | 0) < (i11 | 0)) {
    i12 = i11;
    i13 = i9;
  } else {
    i9 = i1 + 36 | 0;
    L2827 : do {
      if ((HEAP32[i9 >> 2] | 0) > 0) {
        i11 = i4 + 52 | 0;
        i14 = i4 + 100 | 0;
        i15 = i4 + 12 | 0;
        i16 = 0;
        i17 = HEAP32[i1 + 216 >> 2] | 0;
        while (1) {
          i18 = HEAP32[i11 + (i16 << 2) >> 2] | 0;
          i19 = HEAP32[i2 + (i16 << 2) >> 2] | 0;
          i20 = i19 + (Math_imul(HEAP32[i14 + (i16 << 2) >> 2] | 0, HEAP32[i3 >> 2] | 0) << 2) | 0;
          FUNCTION_TABLE_viiii[i18 & 511](i1, i17, i20, i15 + (i16 << 2) | 0);
          i20 = i16 + 1 | 0;
          if ((i20 | 0) < (HEAP32[i9 >> 2] | 0)) {
            i16 = i20;
            i17 = i17 + 84 | 0;
          } else {
            break L2827;
          }
        }
      }
    } while (0);
    HEAP32[i8 >> 2] = 0;
    i12 = HEAP32[i10 >> 2] | 0;
    i13 = 0;
  }
  i9 = i12 - i13 | 0;
  i12 = i4 + 96 | 0;
  i2 = i12;
  i17 = HEAP32[i2 >> 2] | 0;
  i16 = i9 >>> 0 > i17 >>> 0 ? i17 : i9;
  i9 = HEAP32[i6 >> 2] | 0;
  i17 = i7 - i9 | 0;
  i7 = i16 >>> 0 > i17 >>> 0 ? i17 : i16;
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i1 + 456 >> 2] | 0) + 4 >> 2] & 511](i1, i4 + 12 | 0, i13, i5 + (i9 << 2) | 0, i7);
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i7 | 0;
  HEAP32[i12 >> 2] = (HEAP32[i2 >> 2] | 0) - i7 | 0;
  i2 = (HEAP32[i8 >> 2] | 0) + i7 | 0;
  HEAP32[i8 >> 2] = i2;
  if ((i2 | 0) < (HEAP32[i10 >> 2] | 0)) {
    return;
  }
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1 | 0;
  return;
}
function _h2v2_upsample(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
  i2 = HEAP32[i4 >> 2] | 0;
  i4 = i1 + 312 | 0;
  if ((HEAP32[i4 >> 2] | 0) <= 0) {
    return;
  }
  i5 = i1 + 112 | 0;
  i1 = 0;
  i6 = 0;
  while (1) {
    i7 = i2 + (i6 << 2) | 0;
    i8 = HEAP32[i7 >> 2] | 0;
    i9 = HEAP32[i5 >> 2] | 0;
    i10 = i8 + i9 | 0;
    if ((i9 | 0) > 0) {
      i11 = i8;
      i12 = HEAP32[i3 + (i1 << 2) >> 2] | 0;
      while (1) {
        i13 = HEAP8[i12] | 0;
        HEAP8[i11] = i13;
        i14 = i11 + 2 | 0;
        HEAP8[i11 + 1 | 0] = i13;
        if (i14 >>> 0 < i10 >>> 0) {
          i11 = i14;
          i12 = i12 + 1 | 0;
        } else {
          break;
        }
      }
      i15 = HEAP32[i5 >> 2] | 0;
      i16 = HEAP32[i7 >> 2] | 0;
    } else {
      i15 = i9;
      i16 = i8;
    }
    _memcpy(HEAP32[i2 + ((i6 | 1) << 2) >> 2] | 0, i16, i15);
    i12 = i6 + 2 | 0;
    if ((i12 | 0) < (HEAP32[i4 >> 2] | 0)) {
      i1 = i1 + 1 | 0;
      i6 = i12;
    } else {
      break;
    }
  }
  return;
}
function _int_upsample(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
  i5 = HEAP32[i1 + 452 >> 2] | 0;
  i6 = HEAP32[i4 >> 2] | 0;
  i4 = HEAP32[i2 + 4 >> 2] | 0;
  i2 = HEAP8[(i5 + 140 | 0) + i4 | 0] | 0;
  i7 = i2 & 255;
  i8 = HEAP8[i4 + (i5 + 150) | 0] | 0;
  i5 = i8 & 255;
  i4 = i1 + 312 | 0;
  if ((HEAP32[i4 >> 2] | 0) <= 0) {
    return;
  }
  i9 = i1 + 112 | 0;
  i1 = (i8 & 255) > 1;
  i8 = i5 - 1 | 0;
  i10 = (i8 | 0) > 0;
  i11 = i2 << 24 >> 24 == 0;
  i2 = -i7 | 0;
  i12 = (((i2 | 0) > -1 ? i2 : -1) + i7 | 0) + 1 | 0;
  i7 = 0;
  i2 = 0;
  while (1) {
    i13 = i6 + (i2 << 2) | 0;
    i14 = HEAP32[i13 >> 2] | 0;
    i15 = HEAP32[i9 >> 2] | 0;
    i16 = i14 + i15 | 0;
    L2856 : do {
      if ((i15 | 0) > 0) {
        i17 = i14;
        i18 = HEAP32[i3 + (i7 << 2) >> 2] | 0;
        while (1) {
          if (i11) {
            i19 = i17;
          } else {
            _memset(i17 | 0, HEAP8[i18] | 0, i12 | 0);
            i19 = i17 + i12 | 0;
          }
          if (i19 >>> 0 < i16 >>> 0) {
            i17 = i19;
            i18 = i18 + 1 | 0;
          } else {
            break L2856;
          }
        }
      }
    } while (0);
    L2864 : do {
      if (i1) {
        i16 = HEAP32[i9 >> 2] | 0;
        if (!i10) {
          break;
        }
        i14 = i6 + (i2 + 1 << 2) | 0;
        i15 = i13;
        i18 = i8;
        while (1) {
          _memcpy(HEAP32[i14 >> 2] | 0, HEAP32[i15 >> 2] | 0, i16);
          i17 = i18 - 1 | 0;
          if ((i17 | 0) <= 0) {
            break L2864;
          }
          i14 = i14 + 4 | 0;
          i15 = i15 + 4 | 0;
          i18 = i17;
        }
      }
    } while (0);
    i13 = i2 + i5 | 0;
    if ((i13 | 0) >= (HEAP32[i4 >> 2] | 0)) {
      break;
    }
    i7 = i7 + 1 | 0;
    i2 = i13;
  }
  return;
}
function _grayscale_convert192(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0;
  i6 = HEAP32[i1 + 112 >> 2] | 0;
  if ((i5 | 0) <= 0) {
    return;
  }
  i1 = i4;
  i4 = (HEAP32[i2 >> 2] | 0) + (i3 << 2) | 0;
  i3 = i5;
  while (1) {
    _memcpy(HEAP32[i1 >> 2] | 0, HEAP32[i4 >> 2] | 0, i6);
    i5 = i3 - 1 | 0;
    if ((i5 | 0) > 0) {
      i1 = i1 + 4 | 0;
      i4 = i4 + 4 | 0;
      i3 = i5;
    } else {
      break;
    }
  }
  return;
}
function _finish_pass_1_quant(i1) {
  i1 = i1 | 0;
  return;
}
function _color_quantize3(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
  i5 = HEAP32[(HEAP32[i1 + 460 >> 2] | 0) + 24 >> 2] | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  i7 = HEAP32[i5 + 4 >> 2] | 0;
  i8 = HEAP32[i5 + 8 >> 2] | 0;
  i5 = HEAP32[i1 + 112 >> 2] | 0;
  if ((i4 | 0) <= 0) {
    return;
  }
  i1 = (i5 | 0) == 0;
  i9 = 0;
  while (1) {
    L2887 : do {
      if (!i1) {
        i10 = HEAP32[i3 + (i9 << 2) >> 2] | 0;
        i11 = i5;
        i12 = HEAP32[i2 + (i9 << 2) >> 2] | 0;
        while (1) {
          HEAP8[i10] = ((HEAP8[i7 + (HEAPU8[i12 + 1 | 0] | 0) | 0] | 0) + (HEAP8[i6 + (HEAPU8[i12] | 0) | 0] | 0) & 255) + (HEAP8[i8 + (HEAPU8[i12 + 2 | 0] | 0) | 0] | 0) & 255;
          i13 = i11 - 1 | 0;
          if ((i13 | 0) == 0) {
            break L2887;
          } else {
            i10 = i10 + 1 | 0;
            i11 = i13;
            i12 = i12 + 3 | 0;
          }
        }
      }
    } while (0);
    i12 = i9 + 1 | 0;
    if ((i12 | 0) == (i4 | 0)) {
      break;
    } else {
      i9 = i12;
    }
  }
  return;
}
function _color_quantize(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
  i5 = HEAP32[(HEAP32[i1 + 460 >> 2] | 0) + 24 >> 2] | 0;
  i6 = HEAP32[i1 + 112 >> 2] | 0;
  i7 = HEAP32[i1 + 120 >> 2] | 0;
  if ((i4 | 0) <= 0) {
    return;
  }
  i1 = (i6 | 0) == 0;
  i8 = (i7 | 0) > 0;
  i9 = 0;
  while (1) {
    L2899 : do {
      if (!i1) {
        i10 = HEAP32[i2 + (i9 << 2) >> 2] | 0;
        i11 = HEAP32[i3 + (i9 << 2) >> 2] | 0;
        i12 = i6;
        while (1) {
          if (i8) {
            i13 = i10;
            i14 = 0;
            i15 = 0;
            while (1) {
              i16 = (HEAPU8[(HEAP32[i5 + (i14 << 2) >> 2] | 0) + (HEAPU8[i13] | 0) | 0] | 0) + i15 | 0;
              i17 = i14 + 1 | 0;
              if ((i17 | 0) == (i7 | 0)) {
                break;
              } else {
                i13 = i13 + 1 | 0;
                i14 = i17;
                i15 = i16;
              }
            }
            i18 = i10 + i7 | 0;
            i19 = i16 & 255;
          } else {
            i18 = i10;
            i19 = 0;
          }
          HEAP8[i11] = i19;
          i15 = i12 - 1 | 0;
          if ((i15 | 0) == 0) {
            break L2899;
          } else {
            i10 = i18;
            i11 = i11 + 1 | 0;
            i12 = i15;
          }
        }
      }
    } while (0);
    i12 = i9 + 1 | 0;
    if ((i12 | 0) == (i4 | 0)) {
      break;
    } else {
      i9 = i12;
    }
  }
  return;
}
function _quantize3_ord_dither(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
  i5 = HEAP32[i1 + 460 >> 2] | 0;
  i6 = HEAP32[i5 + 24 >> 2] | 0;
  i7 = HEAP32[i6 >> 2] | 0;
  i8 = HEAP32[i6 + 4 >> 2] | 0;
  i9 = HEAP32[i6 + 8 >> 2] | 0;
  i6 = HEAP32[i1 + 112 >> 2] | 0;
  if ((i4 | 0) <= 0) {
    return;
  }
  i1 = i5 + 48 | 0;
  i10 = i5 + 52 | 0;
  i5 = i10 + 4 | 0;
  i11 = i10 + 8 | 0;
  i12 = (i6 | 0) == 0;
  i13 = i1 | 0;
  i14 = 0;
  i15 = HEAP32[i1 >> 2] | 0;
  while (1) {
    i1 = HEAP32[i10 >> 2] | 0;
    i16 = HEAP32[i5 >> 2] | 0;
    i17 = HEAP32[i11 >> 2] | 0;
    L2916 : do {
      if (!i12) {
        i18 = HEAP32[i3 + (i14 << 2) >> 2] | 0;
        i19 = 0;
        i20 = i6;
        i21 = HEAP32[i2 + (i14 << 2) >> 2] | 0;
        while (1) {
          HEAP8[i18] = ((HEAP8[i8 + ((HEAPU8[i21 + 1 | 0] | 0) + (HEAP32[i16 + (i15 << 6) + (i19 << 2) >> 2] | 0) | 0) | 0] | 0) + (HEAP8[i7 + ((HEAPU8[i21] | 0) + (HEAP32[i1 + (i15 << 6) + (i19 << 2) >> 2] | 0) | 0) | 0] | 0) & 255) + (HEAP8[i9 + ((HEAPU8[i21 + 2 | 0] | 0) + (HEAP32[i17 + (i15 << 6) + (i19 << 2) >> 2] | 0) | 0) | 0] | 0) & 255;
          i22 = i20 - 1 | 0;
          if ((i22 | 0) == 0) {
            break L2916;
          } else {
            i18 = i18 + 1 | 0;
            i19 = i19 + 1 & 15;
            i20 = i22;
            i21 = i21 + 3 | 0;
          }
        }
      }
    } while (0);
    i17 = i15 + 1 & 15;
    HEAP32[i13 >> 2] = i17;
    i1 = i14 + 1 | 0;
    if ((i1 | 0) == (i4 | 0)) {
      break;
    } else {
      i14 = i1;
      i15 = i17;
    }
  }
  return;
}
function _start_pass_1_quant(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
  i2 = i1 + 460 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  HEAP32[i1 + 136 >> 2] = HEAP32[i3 + 16 >> 2] | 0;
  HEAP32[i1 + 132 >> 2] = HEAP32[i3 + 20 >> 2] | 0;
  i4 = HEAP32[i1 + 88 >> 2] | 0;
  if ((i4 | 0) == 2) {
    HEAP32[i3 + 4 >> 2] = 74;
    HEAP32[i3 + 84 >> 2] = 0;
    i5 = i3 + 68 | 0;
    i6 = i5;
    L2927 : do {
      if ((HEAP32[i5 >> 2] | 0) == 0) {
        i7 = i1 + 112 | 0;
        i8 = (HEAP32[i7 >> 2] << 1) + 4 | 0;
        i9 = i1 + 120 | 0;
        if ((HEAP32[i9 >> 2] | 0) <= 0) {
          return;
        }
        i10 = i1 + 4 | 0;
        i11 = i1;
        i12 = (HEAP32[i2 >> 2] | 0) + 68 | 0;
        i13 = 0;
        while (1) {
          HEAP32[i12 + (i13 << 2) >> 2] = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] & 511](i11, 1, i8) | 0;
          i14 = i13 + 1 | 0;
          i15 = HEAP32[i9 >> 2] | 0;
          if ((i14 | 0) < (i15 | 0)) {
            i13 = i14;
          } else {
            i16 = i15;
            i17 = i7;
            break L2927;
          }
        }
      } else {
        i16 = HEAP32[i1 + 120 >> 2] | 0;
        i17 = i1 + 112 | 0;
      }
    } while (0);
    i5 = (HEAP32[i17 >> 2] << 1) + 4 | 0;
    i17 = i1 + 120 | 0;
    if ((i16 | 0) > 0) {
      i18 = 0;
    } else {
      return;
    }
    while (1) {
      _memset(HEAP32[i6 + (i18 << 2) >> 2] | 0, 0, i5 | 0);
      i16 = i18 + 1 | 0;
      if ((i16 | 0) < (HEAP32[i17 >> 2] | 0)) {
        i18 = i16;
      } else {
        break;
      }
    }
    return;
  } else if ((i4 | 0) == 1) {
    i18 = i1 + 120 | 0;
    HEAP32[i3 + 4 >> 2] = (HEAP32[i18 >> 2] | 0) == 3 ? 310 : 356;
    HEAP32[i3 + 48 >> 2] = 0;
    if ((HEAP32[i3 + 28 >> 2] | 0) == 0) {
      _create_colorindex(i1);
    }
    if ((HEAP32[i3 + 52 >> 2] | 0) != 0) {
      return;
    }
    i17 = HEAP32[i2 >> 2] | 0;
    if ((HEAP32[i18 >> 2] | 0) <= 0) {
      return;
    }
    i2 = i17 + 32 | 0;
    i5 = i17 + 52 | 0;
    i17 = i1 + 4 | 0;
    i6 = i1;
    i16 = 0;
    while (1) {
      i7 = HEAP32[i2 + (i16 << 2) >> 2] | 0;
      i13 = 0;
      while (1) {
        if ((i13 | 0) >= (i16 | 0)) {
          i19 = 2153;
          break;
        }
        if ((i7 | 0) == (HEAP32[i2 + (i13 << 2) >> 2] | 0)) {
          i19 = 2152;
          break;
        } else {
          i13 = i13 + 1 | 0;
        }
      }
      do {
        if ((i19 | 0) == 2152) {
          i19 = 0;
          i9 = HEAP32[i5 + (i13 << 2) >> 2] | 0;
          if ((i9 | 0) == 0) {
            i19 = 2153;
            break;
          } else {
            i20 = i9;
            break;
          }
        }
      } while (0);
      L2958 : do {
        if ((i19 | 0) == 2153) {
          i19 = 0;
          i13 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i17 >> 2] >> 2] & 511](i6, 1, 1024) | 0;
          i9 = (i7 << 9) - 512 | 0;
          i8 = 0;
          while (1) {
            i11 = 0;
            while (1) {
              i10 = (255 - ((HEAPU8[5261636 + (i8 << 4) + i11 | 0] | 0) << 1) | 0) * 255 & -1;
              if ((i10 | 0) < 0) {
                i21 = -((-i10 | 0) / (i9 | 0) & -1) | 0;
              } else {
                i21 = (i10 | 0) / (i9 | 0) & -1;
              }
              HEAP32[i13 + (i8 << 6) + (i11 << 2) >> 2] = i21;
              i10 = i11 + 1 | 0;
              if ((i10 | 0) == 16) {
                break;
              } else {
                i11 = i10;
              }
            }
            i11 = i8 + 1 | 0;
            if ((i11 | 0) == 16) {
              i20 = i13;
              break L2958;
            } else {
              i8 = i11;
            }
          }
        }
      } while (0);
      HEAP32[i5 + (i16 << 2) >> 2] = i20;
      i7 = i16 + 1 | 0;
      if ((i7 | 0) < (HEAP32[i18 >> 2] | 0)) {
        i16 = i7;
      } else {
        break;
      }
    }
    return;
  } else if ((i4 | 0) == 0) {
    i4 = i3 + 4 | 0;
    if ((HEAP32[i1 + 120 >> 2] | 0) == 3) {
      HEAP32[i4 >> 2] = 48;
      return;
    } else {
      HEAP32[i4 >> 2] = 236;
      return;
    }
  } else {
    i4 = i1 | 0;
    HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] = 48;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i4 >> 2] >> 2] & 511](i1);
    return;
  }
}
function _new_color_map_1_quant(i1) {
  i1 = i1 | 0;
  var i2 = 0;
  i2 = i1 | 0;
  HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] = 46;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[i2 >> 2] >> 2] & 511](i1);
  return;
}
function _create_colorindex(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
  i2 = HEAP32[i1 + 460 >> 2] | 0;
  i3 = (HEAP32[i1 + 88 >> 2] | 0) == 1;
  HEAP32[i2 + 28 >> 2] = i3 ? 1 : 0;
  i4 = i1 + 120 | 0;
  i5 = i2 + 24 | 0;
  HEAP32[i5 >> 2] = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i1 + 4 >> 2] | 0) + 8 >> 2] & 511](i1, 1, i3 ? 766 : 256, HEAP32[i4 >> 2] | 0) | 0;
  if ((HEAP32[i4 >> 2] | 0) <= 0) {
    return;
  }
  i1 = i2 + 32 | 0;
  i6 = 0;
  i7 = HEAP32[i2 + 20 >> 2] | 0;
  while (1) {
    i2 = HEAP32[i1 + (i6 << 2) >> 2] | 0;
    i8 = (i7 | 0) / (i2 | 0) & -1;
    if (i3) {
      i9 = (HEAP32[i5 >> 2] | 0) + (i6 << 2) | 0;
      HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 255 | 0;
    }
    i9 = HEAP32[(HEAP32[i5 >> 2] | 0) + (i6 << 2) >> 2] | 0;
    i10 = i2 - 1 | 0;
    i11 = i10 << 1;
    i12 = 0;
    i13 = (i2 + 254 | 0) / (i11 | 0) & -1;
    i2 = 0;
    while (1) {
      L2989 : do {
        if ((i12 | 0) > (i13 | 0)) {
          i14 = i2;
          while (1) {
            i15 = i14 + 1 | 0;
            i16 = (((i15 << 1 | 1) * 255 & -1) + i10 | 0) / (i11 | 0) & -1;
            if ((i12 | 0) > (i16 | 0)) {
              i14 = i15;
            } else {
              i17 = i16;
              i18 = i15;
              break L2989;
            }
          }
        } else {
          i17 = i13;
          i18 = i2;
        }
      } while (0);
      HEAP8[i9 + i12 | 0] = Math_imul(i18, i8) & 255;
      i14 = i12 + 1 | 0;
      if ((i14 | 0) == 256) {
        break;
      } else {
        i12 = i14;
        i13 = i17;
        i2 = i18;
      }
    }
    L2994 : do {
      if (i3) {
        i2 = i9 + 255 | 0;
        i13 = 1;
        while (1) {
          HEAP8[i9 + (-i13 | 0) | 0] = HEAP8[i9] | 0;
          HEAP8[i9 + (i13 + 255 | 0) | 0] = HEAP8[i2] | 0;
          i12 = i13 + 1 | 0;
          if ((i12 | 0) == 256) {
            break L2994;
          } else {
            i13 = i12;
          }
        }
      }
    } while (0);
    i9 = i6 + 1 | 0;
    if ((i9 | 0) < (HEAP32[i4 >> 2] | 0)) {
      i6 = i9;
      i7 = i8;
    } else {
      break;
    }
  }
  return;
}
function _quantize_ord_dither(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
  i5 = HEAP32[i1 + 460 >> 2] | 0;
  i6 = HEAP32[i1 + 120 >> 2] | 0;
  i7 = HEAP32[i1 + 112 >> 2] | 0;
  if ((i4 | 0) <= 0) {
    return;
  }
  i1 = i5 + 48 | 0;
  i8 = i1;
  i9 = (i6 | 0) > 0;
  i10 = i1 | 0;
  i1 = i5 + 24 | 0;
  i11 = i5 + 52 | 0;
  i5 = (i7 | 0) == 0;
  i12 = 0;
  while (1) {
    i13 = i3 + (i12 << 2) | 0;
    _memset(HEAP32[i13 >> 2] | 0, 0, i7 | 0);
    i14 = HEAP32[i8 >> 2] | 0;
    L3006 : do {
      if (i9) {
        i15 = i2 + (i12 << 2) | 0;
        i16 = 0;
        while (1) {
          i17 = HEAP32[(HEAP32[i1 >> 2] | 0) + (i16 << 2) >> 2] | 0;
          i18 = HEAP32[i11 + (i16 << 2) >> 2] | 0;
          L3010 : do {
            if (!i5) {
              i19 = 0;
              i20 = HEAP32[i13 >> 2] | 0;
              i21 = i7;
              i22 = (HEAP32[i15 >> 2] | 0) + i16 | 0;
              while (1) {
                HEAP8[i20] = (HEAP8[i20] | 0) + (HEAP8[i17 + ((HEAPU8[i22] | 0) + (HEAP32[i18 + (i14 << 6) + (i19 << 2) >> 2] | 0) | 0) | 0] | 0) & 255;
                i23 = i21 - 1 | 0;
                if ((i23 | 0) == 0) {
                  break L3010;
                } else {
                  i19 = i19 + 1 & 15;
                  i20 = i20 + 1 | 0;
                  i21 = i23;
                  i22 = i22 + i6 | 0;
                }
              }
            }
          } while (0);
          i18 = i16 + 1 | 0;
          if ((i18 | 0) == (i6 | 0)) {
            break L3006;
          } else {
            i16 = i18;
          }
        }
      }
    } while (0);
    HEAP32[i10 >> 2] = i14 + 1 & 15;
    i13 = i12 + 1 | 0;
    if ((i13 | 0) == (i4 | 0)) {
      break;
    } else {
      i12 = i13;
    }
  }
  return;
}
function _quantize_fs_dither(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0;
  i5 = HEAP32[i1 + 460 >> 2] | 0;
  i6 = HEAP32[i1 + 120 >> 2] | 0;
  i7 = HEAP32[i1 + 112 >> 2] | 0;
  i8 = HEAP32[i1 + 324 >> 2] | 0;
  if ((i4 | 0) <= 0) {
    return;
  }
  i1 = (i6 | 0) > 0;
  i9 = i5 + 84 | 0;
  i10 = i9;
  i11 = i5 + 68 | 0;
  i12 = i5 + 24 | 0;
  i13 = i5 + 16 | 0;
  i5 = (i7 | 0) == 0;
  i14 = i7 - 1 | 0;
  i15 = Math_imul(i14, i6);
  i16 = -i6 | 0;
  i17 = i7 + 1 | 0;
  i18 = 0;
  while (1) {
    i19 = i3 + (i18 << 2) | 0;
    _memset(HEAP32[i19 >> 2] | 0, 0, i7 | 0);
    L3023 : do {
      if (i1) {
        i20 = i2 + (i18 << 2) | 0;
        i21 = 0;
        while (1) {
          i22 = HEAP32[i19 >> 2] | 0;
          if ((HEAP32[i10 >> 2] | 0) == 0) {
            i23 = i6;
            i24 = 1;
            i25 = HEAP32[i11 + (i21 << 2) >> 2] | 0;
            i26 = i21;
            i27 = i22;
          } else {
            i23 = i16;
            i24 = -1;
            i25 = (HEAP32[i11 + (i21 << 2) >> 2] | 0) + (i17 << 1) | 0;
            i26 = i21 + i15 | 0;
            i27 = i22 + i14 | 0;
          }
          i22 = HEAP32[(HEAP32[i12 >> 2] | 0) + (i21 << 2) >> 2] | 0;
          i28 = HEAP32[(HEAP32[i13 >> 2] | 0) + (i21 << 2) >> 2] | 0;
          if (i5) {
            i29 = i25;
            i30 = 0;
          } else {
            i31 = (HEAP32[i20 >> 2] | 0) + i26 | 0;
            i32 = Math_imul(i7, i24);
            i33 = i27;
            i34 = i31;
            i31 = i25;
            i35 = 0;
            i36 = i7;
            i37 = 0;
            i38 = 0;
            while (1) {
              i39 = i31 + (i24 << 1) | 0;
              i40 = HEAPU8[i8 + (((i38 + 8 | 0) + (HEAP16[i39 >> 1] << 16 >> 16) >> 4) + (HEAPU8[i34] | 0) | 0) | 0] | 0;
              i41 = HEAP8[i22 + i40 | 0] | 0;
              HEAP8[i33] = (HEAP8[i33] | 0) + i41 & 255;
              i42 = i40 - (HEAPU8[i28 + (i41 & 255) | 0] | 0) | 0;
              i41 = i42 << 1;
              i40 = i41 + i42 | 0;
              HEAP16[i31 >> 1] = i40 + i35 & 65535;
              i43 = i40 + i41 | 0;
              i44 = i43 + i37 | 0;
              i40 = i36 - 1 | 0;
              if ((i40 | 0) == 0) {
                break;
              } else {
                i33 = i33 + i24 | 0;
                i34 = i34 + i23 | 0;
                i31 = i39;
                i35 = i44;
                i36 = i40;
                i37 = i42;
                i38 = i43 + i41 | 0;
              }
            }
            i29 = i25 + (i32 << 1) | 0;
            i30 = i44 & 65535;
          }
          HEAP16[i29 >> 1] = i30;
          i38 = i21 + 1 | 0;
          if ((i38 | 0) == (i6 | 0)) {
            break L3023;
          } else {
            i21 = i38;
          }
        }
      }
    } while (0);
    HEAP32[i9 >> 2] = (HEAP32[i10 >> 2] | 0) == 0 & 1;
    i19 = i18 + 1 | 0;
    if ((i19 | 0) == (i4 | 0)) {
      break;
    } else {
      i18 = i19;
    }
  }
  return;
}
function _start_pass_2_quant(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
  i3 = HEAP32[i1 + 460 >> 2] | 0;
  i4 = HEAP32[i3 + 24 >> 2] | 0;
  i5 = i1 + 88 | 0;
  if ((HEAP32[i5 >> 2] | 0) == 0) {
    i6 = 0;
  } else {
    HEAP32[i5 >> 2] = 2;
    i6 = 2;
  }
  do {
    if ((i2 | 0) == 0) {
      HEAP32[i3 + 4 >> 2] = (i6 | 0) == 2 ? 146 : 28;
      HEAP32[i3 + 8 >> 2] = 346;
      i7 = HEAP32[i1 + 132 >> 2] | 0;
      do {
        if ((i7 | 0) < 1) {
          i8 = i1 | 0;
          HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 56;
          HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = 1;
          FUNCTION_TABLE_vi[HEAP32[HEAP32[i8 >> 2] >> 2] & 511](i1);
        } else {
          if ((i7 | 0) <= 256) {
            break;
          }
          i8 = i1 | 0;
          HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 57;
          HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = 256;
          FUNCTION_TABLE_vi[HEAP32[HEAP32[i8 >> 2] >> 2] & 511](i1);
        }
      } while (0);
      if ((HEAP32[i5 >> 2] | 0) != 2) {
        break;
      }
      i7 = ((HEAP32[i1 + 112 >> 2] | 0) * 6 & -1) + 12 | 0;
      i8 = i3 + 32 | 0;
      i9 = HEAP32[i8 >> 2] | 0;
      if ((i9 | 0) == 0) {
        i10 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 + 4 >> 2] | 0) + 4 >> 2] & 511](i1, 1, i7) | 0;
        HEAP32[i8 >> 2] = i10;
        i11 = i10;
      } else {
        i11 = i9;
      }
      _memset(i11 | 0, 0, i7 | 0);
      if ((HEAP32[i3 + 40 >> 2] | 0) == 0) {
        _init_error_limit(i1);
      }
      HEAP32[i3 + 36 >> 2] = 0;
    } else {
      HEAP32[i3 + 4 >> 2] = 234;
      HEAP32[i3 + 8 >> 2] = 348;
      HEAP32[i3 + 28 >> 2] = 1;
    }
  } while (0);
  i1 = i3 + 28 | 0;
  if ((HEAP32[i1 >> 2] | 0) == 0) {
    return;
  } else {
    i12 = 0;
  }
  while (1) {
    _memset(HEAP32[i4 + (i12 << 2) >> 2] | 0, 0, 4096);
    i3 = i12 + 1 | 0;
    if ((i3 | 0) == 32) {
      break;
    } else {
      i12 = i3;
    }
  }
  HEAP32[i1 >> 2] = 0;
  return;
}
function _finish_pass2(i1) {
  i1 = i1 | 0;
  return;
}
function _new_color_map_2_quant(i1) {
  i1 = i1 | 0;
  HEAP32[(HEAP32[i1 + 460 >> 2] | 0) + 28 >> 2] = 1;
  return;
}
function _prescan_quantize(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
  i3 = HEAP32[(HEAP32[i1 + 460 >> 2] | 0) + 24 >> 2] | 0;
  i5 = HEAP32[i1 + 112 >> 2] | 0;
  if ((i4 | 0) <= 0) {
    return;
  }
  i1 = (i5 | 0) == 0;
  i6 = 0;
  while (1) {
    L3073 : do {
      if (!i1) {
        i7 = i5;
        i8 = HEAP32[i2 + (i6 << 2) >> 2] | 0;
        while (1) {
          i9 = (HEAP32[i3 + ((HEAPU8[i8] | 0) >>> 3 << 2) >> 2] | 0) + ((HEAPU8[i8 + 1 | 0] | 0) >>> 2 << 6) + ((HEAPU8[i8 + 2 | 0] | 0) >>> 3 << 1) | 0;
          i10 = HEAP16[i9 >> 1] | 0;
          i11 = i10 + 1 & 65535;
          HEAP16[i9 >> 1] = i11 << 16 >> 16 == 0 ? i10 : i11;
          i11 = i7 - 1 | 0;
          if ((i11 | 0) == 0) {
            break L3073;
          } else {
            i7 = i11;
            i8 = i8 + 3 | 0;
          }
        }
      }
    } while (0);
    i8 = i6 + 1 | 0;
    if ((i8 | 0) == (i4 | 0)) {
      break;
    } else {
      i6 = i8;
    }
  }
  return;
}
function _init_error_limit(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
  i2 = HEAP32[i1 + 460 >> 2] | 0;
  i3 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i1 + 4 >> 2] >> 2] & 511](i1, 1, 2044) | 0;
  i1 = i3 + 1020 | 0;
  i4 = i1;
  HEAP32[i2 + 40 >> 2] = i1;
  HEAP32[i4 >> 2] = 0;
  HEAP32[i3 + 1024 >> 2] = 1;
  HEAP32[i3 + 1016 >> 2] = -1;
  HEAP32[i3 + 1028 >> 2] = 2;
  HEAP32[i3 + 1012 >> 2] = -2;
  HEAP32[i3 + 1032 >> 2] = 3;
  HEAP32[i3 + 1008 >> 2] = -3;
  HEAP32[i3 + 1036 >> 2] = 4;
  HEAP32[i3 + 1004 >> 2] = -4;
  HEAP32[i3 + 1040 >> 2] = 5;
  HEAP32[i3 + 1e3 >> 2] = -5;
  HEAP32[i3 + 1044 >> 2] = 6;
  HEAP32[i3 + 996 >> 2] = -6;
  HEAP32[i3 + 1048 >> 2] = 7;
  HEAP32[i3 + 992 >> 2] = -7;
  HEAP32[i3 + 1052 >> 2] = 8;
  HEAP32[i3 + 988 >> 2] = -8;
  HEAP32[i3 + 1056 >> 2] = 9;
  HEAP32[i3 + 984 >> 2] = -9;
  HEAP32[i3 + 1060 >> 2] = 10;
  HEAP32[i3 + 980 >> 2] = -10;
  HEAP32[i3 + 1064 >> 2] = 11;
  HEAP32[i3 + 976 >> 2] = -11;
  HEAP32[i3 + 1068 >> 2] = 12;
  HEAP32[i3 + 972 >> 2] = -12;
  HEAP32[i3 + 1072 >> 2] = 13;
  HEAP32[i3 + 968 >> 2] = -13;
  HEAP32[i3 + 1076 >> 2] = 14;
  HEAP32[i3 + 964 >> 2] = -14;
  HEAP32[i3 + 1080 >> 2] = 15;
  HEAP32[i3 + 960 >> 2] = -15;
  i3 = 16;
  i1 = 16;
  while (1) {
    HEAP32[i4 + (i3 << 2) >> 2] = i1;
    HEAP32[i4 + (-i3 << 2) >> 2] = -i1 | 0;
    i2 = i3 + 1 | 0;
    i5 = (i2 & 1 ^ 1) + i1 | 0;
    if ((i2 | 0) == 48) {
      break;
    } else {
      i3 = i2;
      i1 = i5;
    }
  }
  i1 = -i5 | 0;
  i3 = 48;
  while (1) {
    HEAP32[i4 + (i3 << 2) >> 2] = i5;
    HEAP32[i4 + (-i3 << 2) >> 2] = i1;
    i2 = i3 + 1 | 0;
    if ((i2 | 0) == 256) {
      break;
    } else {
      i3 = i2;
    }
  }
  return;
}
function _finish_pass1(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0;
  i2 = i1 + 460 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  i4 = i1 + 136 | 0;
  HEAP32[i4 >> 2] = HEAP32[i3 + 16 >> 2] | 0;
  i5 = HEAP32[i3 + 20 >> 2] | 0;
  i6 = i1;
  i7 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i1 + 4 >> 2] >> 2] & 511](i6, 1, i5 << 5) | 0;
  i8 = i7;
  HEAP32[i7 >> 2] = 0;
  HEAP32[i7 + 4 >> 2] = 31;
  HEAP32[i7 + 8 >> 2] = 0;
  HEAP32[i7 + 12 >> 2] = 63;
  HEAP32[i7 + 16 >> 2] = 0;
  HEAP32[i7 + 20 >> 2] = 31;
  _update_box(HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] | 0, i8);
  do {
    if ((i5 | 0) > 1) {
      i7 = 1;
      while (1) {
        L3090 : do {
          if ((i7 << 1 | 0) > (i5 | 0)) {
            i9 = i8;
            i10 = 0;
            i11 = 0;
            i12 = 0;
            while (1) {
              i13 = HEAP32[i9 + 24 >> 2] | 0;
              i14 = (i13 | 0) > (i11 | 0);
              i15 = i14 ? i9 : i12;
              i16 = i10 + 1 | 0;
              if ((i16 | 0) == (i7 | 0)) {
                i17 = i15;
                break L3090;
              } else {
                i9 = i9 + 32 | 0;
                i10 = i16;
                i11 = i14 ? i13 : i11;
                i12 = i15;
              }
            }
          } else {
            i12 = i8;
            i11 = 0;
            i10 = 0;
            i9 = 0;
            while (1) {
              i15 = HEAP32[i12 + 28 >> 2] | 0;
              if ((i15 | 0) > (i10 | 0)) {
                i13 = (HEAP32[i12 + 24 >> 2] | 0) > 0;
                i18 = i13 ? i12 : i9;
                i19 = i13 ? i15 : i10;
              } else {
                i18 = i9;
                i19 = i10;
              }
              i15 = i11 + 1 | 0;
              if ((i15 | 0) == (i7 | 0)) {
                i17 = i18;
                break L3090;
              } else {
                i12 = i12 + 32 | 0;
                i11 = i15;
                i10 = i19;
                i9 = i18;
              }
            }
          }
        } while (0);
        if ((i17 | 0) == 0) {
          i20 = i7;
          break;
        }
        i9 = i8 + (i7 << 5) | 0;
        i10 = i17 + 4 | 0;
        HEAP32[i8 + (i7 << 5) + 4 >> 2] = HEAP32[i10 >> 2] | 0;
        i11 = i17 + 12 | 0;
        HEAP32[i8 + (i7 << 5) + 12 >> 2] = HEAP32[i11 >> 2] | 0;
        i12 = i17 + 20 | 0;
        HEAP32[i8 + (i7 << 5) + 20 >> 2] = HEAP32[i12 >> 2] | 0;
        i15 = i17 | 0;
        i13 = i9 | 0;
        HEAP32[i13 >> 2] = HEAP32[i15 >> 2] | 0;
        i14 = i17 + 8 | 0;
        i16 = i8 + (i7 << 5) + 8 | 0;
        HEAP32[i16 >> 2] = HEAP32[i14 >> 2] | 0;
        i21 = i17 + 16 | 0;
        i22 = i8 + (i7 << 5) + 16 | 0;
        HEAP32[i22 >> 2] = HEAP32[i21 >> 2] | 0;
        i23 = HEAP32[i10 >> 2] | 0;
        i24 = HEAP32[i15 >> 2] | 0;
        i15 = i23 - i24 << 4;
        i25 = HEAP32[i11 >> 2] | 0;
        i26 = HEAP32[i14 >> 2] | 0;
        i14 = (i25 - i26 | 0) * 12 & -1;
        i27 = HEAP32[i12 >> 2] | 0;
        i28 = HEAP32[i21 >> 2] | 0;
        i21 = (i15 | 0) > (i14 | 0);
        i29 = (i27 - i28 << 3 | 0) > ((i21 ? i15 : i14) | 0) ? 2 : i21 & 1 ^ 1;
        if ((i29 | 0) == 1) {
          i21 = (i26 + i25 | 0) / 2 & -1;
          HEAP32[i11 >> 2] = i21;
          HEAP32[i16 >> 2] = i21 + 1 | 0;
        } else if ((i29 | 0) == 2) {
          i21 = (i28 + i27 | 0) / 2 & -1;
          HEAP32[i12 >> 2] = i21;
          HEAP32[i22 >> 2] = i21 + 1 | 0;
        } else if ((i29 | 0) == 0) {
          i29 = (i24 + i23 | 0) / 2 & -1;
          HEAP32[i10 >> 2] = i29;
          HEAP32[i13 >> 2] = i29 + 1 | 0;
        }
        _update_box(HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] | 0, i17);
        _update_box(HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] | 0, i9);
        i9 = i7 + 1 | 0;
        if ((i9 | 0) < (i5 | 0)) {
          i7 = i9;
        } else {
          i20 = i9;
          break;
        }
      }
      if ((i20 | 0) > 0) {
        i30 = i20;
        break;
      } else {
        i31 = i20;
      }
      i32 = i1 + 132 | 0;
      HEAP32[i32 >> 2] = i31;
      i33 = i1 | 0;
      i34 = HEAP32[i33 >> 2] | 0;
      i35 = i34 + 20 | 0;
      HEAP32[i35 >> 2] = 96;
      i36 = HEAP32[i33 >> 2] | 0;
      i37 = i36 + 24 | 0;
      HEAP32[i37 >> 2] = i31;
      i38 = HEAP32[i33 >> 2] | 0;
      i39 = i38 + 4 | 0;
      i40 = HEAP32[i39 >> 2] | 0;
      FUNCTION_TABLE_vii[i40 & 511](i6, 1);
      i41 = i3 + 28 | 0;
      HEAP32[i41 >> 2] = 1;
      return;
    } else {
      i30 = 1;
    }
  } while (0);
  i20 = 0;
  while (1) {
    i5 = HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] | 0;
    i17 = HEAP32[i8 + (i20 << 5) >> 2] | 0;
    i18 = HEAP32[i8 + (i20 << 5) + 4 >> 2] | 0;
    i19 = HEAP32[i8 + (i20 << 5) + 8 >> 2] | 0;
    i7 = HEAP32[i8 + (i20 << 5) + 12 >> 2] | 0;
    i9 = HEAP32[i8 + (i20 << 5) + 16 >> 2] | 0;
    i29 = HEAP32[i8 + (i20 << 5) + 20 >> 2] | 0;
    L3110 : do {
      if ((i17 | 0) > (i18 | 0)) {
        i42 = 0;
        i43 = 0;
        i44 = 0;
        i45 = 0;
      } else {
        i13 = (i19 | 0) > (i7 | 0);
        i10 = (i9 | 0) > (i29 | 0);
        i23 = i17;
        i24 = 0;
        i21 = 0;
        i22 = 0;
        i12 = 0;
        while (1) {
          L3114 : do {
            if (i13) {
              i46 = i24;
              i47 = i21;
              i48 = i22;
              i49 = i12;
            } else {
              i27 = HEAP32[i5 + (i23 << 2) >> 2] | 0;
              i28 = i23 << 3 | 4;
              i16 = i19;
              i11 = i24;
              i25 = i21;
              i26 = i22;
              i14 = i12;
              while (1) {
                L3118 : do {
                  if (i10) {
                    i50 = i11;
                    i51 = i25;
                    i52 = i26;
                    i53 = i14;
                  } else {
                    i15 = i16 << 2 | 2;
                    i54 = i9;
                    i55 = i27 + (i16 << 6) + (i9 << 1) | 0;
                    i56 = i11;
                    i57 = i25;
                    i58 = i26;
                    i59 = i14;
                    while (1) {
                      i60 = HEAP16[i55 >> 1] | 0;
                      i61 = i60 & 65535;
                      if (i60 << 16 >> 16 == 0) {
                        i62 = i59;
                        i63 = i58;
                        i64 = i57;
                        i65 = i56;
                      } else {
                        i60 = Math_imul(i61, i28) + i57 | 0;
                        i66 = Math_imul(i61, i15) + i58 | 0;
                        i62 = Math_imul(i61, i54 << 3 | 4) + i59 | 0;
                        i63 = i66;
                        i64 = i60;
                        i65 = i61 + i56 | 0;
                      }
                      i61 = i54 + 1 | 0;
                      if ((i61 | 0) > (i29 | 0)) {
                        i50 = i65;
                        i51 = i64;
                        i52 = i63;
                        i53 = i62;
                        break L3118;
                      } else {
                        i54 = i61;
                        i55 = i55 + 2 | 0;
                        i56 = i65;
                        i57 = i64;
                        i58 = i63;
                        i59 = i62;
                      }
                    }
                  }
                } while (0);
                i59 = i16 + 1 | 0;
                if ((i59 | 0) > (i7 | 0)) {
                  i46 = i50;
                  i47 = i51;
                  i48 = i52;
                  i49 = i53;
                  break L3114;
                } else {
                  i16 = i59;
                  i11 = i50;
                  i25 = i51;
                  i26 = i52;
                  i14 = i53;
                }
              }
            }
          } while (0);
          i14 = i23 + 1 | 0;
          if ((i14 | 0) > (i18 | 0)) {
            i42 = i46;
            i43 = i47;
            i44 = i48;
            i45 = i49;
            break L3110;
          } else {
            i23 = i14;
            i24 = i46;
            i21 = i47;
            i22 = i48;
            i12 = i49;
          }
        }
      }
    } while (0);
    i18 = i42 >> 1;
    HEAP8[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + i20 | 0] = (i18 + i43 | 0) / (i42 | 0) & -1 & 255;
    HEAP8[(HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) + i20 | 0] = (i18 + i44 | 0) / (i42 | 0) & -1 & 255;
    HEAP8[(HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) + i20 | 0] = (i18 + i45 | 0) / (i42 | 0) & -1 & 255;
    i18 = i20 + 1 | 0;
    if ((i18 | 0) == (i30 | 0)) {
      i31 = i30;
      break;
    } else {
      i20 = i18;
    }
  }
  i32 = i1 + 132 | 0;
  HEAP32[i32 >> 2] = i31;
  i33 = i1 | 0;
  i34 = HEAP32[i33 >> 2] | 0;
  i35 = i34 + 20 | 0;
  HEAP32[i35 >> 2] = 96;
  i36 = HEAP32[i33 >> 2] | 0;
  i37 = i36 + 24 | 0;
  HEAP32[i37 >> 2] = i31;
  i38 = HEAP32[i33 >> 2] | 0;
  i39 = i38 + 4 | 0;
  i40 = HEAP32[i39 >> 2] | 0;
  FUNCTION_TABLE_vii[i40 & 511](i6, 1);
  i41 = i3 + 28 | 0;
  HEAP32[i41 >> 2] = 1;
  return;
}
function _pass2_fs_dither(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0;
  i5 = HEAP32[i1 + 460 >> 2] | 0;
  i6 = HEAP32[i5 + 24 >> 2] | 0;
  i7 = HEAP32[i1 + 112 >> 2] | 0;
  i8 = HEAP32[i1 + 324 >> 2] | 0;
  i9 = HEAP32[i5 + 40 >> 2] | 0;
  i10 = HEAP32[i1 + 136 >> 2] | 0;
  i11 = HEAP32[i10 >> 2] | 0;
  i12 = HEAP32[i10 + 4 >> 2] | 0;
  i13 = HEAP32[i10 + 8 >> 2] | 0;
  if ((i4 | 0) <= 0) {
    return;
  }
  i10 = i5 + 36 | 0;
  i14 = i10;
  i15 = i5 + 32 | 0;
  i5 = (i7 | 0) == 0;
  i16 = i7 - 1 | 0;
  i17 = i16 * 3 & -1;
  i18 = (i7 * 3 & -1) + 3 | 0;
  i19 = 0;
  while (1) {
    i20 = HEAP32[i2 + (i19 << 2) >> 2] | 0;
    i21 = HEAP32[i3 + (i19 << 2) >> 2] | 0;
    if ((HEAP32[i14 >> 2] | 0) == 0) {
      i22 = 3;
      i23 = 1;
      i24 = HEAP32[i15 >> 2] | 0;
      i25 = i21;
      i26 = i20;
      i27 = 1;
    } else {
      i22 = -3;
      i23 = -1;
      i24 = (HEAP32[i15 >> 2] | 0) + (i18 << 1) | 0;
      i25 = i21 + i16 | 0;
      i26 = i20 + i17 | 0;
      i27 = 0;
    }
    HEAP32[i10 >> 2] = i27;
    if (i5) {
      i28 = i24;
      i29 = 0;
      i30 = 0;
      i31 = 0;
    } else {
      i20 = i22 + 1 | 0;
      i21 = i22 + 2 | 0;
      i32 = Math_imul(i7, i22);
      i33 = i26;
      i34 = i25;
      i35 = i24;
      i36 = i7;
      i37 = 0;
      i38 = 0;
      i39 = 0;
      i40 = 0;
      i41 = 0;
      i42 = 0;
      i43 = 0;
      i44 = 0;
      i45 = 0;
      while (1) {
        i46 = i35 + (i22 << 1) | 0;
        i47 = HEAPU8[i8 + ((HEAPU8[i33] | 0) + (HEAP32[i9 + ((i45 + 8 | 0) + (HEAP16[i46 >> 1] << 16 >> 16) >> 4 << 2) >> 2] | 0) | 0) | 0] | 0;
        i48 = HEAPU8[i8 + ((HEAPU8[i33 + 1 | 0] | 0) + (HEAP32[i9 + ((i44 + 8 | 0) + (HEAP16[i35 + (i20 << 1) >> 1] << 16 >> 16) >> 4 << 2) >> 2] | 0) | 0) | 0] | 0;
        i49 = HEAPU8[i8 + ((HEAPU8[i33 + 2 | 0] | 0) + (HEAP32[i9 + ((i43 + 8 | 0) + (HEAP16[i35 + (i21 << 1) >> 1] << 16 >> 16) >> 4 << 2) >> 2] | 0) | 0) | 0] | 0;
        i50 = i49 >>> 3;
        i51 = i48 >>> 2;
        i52 = i47 >>> 3;
        i53 = (HEAP32[i6 + (i52 << 2) >> 2] | 0) + (i51 << 6) + (i50 << 1) | 0;
        i54 = HEAP16[i53 >> 1] | 0;
        if (i54 << 16 >> 16 == 0) {
          _fill_inverse_cmap(i1, i52, i51, i50);
          i55 = HEAP16[i53 >> 1] | 0;
        } else {
          i55 = i54;
        }
        i54 = (i55 & 65535) - 1 | 0;
        HEAP8[i34] = i54 & 255;
        i53 = i47 - (HEAPU8[i11 + i54 | 0] | 0) | 0;
        i47 = i48 - (HEAPU8[i12 + i54 | 0] | 0) | 0;
        i48 = i49 - (HEAPU8[i13 + i54 | 0] | 0) | 0;
        i54 = i53 << 1;
        i49 = i54 + i53 | 0;
        HEAP16[i35 >> 1] = i49 + i39 & 65535;
        i50 = i49 + i54 | 0;
        i56 = i50 + i42 | 0;
        i49 = i47 << 1;
        i51 = i49 + i47 | 0;
        HEAP16[i35 + 2 >> 1] = i51 + i38 & 65535;
        i52 = i51 + i49 | 0;
        i57 = i52 + i41 | 0;
        i51 = i48 << 1;
        i58 = i51 + i48 | 0;
        HEAP16[i35 + 4 >> 1] = i58 + i37 & 65535;
        i59 = i58 + i51 | 0;
        i60 = i59 + i40 | 0;
        i58 = i36 - 1 | 0;
        if ((i58 | 0) == 0) {
          break;
        } else {
          i33 = i33 + i22 | 0;
          i34 = i34 + i23 | 0;
          i35 = i46;
          i36 = i58;
          i37 = i60;
          i38 = i57;
          i39 = i56;
          i40 = i48;
          i41 = i47;
          i42 = i53;
          i43 = i59 + i51 | 0;
          i44 = i52 + i49 | 0;
          i45 = i50 + i54 | 0;
        }
      }
      i28 = i24 + (i32 << 1) | 0;
      i29 = i60 & 65535;
      i30 = i57 & 65535;
      i31 = i56 & 65535;
    }
    HEAP16[i28 >> 1] = i31;
    HEAP16[i28 + 2 >> 1] = i30;
    HEAP16[i28 + 4 >> 1] = i29;
    i45 = i19 + 1 | 0;
    if ((i45 | 0) == (i4 | 0)) {
      break;
    } else {
      i19 = i45;
    }
  }
  return;
}
function _pass2_no_dither(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
  i5 = HEAP32[(HEAP32[i1 + 460 >> 2] | 0) + 24 >> 2] | 0;
  i6 = HEAP32[i1 + 112 >> 2] | 0;
  if ((i4 | 0) <= 0) {
    return;
  }
  i7 = (i6 | 0) == 0;
  i8 = 0;
  while (1) {
    L3155 : do {
      if (!i7) {
        i9 = HEAP32[i3 + (i8 << 2) >> 2] | 0;
        i10 = i6;
        i11 = HEAP32[i2 + (i8 << 2) >> 2] | 0;
        while (1) {
          i12 = (HEAPU8[i11] | 0) >>> 3;
          i13 = (HEAPU8[i11 + 1 | 0] | 0) >>> 2;
          i14 = (HEAPU8[i11 + 2 | 0] | 0) >>> 3;
          i15 = (HEAP32[i5 + (i12 << 2) >> 2] | 0) + (i13 << 6) + (i14 << 1) | 0;
          i16 = HEAP16[i15 >> 1] | 0;
          if (i16 << 16 >> 16 == 0) {
            _fill_inverse_cmap(i1, i12, i13, i14);
            i17 = HEAP16[i15 >> 1] | 0;
          } else {
            i17 = i16;
          }
          HEAP8[i9] = (i17 & 255) - 1 & 255;
          i16 = i10 - 1 | 0;
          if ((i16 | 0) == 0) {
            break L3155;
          } else {
            i9 = i9 + 1 | 0;
            i10 = i16;
            i11 = i11 + 3 | 0;
          }
        }
      }
    } while (0);
    i11 = i8 + 1 | 0;
    if ((i11 | 0) == (i4 | 0)) {
      break;
    } else {
      i8 = i11;
    }
  }
  return;
}
function _fill_inverse_cmap(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0;
  i5 = STACKTOP;
  STACKTOP = STACKTOP + 1920 | 0;
  i6 = i5 | 0;
  i7 = i5 + 512 | 0;
  i8 = i5 + 1536 | 0;
  i9 = i5 + 1792 | 0;
  i10 = HEAP32[(HEAP32[i1 + 460 >> 2] | 0) + 24 >> 2] | 0;
  i11 = i2 >> 2;
  i2 = i3 >> 3;
  i3 = i4 >> 2;
  i4 = i11 << 5;
  i12 = i4 | 4;
  i13 = i2 << 5;
  i14 = i13 | 2;
  i15 = i3 << 5;
  i16 = i15 | 4;
  i17 = HEAP32[i1 + 132 >> 2] | 0;
  i18 = i4 | 28;
  i4 = i18 + i12 >> 1;
  i19 = i13 | 30;
  i13 = i19 + i14 >> 1;
  i20 = i15 | 28;
  i15 = i20 + i16 >> 1;
  L3165 : do {
    if ((i17 | 0) > 0) {
      i21 = HEAP32[i1 + 136 >> 2] | 0;
      i22 = HEAP32[i21 >> 2] | 0;
      i23 = HEAP32[i21 + 4 >> 2] | 0;
      i24 = HEAP32[i21 + 8 >> 2] | 0;
      i21 = 0;
      i25 = 2147483647;
      while (1) {
        i26 = HEAPU8[i22 + i21 | 0] | 0;
        do {
          if ((i26 | 0) < (i12 | 0)) {
            i27 = i26 - i12 << 1;
            i28 = Math_imul(i27, i27);
            i27 = i26 - i18 << 1;
            i29 = Math_imul(i27, i27);
            i30 = i28;
          } else {
            if ((i26 | 0) > (i18 | 0)) {
              i28 = i26 - i18 << 1;
              i27 = Math_imul(i28, i28);
              i28 = i26 - i12 << 1;
              i29 = Math_imul(i28, i28);
              i30 = i27;
              break;
            }
            if ((i26 | 0) > (i4 | 0)) {
              i27 = i26 - i12 << 1;
              i29 = Math_imul(i27, i27);
              i30 = 0;
              break;
            } else {
              i27 = i26 - i18 << 1;
              i29 = Math_imul(i27, i27);
              i30 = 0;
              break;
            }
          }
        } while (0);
        i26 = HEAPU8[i23 + i21 | 0] | 0;
        do {
          if ((i26 | 0) < (i14 | 0)) {
            i27 = (i26 - i14 | 0) * 3 & -1;
            i28 = Math_imul(i27, i27) + i30 | 0;
            i27 = (i26 - i19 | 0) * 3 & -1;
            i31 = Math_imul(i27, i27);
            i32 = i28;
          } else {
            if ((i26 | 0) > (i19 | 0)) {
              i28 = (i26 - i19 | 0) * 3 & -1;
              i27 = Math_imul(i28, i28) + i30 | 0;
              i28 = (i26 - i14 | 0) * 3 & -1;
              i31 = Math_imul(i28, i28);
              i32 = i27;
              break;
            }
            if ((i26 | 0) > (i13 | 0)) {
              i27 = (i26 - i14 | 0) * 3 & -1;
              i31 = Math_imul(i27, i27);
              i32 = i30;
              break;
            } else {
              i27 = (i26 - i19 | 0) * 3 & -1;
              i31 = Math_imul(i27, i27);
              i32 = i30;
              break;
            }
          }
        } while (0);
        i26 = i31 + i29 | 0;
        i27 = HEAPU8[i24 + i21 | 0] | 0;
        do {
          if ((i27 | 0) < (i16 | 0)) {
            i28 = i27 - i16 | 0;
            i33 = Math_imul(i28, i28) + i32 | 0;
            i28 = i27 - i20 | 0;
            i34 = Math_imul(i28, i28);
            i35 = i33;
          } else {
            if ((i27 | 0) > (i20 | 0)) {
              i33 = i27 - i20 | 0;
              i28 = Math_imul(i33, i33) + i32 | 0;
              i33 = i27 - i16 | 0;
              i34 = Math_imul(i33, i33);
              i35 = i28;
              break;
            }
            if ((i27 | 0) > (i15 | 0)) {
              i28 = i27 - i16 | 0;
              i34 = Math_imul(i28, i28);
              i35 = i32;
              break;
            } else {
              i28 = i27 - i20 | 0;
              i34 = Math_imul(i28, i28);
              i35 = i32;
              break;
            }
          }
        } while (0);
        i27 = i26 + i34 | 0;
        HEAP32[i7 + (i21 << 2) >> 2] = i35;
        i36 = (i27 | 0) < (i25 | 0) ? i27 : i25;
        i27 = i21 + 1 | 0;
        if ((i27 | 0) == (i17 | 0)) {
          i37 = 0;
          i38 = 0;
          break;
        } else {
          i21 = i27;
          i25 = i36;
        }
      }
      while (1) {
        if ((HEAP32[i7 + (i37 << 2) >> 2] | 0) > (i36 | 0)) {
          i39 = i38;
        } else {
          HEAP8[i8 + i38 | 0] = i37 & 255;
          i39 = i38 + 1 | 0;
        }
        i25 = i37 + 1 | 0;
        if ((i25 | 0) == (i17 | 0)) {
          i40 = i39;
          break L3165;
        } else {
          i37 = i25;
          i38 = i39;
        }
      }
    } else {
      i40 = 0;
    }
  } while (0);
  i39 = i6 | 0;
  i6 = 127;
  i38 = i39;
  while (1) {
    HEAP32[i38 >> 2] = 2147483647;
    if ((i6 | 0) > 0) {
      i6 = i6 - 1 | 0;
      i38 = i38 + 4 | 0;
    } else {
      break;
    }
  }
  i38 = i9 | 0;
  L3208 : do {
    if ((i40 | 0) > 0) {
      i6 = i1 + 136 | 0;
      i37 = 0;
      while (1) {
        i17 = HEAP8[i8 + i37 | 0] | 0;
        i36 = i17 & 255;
        i7 = HEAP32[i6 >> 2] | 0;
        i35 = i12 - (HEAPU8[(HEAP32[i7 >> 2] | 0) + i36 | 0] | 0) | 0;
        i34 = i35 << 1;
        i32 = Math_imul(i34, i34);
        i34 = i14 - (HEAPU8[(HEAP32[i7 + 4 >> 2] | 0) + i36 | 0] | 0) | 0;
        i20 = i34 * 3 & -1;
        i15 = Math_imul(i20, i20) + i32 | 0;
        i32 = i16 - (HEAPU8[(HEAP32[i7 + 8 >> 2] | 0) + i36 | 0] | 0) | 0;
        i36 = (i34 * 72 & -1) + 144 | 0;
        i34 = i32 << 4;
        i7 = i34 + 64 | 0;
        i20 = i34 + 192 | 0;
        i29 = i34 + 320 | 0;
        i34 = i39;
        i31 = i38;
        i30 = i15 + Math_imul(i32, i32) | 0;
        i32 = (i35 << 6) + 256 | 0;
        i35 = 3;
        while (1) {
          i15 = 7;
          i19 = i34;
          i13 = i31;
          i18 = i30;
          i4 = i36;
          while (1) {
            if ((i18 | 0) < (HEAP32[i19 >> 2] | 0)) {
              HEAP32[i19 >> 2] = i18;
              HEAP8[i13] = i17;
            }
            i25 = i7 + i18 | 0;
            i21 = i19 + 4 | 0;
            if ((i25 | 0) < (HEAP32[i21 >> 2] | 0)) {
              HEAP32[i21 >> 2] = i25;
              HEAP8[i13 + 1 | 0] = i17;
            }
            i21 = i20 + i25 | 0;
            i25 = i19 + 8 | 0;
            if ((i21 | 0) < (HEAP32[i25 >> 2] | 0)) {
              HEAP32[i25 >> 2] = i21;
              HEAP8[i13 + 2 | 0] = i17;
            }
            i25 = i29 + i21 | 0;
            i21 = i19 + 12 | 0;
            if ((i25 | 0) < (HEAP32[i21 >> 2] | 0)) {
              HEAP32[i21 >> 2] = i25;
              HEAP8[i13 + 3 | 0] = i17;
            }
            if ((i15 | 0) > 0) {
              i15 = i15 - 1 | 0;
              i19 = i19 + 16 | 0;
              i13 = i13 + 4 | 0;
              i18 = i18 + i4 | 0;
              i4 = i4 + 288 | 0;
            } else {
              break;
            }
          }
          if ((i35 | 0) > 0) {
            i34 = i34 + 128 | 0;
            i31 = i31 + 32 | 0;
            i30 = i30 + i32 | 0;
            i32 = i32 + 512 | 0;
            i35 = i35 - 1 | 0;
          } else {
            break;
          }
        }
        i35 = i37 + 1 | 0;
        if ((i35 | 0) == (i40 | 0)) {
          break L3208;
        } else {
          i37 = i35;
        }
      }
    }
  } while (0);
  i40 = i11 << 2;
  i11 = i2 << 3;
  i2 = i3 << 2;
  i3 = i10 + (i40 << 2) | 0;
  i39 = i2 | 1;
  i16 = i39 + 1 | 0;
  i14 = i2 | 3;
  i12 = 0;
  i8 = i38;
  while (1) {
    i38 = i12 + i11 | 0;
    i1 = HEAP32[i3 >> 2] | 0;
    HEAP16[i1 + (i38 << 6) + (i2 << 1) >> 1] = (HEAPU8[i8] | 0) + 1 & 65535;
    HEAP16[i1 + (i38 << 6) + (i39 << 1) >> 1] = (HEAPU8[i8 + 1 | 0] | 0) + 1 & 65535;
    HEAP16[i1 + (i38 << 6) + (i16 << 1) >> 1] = (HEAPU8[i8 + 2 | 0] | 0) + 1 & 65535;
    HEAP16[i1 + (i38 << 6) + (i14 << 1) >> 1] = (HEAPU8[i8 + 3 | 0] | 0) + 1 & 65535;
    i38 = i12 + 1 | 0;
    if ((i38 | 0) == 8) {
      break;
    } else {
      i12 = i38;
      i8 = i8 + 4 | 0;
    }
  }
  i8 = i10 + ((i40 | 1) << 2) | 0;
  i12 = 0;
  i3 = i9 + 32 | 0;
  while (1) {
    i38 = i12 + i11 | 0;
    i1 = HEAP32[i8 >> 2] | 0;
    HEAP16[i1 + (i38 << 6) + (i2 << 1) >> 1] = (HEAPU8[i3] | 0) + 1 & 65535;
    HEAP16[i1 + (i38 << 6) + (i39 << 1) >> 1] = (HEAPU8[i3 + 1 | 0] | 0) + 1 & 65535;
    HEAP16[i1 + (i38 << 6) + (i16 << 1) >> 1] = (HEAPU8[i3 + 2 | 0] | 0) + 1 & 65535;
    HEAP16[i1 + (i38 << 6) + (i14 << 1) >> 1] = (HEAPU8[i3 + 3 | 0] | 0) + 1 & 65535;
    i38 = i12 + 1 | 0;
    if ((i38 | 0) == 8) {
      break;
    } else {
      i12 = i38;
      i3 = i3 + 4 | 0;
    }
  }
  i3 = i10 + ((i40 | 2) << 2) | 0;
  i12 = 0;
  i8 = i9 + 64 | 0;
  while (1) {
    i38 = i12 + i11 | 0;
    i1 = HEAP32[i3 >> 2] | 0;
    HEAP16[i1 + (i38 << 6) + (i2 << 1) >> 1] = (HEAPU8[i8] | 0) + 1 & 65535;
    HEAP16[i1 + (i38 << 6) + (i39 << 1) >> 1] = (HEAPU8[i8 + 1 | 0] | 0) + 1 & 65535;
    HEAP16[i1 + (i38 << 6) + (i16 << 1) >> 1] = (HEAPU8[i8 + 2 | 0] | 0) + 1 & 65535;
    HEAP16[i1 + (i38 << 6) + (i14 << 1) >> 1] = (HEAPU8[i8 + 3 | 0] | 0) + 1 & 65535;
    i38 = i12 + 1 | 0;
    if ((i38 | 0) == 8) {
      break;
    } else {
      i12 = i38;
      i8 = i8 + 4 | 0;
    }
  }
  i8 = i10 + ((i40 | 3) << 2) | 0;
  i40 = 0;
  i10 = i9 + 96 | 0;
  while (1) {
    i9 = i40 + i11 | 0;
    i12 = HEAP32[i8 >> 2] | 0;
    HEAP16[i12 + (i9 << 6) + (i2 << 1) >> 1] = (HEAPU8[i10] | 0) + 1 & 65535;
    HEAP16[i12 + (i9 << 6) + (i39 << 1) >> 1] = (HEAPU8[i10 + 1 | 0] | 0) + 1 & 65535;
    HEAP16[i12 + (i9 << 6) + (i16 << 1) >> 1] = (HEAPU8[i10 + 2 | 0] | 0) + 1 & 65535;
    HEAP16[i12 + (i9 << 6) + (i14 << 1) >> 1] = (HEAPU8[i10 + 3 | 0] | 0) + 1 & 65535;
    i9 = i40 + 1 | 0;
    if ((i9 | 0) == 8) {
      break;
    } else {
      i40 = i9;
      i10 = i10 + 4 | 0;
    }
  }
  STACKTOP = i5;
  return;
}
function _update_box(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
  i3 = i1;
  i1 = i2 | 0;
  i4 = HEAP32[i1 >> 2] | 0;
  i5 = i2 + 4 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  i7 = i2 + 8 | 0;
  i8 = HEAP32[i7 >> 2] | 0;
  i9 = i2 + 12 | 0;
  i10 = HEAP32[i9 >> 2] | 0;
  i11 = i2 + 16 | 0;
  i12 = HEAP32[i11 >> 2] | 0;
  i13 = i2 + 20 | 0;
  i14 = HEAP32[i13 >> 2] | 0;
  L3244 : do {
    if ((i4 | 0) < (i6 | 0)) {
      i15 = (i8 | 0) > (i10 | 0);
      i16 = (i12 | 0) > (i14 | 0);
      i17 = i4;
      L3246 : while (1) {
        L3248 : do {
          if (!i15) {
            i18 = HEAP32[i3 + (i17 << 2) >> 2] | 0;
            i19 = i8;
            while (1) {
              L3252 : do {
                if (!i16) {
                  i20 = i12;
                  i21 = i18 + (i19 << 6) + (i12 << 1) | 0;
                  while (1) {
                    if (HEAP16[i21 >> 1] << 16 >> 16 != 0) {
                      break L3246;
                    }
                    i22 = i20 + 1 | 0;
                    if ((i22 | 0) > (i14 | 0)) {
                      break L3252;
                    } else {
                      i20 = i22;
                      i21 = i21 + 2 | 0;
                    }
                  }
                }
              } while (0);
              i21 = i19 + 1 | 0;
              if ((i21 | 0) > (i10 | 0)) {
                break L3248;
              } else {
                i19 = i21;
              }
            }
          }
        } while (0);
        i19 = i17 + 1 | 0;
        if ((i19 | 0) > (i6 | 0)) {
          i23 = i4;
          break L3244;
        } else {
          i17 = i19;
        }
      }
      HEAP32[i1 >> 2] = i17;
      i23 = i17;
    } else {
      i23 = i4;
    }
  } while (0);
  L3261 : do {
    if ((i6 | 0) > (i23 | 0)) {
      i4 = (i8 | 0) > (i10 | 0);
      i1 = (i12 | 0) > (i14 | 0);
      i16 = i6;
      L3263 : while (1) {
        L3265 : do {
          if (!i4) {
            i15 = HEAP32[i3 + (i16 << 2) >> 2] | 0;
            i19 = i8;
            while (1) {
              L3269 : do {
                if (!i1) {
                  i18 = i12;
                  i21 = i15 + (i19 << 6) + (i12 << 1) | 0;
                  while (1) {
                    if (HEAP16[i21 >> 1] << 16 >> 16 != 0) {
                      break L3263;
                    }
                    i20 = i18 + 1 | 0;
                    if ((i20 | 0) > (i14 | 0)) {
                      break L3269;
                    } else {
                      i18 = i20;
                      i21 = i21 + 2 | 0;
                    }
                  }
                }
              } while (0);
              i21 = i19 + 1 | 0;
              if ((i21 | 0) > (i10 | 0)) {
                break L3265;
              } else {
                i19 = i21;
              }
            }
          }
        } while (0);
        i19 = i16 - 1 | 0;
        if ((i19 | 0) < (i23 | 0)) {
          i24 = i6;
          break L3261;
        } else {
          i16 = i19;
        }
      }
      HEAP32[i5 >> 2] = i16;
      i24 = i16;
    } else {
      i24 = i6;
    }
  } while (0);
  L3278 : do {
    if ((i8 | 0) < (i10 | 0)) {
      i6 = (i23 | 0) > (i24 | 0);
      i5 = (i12 | 0) > (i14 | 0);
      i1 = i8;
      L3280 : while (1) {
        L3282 : do {
          if (!i6) {
            i4 = i23;
            while (1) {
              L3285 : do {
                if (!i5) {
                  i17 = i12;
                  i19 = (HEAP32[i3 + (i4 << 2) >> 2] | 0) + (i1 << 6) + (i12 << 1) | 0;
                  while (1) {
                    if (HEAP16[i19 >> 1] << 16 >> 16 != 0) {
                      break L3280;
                    }
                    i15 = i17 + 1 | 0;
                    if ((i15 | 0) > (i14 | 0)) {
                      break L3285;
                    } else {
                      i17 = i15;
                      i19 = i19 + 2 | 0;
                    }
                  }
                }
              } while (0);
              i19 = i4 + 1 | 0;
              if ((i19 | 0) > (i24 | 0)) {
                break L3282;
              } else {
                i4 = i19;
              }
            }
          }
        } while (0);
        i4 = i1 + 1 | 0;
        if ((i4 | 0) > (i10 | 0)) {
          i25 = i8;
          break L3278;
        } else {
          i1 = i4;
        }
      }
      HEAP32[i7 >> 2] = i1;
      i25 = i1;
    } else {
      i25 = i8;
    }
  } while (0);
  L3294 : do {
    if ((i10 | 0) > (i25 | 0)) {
      i8 = (i23 | 0) > (i24 | 0);
      i7 = (i12 | 0) > (i14 | 0);
      i5 = i10;
      L3296 : while (1) {
        L3298 : do {
          if (!i8) {
            i6 = i23;
            while (1) {
              L3301 : do {
                if (!i7) {
                  i16 = i12;
                  i4 = (HEAP32[i3 + (i6 << 2) >> 2] | 0) + (i5 << 6) + (i12 << 1) | 0;
                  while (1) {
                    if (HEAP16[i4 >> 1] << 16 >> 16 != 0) {
                      break L3296;
                    }
                    i19 = i16 + 1 | 0;
                    if ((i19 | 0) > (i14 | 0)) {
                      break L3301;
                    } else {
                      i16 = i19;
                      i4 = i4 + 2 | 0;
                    }
                  }
                }
              } while (0);
              i4 = i6 + 1 | 0;
              if ((i4 | 0) > (i24 | 0)) {
                break L3298;
              } else {
                i6 = i4;
              }
            }
          }
        } while (0);
        i6 = i5 - 1 | 0;
        if ((i6 | 0) < (i25 | 0)) {
          i26 = i10;
          break L3294;
        } else {
          i5 = i6;
        }
      }
      HEAP32[i9 >> 2] = i5;
      i26 = i5;
    } else {
      i26 = i10;
    }
  } while (0);
  L3310 : do {
    if ((i12 | 0) < (i14 | 0)) {
      i10 = (i23 | 0) > (i24 | 0);
      i9 = (i25 | 0) > (i26 | 0);
      i7 = i12;
      L3312 : while (1) {
        L3314 : do {
          if (!i10) {
            i8 = i23;
            while (1) {
              L3317 : do {
                if (!i9) {
                  i1 = i25;
                  i6 = (HEAP32[i3 + (i8 << 2) >> 2] | 0) + (i25 << 6) + (i7 << 1) | 0;
                  while (1) {
                    if (HEAP16[i6 >> 1] << 16 >> 16 != 0) {
                      break L3312;
                    }
                    i4 = i1 + 1 | 0;
                    if ((i4 | 0) > (i26 | 0)) {
                      break L3317;
                    } else {
                      i1 = i4;
                      i6 = i6 + 64 | 0;
                    }
                  }
                }
              } while (0);
              i6 = i8 + 1 | 0;
              if ((i6 | 0) > (i24 | 0)) {
                break L3314;
              } else {
                i8 = i6;
              }
            }
          }
        } while (0);
        i8 = i7 + 1 | 0;
        if ((i8 | 0) > (i14 | 0)) {
          i27 = i12;
          break L3310;
        } else {
          i7 = i8;
        }
      }
      HEAP32[i11 >> 2] = i7;
      i27 = i7;
    } else {
      i27 = i12;
    }
  } while (0);
  L3326 : do {
    if ((i14 | 0) > (i27 | 0)) {
      i12 = (i23 | 0) > (i24 | 0);
      i11 = (i25 | 0) > (i26 | 0);
      i9 = i14;
      L3328 : while (1) {
        L3330 : do {
          if (!i12) {
            i10 = i23;
            while (1) {
              L3333 : do {
                if (!i11) {
                  i5 = i25;
                  i8 = (HEAP32[i3 + (i10 << 2) >> 2] | 0) + (i25 << 6) + (i9 << 1) | 0;
                  while (1) {
                    if (HEAP16[i8 >> 1] << 16 >> 16 != 0) {
                      break L3328;
                    }
                    i6 = i5 + 1 | 0;
                    if ((i6 | 0) > (i26 | 0)) {
                      break L3333;
                    } else {
                      i5 = i6;
                      i8 = i8 + 64 | 0;
                    }
                  }
                }
              } while (0);
              i8 = i10 + 1 | 0;
              if ((i8 | 0) > (i24 | 0)) {
                break L3330;
              } else {
                i10 = i8;
              }
            }
          }
        } while (0);
        i10 = i9 - 1 | 0;
        if ((i10 | 0) < (i27 | 0)) {
          i28 = i14;
          break L3326;
        } else {
          i9 = i10;
        }
      }
      HEAP32[i13 >> 2] = i9;
      i28 = i9;
    } else {
      i28 = i14;
    }
  } while (0);
  i14 = i24 - i23 << 4;
  i13 = (i26 - i25 | 0) * 12 & -1;
  i11 = i28 - i27 << 3;
  i12 = Math_imul(i14, i14);
  i14 = Math_imul(i13, i13) + i12 | 0;
  HEAP32[i2 + 24 >> 2] = i14 + Math_imul(i11, i11) | 0;
  if ((i23 | 0) > (i24 | 0)) {
    i29 = 0;
    i30 = i2 + 28 | 0;
    HEAP32[i30 >> 2] = i29;
    return;
  }
  i11 = (i25 | 0) > (i26 | 0);
  i14 = (i27 | 0) > (i28 | 0);
  i12 = i23;
  i23 = 0;
  while (1) {
    L3347 : do {
      if (i11) {
        i31 = i23;
      } else {
        i13 = HEAP32[i3 + (i12 << 2) >> 2] | 0;
        i7 = i25;
        i10 = i23;
        while (1) {
          L3351 : do {
            if (i14) {
              i32 = i10;
            } else {
              i8 = i27;
              i5 = i13 + (i7 << 6) + (i27 << 1) | 0;
              i6 = i10;
              while (1) {
                i1 = (HEAP16[i5 >> 1] << 16 >> 16 != 0 & 1) + i6 | 0;
                i4 = i8 + 1 | 0;
                if ((i4 | 0) > (i28 | 0)) {
                  i32 = i1;
                  break L3351;
                } else {
                  i8 = i4;
                  i5 = i5 + 2 | 0;
                  i6 = i1;
                }
              }
            }
          } while (0);
          i6 = i7 + 1 | 0;
          if ((i6 | 0) > (i26 | 0)) {
            i31 = i32;
            break L3347;
          } else {
            i7 = i6;
            i10 = i32;
          }
        }
      }
    } while (0);
    i9 = i12 + 1 | 0;
    if ((i9 | 0) > (i24 | 0)) {
      i29 = i31;
      break;
    } else {
      i12 = i9;
      i23 = i31;
    }
  }
  i30 = i2 + 28 | 0;
  HEAP32[i30 >> 2] = i29;
  return;
}
function _start_pass_merged_upsample(i1) {
  i1 = i1 | 0;
  var i2 = 0;
  i2 = HEAP32[i1 + 452 >> 2] | 0;
  HEAP32[i2 + 36 >> 2] = 0;
  HEAP32[i2 + 44 >> 2] = HEAP32[i1 + 116 >> 2] | 0;
  return;
}
function _h2v2_merged_upsample(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0;
  i5 = HEAP32[i1 + 452 >> 2] | 0;
  i6 = HEAP32[i1 + 324 >> 2] | 0;
  i7 = HEAP32[i5 + 16 >> 2] | 0;
  i8 = HEAP32[i5 + 20 >> 2] | 0;
  i9 = HEAP32[i5 + 24 >> 2] | 0;
  i10 = HEAP32[i5 + 28 >> 2] | 0;
  i5 = i3 << 1;
  i11 = HEAP32[i2 >> 2] | 0;
  i12 = HEAP32[i11 + (i5 << 2) >> 2] | 0;
  i13 = HEAP32[i11 + ((i5 | 1) << 2) >> 2] | 0;
  i5 = HEAP32[(HEAP32[i2 + 4 >> 2] | 0) + (i3 << 2) >> 2] | 0;
  i11 = HEAP32[(HEAP32[i2 + 8 >> 2] | 0) + (i3 << 2) >> 2] | 0;
  i3 = HEAP32[i4 >> 2] | 0;
  i2 = HEAP32[i4 + 4 >> 2] | 0;
  i4 = i1 + 112 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i14 = i1 >>> 1;
  if ((i14 | 0) == 0) {
    i15 = i3;
    i16 = i2;
    i17 = i12;
    i18 = i13;
    i19 = i5;
    i20 = i11;
    i21 = i1;
  } else {
    i1 = i14 * 6 & -1;
    i22 = i14 << 1;
    i23 = i3 + i1 | 0;
    i24 = i11 + i14 | 0;
    i25 = i3;
    i3 = i2;
    i26 = i12;
    i27 = i13;
    i28 = i5;
    i29 = i11;
    i11 = i14;
    while (1) {
      i30 = HEAPU8[i28] | 0;
      i31 = HEAPU8[i29] | 0;
      i32 = HEAP32[i7 + (i31 << 2) >> 2] | 0;
      i33 = (HEAP32[i9 + (i31 << 2) >> 2] | 0) + (HEAP32[i10 + (i30 << 2) >> 2] | 0) >> 16;
      i31 = HEAP32[i8 + (i30 << 2) >> 2] | 0;
      i30 = HEAPU8[i26] | 0;
      HEAP8[i25] = HEAP8[i6 + (i30 + i32 | 0) | 0] | 0;
      HEAP8[i25 + 1 | 0] = HEAP8[i6 + (i30 + i33 | 0) | 0] | 0;
      HEAP8[i25 + 2 | 0] = HEAP8[i6 + (i30 + i31 | 0) | 0] | 0;
      i30 = HEAPU8[i26 + 1 | 0] | 0;
      HEAP8[i25 + 3 | 0] = HEAP8[i6 + (i30 + i32 | 0) | 0] | 0;
      HEAP8[i25 + 4 | 0] = HEAP8[i6 + (i30 + i33 | 0) | 0] | 0;
      HEAP8[i25 + 5 | 0] = HEAP8[i6 + (i30 + i31 | 0) | 0] | 0;
      i30 = HEAPU8[i27] | 0;
      HEAP8[i3] = HEAP8[i6 + (i30 + i32 | 0) | 0] | 0;
      HEAP8[i3 + 1 | 0] = HEAP8[i6 + (i30 + i33 | 0) | 0] | 0;
      HEAP8[i3 + 2 | 0] = HEAP8[i6 + (i30 + i31 | 0) | 0] | 0;
      i30 = HEAPU8[i27 + 1 | 0] | 0;
      HEAP8[i3 + 3 | 0] = HEAP8[i6 + (i30 + i32 | 0) | 0] | 0;
      HEAP8[i3 + 4 | 0] = HEAP8[i6 + (i30 + i33 | 0) | 0] | 0;
      HEAP8[i3 + 5 | 0] = HEAP8[i6 + (i30 + i31 | 0) | 0] | 0;
      i31 = i11 - 1 | 0;
      if ((i31 | 0) == 0) {
        break;
      } else {
        i25 = i25 + 6 | 0;
        i3 = i3 + 6 | 0;
        i26 = i26 + 2 | 0;
        i27 = i27 + 2 | 0;
        i28 = i28 + 1 | 0;
        i29 = i29 + 1 | 0;
        i11 = i31;
      }
    }
    i15 = i23;
    i16 = i2 + i1 | 0;
    i17 = i12 + i22 | 0;
    i18 = i13 + i22 | 0;
    i19 = i5 + i14 | 0;
    i20 = i24;
    i21 = HEAP32[i4 >> 2] | 0;
  }
  if ((i21 & 1 | 0) == 0) {
    return;
  }
  i21 = HEAPU8[i19] | 0;
  i19 = HEAPU8[i20] | 0;
  i20 = HEAP32[i7 + (i19 << 2) >> 2] | 0;
  i7 = (HEAP32[i9 + (i19 << 2) >> 2] | 0) + (HEAP32[i10 + (i21 << 2) >> 2] | 0) >> 16;
  i10 = HEAP32[i8 + (i21 << 2) >> 2] | 0;
  i21 = HEAPU8[i17] | 0;
  HEAP8[i15] = HEAP8[i6 + (i21 + i20 | 0) | 0] | 0;
  HEAP8[i15 + 1 | 0] = HEAP8[i6 + (i21 + i7 | 0) | 0] | 0;
  HEAP8[i15 + 2 | 0] = HEAP8[i6 + (i21 + i10 | 0) | 0] | 0;
  i21 = HEAPU8[i18] | 0;
  HEAP8[i16] = HEAP8[i6 + (i21 + i20 | 0) | 0] | 0;
  HEAP8[i16 + 1 | 0] = HEAP8[i6 + (i21 + i7 | 0) | 0] | 0;
  HEAP8[i16 + 2 | 0] = HEAP8[i6 + (i21 + i10 | 0) | 0] | 0;
  return;
}
function _h2v1_merged_upsample(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
  i5 = HEAP32[i1 + 452 >> 2] | 0;
  i6 = HEAP32[i1 + 324 >> 2] | 0;
  i7 = HEAP32[i5 + 16 >> 2] | 0;
  i8 = HEAP32[i5 + 20 >> 2] | 0;
  i9 = HEAP32[i5 + 24 >> 2] | 0;
  i10 = HEAP32[i5 + 28 >> 2] | 0;
  i5 = HEAP32[(HEAP32[i2 >> 2] | 0) + (i3 << 2) >> 2] | 0;
  i11 = HEAP32[(HEAP32[i2 + 4 >> 2] | 0) + (i3 << 2) >> 2] | 0;
  i12 = HEAP32[(HEAP32[i2 + 8 >> 2] | 0) + (i3 << 2) >> 2] | 0;
  i3 = HEAP32[i4 >> 2] | 0;
  i4 = i1 + 112 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i2 = i1 >>> 1;
  if ((i2 | 0) == 0) {
    i13 = i3;
    i14 = i5;
    i15 = i11;
    i16 = i12;
    i17 = i1;
  } else {
    i1 = i2 * 6 & -1;
    i18 = i2 << 1;
    i19 = i12 + i2 | 0;
    i20 = i3;
    i21 = i5;
    i22 = i11;
    i23 = i12;
    i12 = i2;
    while (1) {
      i24 = HEAPU8[i22] | 0;
      i25 = HEAPU8[i23] | 0;
      i26 = HEAP32[i7 + (i25 << 2) >> 2] | 0;
      i27 = (HEAP32[i9 + (i25 << 2) >> 2] | 0) + (HEAP32[i10 + (i24 << 2) >> 2] | 0) >> 16;
      i25 = HEAP32[i8 + (i24 << 2) >> 2] | 0;
      i24 = HEAPU8[i21] | 0;
      HEAP8[i20] = HEAP8[i6 + (i24 + i26 | 0) | 0] | 0;
      HEAP8[i20 + 1 | 0] = HEAP8[i6 + (i24 + i27 | 0) | 0] | 0;
      HEAP8[i20 + 2 | 0] = HEAP8[i6 + (i24 + i25 | 0) | 0] | 0;
      i24 = HEAPU8[i21 + 1 | 0] | 0;
      HEAP8[i20 + 3 | 0] = HEAP8[i6 + (i24 + i26 | 0) | 0] | 0;
      HEAP8[i20 + 4 | 0] = HEAP8[i6 + (i24 + i27 | 0) | 0] | 0;
      HEAP8[i20 + 5 | 0] = HEAP8[i6 + (i24 + i25 | 0) | 0] | 0;
      i25 = i12 - 1 | 0;
      if ((i25 | 0) == 0) {
        break;
      } else {
        i20 = i20 + 6 | 0;
        i21 = i21 + 2 | 0;
        i22 = i22 + 1 | 0;
        i23 = i23 + 1 | 0;
        i12 = i25;
      }
    }
    i13 = i3 + i1 | 0;
    i14 = i5 + i18 | 0;
    i15 = i11 + i2 | 0;
    i16 = i19;
    i17 = HEAP32[i4 >> 2] | 0;
  }
  if ((i17 & 1 | 0) == 0) {
    return;
  }
  i17 = HEAPU8[i15] | 0;
  i15 = HEAPU8[i16] | 0;
  i16 = (HEAP32[i9 + (i15 << 2) >> 2] | 0) + (HEAP32[i10 + (i17 << 2) >> 2] | 0) >> 16;
  i10 = HEAP32[i8 + (i17 << 2) >> 2] | 0;
  i17 = HEAPU8[i14] | 0;
  HEAP8[i13] = HEAP8[i6 + (i17 + (HEAP32[i7 + (i15 << 2) >> 2] | 0) | 0) | 0] | 0;
  HEAP8[i13 + 1 | 0] = HEAP8[i6 + (i17 + i16 | 0) | 0] | 0;
  HEAP8[i13 + 2 | 0] = HEAP8[i6 + (i17 + i10 | 0) | 0] | 0;
  return;
}
function _merged_2v_upsample(i1, i2, i3, i4, i5, i6, i7) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  i7 = i7 | 0;
  var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
  i4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  i8 = i4 | 0;
  i9 = HEAP32[i1 + 452 >> 2] | 0;
  i10 = i9 + 36 | 0;
  i11 = i10;
  if ((HEAP32[i11 >> 2] | 0) == 0) {
    i12 = i9 + 44 | 0;
    i13 = HEAP32[i12 >> 2] | 0;
    i14 = i13 >>> 0 < 2 ? i13 : 2;
    i13 = HEAP32[i6 >> 2] | 0;
    i15 = i7 - i13 | 0;
    i7 = i14 >>> 0 > i15 >>> 0 ? i15 : i14;
    i14 = i8 | 0;
    HEAP32[i14 >> 2] = HEAP32[i5 + (i13 << 2) >> 2] | 0;
    if (i7 >>> 0 > 1) {
      HEAP32[i8 + 4 >> 2] = HEAP32[i5 + (i13 + 1 << 2) >> 2] | 0;
    } else {
      HEAP32[i8 + 4 >> 2] = HEAP32[i9 + 32 >> 2] | 0;
      HEAP32[i10 >> 2] = 1;
    }
    FUNCTION_TABLE_viiii[HEAP32[i9 + 12 >> 2] & 511](i1, i2, HEAP32[i3 >> 2] | 0, i14);
    i16 = i7;
    i17 = i12;
  } else {
    _memcpy(HEAP32[i5 + (HEAP32[i6 >> 2] << 2) >> 2] | 0, HEAP32[i9 + 32 >> 2] | 0, HEAP32[i9 + 40 >> 2] | 0);
    HEAP32[i10 >> 2] = 0;
    i16 = 1;
    i17 = i9 + 44 | 0;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i16 | 0;
  HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) - i16 | 0;
  if ((HEAP32[i11 >> 2] | 0) != 0) {
    STACKTOP = i4;
    return;
  }
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1 | 0;
  STACKTOP = i4;
  return;
}
function _merged_1v_upsample(i1, i2, i3, i4, i5, i6, i7) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  i7 = i7 | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 + 452 >> 2] | 0) + 12 >> 2] & 511](i1, i2, HEAP32[i3 >> 2] | 0, i5 + (HEAP32[i6 >> 2] << 2) | 0);
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1 | 0;
  return;
}
function _png_zfree(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0;
  if ((i1 | 0) == 0 | (i2 | 0) == 0) {
    return;
  }
  i3 = HEAP32[i1 + 552 >> 2] | 0;
  if ((i3 | 0) == 0) {
    _free(i2);
    return;
  } else {
    FUNCTION_TABLE_vii[i3 & 511](i1, i2);
    return;
  }
}
function _png_zalloc(i1, i2, i3) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
  i4 = STACKTOP;
  i5 = i1;
  i6 = i1 + 88 | 0;
  i7 = HEAP32[i6 >> 2] | 0;
  if ((i1 | 0) == 0) {
    i8 = 0;
    STACKTOP = i4;
    return i8 | 0;
  }
  if (4294967295 / (i3 >>> 0) >>> 0 >>> 0 < i2 >>> 0) {
    i9 = HEAP32[i1 + 48 >> 2] | 0;
    if ((i9 | 0) == 0) {
      i10 = HEAP32[_stderr >> 2] | 0;
      _fprintf(i10 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5273552, tempInt) | 0) | 0;
      i10 = HEAP32[_stderr >> 2] | 0;
      _fputc(10, i10 | 0) | 0;
      i8 = 0;
      STACKTOP = i4;
      return i8 | 0;
    } else {
      FUNCTION_TABLE_vii[i9 & 511](i5, 5273552);
      i8 = 0;
      STACKTOP = i4;
      return i8 | 0;
    }
  }
  i9 = Math_imul(i3, i2);
  HEAP32[i6 >> 2] = i7 | 1048576;
  i2 = i1;
  do {
    if ((i9 | 0) == 0) {
      i11 = 0;
    } else {
      i3 = HEAP32[i1 + 548 >> 2] | 0;
      if ((i3 | 0) == 0) {
        i12 = _malloc(i9) | 0;
      } else {
        i12 = FUNCTION_TABLE_iii[i3 & 511](i2, i9) | 0;
      }
      if ((i12 | 0) != 0) {
        i11 = i12;
        break;
      }
      if ((HEAP32[i6 >> 2] & 1048576 | 0) != 0) {
        i11 = 0;
        break;
      }
      _png_error(i5, 5269956);
    }
  } while (0);
  HEAP32[i6 >> 2] = i7;
  i8 = i11;
  STACKTOP = i4;
  return i8 | 0;
}
function _png_check_fp_number(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  i6 = HEAP32[i4 >> 2] | 0;
  L3427 : do {
    if (i6 >>> 0 < i2 >>> 0) {
      i7 = i6;
      i8 = i5;
      while (1) {
        i9 = HEAP8[i1 + i7 | 0] | 0;
        do {
          if ((i9 - 48 & 255) < 10) {
            i10 = 8;
          } else {
            i11 = i9 << 24 >> 24;
            if ((i11 | 0) == 69 | (i11 | 0) == 101) {
              i10 = 12;
              break;
            } else if ((i11 | 0) == 46) {
              i10 = 4;
              break;
            } else if ((i11 | 0) == 43 | (i11 | 0) == 45) {
              i10 = 0;
              break;
            } else {
              i12 = i7;
              i13 = i8;
              break L3427;
            }
          }
        } while (0);
        i9 = i10 | i8 & 3;
        do {
          if ((i9 | 0) == 2) {
            if ((i8 & 60 | 0) != 0) {
              i12 = i7;
              i13 = i8;
              break L3427;
            }
            i14 = i8 | 4;
          } else if ((i9 | 0) == 9) {
            i14 = i8 | 72;
          } else if ((i9 | 0) == 0) {
            if ((i8 & 60 | 0) != 0) {
              i12 = i7;
              i13 = i8;
              break L3427;
            }
            i14 = i8 | 4;
          } else if ((i9 | 0) == 10) {
            i14 = i8 | 72;
          } else if ((i9 | 0) == 12) {
            if ((i8 & 8 | 0) == 0) {
              i12 = i7;
              i13 = i8;
              break L3427;
            }
            i14 = i8 & 64 | 2;
          } else if ((i9 | 0) == 4) {
            if ((i8 & 16 | 0) != 0) {
              i12 = i7;
              i13 = i8;
              break L3427;
            }
            if ((i8 & 8 | 0) == 0) {
              i14 = i8 & 64 | 17;
              break;
            } else {
              i14 = i8 | 16;
              break;
            }
          } else if ((i9 | 0) == 13) {
            if ((i8 & 8 | 0) == 0) {
              i12 = i7;
              i13 = i8;
              break L3427;
            }
            i14 = i8 & 64 | 2;
          } else if ((i9 | 0) == 8) {
            if ((i8 & 16 | 0) == 0) {
              i15 = i8;
            } else {
              i15 = i8 & 64 | 17;
            }
            i14 = i15 | 72;
          } else {
            i12 = i7;
            i13 = i8;
            break L3427;
          }
        } while (0);
        i9 = i7 + 1 | 0;
        if (i9 >>> 0 < i2 >>> 0) {
          i7 = i9;
          i8 = i14;
        } else {
          i12 = i9;
          i13 = i14;
          break L3427;
        }
      }
    } else {
      i12 = i6;
      i13 = i5;
    }
  } while (0);
  HEAP32[i3 >> 2] = i13;
  HEAP32[i4 >> 2] = i12;
  return i13 >>> 3 & 1 | 0;
}
function _png_free_data(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
  if ((i1 | 0) == 0 | (i2 | 0) == 0) {
    return;
  }
  i5 = i2 + 188 | 0;
  do {
    if ((i3 & 16384 & HEAP32[i5 >> 2] | 0) != 0) {
      if ((i4 | 0) != -1) {
        i6 = i2 + 56 | 0;
        i7 = HEAP32[i6 >> 2] | 0;
        if ((i7 | 0) == 0) {
          break;
        }
        i8 = HEAP32[i7 + (i4 * 28 & -1) + 4 >> 2] | 0;
        if ((i8 | 0) == 0) {
          break;
        }
        i7 = HEAP32[i1 + 552 >> 2] | 0;
        if ((i7 | 0) == 0) {
          _free(i8);
        } else {
          FUNCTION_TABLE_vii[i7 & 511](i1, i8);
        }
        HEAP32[(HEAP32[i6 >> 2] | 0) + (i4 * 28 & -1) + 4 >> 2] = 0;
        break;
      }
      i6 = i2 + 48 | 0;
      L3473 : do {
        if ((HEAP32[i6 >> 2] | 0) > 0) {
          i8 = 0;
          while (1) {
            _png_free_data(i1, i2, 16384, i8);
            i7 = i8 + 1 | 0;
            if ((i7 | 0) < (HEAP32[i6 >> 2] | 0)) {
              i8 = i7;
            } else {
              break L3473;
            }
          }
        }
      } while (0);
      i8 = i2 + 56 | 0;
      i7 = HEAP32[i8 >> 2] | 0;
      i9 = i7;
      i10 = i1;
      do {
        if ((i7 | 0) != 0) {
          i11 = HEAP32[i1 + 552 >> 2] | 0;
          if ((i11 | 0) == 0) {
            _free(i9);
            break;
          } else {
            FUNCTION_TABLE_vii[i11 & 511](i10, i9);
            break;
          }
        }
      } while (0);
      HEAP32[i8 >> 2] = 0;
      HEAP32[i6 >> 2] = 0;
    }
  } while (0);
  i9 = HEAP32[i5 >> 2] | 0;
  if ((i3 & 8192 & i9 | 0) == 0) {
    i12 = i9;
  } else {
    i9 = i2 + 80 | 0;
    i10 = HEAP32[i9 >> 2] | 0;
    i7 = i1;
    do {
      if ((i10 | 0) != 0) {
        i11 = HEAP32[i1 + 552 >> 2] | 0;
        if ((i11 | 0) == 0) {
          _free(i10);
          break;
        } else {
          FUNCTION_TABLE_vii[i11 & 511](i7, i10);
          break;
        }
      }
    } while (0);
    HEAP32[i9 >> 2] = 0;
    i9 = i2 + 8 | 0;
    HEAP32[i9 >> 2] = HEAP32[i9 >> 2] & -17;
    i12 = HEAP32[i5 >> 2] | 0;
  }
  if ((i3 & 256 & i12 | 0) != 0) {
    i9 = i2 + 8 | 0;
    HEAP32[i9 >> 2] = HEAP32[i9 >> 2] & -16385;
  }
  if ((i3 & 128 & i12 | 0) == 0) {
    i13 = i12;
  } else {
    i12 = i2 + 164 | 0;
    i9 = HEAP32[i12 >> 2] | 0;
    i10 = i1;
    do {
      if ((i9 | 0) != 0) {
        i7 = HEAP32[i1 + 552 >> 2] | 0;
        if ((i7 | 0) == 0) {
          _free(i9);
          break;
        } else {
          FUNCTION_TABLE_vii[i7 & 511](i10, i9);
          break;
        }
      }
    } while (0);
    i9 = i2 + 176 | 0;
    i7 = HEAP32[i9 >> 2] | 0;
    do {
      if ((i7 | 0) != 0) {
        i11 = HEAP32[i1 + 552 >> 2] | 0;
        if ((i11 | 0) == 0) {
          _free(i7);
          break;
        } else {
          FUNCTION_TABLE_vii[i11 & 511](i10, i7);
          break;
        }
      }
    } while (0);
    HEAP32[i12 >> 2] = 0;
    HEAP32[i9 >> 2] = 0;
    i9 = i2 + 180 | 0;
    i12 = HEAP32[i9 >> 2] | 0;
    if ((i12 | 0) != 0) {
      i7 = i2 + 185 | 0;
      i11 = i1 + 552 | 0;
      do {
        if (HEAP8[i7] << 24 >> 24 == 0) {
          i14 = i12;
          i15 = i11;
          i16 = 2564;
        } else {
          i17 = 0;
          i18 = i12;
          while (1) {
            i19 = HEAP32[i18 + (i17 << 2) >> 2] | 0;
            do {
              if ((i19 | 0) != 0) {
                i20 = HEAP32[i11 >> 2] | 0;
                if ((i20 | 0) == 0) {
                  _free(i19);
                  break;
                } else {
                  FUNCTION_TABLE_vii[i20 & 511](i10, i19);
                  break;
                }
              }
            } while (0);
            HEAP32[(HEAP32[i9 >> 2] | 0) + (i17 << 2) >> 2] = 0;
            i19 = i17 + 1 | 0;
            i21 = HEAP32[i9 >> 2] | 0;
            if ((i19 | 0) < (HEAPU8[i7] | 0 | 0)) {
              i17 = i19;
              i18 = i21;
            } else {
              break;
            }
          }
          if ((i21 | 0) == 0) {
            break;
          } else {
            i14 = i21;
            i15 = i11;
            i16 = 2564;
            break;
          }
        }
      } while (0);
      do {
        if ((i16 | 0) == 2564) {
          i11 = i14;
          i21 = HEAP32[i15 >> 2] | 0;
          if ((i21 | 0) == 0) {
            _free(i11);
            break;
          } else {
            FUNCTION_TABLE_vii[i21 & 511](i10, i11);
            break;
          }
        }
      } while (0);
      HEAP32[i9 >> 2] = 0;
    }
    i9 = i2 + 8 | 0;
    HEAP32[i9 >> 2] = HEAP32[i9 >> 2] & -1025;
    i13 = HEAP32[i5 >> 2] | 0;
  }
  if ((i3 & 16 & i13 | 0) == 0) {
    i22 = i13;
  } else {
    i13 = i2 + 200 | 0;
    i9 = HEAP32[i13 >> 2] | 0;
    i10 = i1;
    do {
      if ((i9 | 0) != 0) {
        i15 = HEAP32[i1 + 552 >> 2] | 0;
        if ((i15 | 0) == 0) {
          _free(i9);
          break;
        } else {
          FUNCTION_TABLE_vii[i15 & 511](i10, i9);
          break;
        }
      }
    } while (0);
    i9 = i2 + 204 | 0;
    i15 = HEAP32[i9 >> 2] | 0;
    do {
      if ((i15 | 0) != 0) {
        i14 = HEAP32[i1 + 552 >> 2] | 0;
        if ((i14 | 0) == 0) {
          _free(i15);
          break;
        } else {
          FUNCTION_TABLE_vii[i14 & 511](i10, i15);
          break;
        }
      }
    } while (0);
    HEAP32[i13 >> 2] = 0;
    HEAP32[i9 >> 2] = 0;
    i9 = i2 + 8 | 0;
    HEAP32[i9 >> 2] = HEAP32[i9 >> 2] & -4097;
    i22 = HEAP32[i5 >> 2] | 0;
  }
  do {
    if ((i3 & 32 & i22 | 0) != 0) {
      if ((i4 | 0) == -1) {
        i9 = i2 + 220 | 0;
        i13 = HEAP32[i9 >> 2] | 0;
        if ((i13 | 0) != 0) {
          L3551 : do {
            if ((i13 | 0) > 0) {
              i15 = 0;
              while (1) {
                _png_free_data(i1, i2, 32, i15);
                i10 = i15 + 1 | 0;
                if ((i10 | 0) < (HEAP32[i9 >> 2] | 0)) {
                  i15 = i10;
                } else {
                  break L3551;
                }
              }
            }
          } while (0);
          i13 = i2 + 216 | 0;
          i15 = HEAP32[i13 >> 2] | 0;
          i10 = i15;
          i14 = i1;
          do {
            if ((i15 | 0) != 0) {
              i11 = HEAP32[i1 + 552 >> 2] | 0;
              if ((i11 | 0) == 0) {
                _free(i10);
                break;
              } else {
                FUNCTION_TABLE_vii[i11 & 511](i14, i10);
                break;
              }
            }
          } while (0);
          HEAP32[i13 >> 2] = 0;
          HEAP32[i9 >> 2] = 0;
        }
        i10 = i2 + 8 | 0;
        HEAP32[i10 >> 2] = HEAP32[i10 >> 2] & -8193;
        break;
      }
      i10 = i2 + 216 | 0;
      i14 = HEAP32[i10 >> 2] | 0;
      if ((i14 | 0) == 0) {
        break;
      }
      i15 = HEAP32[i14 + (i4 << 4) >> 2] | 0;
      i14 = i1;
      do {
        if ((i15 | 0) != 0) {
          i11 = HEAP32[i1 + 552 >> 2] | 0;
          if ((i11 | 0) == 0) {
            _free(i15);
            break;
          } else {
            FUNCTION_TABLE_vii[i11 & 511](i14, i15);
            break;
          }
        }
      } while (0);
      i15 = HEAP32[(HEAP32[i10 >> 2] | 0) + (i4 << 4) + 8 >> 2] | 0;
      i9 = i15;
      do {
        if ((i15 | 0) != 0) {
          i13 = HEAP32[i1 + 552 >> 2] | 0;
          if ((i13 | 0) == 0) {
            _free(i9);
            break;
          } else {
            FUNCTION_TABLE_vii[i13 & 511](i14, i9);
            break;
          }
        }
      } while (0);
      HEAP32[(HEAP32[i10 >> 2] | 0) + (i4 << 4) >> 2] = 0;
      HEAP32[(HEAP32[i10 >> 2] | 0) + (i4 << 4) + 8 >> 2] = 0;
    }
  } while (0);
  i22 = i1 + 600 | 0;
  i9 = HEAP32[i22 >> 2] | 0;
  if ((i9 | 0) != 0) {
    i14 = HEAP32[i1 + 552 >> 2] | 0;
    if ((i14 | 0) == 0) {
      _free(i9);
    } else {
      FUNCTION_TABLE_vii[i14 & 511](i1, i9);
    }
    HEAP32[i22 >> 2] = 0;
  }
  do {
    if ((i3 & 512 & HEAP32[i5 >> 2] | 0) != 0) {
      if ((i4 | 0) != -1) {
        i22 = i2 + 192 | 0;
        i9 = HEAP32[i22 >> 2] | 0;
        if ((i9 | 0) == 0) {
          break;
        }
        i14 = HEAP32[i9 + (i4 * 20 & -1) + 8 >> 2] | 0;
        i9 = i1;
        do {
          if ((i14 | 0) != 0) {
            i15 = HEAP32[i1 + 552 >> 2] | 0;
            if ((i15 | 0) == 0) {
              _free(i14);
              break;
            } else {
              FUNCTION_TABLE_vii[i15 & 511](i9, i14);
              break;
            }
          }
        } while (0);
        HEAP32[(HEAP32[i22 >> 2] | 0) + (i4 * 20 & -1) + 8 >> 2] = 0;
        break;
      }
      i14 = i2 + 196 | 0;
      i9 = HEAP32[i14 >> 2] | 0;
      if ((i9 | 0) == 0) {
        break;
      }
      L3597 : do {
        if ((i9 | 0) > 0) {
          i10 = 0;
          while (1) {
            _png_free_data(i1, i2, 512, i10);
            i15 = i10 + 1 | 0;
            if ((i15 | 0) < (HEAP32[i14 >> 2] | 0)) {
              i10 = i15;
            } else {
              break L3597;
            }
          }
        }
      } while (0);
      i9 = i2 + 192 | 0;
      i22 = HEAP32[i9 >> 2] | 0;
      i10 = i22 | 0;
      i15 = i1;
      do {
        if ((i22 | 0) != 0) {
          i13 = HEAP32[i1 + 552 >> 2] | 0;
          if ((i13 | 0) == 0) {
            _free(i10);
            break;
          } else {
            FUNCTION_TABLE_vii[i13 & 511](i15, i10);
            break;
          }
        }
      } while (0);
      HEAP32[i9 >> 2] = 0;
      HEAP32[i14 >> 2] = 0;
    }
  } while (0);
  i10 = HEAP32[i5 >> 2] | 0;
  if ((i3 & 8 & i10 | 0) == 0) {
    i23 = i10;
  } else {
    i10 = i2 + 128 | 0;
    i15 = HEAP32[i10 >> 2] | 0;
    i22 = i15;
    i13 = i1;
    do {
      if ((i15 | 0) != 0) {
        i11 = HEAP32[i1 + 552 >> 2] | 0;
        if ((i11 | 0) == 0) {
          _free(i22);
          break;
        } else {
          FUNCTION_TABLE_vii[i11 & 511](i13, i22);
          break;
        }
      }
    } while (0);
    HEAP32[i10 >> 2] = 0;
    i10 = i2 + 8 | 0;
    HEAP32[i10 >> 2] = HEAP32[i10 >> 2] & -65;
    i23 = HEAP32[i5 >> 2] | 0;
  }
  if ((i3 & 4096 & i23 | 0) == 0) {
    i24 = i23;
  } else {
    i23 = i2 + 16 | 0;
    i10 = HEAP32[i23 >> 2] | 0;
    i22 = i10 | 0;
    i13 = i1;
    do {
      if ((i10 | 0) != 0) {
        i15 = HEAP32[i1 + 552 >> 2] | 0;
        if ((i15 | 0) == 0) {
          _free(i22);
          break;
        } else {
          FUNCTION_TABLE_vii[i15 & 511](i13, i22);
          break;
        }
      }
    } while (0);
    HEAP32[i23 >> 2] = 0;
    i23 = i2 + 8 | 0;
    HEAP32[i23 >> 2] = HEAP32[i23 >> 2] & -9;
    HEAP16[i2 + 20 >> 1] = 0;
    i24 = HEAP32[i5 >> 2] | 0;
  }
  if ((i3 & 64 & i24 | 0) == 0) {
    i25 = i24;
  } else {
    i23 = i2 + 236 | 0;
    i22 = HEAP32[i23 >> 2] | 0;
    if ((i22 | 0) == 0) {
      i26 = i24;
    } else {
      i24 = i2 + 4 | 0;
      i13 = i1;
      i10 = i1 + 552 | 0;
      do {
        if ((HEAP32[i24 >> 2] | 0) > 0) {
          i1 = 0;
          i15 = i22;
          while (1) {
            i11 = HEAP32[i15 + (i1 << 2) >> 2] | 0;
            do {
              if ((i11 | 0) != 0) {
                i21 = HEAP32[i10 >> 2] | 0;
                if ((i21 | 0) == 0) {
                  _free(i11);
                  break;
                } else {
                  FUNCTION_TABLE_vii[i21 & 511](i13, i11);
                  break;
                }
              }
            } while (0);
            HEAP32[(HEAP32[i23 >> 2] | 0) + (i1 << 2) >> 2] = 0;
            i11 = i1 + 1 | 0;
            i27 = HEAP32[i23 >> 2] | 0;
            if ((i11 | 0) < (HEAP32[i24 >> 2] | 0)) {
              i1 = i11;
              i15 = i27;
            } else {
              break;
            }
          }
          if ((i27 | 0) == 0) {
            break;
          } else {
            i28 = i27;
            i29 = i10;
            i16 = 2642;
            break;
          }
        } else {
          i28 = i22;
          i29 = i10;
          i16 = 2642;
        }
      } while (0);
      do {
        if ((i16 | 0) == 2642) {
          i10 = i28;
          i22 = HEAP32[i29 >> 2] | 0;
          if ((i22 | 0) == 0) {
            _free(i10);
            break;
          } else {
            FUNCTION_TABLE_vii[i22 & 511](i13, i10);
            break;
          }
        }
      } while (0);
      HEAP32[i23 >> 2] = 0;
      i26 = HEAP32[i5 >> 2] | 0;
    }
    i23 = i2 + 8 | 0;
    HEAP32[i23 >> 2] = HEAP32[i23 >> 2] & -32769;
    i25 = i26;
  }
  HEAP32[i5 >> 2] = i25 & (((i4 | 0) == -1 ? i3 : i3 & -16929) ^ -1);
  return;
}
function _png_format_buffer(i1, i2, i3) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
  i4 = HEAP8[i1 + 260 | 0] | 0;
  i5 = i4 & 255;
  if ((i4 - 65 & 255) > 57 | (i4 - 91 & 255) < 6) {
    HEAP8[i2] = 91;
    HEAP8[i2 + 1 | 0] = HEAP8[5246072 + (i5 >>> 4) | 0] | 0;
    HEAP8[i2 + 2 | 0] = HEAP8[5246072 + (i5 & 15) | 0] | 0;
    HEAP8[i2 + 3 | 0] = 93;
    i6 = 4;
  } else {
    HEAP8[i2] = i4;
    i6 = 1;
  }
  i4 = HEAP8[i1 + 261 | 0] | 0;
  i5 = i4 & 255;
  i7 = i6 + 1 | 0;
  i8 = i2 + i6 | 0;
  if ((i4 - 65 & 255) > 57 | (i4 - 91 & 255) < 6) {
    HEAP8[i8] = 91;
    HEAP8[i2 + i7 | 0] = HEAP8[5246072 + (i5 >>> 4) | 0] | 0;
    HEAP8[i2 + (i6 | 2) | 0] = HEAP8[5246072 + (i5 & 15) | 0] | 0;
    HEAP8[i2 + (i6 + 3 | 0) | 0] = 93;
    i9 = i6 + 4 | 0;
  } else {
    HEAP8[i8] = i4;
    i9 = i7;
  }
  i7 = HEAP8[i1 + 262 | 0] | 0;
  i4 = i7 & 255;
  i8 = i9 + 1 | 0;
  i6 = i2 + i9 | 0;
  if ((i7 - 65 & 255) > 57 | (i7 - 91 & 255) < 6) {
    HEAP8[i6] = 91;
    HEAP8[i2 + i8 | 0] = HEAP8[5246072 + (i4 >>> 4) | 0] | 0;
    HEAP8[i2 + (i9 + 2 | 0) | 0] = HEAP8[5246072 + (i4 & 15) | 0] | 0;
    HEAP8[i2 + (i9 + 3 | 0) | 0] = 93;
    i10 = i9 + 4 | 0;
  } else {
    HEAP8[i6] = i7;
    i10 = i8;
  }
  i8 = HEAP8[i1 + 263 | 0] | 0;
  i1 = i8 & 255;
  i7 = i10 + 1 | 0;
  i6 = i2 + i10 | 0;
  if ((i8 - 65 & 255) > 57 | (i8 - 91 & 255) < 6) {
    HEAP8[i6] = 91;
    HEAP8[i2 + i7 | 0] = HEAP8[5246072 + (i1 >>> 4) | 0] | 0;
    HEAP8[i2 + (i10 + 2 | 0) | 0] = HEAP8[5246072 + (i1 & 15) | 0] | 0;
    HEAP8[i2 + (i10 + 3 | 0) | 0] = 93;
    i11 = i10 + 4 | 0;
  } else {
    HEAP8[i6] = i8;
    i11 = i7;
  }
  if ((i3 | 0) == 0) {
    HEAP8[i2 + i11 | 0] = 0;
    return;
  } else {
    HEAP8[i2 + i11 | 0] = 58;
    HEAP8[i2 + (i11 + 1 | 0) | 0] = 32;
    _memcpy(i2 + (i11 + 2 | 0) | 0, i3, 64);
    HEAP8[i2 + (i11 + 65 | 0) | 0] = 0;
    return;
  }
}
function _png_chunk_warning(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
  i2 = STACKTOP;
  STACKTOP = STACKTOP + 84 | 0;
  i3 = i2 | 0;
  if ((i1 | 0) == 0) {
    i4 = HEAP32[_stderr >> 2] | 0;
    _fprintf(i4 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5268676, tempInt) | 0) | 0;
    i4 = HEAP32[_stderr >> 2] | 0;
    _fputc(10, i4 | 0) | 0;
    STACKTOP = i2;
    return;
  }
  i4 = i3 | 0;
  _png_format_buffer(i1, i4, 5268676);
  L3676 : do {
    if (HEAP8[i4] << 24 >> 24 == 35) {
      i5 = 1;
      while (1) {
        if ((i5 | 0) >= 15) {
          i6 = i5;
          break L3676;
        }
        if (HEAP8[i3 + i5 | 0] << 24 >> 24 == 32) {
          i6 = i5;
          break L3676;
        } else {
          i5 = i5 + 1 | 0;
        }
      }
    } else {
      i6 = 0;
    }
  } while (0);
  i4 = HEAP32[i1 + 48 >> 2] | 0;
  i5 = i3 + i6 | 0;
  if ((i4 | 0) == 0) {
    i6 = HEAP32[_stderr >> 2] | 0;
    _fprintf(i6 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = i5, tempInt) | 0) | 0;
    i6 = HEAP32[_stderr >> 2] | 0;
    _fputc(10, i6 | 0) | 0;
    STACKTOP = i2;
    return;
  } else {
    FUNCTION_TABLE_vii[i4 & 511](i1, i5);
    STACKTOP = i2;
    return;
  }
}
function _png_build_16bit_table(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, d16 = 0.0, d17 = 0.0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
  i5 = 8 - i3 | 0;
  i6 = 1 << i5;
  i7 = (1 << 16 - i3) - 1 | 0;
  i8 = 1 << 15 - i3;
  i9 = i6 << 2;
  i10 = i1;
  i11 = (i1 | 0) == 0;
  i12 = i1 + 548 | 0;
  do {
    if (i11 | (i9 | 0) == 0) {
      i13 = 0;
    } else {
      i14 = HEAP32[i12 >> 2] | 0;
      if ((i14 | 0) == 0) {
        i15 = _malloc(i9) | 0;
      } else {
        i15 = FUNCTION_TABLE_iii[i14 & 511](i10, i9) | 0;
      }
      if ((i15 | 0) != 0) {
        _memset(i15 | 0, 0, i9 | 0);
        i13 = i15;
        break;
      }
      if ((HEAP32[i1 + 88 >> 2] & 1048576 | 0) != 0) {
        i13 = 0;
        break;
      }
      _png_error(i1, 5269956);
    }
  } while (0);
  i15 = i13;
  HEAP32[i2 >> 2] = i15;
  i2 = (i4 - 95e3 | 0) >>> 0 > 1e4;
  i13 = (i3 | 0) == 0;
  d16 = +(i7 >>> 0 >>> 0);
  d17 = +(i4 | 0) * 1.0e-5;
  i4 = i1 + 88 | 0;
  i3 = 0;
  L3698 : while (1) {
    do {
      if (i11) {
        i18 = 0;
      } else {
        i9 = HEAP32[i12 >> 2] | 0;
        if ((i9 | 0) == 0) {
          i19 = _malloc(512) | 0;
        } else {
          i19 = FUNCTION_TABLE_iii[i9 & 511](i10, 512) | 0;
        }
        if ((i19 | 0) != 0) {
          i18 = i19;
          break;
        }
        if ((HEAP32[i4 >> 2] & 1048576 | 0) == 0) {
          i20 = 2696;
          break L3698;
        } else {
          i18 = 0;
        }
      }
    } while (0);
    i9 = i18;
    HEAP32[i15 + (i3 << 2) >> 2] = i9;
    L3708 : do {
      if (i2) {
        i14 = 0;
        while (1) {
          HEAP16[i9 + (i14 << 1) >> 1] = ~~+Math_floor(+Math_pow(+(((i14 << i5) + i3 | 0) >>> 0 >>> 0) / d16, d17) * 65535.0 + .5);
          i21 = i14 + 1 | 0;
          if ((i21 | 0) == 256) {
            break L3708;
          } else {
            i14 = i21;
          }
        }
      } else {
        i14 = 0;
        while (1) {
          i21 = (i14 << i5) + i3 | 0;
          if (i13) {
            i22 = i21;
          } else {
            i22 = (((i21 * 65535 & -1) + i8 | 0) >>> 0) / (i7 >>> 0) >>> 0;
          }
          HEAP16[i9 + (i14 << 1) >> 1] = i22 & 65535;
          i21 = i14 + 1 | 0;
          if ((i21 | 0) == 256) {
            break L3708;
          } else {
            i14 = i21;
          }
        }
      }
    } while (0);
    i9 = i3 + 1 | 0;
    if (i9 >>> 0 < i6 >>> 0) {
      i3 = i9;
    } else {
      i20 = 2703;
      break;
    }
  }
  if ((i20 | 0) == 2696) {
    _png_error(i1, 5269956);
  } else if ((i20 | 0) == 2703) {
    return;
  }
}
function _png_error(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0;
  i3 = (i1 | 0) == 0;
  if (i3) {
    i4 = HEAP32[_stderr >> 2] | 0;
    _fprintf(i4 | 0, 5268840, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = i2, tempInt) | 0) | 0;
    i4 = HEAP32[_stderr >> 2] | 0;
    _fputc(10, i4 | 0) | 0;
    _abort();
  }
  i4 = HEAP32[i1 + 44 >> 2] | 0;
  if ((i4 | 0) != 0) {
    FUNCTION_TABLE_vii[i4 & 511](i1, i2);
  }
  _fprintf(HEAP32[_stderr >> 2] | 0, 5268840, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = i2, tempInt) | 0) | 0;
  _fputc(10, HEAP32[_stderr >> 2] | 0) | 0;
  if (i3) {
    _abort();
  }
  i3 = HEAP32[i1 + 40 >> 2] | 0;
  if ((i3 | 0) == 0) {
    _abort();
  } else {
    FUNCTION_TABLE_vii[i3 & 511](i1 | 0, 1);
  }
}
function _png_chunk_error(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0;
  i3 = STACKTOP;
  STACKTOP = STACKTOP + 84 | 0;
  if ((i1 | 0) == 0) {
    _png_error(0, i2);
  } else {
    i4 = i3 | 0;
    _png_format_buffer(i1, i4, i2);
    _png_error(i1, i4);
  }
}
function _png_create_read_struct_2() {
  var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, i150 = 0, i151 = 0, i152 = 0, i153 = 0, i154 = 0, i155 = 0, i156 = 0, i157 = 0, i158 = 0, i159 = 0, i160 = 0, i161 = 0, i162 = 0, i163 = 0, i164 = 0, i165 = 0, i166 = 0, i167 = 0, i168 = 0, i169 = 0, i170 = 0, i171 = 0, i172 = 0, i173 = 0, i174 = 0, i175 = 0, i176 = 0, i177 = 0, i178 = 0, i179 = 0, i180 = 0, i181 = 0, i182 = 0, i183 = 0, i184 = 0, i185 = 0, i186 = 0, i187 = 0, i188 = 0, i189 = 0, i190 = 0, i191 = 0, i192 = 0, i193 = 0, i194 = 0, i195 = 0, i196 = 0, i197 = 0, i198 = 0, i199 = 0, i200 = 0, i201 = 0, i202 = 0, i203 = 0, i204 = 0, i205 = 0, i206 = 0;
  i1 = STACKTOP;
  i2 = 2;
  i3 = {};
  i4 = {
    "7": (function(value) {
      i2 = 67;
      i5 = value;
    }),
    dummy: 0
  };
  while (1) try {
    switch (i2 | 0) {
     case 2:
      i6 = 0;
      i7 = _malloc(628) | 0;
      i8 = (i7 | 0) == 0;
      if (i8) {
        i9 = 0;
        i2 = 4;
        break;
      } else {
        i2 = 3;
        break;
      }
     case 3:
      _memset(i7 | 0, 0, 628);
      i10 = i7;
      i9 = i10;
      i2 = 4;
      break;
     case 4:
      i11 = i9;
      i12 = i11;
      i13 = (i12 | 0) == 0;
      if (i13) {
        i14 = 0;
        i2 = 66;
        break;
      } else {
        i2 = 5;
        break;
      }
     case 5:
      i15 = i11;
      i16 = i15 + 576 | 0;
      HEAP32[i16 >> 2] = 1e6;
      i17 = i11;
      i18 = i17 + 580 | 0;
      HEAP32[i18 >> 2] = 1e6;
      i19 = i11;
      i20 = i19 + 584 | 0;
      HEAP32[i20 >> 2] = 0;
      i21 = i11;
      i22 = (i21 | 0) == 0;
      if (i22) {
        i23 = 0;
        i2 = 7;
        break;
      } else {
        i2 = 6;
        break;
      }
     case 6:
      i24 = i21 + 40 | 0;
      HEAP32[i24 >> 2] = 30;
      i25 = i21 | 0;
      i23 = i25;
      i2 = 7;
      break;
     case 7:
      i26 = i23 | 0;
      i5 = (tempInt = setjmpId++, i3[tempInt] = 1, setjmpLabels[tempInt] = i2, HEAP32[i26 >> 2] = tempInt, 0);
      i2 = 67;
      break;
     case 67:
      i27 = (i5 | 0) == 0;
      if (i27) {
        i2 = 9;
        break;
      } else {
        i2 = 8;
        break;
      }
     case 8:
      _abort();
      return 0;
     case 9:
      i28 = i11;
      i29 = (i28 | 0) == 0;
      if (i29) {
        i2 = 11;
        break;
      } else {
        i2 = 10;
        break;
      }
     case 10:
      i30 = i28 + 544 | 0;
      HEAP32[i30 >> 2] = 0;
      i31 = i28 + 548 | 0;
      HEAP32[i31 >> 2] = 0;
      i32 = i28 + 552 | 0;
      HEAP32[i32 >> 2] = 0;
      i2 = 11;
      break;
     case 11:
      i33 = i11;
      i34 = (i33 | 0) == 0;
      if (i34) {
        i2 = 13;
        break;
      } else {
        i2 = 12;
        break;
      }
     case 12:
      i35 = i33 + 52 | 0;
      HEAP32[i35 >> 2] = 0;
      i36 = i33 + 44 | 0;
      HEAP32[i36 >> 2] = 0;
      i37 = i33 + 48 | 0;
      HEAP32[i37 >> 2] = 0;
      i2 = 13;
      break;
     case 13:
      $png_ptr_0_load25 = i11;
      i38 = i6;
      i39 = (i38 | 0) == 0;
      if (i39) {
        i2 = 14;
        break;
      } else {
        i2 = 25;
        break;
      }
     case 14:
      i40 = i11;
      i41 = i40 + 156 | 0;
      HEAP32[i41 >> 2] = 8192;
      i42 = i11;
      i43 = i11;
      i44 = i43 + 156 | 0;
      i45 = HEAP32[i44 >> 2] | 0;
      i46 = i42;
      i47 = (i42 | 0) == 0;
      if (i47) {
        i48 = 0;
        i2 = 23;
        break;
      } else {
        i2 = 15;
        break;
      }
     case 15:
      i49 = i42 + 88 | 0;
      i50 = HEAP32[i49 >> 2] | 0;
      i51 = i50 | 1048576;
      HEAP32[i49 >> 2] = i51;
      i52 = (i45 | 0) == 0;
      if (i52) {
        i53 = 0;
        i2 = 22;
        break;
      } else {
        i2 = 16;
        break;
      }
     case 16:
      i54 = i42 + 548 | 0;
      i55 = HEAP32[i54 >> 2] | 0;
      i56 = (i55 | 0) == 0;
      if (i56) {
        i2 = 18;
        break;
      } else {
        i2 = 17;
        break;
      }
     case 17:
      i57 = i55;
      i58 = FUNCTION_TABLE_iii[i57 & 511](i46, i45) | 0;
      i59 = i58;
      i2 = 19;
      break;
     case 18:
      i60 = _malloc(i45) | 0;
      i59 = i60;
      i2 = 19;
      break;
     case 19:
      i61 = (i59 | 0) == 0;
      if (i61) {
        i2 = 20;
        break;
      } else {
        i53 = i59;
        i2 = 22;
        break;
      }
     case 20:
      i62 = HEAP32[i49 >> 2] | 0;
      i63 = i62 & 1048576;
      i64 = (i63 | 0) == 0;
      if (i64) {
        i2 = 21;
        break;
      } else {
        i53 = 0;
        i2 = 22;
        break;
      }
     case 21:
      _png_error(i42, 5269956);
     case 22:
      HEAP32[i49 >> 2] = i50;
      i48 = i53;
      i2 = 23;
      break;
     case 23:
      i65 = i11;
      i66 = i65 + 152 | 0;
      HEAP32[i66 >> 2] = i48;
      i67 = i11;
      i68 = i67 + 152 | 0;
      i69 = HEAP32[i68 >> 2] | 0;
      i70 = (i69 | 0) == 0;
      if (i70) {
        i2 = 24;
        break;
      } else {
        i2 = 25;
        break;
      }
     case 24:
      i6 = 1;
      i2 = 25;
      break;
     case 25:
      i71 = i11;
      i72 = i71 + 128 | 0;
      HEAP32[i72 >> 2] = 170;
      i73 = i11;
      i74 = i73 + 132 | 0;
      HEAP32[i74 >> 2] = 68;
      i75 = i11;
      i76 = i75;
      i77 = i11;
      i78 = i77 + 136 | 0;
      HEAP32[i78 >> 2] = i76;
      i79 = i6;
      i80 = (i79 | 0) == 0;
      if (i80) {
        i2 = 26;
        break;
      } else {
        i2 = 52;
        break;
      }
     case 26:
      i81 = i11;
      i82 = i81 + 96 | 0;
      i83 = (i82 | 0) == 0;
      if (i83) {
        i2 = 47;
        break;
      } else {
        i2 = 27;
        break;
      }
     case 27:
      i84 = i81 + 120 | 0;
      HEAP32[i84 >> 2] = 0;
      i85 = i81 + 128 | 0;
      i86 = HEAP32[i85 >> 2] | 0;
      i87 = (i86 | 0) == 0;
      if (i87) {
        i2 = 28;
        break;
      } else {
        i88 = i86;
        i2 = 29;
        break;
      }
     case 28:
      HEAP32[i85 >> 2] = 230;
      i89 = i81 + 136 | 0;
      HEAP32[i89 >> 2] = 0;
      i88 = 230;
      i2 = 29;
      break;
     case 29:
      i90 = i81 + 132 | 0;
      i91 = HEAP32[i90 >> 2] | 0;
      i92 = (i91 | 0) == 0;
      if (i92) {
        i2 = 30;
        break;
      } else {
        i2 = 31;
        break;
      }
     case 30:
      HEAP32[i90 >> 2] = 82;
      i2 = 31;
      break;
     case 31:
      i93 = i81 + 136 | 0;
      i94 = HEAP32[i93 >> 2] | 0;
      i95 = FUNCTION_TABLE_iiii[i88 & 511](i94, 1, 7116) | 0;
      i96 = (i95 | 0) == 0;
      if (i96) {
        i2 = 42;
        break;
      } else {
        i2 = 32;
        break;
      }
     case 32:
      i97 = i95;
      i98 = i81 + 124 | 0;
      HEAP32[i98 >> 2] = i97;
      i99 = i95 + 52 | 0;
      i100 = i99;
      HEAP32[i100 >> 2] = 0;
      i101 = HEAP32[i98 >> 2] | 0;
      i102 = (i101 | 0) == 0;
      if (i102) {
        i2 = 41;
        break;
      } else {
        i2 = 33;
        break;
      }
     case 33:
      i103 = i101 + 52 | 0;
      i104 = i103;
      i105 = HEAP32[i104 >> 2] | 0;
      i106 = (i105 | 0) == 0;
      i107 = i101 + 36 | 0;
      if (i106) {
        i2 = 36;
        break;
      } else {
        i2 = 34;
        break;
      }
     case 34:
      i108 = HEAP32[i107 >> 2] | 0;
      i109 = (i108 | 0) == 15;
      if (i109) {
        i2 = 36;
        break;
      } else {
        i2 = 35;
        break;
      }
     case 35:
      i110 = HEAP32[i90 >> 2] | 0;
      i111 = HEAP32[i93 >> 2] | 0;
      FUNCTION_TABLE_vii[i110 & 511](i111, i105);
      i112 = i103 | 0;
      HEAP32[i112 >> 2] = 0;
      i2 = 36;
      break;
     case 36:
      i113 = i101 + 8 | 0;
      HEAP32[i113 >> 2] = 1;
      HEAP32[i107 >> 2] = 15;
      i114 = HEAP32[i98 >> 2] | 0;
      i115 = (i114 | 0) == 0;
      if (i115) {
        i2 = 41;
        break;
      } else {
        i2 = 37;
        break;
      }
     case 37:
      i116 = i114 + 40 | 0;
      HEAP32[i116 >> 2] = 0;
      i117 = i114 + 44 | 0;
      HEAP32[i117 >> 2] = 0;
      i118 = i114 + 48 | 0;
      HEAP32[i118 >> 2] = 0;
      i119 = HEAP32[i98 >> 2] | 0;
      i120 = (i119 | 0) == 0;
      if (i120) {
        i2 = 41;
        break;
      } else {
        i2 = 38;
        break;
      }
     case 38:
      i121 = i119 + 28 | 0;
      HEAP32[i121 >> 2] = 0;
      i122 = i81 + 116 | 0;
      HEAP32[i122 >> 2] = 0;
      i123 = i81 + 104 | 0;
      HEAP32[i123 >> 2] = 0;
      HEAP32[i84 >> 2] = 0;
      i124 = i119 + 8 | 0;
      i125 = HEAP32[i124 >> 2] | 0;
      i126 = (i125 | 0) == 0;
      if (i126) {
        i2 = 40;
        break;
      } else {
        i2 = 39;
        break;
      }
     case 39:
      i127 = i125 & 1;
      i128 = i81 + 144 | 0;
      HEAP32[i128 >> 2] = i127;
      i2 = 40;
      break;
     case 40:
      i129 = i119 | 0;
      HEAP32[i129 >> 2] = 0;
      i130 = i119 + 4 | 0;
      HEAP32[i130 >> 2] = 0;
      i131 = i119 + 12 | 0;
      HEAP32[i131 >> 2] = 0;
      i132 = i119 + 20 | 0;
      HEAP32[i132 >> 2] = 32768;
      i133 = i119 + 32 | 0;
      HEAP32[i133 >> 2] = 0;
      i134 = i119 + 56 | 0;
      HEAP32[i134 >> 2] = 0;
      i135 = i119 + 60 | 0;
      HEAP32[i135 >> 2] = 0;
      i136 = i119 + 1328 | 0;
      i137 = i119 + 108 | 0;
      i138 = i136;
      HEAP32[i137 >> 2] = i138;
      i139 = i119 + 80 | 0;
      HEAP32[i139 >> 2] = i138;
      i140 = i119 + 76 | 0;
      HEAP32[i140 >> 2] = i138;
      i141 = i119 + 7104 | 0;
      HEAP32[i141 >> 2] = 1;
      i142 = i119 + 7108 | 0;
      HEAP32[i142 >> 2] = -1;
      i2 = 52;
      break;
     case 41:
      i143 = HEAP32[i90 >> 2] | 0;
      i144 = HEAP32[i93 >> 2] | 0;
      FUNCTION_TABLE_vii[i143 & 511](i144, i95);
      HEAP32[i98 >> 2] = 0;
      i2 = 47;
      break;
     case 42:
      i145 = i11;
      i146 = (i145 | 0) == 0;
      if (i146) {
        i2 = 45;
        break;
      } else {
        i2 = 43;
        break;
      }
     case 43:
      i147 = i145 + 48 | 0;
      i148 = HEAP32[i147 >> 2] | 0;
      i149 = (i148 | 0) == 0;
      if (i149) {
        i2 = 45;
        break;
      } else {
        i2 = 44;
        break;
      }
     case 44:
      FUNCTION_TABLE_vii[i148 & 511](i145, 5270280);
      i2 = 46;
      break;
     case 45:
      i150 = HEAP32[_stderr >> 2] | 0;
      i151 = _fprintf(i150 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5270280, tempInt) | 0) | 0;
      i152 = HEAP32[_stderr >> 2] | 0;
      i153 = _fputc(10, i152 | 0) | 0;
      i2 = 46;
      break;
     case 46:
      i6 = 1;
      i2 = 52;
      break;
     case 47:
      i154 = i11;
      i155 = (i154 | 0) == 0;
      if (i155) {
        i2 = 50;
        break;
      } else {
        i2 = 48;
        break;
      }
     case 48:
      i156 = i154 + 48 | 0;
      i157 = HEAP32[i156 >> 2] | 0;
      i158 = (i157 | 0) == 0;
      if (i158) {
        i2 = 50;
        break;
      } else {
        i2 = 49;
        break;
      }
     case 49:
      FUNCTION_TABLE_vii[i157 & 511](i154, 5268748);
      i2 = 51;
      break;
     case 50:
      i159 = HEAP32[_stderr >> 2] | 0;
      i160 = _fprintf(i159 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5268748, tempInt) | 0) | 0;
      i161 = HEAP32[_stderr >> 2] | 0;
      i162 = _fputc(10, i161 | 0) | 0;
      i2 = 51;
      break;
     case 51:
      i6 = 1;
      i2 = 52;
      break;
     case 52:
      i163 = i6;
      i164 = (i163 | 0) == 0;
      i165 = i11;
      if (i164) {
        i2 = 59;
        break;
      } else {
        i2 = 53;
        break;
      }
     case 53:
      i166 = i11;
      i167 = i166 + 152 | 0;
      i168 = HEAP32[i167 >> 2] | 0;
      i169 = i165;
      i170 = (i165 | 0) == 0;
      i171 = (i168 | 0) == 0;
      i172 = i170 | i171;
      if (i172) {
        i2 = 57;
        break;
      } else {
        i2 = 54;
        break;
      }
     case 54:
      i173 = i165 + 552 | 0;
      i174 = HEAP32[i173 >> 2] | 0;
      i175 = (i174 | 0) == 0;
      if (i175) {
        i2 = 56;
        break;
      } else {
        i2 = 55;
        break;
      }
     case 55:
      i176 = i174;
      FUNCTION_TABLE_vii[i176 & 511](i169, i168);
      i2 = 57;
      break;
     case 56:
      _free(i168);
      i2 = 57;
      break;
     case 57:
      i177 = i11;
      i178 = i177 + 152 | 0;
      HEAP32[i178 >> 2] = 0;
      i179 = i11;
      i180 = (i179 | 0) == 0;
      if (i180) {
        i14 = 0;
        i2 = 66;
        break;
      } else {
        i2 = 58;
        break;
      }
     case 58:
      i181 = i179;
      _free(i181);
      i14 = 0;
      i2 = 66;
      break;
     case 59:
      i182 = i165 + 152 | 0;
      i183 = HEAP32[i182 >> 2] | 0;
      i184 = i11;
      i185 = i184 + 108 | 0;
      HEAP32[i185 >> 2] = i183;
      i186 = i11;
      i187 = i186 + 156 | 0;
      i188 = HEAP32[i187 >> 2] | 0;
      i189 = i11;
      i190 = i189 + 112 | 0;
      HEAP32[i190 >> 2] = i188;
      i191 = i11;
      i192 = (i191 | 0) == 0;
      if (i192) {
        i2 = 65;
        break;
      } else {
        i2 = 60;
        break;
      }
     case 60:
      i193 = i191 + 64 | 0;
      HEAP32[i193 >> 2] = 0;
      i194 = i191 + 60 | 0;
      HEAP32[i194 >> 2] = 362;
      i195 = i191 + 56 | 0;
      i196 = HEAP32[i195 >> 2] | 0;
      i197 = (i196 | 0) == 0;
      if (i197) {
        i2 = 64;
        break;
      } else {
        i2 = 61;
        break;
      }
     case 61:
      HEAP32[i195 >> 2] = 0;
      i198 = i191 + 48 | 0;
      i199 = HEAP32[i198 >> 2] | 0;
      i200 = (i199 | 0) == 0;
      if (i200) {
        i2 = 63;
        break;
      } else {
        i2 = 62;
        break;
      }
     case 62:
      FUNCTION_TABLE_vii[i199 & 511](i191, 5269636);
      i2 = 64;
      break;
     case 63:
      i201 = HEAP32[_stderr >> 2] | 0;
      i202 = _fprintf(i201 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5269636, tempInt) | 0) | 0;
      i203 = HEAP32[_stderr >> 2] | 0;
      i204 = _fputc(10, i203 | 0) | 0;
      i2 = 64;
      break;
     case 64:
      i205 = i191 + 308 | 0;
      HEAP32[i205 >> 2] = 0;
      i2 = 65;
      break;
     case 65:
      i206 = i11;
      i14 = i206;
      i2 = 66;
      break;
     case 66:
      STACKTOP = i1;
      return i14 | 0;
    }
  } catch (e) {
    if (!e.longjmp || !(e.id in i3)) throw e;
    i4[setjmpLabels[e.id]](e.value);
  }
  return 0;
}



function _png_read_info(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, i150 = 0, i151 = 0, i152 = 0, i153 = 0, i154 = 0, i155 = 0, i156 = 0, i157 = 0, i158 = 0, i159 = 0, i160 = 0, i161 = 0, i162 = 0, i163 = 0, i164 = 0, i165 = 0, i166 = 0, i167 = 0, i168 = 0, i169 = 0, i170 = 0, i171 = 0, i172 = 0, i173 = 0, i174 = 0, i175 = 0, i176 = 0, i177 = 0, i178 = 0, i179 = 0, i180 = 0, i181 = 0, i182 = 0, i183 = 0, i184 = 0, i185 = 0, i186 = 0, i187 = 0, i188 = 0, i189 = 0, i190 = 0, i191 = 0, i192 = 0, i193 = 0, i194 = 0, i195 = 0, i196 = 0, i197 = 0, i198 = 0, i199 = 0, i200 = 0, i201 = 0, i202 = 0, i203 = 0, i204 = 0, i205 = 0, i206 = 0, i207 = 0, i208 = 0, i209 = 0, i210 = 0, i211 = 0, i212 = 0, i213 = 0, i214 = 0, i215 = 0, i216 = 0, i217 = 0, i218 = 0, i219 = 0, i220 = 0, i221 = 0, i222 = 0, i223 = 0, i224 = 0, i225 = 0, i226 = 0, i227 = 0, i228 = 0, i229 = 0, i230 = 0, i231 = 0, i232 = 0, i233 = 0, i234 = 0, i235 = 0, i236 = 0, i237 = 0, i238 = 0, i239 = 0, i240 = 0, i241 = 0, i242 = 0, i243 = 0, i244 = 0, i245 = 0, i246 = 0, i247 = 0, i248 = 0, i249 = 0, i250 = 0, i251 = 0, i252 = 0, i253 = 0, i254 = 0, i255 = 0, i256 = 0, i257 = 0, i258 = 0, i259 = 0, i260 = 0, i261 = 0, i262 = 0, i263 = 0, i264 = 0, i265 = 0, i266 = 0, i267 = 0, i268 = 0, i269 = 0, i270 = 0, i271 = 0, i272 = 0, i273 = 0, i274 = 0, i275 = 0, i276 = 0, i277 = 0, i278 = 0, i279 = 0, i280 = 0, i281 = 0, i282 = 0, i283 = 0, i284 = 0, i285 = 0, i286 = 0, i287 = 0, i288 = 0, i289 = 0, i290 = 0, i291 = 0, i292 = 0, i293 = 0, i294 = 0, i295 = 0, i296 = 0, i297 = 0, i298 = 0, i299 = 0, i300 = 0;
  i3 = STACKTOP;
  STACKTOP = STACKTOP + 1772 | 0;
  i4 = i3 | 0;
  i5 = i3 + 4 | 0;
  i6 = i3 + 8 | 0;
  i7 = i3 + 264 | 0;
  i8 = i3 + 272 | 0;
  i9 = i3 + 276 | 0;
  i10 = i3 + 356 | 0;
  i11 = i3 + 360 | 0;
  i12 = i3 + 364 | 0;
  i13 = i3 + 368 | 0;
  i14 = i3 + 372 | 0;
  i15 = i3 + 376 | 0;
  i16 = i3 + 380 | 0;
  i17 = i3 + 384 | 0;
  i18 = i3 + 388 | 0;
  i19 = i3 + 392 | 0;
  i20 = i3 + 396 | 0;
  i21 = i3 + 408 | 0;
  i22 = i3 + 920 | 0;
  i23 = i3 + 924 | 0;
  i24 = i3 + 928 | 0;
  i25 = i3 + 960 | 0;
  i26 = i3 + 968 | 0;
  i27 = i3 + 1736 | 0;
  i28 = i3 + 1740 | 0;
  i29 = i3 + 1756 | 0;
  i30 = i3 + 1764 | 0;
  if ((i1 | 0) == 0 | (i2 | 0) == 0) {
    STACKTOP = i3;
    return;
  }
  i31 = i1 + 276 | 0;
  i32 = HEAP8[i31] | 0;
  i33 = i32 & 255;
  do {
    if ((i32 & 255) > 7) {
      i34 = i1 + 60 | 0;
      i35 = i1;
    } else {
      i36 = 8 - i33 | 0;
      HEAP32[i1 + 624 >> 2] = 17;
      i37 = i1 + 60 | 0;
      i38 = HEAP32[i37 >> 2] | 0;
      if ((i38 | 0) == 0) {
        _png_error(i1, 5269084);
      }
      i39 = i1;
      i40 = i33 + (i2 + 32) | 0;
      FUNCTION_TABLE_viii[i38 & 511](i39, i40, i36);
      HEAP8[i31] = 8;
      i38 = i30;
      HEAP32[i30 >> 2] = 1196314761;
      HEAP32[i30 + 4 >> 2] = 169478669;
      do {
        if (i36 >>> 0 > 8) {
          i41 = 8;
        } else {
          if (i32 << 24 >> 24 != 8) {
            i41 = i36;
            break;
          }
          _png_error(i1, 5270136);
        }
      } while (0);
      if ((_memcmp(i40, i38 + i33 | 0, (i41 + i33 | 0) >>> 0 > 8 ? i36 : i41) | 0) == 0) {
        if ((i32 & 255) >= 3) {
          i34 = i37;
          i35 = i39;
          break;
        }
        i42 = i1 + 84 | 0;
        HEAP32[i42 >> 2] = HEAP32[i42 >> 2] | 4096;
        i34 = i37;
        i35 = i39;
        break;
      }
      if ((i32 & 255) >= 4) {
        _png_error(i1, 5270136);
      }
      i42 = i36 - 4 | 0;
      i43 = i29;
      HEAP32[i29 >> 2] = 1196314761;
      HEAP32[i29 + 4 >> 2] = 169478669;
      do {
        if (i42 >>> 0 > 8) {
          i44 = 8;
        } else {
          if ((i42 | 0) != 0) {
            i44 = i42;
            break;
          }
          _png_error(i1, 5272540);
        }
      } while (0);
      if ((_memcmp(i40, i43 + i33 | 0, (i44 + i33 | 0) >>> 0 > 8 ? i36 : i44) | 0) == 0) {
        _png_error(i1, 5270136);
      } else {
        _png_error(i1, 5272540);
      }
    }
  } while (0);
  i44 = i1 + 260 | 0;
  i33 = i1 + 84 | 0;
  i29 = i1 + 48 | 0;
  i32 = (i44 | 0) == 0;
  i41 = i1 + 520 | 0;
  i30 = i1 + 524 | 0;
  i31 = i28 | 0;
  i42 = i28 + 1 | 0;
  i39 = i28 + 2 | 0;
  i37 = i28 + 3 | 0;
  i38 = i28 + 4 | 0;
  i45 = i28 + 5 | 0;
  i46 = i28 + 6 | 0;
  i47 = i28 + 7 | 0;
  i48 = i28 + 8 | 0;
  i49 = i28 + 9 | 0;
  i50 = i28 + 10 | 0;
  i51 = i28 + 11 | 0;
  i52 = i28 + 12 | 0;
  i28 = i1 + 180 | 0;
  i53 = i1 + 184 | 0;
  i54 = i1 + 271 | 0;
  i55 = i1 + 267 | 0;
  i56 = i1 + 270 | 0;
  i57 = i1 + 540 | 0;
  i58 = i1 + 572 | 0;
  i59 = i1 + 274 | 0;
  i60 = i1 + 273 | 0;
  i61 = i1 + 196 | 0;
  i62 = i2 | 0;
  i63 = i2 + 4 | 0;
  i64 = i2 + 24 | 0;
  i65 = i2 + 25 | 0;
  i66 = i2 + 26 | 0;
  i67 = i2 + 27 | 0;
  i68 = i2 + 28 | 0;
  i69 = i1 + 576 | 0;
  i70 = i1 + 580 | 0;
  i71 = i2 + 29 | 0;
  i72 = i2 + 30 | 0;
  i73 = i2 + 12 | 0;
  i74 = i1 + 536 | 0;
  i75 = i1 + 88 | 0;
  i76 = i1 + 248 | 0;
  i77 = i26 | 0;
  i78 = i27 | 0;
  i79 = i26 | 0;
  i26 = i27 + 1 | 0;
  i80 = i27 + 2 | 0;
  i27 = i2 + 8 | 0;
  i81 = i1 + 258 | 0;
  i82 = i2 + 22 | 0;
  i83 = i1 + 548 | 0;
  i84 = i1 + 252 | 0;
  i85 = i2 + 16 | 0;
  i86 = i1 + 256 | 0;
  i87 = i2 + 20 | 0;
  i88 = i2 + 188 | 0;
  i89 = i1;
  i90 = i25 | 0;
  i91 = i1 + 288 | 0;
  i92 = i1 + 290 | 0;
  i93 = i1 + 292 | 0;
  i94 = i1 + 294 | 0;
  i95 = i2 + 94 | 0;
  i96 = i25 + 1 | 0;
  i97 = i1 + 296 | 0;
  i98 = i25 + 2 | 0;
  i99 = i25 + 3 | 0;
  i100 = i25 + 4 | 0;
  i101 = i25 + 5 | 0;
  i25 = i24 | 0;
  i102 = i24 + 1 | 0;
  i103 = i24 + 2 | 0;
  i104 = i24 + 3 | 0;
  i105 = i24 + 4 | 0;
  i106 = i24 + 5 | 0;
  i107 = i24 + 6 | 0;
  i108 = i24 + 7 | 0;
  i109 = i24 + 8 | 0;
  i110 = i24 + 9 | 0;
  i111 = i24 + 10 | 0;
  i112 = i24 + 11 | 0;
  i113 = i24 + 12 | 0;
  i114 = i24 + 13 | 0;
  i115 = i24 + 14 | 0;
  i116 = i24 + 15 | 0;
  i117 = i24 + 16 | 0;
  i118 = i24 + 17 | 0;
  i119 = i24 + 18 | 0;
  i120 = i24 + 19 | 0;
  i121 = i24 + 20 | 0;
  i122 = i24 + 21 | 0;
  i123 = i24 + 22 | 0;
  i124 = i24 + 23 | 0;
  i125 = i24 + 24 | 0;
  i126 = i24 + 25 | 0;
  i127 = i24 + 26 | 0;
  i128 = i24 + 27 | 0;
  i129 = i24 + 28 | 0;
  i130 = i24 + 29 | 0;
  i131 = i24 + 30 | 0;
  i132 = i24 + 31 | 0;
  i24 = i2 + 132 | 0;
  i133 = i2 + 136 | 0;
  i134 = i2 + 140 | 0;
  i135 = i2 + 144 | 0;
  i136 = i2 + 148 | 0;
  i137 = i2 + 152 | 0;
  i138 = i2 + 156 | 0;
  i139 = i2 + 160 | 0;
  i140 = i23 | 0;
  i141 = i23 + 1 | 0;
  i142 = i23 + 2 | 0;
  i143 = i23 + 3 | 0;
  i23 = i1 + 324 | 0;
  i144 = i2 + 40 | 0;
  i145 = i22 | 0;
  i146 = i1 + 476 | 0;
  i147 = i2 + 128 | 0;
  i148 = i22 + 1 | 0;
  i22 = i20 | 0;
  i149 = i20 + 5 | 0;
  i150 = i20 + 4 | 0;
  i151 = i20 + 1 | 0;
  i152 = i20 + 6 | 0;
  i153 = i20 + 2 | 0;
  i154 = i20 + 7 | 0;
  i155 = i20 + 3 | 0;
  i156 = i20 + 8 | 0;
  i20 = i2 + 104 | 0;
  i157 = i2 + 108 | 0;
  i158 = i2 + 112 | 0;
  i159 = i1 + 620 | 0;
  i160 = i1 + 552 | 0;
  i161 = i2 + 164 | 0;
  i162 = i2 + 168 | 0;
  i163 = i2 + 172 | 0;
  i164 = i2 + 184 | 0;
  i165 = i2 + 185 | 0;
  i166 = i2 + 176 | 0;
  i167 = i2 + 180 | 0;
  i168 = i2 + 224 | 0;
  i169 = i2 + 228 | 0;
  i170 = i2 + 232 | 0;
  i171 = i2 + 116 | 0;
  i172 = i2 + 120 | 0;
  i173 = i2 + 124 | 0;
  i174 = i11;
  i175 = i1 + 356 | 0;
  i176 = i1 + 360 | 0;
  i177 = i2 + 68 | 0;
  i178 = i1 + 357 | 0;
  i179 = i1 + 358 | 0;
  i180 = i10 | 0;
  i10 = i2 + 44 | 0;
  i181 = i9 | 0;
  i182 = i2 + 208 | 0;
  i183 = i2 + 200 | 0;
  i184 = i2 + 204 | 0;
  i185 = i2 + 212 | 0;
  i186 = i1 + 584 | 0;
  i187 = i2 + 220 | 0;
  i188 = i2 + 216 | 0;
  i189 = i7 | 0;
  i190 = i7 + 6 | 0;
  i191 = i7 + 5 | 0;
  i192 = i7 + 4 | 0;
  i193 = i7 + 3 | 0;
  i194 = i7 + 2 | 0;
  i195 = i7 + 1 | 0;
  i7 = i2 + 60 | 0;
  i196 = i6 | 0;
  i6 = i1 + 380 | 0;
  i197 = i1 + 372 | 0;
  i198 = i2 + 80 | 0;
  i199 = i1 + 368 | 0;
  i200 = (i197 | 0) == 0;
  i201 = i2 + 84 | 0;
  i202 = i197 | 0;
  i197 = i1 + 374 | 0;
  i203 = i1 + 376 | 0;
  i204 = i1 + 378 | 0;
  L29 : while (1) {
    i205 = _png_read_chunk_header(i1) | 0;
    do {
      if ((_memcmp(i44, 5245992, 4) | 0) == 0) {
        i206 = HEAP32[i33 >> 2] | 0;
        if ((i206 & 8 | 0) == 0) {
          break;
        }
        HEAP32[i33 >> 2] = i206 | 8192;
      }
    } while (0);
    if ((_memcmp(i44, 5245976, 4) | 0) == 0) {
      i36 = HEAP32[i33 >> 2] | 0;
      if ((i36 & 1 | 0) != 0) {
        i207 = 23;
        break;
      }
      if ((i205 | 0) != 13) {
        i207 = 25;
        break;
      }
      HEAP32[i33 >> 2] = i36 | 1;
      i36 = HEAP32[i34 >> 2] | 0;
      if ((i36 | 0) == 0) {
        i207 = 27;
        break;
      }
      FUNCTION_TABLE_viii[i36 & 511](i35, i31, 13);
      i36 = HEAP32[i75 >> 2] | 0;
      do {
        if ((HEAP8[i44] & 32) << 24 >> 24 == 0) {
          if ((i36 & 2048 | 0) == 0) {
            i207 = 31;
            break;
          } else {
            break;
          }
        } else {
          if ((i36 & 768 | 0) == 768) {
            break;
          } else {
            i207 = 31;
            break;
          }
        }
      } while (0);
      if ((i207 | 0) == 31) {
        i207 = 0;
        HEAP32[i76 >> 2] = _crc32(HEAP32[i76 >> 2] | 0, i31, 13) | 0;
      }
      _png_crc_finish(i1, 0) | 0;
      i36 = (HEAPU8[i42] | 0) << 16 | (HEAPU8[i31] | 0) << 24 | (HEAPU8[i39] | 0) << 8 | (HEAPU8[i37] | 0);
      if ((i36 | 0) < 0) {
        i207 = 33;
        break;
      }
      i43 = (HEAPU8[i45] | 0) << 16 | (HEAPU8[i38] | 0) << 24 | (HEAPU8[i46] | 0) << 8 | (HEAPU8[i47] | 0);
      if ((i43 | 0) < 0) {
        i207 = 35;
        break;
      }
      i40 = HEAP8[i48] | 0;
      i206 = i40 & 255;
      i208 = HEAP8[i49] | 0;
      i209 = i208 & 255;
      i210 = HEAP8[i50] | 0;
      i211 = HEAP8[i51] | 0;
      i212 = HEAP8[i52] | 0;
      HEAP32[i28 >> 2] = i36;
      HEAP32[i53 >> 2] = i43;
      HEAP8[i54] = i40;
      HEAP8[i55] = i212;
      HEAP8[i56] = i208;
      HEAP8[i57] = i211;
      HEAP8[i58] = i210;
      if ((i209 | 0) == 2) {
        HEAP8[i59] = 3;
        i213 = 3;
      } else if ((i209 | 0) == 4) {
        HEAP8[i59] = 2;
        i213 = 2;
      } else if ((i209 | 0) == 6) {
        HEAP8[i59] = 4;
        i213 = 4;
      } else {
        HEAP8[i59] = 1;
        i213 = 1;
      }
      i214 = Math_imul(i213, i40);
      HEAP8[i60] = i214;
      i215 = i214 & 255;
      if ((i214 & 255) > 7) {
        i216 = Math_imul(i215 >>> 3, i36);
      } else {
        i216 = (Math_imul(i215, i36) + 7 | 0) >>> 3;
      }
      HEAP32[i61 >> 2] = i216;
      HEAP32[i62 >> 2] = i36;
      HEAP32[i63 >> 2] = i43;
      HEAP8[i64] = i40;
      HEAP8[i65] = i208;
      HEAP8[i66] = i210;
      HEAP8[i67] = i211;
      HEAP8[i68] = i212;
      do {
        if ((i36 | 0) == 0) {
          i215 = HEAP32[i29 >> 2] | 0;
          if ((i215 | 0) == 0) {
            i214 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i214 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5271996, tempInt) | 0) | 0;
            i214 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i214 | 0) | 0;
            i217 = 1;
            break;
          } else {
            FUNCTION_TABLE_vii[i215 & 511](i1, 5271996);
            i217 = 1;
            break;
          }
        } else {
          i217 = 0;
        }
      } while (0);
      do {
        if ((i43 | 0) == 0) {
          i215 = HEAP32[i29 >> 2] | 0;
          if ((i215 | 0) == 0) {
            i214 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i214 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5271692, tempInt) | 0) | 0;
            i214 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i214 | 0) | 0;
            i218 = 1;
            break;
          } else {
            FUNCTION_TABLE_vii[i215 & 511](i1, 5271692);
            i218 = 1;
            break;
          }
        } else {
          i218 = i217;
        }
      } while (0);
      do {
        if ((HEAP32[i69 >> 2] | 0) >>> 0 < i36 >>> 0 | i36 >>> 0 > 1e6) {
          i215 = HEAP32[i29 >> 2] | 0;
          if ((i215 | 0) == 0) {
            i214 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i214 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5271520, tempInt) | 0) | 0;
            i214 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i214 | 0) | 0;
            i219 = 1;
            break;
          } else {
            FUNCTION_TABLE_vii[i215 & 511](i1, 5271520);
            i219 = 1;
            break;
          }
        } else {
          i219 = i218;
        }
      } while (0);
      do {
        if ((HEAP32[i70 >> 2] | 0) >>> 0 < i43 >>> 0 | i43 >>> 0 > 1e6) {
          i215 = HEAP32[i29 >> 2] | 0;
          if ((i215 | 0) == 0) {
            i214 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i214 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5271204, tempInt) | 0) | 0;
            i214 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i214 | 0) | 0;
            i220 = 1;
            break;
          } else {
            FUNCTION_TABLE_vii[i215 & 511](i1, 5271204);
            i220 = 1;
            break;
          }
        } else {
          i220 = i219;
        }
      } while (0);
      i43 = i36 >>> 0 > 536870798;
      do {
        if (i43) {
          i215 = HEAP32[i29 >> 2] | 0;
          if ((i215 | 0) == 0) {
            i214 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i214 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5270672, tempInt) | 0) | 0;
            i214 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i214 | 0) | 0;
            break;
          } else {
            FUNCTION_TABLE_vii[i215 & 511](i1, 5270672);
            break;
          }
        }
      } while (0);
      do {
        if ((i206 - 1 | 0) >>> 0 > 1 & i40 << 24 >> 24 != 4 & i40 << 24 >> 24 != 8 & i40 << 24 >> 24 != 16) {
          i215 = HEAP32[i29 >> 2] | 0;
          if ((i215 | 0) == 0) {
            i214 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i214 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5270508, tempInt) | 0) | 0;
            i214 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i214 | 0) | 0;
            i221 = 1;
            break;
          } else {
            FUNCTION_TABLE_vii[i215 & 511](i1, 5270508);
            i221 = 1;
            break;
          }
        } else {
          i221 = i220;
        }
      } while (0);
      do {
        if ((i208 & 255) > 6) {
          i207 = 70;
        } else {
          if ((i208 << 24 >> 24 | 0) == 5 | (i208 << 24 >> 24 | 0) == 1) {
            i207 = 70;
            break;
          } else {
            i222 = i221;
            break;
          }
        }
      } while (0);
      do {
        if ((i207 | 0) == 70) {
          i207 = 0;
          i206 = HEAP32[i29 >> 2] | 0;
          if ((i206 | 0) == 0) {
            i215 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i215 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5270372, tempInt) | 0) | 0;
            i215 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i215 | 0) | 0;
            i222 = 1;
            break;
          } else {
            FUNCTION_TABLE_vii[i206 & 511](i1, 5270372);
            i222 = 1;
            break;
          }
        }
      } while (0);
      do {
        if (i208 << 24 >> 24 == 3 & (i40 & 255) > 8) {
          i207 = 76;
        } else {
          if (!((i209 | 0) == 6 | (i209 | 0) == 4 | (i209 | 0) == 2)) {
            i223 = i222;
            break;
          }
          if ((i40 & 255) < 8) {
            i207 = 76;
            break;
          } else {
            i223 = i222;
            break;
          }
        }
      } while (0);
      do {
        if ((i207 | 0) == 76) {
          i207 = 0;
          i40 = HEAP32[i29 >> 2] | 0;
          if ((i40 | 0) == 0) {
            i208 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i208 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5270176, tempInt) | 0) | 0;
            i208 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i208 | 0) | 0;
            i223 = 1;
            break;
          } else {
            FUNCTION_TABLE_vii[i40 & 511](i1, 5270176);
            i223 = 1;
            break;
          }
        }
      } while (0);
      do {
        if ((i212 & 255) > 1) {
          i40 = HEAP32[i29 >> 2] | 0;
          if ((i40 | 0) == 0) {
            i208 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i208 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 527e4, tempInt) | 0) | 0;
            i208 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i208 | 0) | 0;
            i224 = 1;
            break;
          } else {
            FUNCTION_TABLE_vii[i40 & 511](i1, 527e4);
            i224 = 1;
            break;
          }
        } else {
          i224 = i223;
        }
      } while (0);
      do {
        if (i210 << 24 >> 24 == 0) {
          i225 = i224;
        } else {
          i212 = HEAP32[i29 >> 2] | 0;
          if ((i212 | 0) == 0) {
            i40 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i40 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5269864, tempInt) | 0) | 0;
            i40 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i40 | 0) | 0;
            i225 = 1;
            break;
          } else {
            FUNCTION_TABLE_vii[i212 & 511](i1, 5269864);
            i225 = 1;
            break;
          }
        }
      } while (0);
      do {
        if ((HEAP32[i33 >> 2] & 4096 | 0) != 0) {
          if ((HEAP32[i74 >> 2] | 0) == 0) {
            break;
          }
          i210 = HEAP32[i29 >> 2] | 0;
          if ((i210 | 0) == 0) {
            i212 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i212 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5266084, tempInt) | 0) | 0;
            i212 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i212 | 0) | 0;
            break;
          } else {
            FUNCTION_TABLE_vii[i210 & 511](i1, 5266084);
            break;
          }
        }
      } while (0);
      if (i211 << 24 >> 24 == 0) {
        i226 = i225;
      } else {
        do {
          if ((HEAP32[i74 >> 2] & 4 | 0) != 0 & i211 << 24 >> 24 == 64) {
            if ((HEAP32[i33 >> 2] & 4096 | 0) != 0) {
              i207 = 96;
              break;
            }
            if ((i209 | 0) == 6 | (i209 | 0) == 2) {
              i227 = i225;
              break;
            } else {
              i207 = 96;
              break;
            }
          } else {
            i207 = 96;
          }
        } while (0);
        do {
          if ((i207 | 0) == 96) {
            i207 = 0;
            i209 = HEAP32[i29 >> 2] | 0;
            if ((i209 | 0) == 0) {
              i211 = HEAP32[_stderr >> 2] | 0;
              _fprintf(i211 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5269432, tempInt) | 0) | 0;
              i211 = HEAP32[_stderr >> 2] | 0;
              _fputc(10, i211 | 0) | 0;
              i227 = 1;
              break;
            } else {
              FUNCTION_TABLE_vii[i209 & 511](i1, 5269432);
              i227 = 1;
              break;
            }
          }
        } while (0);
        if ((HEAP32[i33 >> 2] & 4096 | 0) == 0) {
          i226 = i227;
        } else {
          i207 = 100;
          break;
        }
      }
      if ((i226 | 0) == 1) {
        i207 = 1384;
        break;
      }
      i209 = HEAP8[i65] | 0;
      do {
        if (i209 << 24 >> 24 == 3) {
          HEAP8[i71] = 1;
          i228 = 1;
        } else {
          i211 = (i209 & 2) << 24 >> 24 == 0 ? 1 : 3;
          HEAP8[i71] = i211;
          if ((i209 & 4) << 24 >> 24 == 0) {
            i228 = i211;
            break;
          }
          i210 = i211 + 1 & 255;
          HEAP8[i71] = i210;
          i228 = i210;
        }
      } while (0);
      i209 = Math_imul(HEAP8[i64] | 0, i228);
      HEAP8[i72] = i209;
      if (i43) {
        HEAP32[i73 >> 2] = 0;
        continue;
      }
      i210 = i209 & 255;
      if ((i209 & 255) > 7) {
        i229 = Math_imul(i210 >>> 3, i36);
      } else {
        i229 = (Math_imul(i210, i36) + 7 | 0) >>> 3;
      }
      HEAP32[i73 >> 2] = i229;
      continue;
    }
    if ((_memcmp(i44, 5245984, 4) | 0) == 0) {
      i210 = HEAP32[i33 >> 2] | 0;
      if ((i210 & 5 | 0) != 5) {
        i207 = 117;
        break;
      }
      HEAP32[i33 >> 2] = i210 | 24;
      do {
        if ((i205 | 0) != 0) {
          i210 = HEAP32[i29 >> 2] | 0;
          if ((i210 | 0) == 0) {
            i209 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i209 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5270792, tempInt) | 0) | 0;
            i209 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i209 | 0) | 0;
            break;
          } else {
            FUNCTION_TABLE_vii[i210 & 511](i1, 5270792);
            break;
          }
        }
      } while (0);
      _png_crc_finish(i1, i205) | 0;
      continue;
    }
    L166 : do {
      if (!i32) {
        i36 = HEAP32[i41 >> 2] | 0;
        if ((i36 | 0) < 1) {
          break;
        }
        i43 = i36;
        i210 = (HEAP32[i30 >> 2] | 0) + ((i36 * 5 & -1) - 5 | 0) | 0;
        while (1) {
          if ((_memcmp(i44, i210, 4) | 0) == 0) {
            break;
          }
          i36 = i43 - 1 | 0;
          if ((i36 | 0) == 0) {
            break L166;
          } else {
            i43 = i36;
            i210 = i210 - 5 | 0;
          }
        }
        if (HEAP8[i210 + 4 | 0] << 24 >> 24 == 0) {
          break;
        }
        if ((_memcmp(i44, 5245992, 4) | 0) == 0) {
          HEAP32[i33 >> 2] = HEAP32[i33 >> 2] | 4;
        }
        _png_handle_unknown(i1, i2, i205);
        if ((_memcmp(i44, 5245968, 4) | 0) == 0) {
          HEAP32[i33 >> 2] = HEAP32[i33 >> 2] | 2;
          continue L29;
        } else {
          if ((_memcmp(i44, 5245992, 4) | 0) == 0) {
            i207 = 134;
            break L29;
          } else {
            continue L29;
          }
        }
      }
    } while (0);
    if ((_memcmp(i44, 5245968, 4) | 0) == 0) {
      i43 = HEAP32[i33 >> 2] | 0;
      if ((i43 & 1 | 0) == 0) {
        i207 = 141;
        break;
      }
      if ((i43 & 4 | 0) != 0) {
        i36 = HEAP32[i29 >> 2] | 0;
        if ((i36 | 0) == 0) {
          i209 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i209 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5273128, tempInt) | 0) | 0;
          i209 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i209 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i36 & 511](i1, 5273128);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      if ((i43 & 2 | 0) != 0) {
        i207 = 148;
        break;
      }
      HEAP32[i33 >> 2] = i43 | 2;
      i43 = HEAP8[i56] | 0;
      if ((i43 & 2) << 24 >> 24 == 0) {
        i36 = HEAP32[i29 >> 2] | 0;
        if ((i36 | 0) == 0) {
          i209 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i209 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5271888, tempInt) | 0) | 0;
          i209 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i209 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i36 & 511](i1, 5271888);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      if (!(i205 >>> 0 < 769 & ((i205 >>> 0) % 3 | 0) == 0)) {
        if (i43 << 24 >> 24 == 3) {
          i207 = 160;
          break;
        }
        i43 = HEAP32[i29 >> 2] | 0;
        if ((i43 | 0) == 0) {
          i36 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i36 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5271668, tempInt) | 0) | 0;
          i36 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i36 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i43 & 511](i1, 5271668);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      i43 = (i205 | 0) / 3 & -1;
      L207 : do {
        if ((i205 | 0) > 2) {
          i36 = 0;
          i209 = i79;
          while (1) {
            i211 = HEAP32[i34 >> 2] | 0;
            if ((i211 | 0) == 0) {
              i207 = 163;
              break L29;
            }
            FUNCTION_TABLE_viii[i211 & 511](i35, i78, 3);
            i211 = HEAP32[i75 >> 2] | 0;
            do {
              if ((HEAP8[i44] & 32) << 24 >> 24 == 0) {
                if ((i211 & 2048 | 0) == 0) {
                  i207 = 167;
                  break;
                } else {
                  break;
                }
              } else {
                if ((i211 & 768 | 0) == 768) {
                  break;
                } else {
                  i207 = 167;
                  break;
                }
              }
            } while (0);
            if ((i207 | 0) == 167) {
              i207 = 0;
              HEAP32[i76 >> 2] = _crc32(HEAP32[i76 >> 2] | 0, i78, 3) | 0;
            }
            HEAP8[i209 | 0] = HEAP8[i78] | 0;
            HEAP8[i209 + 1 | 0] = HEAP8[i26] | 0;
            HEAP8[i209 + 2 | 0] = HEAP8[i80] | 0;
            i211 = i36 + 1 | 0;
            if ((i211 | 0) < (i43 | 0)) {
              i36 = i211;
              i209 = i209 + 3 | 0;
            } else {
              break L207;
            }
          }
        }
      } while (0);
      _png_crc_finish(i1, 0) | 0;
      do {
        if (i43 >>> 0 > 256) {
          if (HEAP8[i65] << 24 >> 24 == 3) {
            i207 = 171;
            break L29;
          }
          i209 = HEAP32[i29 >> 2] | 0;
          if ((i209 | 0) == 0) {
            i36 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i36 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5269796, tempInt) | 0) | 0;
            i36 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i36 | 0) | 0;
            break;
          } else {
            FUNCTION_TABLE_vii[i209 & 511](i1, 5269796);
            break;
          }
        } else {
          _png_free_data(i1, i2, 4096, 0);
          i209 = HEAP32[i83 >> 2] | 0;
          if ((i209 | 0) == 0) {
            i230 = _malloc(768) | 0;
          } else {
            i230 = FUNCTION_TABLE_iii[i209 & 511](i89, 768) | 0;
          }
          if ((i230 | 0) == 0) {
            if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
              i207 = 180;
              break L29;
            } else {
              i231 = 0;
            }
          } else {
            _memset(i230 | 0, 0, 768);
            i231 = i230;
          }
          HEAP32[i84 >> 2] = i231;
          _memcpy(i231, i77, i43 * 3 & -1);
          HEAP32[i85 >> 2] = HEAP32[i84 >> 2] | 0;
          i209 = i43 & 65535;
          HEAP16[i86 >> 1] = i209;
          HEAP16[i87 >> 1] = i209;
          HEAP32[i88 >> 2] = HEAP32[i88 >> 2] | 4096;
          HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 8;
        }
      } while (0);
      if (HEAP8[i56] << 24 >> 24 != 3) {
        continue;
      }
      if ((HEAP32[i27 >> 2] & 16 | 0) == 0) {
        continue;
      }
      i209 = i43 & 65535;
      i36 = i43 & 65535;
      if ((HEAPU16[i81 >> 1] | 0) >>> 0 > i36 >>> 0) {
        i210 = HEAP32[i29 >> 2] | 0;
        if ((i210 | 0) == 0) {
          i211 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i211 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5271480, tempInt) | 0) | 0;
          i211 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i211 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i210 & 511](i1, 5271480);
        }
        HEAP16[i81 >> 1] = i209;
      }
      if ((HEAPU16[i82 >> 1] | 0) >>> 0 <= i36 >>> 0) {
        continue;
      }
      i36 = HEAP32[i29 >> 2] | 0;
      if ((i36 | 0) == 0) {
        i210 = HEAP32[_stderr >> 2] | 0;
        _fprintf(i210 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5271136, tempInt) | 0) | 0;
        i210 = HEAP32[_stderr >> 2] | 0;
        _fputc(10, i210 | 0) | 0;
      } else {
        FUNCTION_TABLE_vii[i36 & 511](i1, 5271136);
      }
      HEAP16[i82 >> 1] = i209;
      continue;
    }
    if ((_memcmp(i44, 5245992, 4) | 0) == 0) {
      i207 = 196;
      break;
    }
    if ((_memcmp(i44, 5245960, 4) | 0) == 0) {
      i209 = HEAP32[i33 >> 2] | 0;
      if ((i209 & 1 | 0) == 0) {
        i207 = 204;
        break;
      }
      if ((i209 & 4 | 0) != 0) {
        i36 = HEAP32[i29 >> 2] | 0;
        if ((i36 | 0) == 0) {
          i210 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i210 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5265180, tempInt) | 0) | 0;
          i210 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i210 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i36 & 511](i1, 5265180);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      i36 = HEAP8[i56] | 0;
      i210 = i36 << 24 >> 24 == 3;
      do {
        if (i210) {
          if ((i209 & 2 | 0) != 0) {
            break;
          }
          i211 = HEAP32[i29 >> 2] | 0;
          if ((i211 | 0) == 0) {
            i212 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i212 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5265048, tempInt) | 0) | 0;
            i212 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i212 | 0) | 0;
          } else {
            FUNCTION_TABLE_vii[i211 & 511](i1, 5265048);
          }
          _png_crc_finish(i1, i205) | 0;
          continue L29;
        }
      } while (0);
      if ((HEAP32[i27 >> 2] & 32 | 0) != 0) {
        i209 = HEAP32[i29 >> 2] | 0;
        if ((i209 | 0) == 0) {
          i43 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i43 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5265008, tempInt) | 0) | 0;
          i43 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i43 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i209 & 511](i1, 5265008);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      if (i210) {
        i232 = 1;
      } else {
        i232 = (i36 & 2) << 24 >> 24 == 0 ? 2 : 6;
      }
      if ((i232 | 0) != (i205 | 0)) {
        i209 = HEAP32[i29 >> 2] | 0;
        if ((i209 | 0) == 0) {
          i43 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i43 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5264908, tempInt) | 0) | 0;
          i43 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i43 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i209 & 511](i1, 5264908);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      i209 = HEAP32[i34 >> 2] | 0;
      if ((i209 | 0) == 0) {
        i207 = 229;
        break;
      }
      FUNCTION_TABLE_viii[i209 & 511](i35, i90, i205);
      i209 = HEAP32[i75 >> 2] | 0;
      do {
        if ((HEAP8[i44] & 32) << 24 >> 24 == 0) {
          if ((i209 & 2048 | 0) == 0) {
            i207 = 233;
            break;
          } else {
            break;
          }
        } else {
          if ((i209 & 768 | 0) == 768) {
            break;
          } else {
            i207 = 233;
            break;
          }
        }
      } while (0);
      if ((i207 | 0) == 233) {
        i207 = 0;
        HEAP32[i76 >> 2] = _crc32(HEAP32[i76 >> 2] | 0, i90, i205) | 0;
      }
      if ((_png_crc_finish(i1, 0) | 0) != 0) {
        continue;
      }
      i209 = HEAP8[i56] | 0;
      do {
        if (i209 << 24 >> 24 == 3) {
          i36 = HEAP8[i90] | 0;
          HEAP8[i91] = i36;
          i210 = HEAP16[i87 >> 1] | 0;
          if (i210 << 16 >> 16 == 0) {
            break;
          }
          i43 = i36 & 255;
          if (i43 >>> 0 < (i210 & 65535) >>> 0) {
            i210 = HEAP32[i84 >> 2] | 0;
            HEAP16[i92 >> 1] = HEAPU8[i210 + (i43 * 3 & -1) | 0] | 0;
            HEAP16[i93 >> 1] = HEAPU8[i210 + (i43 * 3 & -1) + 1 | 0] | 0;
            HEAP16[i94 >> 1] = HEAPU8[i210 + (i43 * 3 & -1) + 2 | 0] | 0;
            break;
          }
          i43 = HEAP32[i29 >> 2] | 0;
          if ((i43 | 0) == 0) {
            i210 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i210 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5264804, tempInt) | 0) | 0;
            i210 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i210 | 0) | 0;
            continue L29;
          } else {
            FUNCTION_TABLE_vii[i43 & 511](i1, 5264804);
            continue L29;
          }
        } else {
          i43 = (HEAPU8[i90] | 0) << 8 | (HEAPU8[i96] | 0);
          if ((i209 & 2) << 24 >> 24 == 0) {
            HEAP16[i97 >> 1] = i43;
            HEAP16[i94 >> 1] = i43;
            HEAP16[i93 >> 1] = i43;
            HEAP16[i92 >> 1] = i43;
            break;
          } else {
            HEAP16[i92 >> 1] = i43;
            HEAP16[i93 >> 1] = (HEAPU8[i98] | 0) << 8 | (HEAPU8[i99] | 0);
            HEAP16[i94 >> 1] = (HEAPU8[i100] | 0) << 8 | (HEAPU8[i101] | 0);
            break;
          }
        }
      } while (0);
      HEAP16[i95 >> 1] = HEAP16[i91 >> 1] | 0;
      HEAP16[i95 + 2 >> 1] = HEAP16[i91 + 2 >> 1] | 0;
      HEAP16[i95 + 4 >> 1] = HEAP16[i91 + 4 >> 1] | 0;
      HEAP16[i95 + 6 >> 1] = HEAP16[i91 + 6 >> 1] | 0;
      HEAP16[i95 + 8 >> 1] = HEAP16[i91 + 8 >> 1] | 0;
      HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 32;
      continue;
    }
    if ((_memcmp(i44, 5245952, 4) | 0) == 0) {
      i209 = HEAP32[i33 >> 2] | 0;
      if ((i209 & 1 | 0) == 0) {
        i207 = 248;
        break;
      }
      if ((i209 & 4 | 0) != 0) {
        i43 = HEAP32[i29 >> 2] | 0;
        if ((i43 | 0) == 0) {
          i210 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i210 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5268556, tempInt) | 0) | 0;
          i210 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i210 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i43 & 511](i1, 5268556);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      do {
        if ((i209 & 2 | 0) != 0) {
          i43 = HEAP32[i29 >> 2] | 0;
          if ((i43 | 0) == 0) {
            i210 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i210 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5268492, tempInt) | 0) | 0;
            i210 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i210 | 0) | 0;
            break;
          } else {
            FUNCTION_TABLE_vii[i43 & 511](i1, 5268492);
            break;
          }
        }
      } while (0);
      if ((HEAP32[i27 >> 2] & 2052 | 0) == 4) {
        i209 = HEAP32[i29 >> 2] | 0;
        if ((i209 | 0) == 0) {
          i43 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i43 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5268444, tempInt) | 0) | 0;
          i43 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i43 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i209 & 511](i1, 5268444);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      if ((i205 | 0) != 32) {
        i209 = HEAP32[i29 >> 2] | 0;
        if ((i209 | 0) == 0) {
          i43 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i43 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5268328, tempInt) | 0) | 0;
          i43 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i43 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i209 & 511](i1, 5268328);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      i209 = HEAP32[i34 >> 2] | 0;
      if ((i209 | 0) == 0) {
        i207 = 269;
        break;
      }
      FUNCTION_TABLE_viii[i209 & 511](i35, i25, 32);
      i209 = HEAP32[i75 >> 2] | 0;
      do {
        if ((HEAP8[i44] & 32) << 24 >> 24 == 0) {
          if ((i209 & 2048 | 0) == 0) {
            i207 = 273;
            break;
          } else {
            break;
          }
        } else {
          if ((i209 & 768 | 0) == 768) {
            break;
          } else {
            i207 = 273;
            break;
          }
        }
      } while (0);
      if ((i207 | 0) == 273) {
        i207 = 0;
        HEAP32[i76 >> 2] = _crc32(HEAP32[i76 >> 2] | 0, i25, 32) | 0;
      }
      if ((_png_crc_finish(i1, 0) | 0) != 0) {
        continue;
      }
      i209 = (HEAPU8[i102] | 0) << 16 | (HEAPU8[i25] | 0) << 24 | (HEAPU8[i103] | 0) << 8 | (HEAPU8[i104] | 0);
      i43 = (i209 | 0) > -1 ? i209 : -1;
      i209 = (HEAPU8[i106] | 0) << 16 | (HEAPU8[i105] | 0) << 24 | (HEAPU8[i107] | 0) << 8 | (HEAPU8[i108] | 0);
      i210 = (i209 | 0) > -1 ? i209 : -1;
      i209 = (HEAPU8[i110] | 0) << 16 | (HEAPU8[i109] | 0) << 24 | (HEAPU8[i111] | 0) << 8 | (HEAPU8[i112] | 0);
      i36 = (i209 | 0) > -1 ? i209 : -1;
      i209 = (HEAPU8[i114] | 0) << 16 | (HEAPU8[i113] | 0) << 24 | (HEAPU8[i115] | 0) << 8 | (HEAPU8[i116] | 0);
      i211 = (i209 | 0) > -1 ? i209 : -1;
      i209 = (HEAPU8[i118] | 0) << 16 | (HEAPU8[i117] | 0) << 24 | (HEAPU8[i119] | 0) << 8 | (HEAPU8[i120] | 0);
      i212 = (i209 | 0) > -1 ? i209 : -1;
      i209 = (HEAPU8[i122] | 0) << 16 | (HEAPU8[i121] | 0) << 24 | (HEAPU8[i123] | 0) << 8 | (HEAPU8[i124] | 0);
      i40 = (i209 | 0) > -1 ? i209 : -1;
      i209 = (HEAPU8[i126] | 0) << 16 | (HEAPU8[i125] | 0) << 24 | (HEAPU8[i127] | 0) << 8 | (HEAPU8[i128] | 0);
      i208 = (i209 | 0) > -1 ? i209 : -1;
      i209 = (HEAPU8[i130] | 0) << 16 | (HEAPU8[i129] | 0) << 24 | (HEAPU8[i131] | 0) << 8 | (HEAPU8[i132] | 0);
      i206 = (i209 | 0) > -1 ? i209 : -1;
      if ((i43 | 0) == -1 | (i210 | 0) == -1 | (i36 | 0) == -1 | (i211 | 0) == -1 | (i212 | 0) == -1 | (i40 | 0) == -1 | (i208 | 0) == -1 | (i206 | 0) == -1) {
        i209 = HEAP32[i29 >> 2] | 0;
        if ((i209 | 0) == 0) {
          i215 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i215 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5268164, tempInt) | 0) | 0;
          i215 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i215 | 0) | 0;
          continue;
        } else {
          FUNCTION_TABLE_vii[i209 & 511](i1, 5268164);
          continue;
        }
      }
      if ((HEAP32[i27 >> 2] & 2048 | 0) != 0) {
        do {
          if ((i43 - 30270 | 0) >>> 0 <= 2e3) {
            if ((i210 - 31900 | 0) >>> 0 > 2e3) {
              break;
            }
            if ((i36 - 63e3 | 0) >>> 0 > 2e3) {
              break;
            }
            if ((i211 - 32e3 | 0) >>> 0 > 2e3) {
              break;
            }
            if ((i212 - 29e3 | 0) >>> 0 > 2e3) {
              break;
            }
            if ((i40 - 59e3 | 0) >>> 0 > 2e3) {
              break;
            }
            if ((i208 - 14e3 | 0) >>> 0 > 2e3) {
              break;
            }
            if ((i206 - 5e3 | 0) >>> 0 <= 2e3) {
              continue L29;
            }
          }
        } while (0);
        i209 = HEAP32[i29 >> 2] | 0;
        if ((i209 | 0) == 0) {
          i215 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i215 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5268072, tempInt) | 0) | 0;
          i215 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i215 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i209 & 511](i1, 5268072);
        }
        _fprintf(HEAP32[_stderr >> 2] | 0, 5268008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = i43, HEAP32[tempInt + 4 >> 2] = i210, HEAP32[tempInt + 8 >> 2] = i36, HEAP32[tempInt + 12 >> 2] = i211, tempInt) | 0) | 0;
        _fprintf(HEAP32[_stderr >> 2] | 0, 5267932, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = i212, HEAP32[tempInt + 4 >> 2] = i40, HEAP32[tempInt + 8 >> 2] = i208, HEAP32[tempInt + 12 >> 2] = i206, tempInt) | 0) | 0;
        continue;
      }
      do {
        if ((i43 | 0) < 0 | (i210 | 0) < 1 | (i36 | 0) < 0 | (i211 | 0) < 0 | (i212 | 0) < 0 | (i40 | 0) < 0 | (i208 | 0) < 0 | (i206 | 0) < 0) {
          i209 = HEAP32[i29 >> 2] | 0;
          if ((i209 | 0) == 0) {
            i215 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i215 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5265236, tempInt) | 0) | 0;
            i215 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i215 | 0) | 0;
            i233 = 0;
            break;
          } else {
            FUNCTION_TABLE_vii[i209 & 511](i1, 5265236);
            i233 = 0;
            break;
          }
        } else {
          i233 = 1;
        }
      } while (0);
      do {
        if ((1e5 - i210 | 0) < (i43 | 0)) {
          i209 = HEAP32[i29 >> 2] | 0;
          if ((i209 | 0) == 0) {
            i215 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i215 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5263476, tempInt) | 0) | 0;
            i215 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i215 | 0) | 0;
            i234 = 0;
            break;
          } else {
            FUNCTION_TABLE_vii[i209 & 511](i1, 5263476);
            i234 = 0;
            break;
          }
        } else {
          i234 = i233;
        }
      } while (0);
      do {
        if ((1e5 - i211 | 0) < (i36 | 0)) {
          i209 = HEAP32[i29 >> 2] | 0;
          if ((i209 | 0) == 0) {
            i215 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i215 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5275504, tempInt) | 0) | 0;
            i215 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i215 | 0) | 0;
            i235 = 0;
            break;
          } else {
            FUNCTION_TABLE_vii[i209 & 511](i1, 5275504);
            i235 = 0;
            break;
          }
        } else {
          i235 = i234;
        }
      } while (0);
      do {
        if ((1e5 - i40 | 0) < (i212 | 0)) {
          i209 = HEAP32[i29 >> 2] | 0;
          if ((i209 | 0) == 0) {
            i215 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i215 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5274504, tempInt) | 0) | 0;
            i215 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i215 | 0) | 0;
            i236 = 0;
            break;
          } else {
            FUNCTION_TABLE_vii[i209 & 511](i1, 5274504);
            i236 = 0;
            break;
          }
        } else {
          i236 = i235;
        }
      } while (0);
      do {
        if ((1e5 - i206 | 0) < (i208 | 0)) {
          i209 = HEAP32[i29 >> 2] | 0;
          if ((i209 | 0) == 0) {
            i215 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i215 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5273312, tempInt) | 0) | 0;
            i215 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i215 | 0) | 0;
            i237 = 0;
            break;
          } else {
            FUNCTION_TABLE_vii[i209 & 511](i1, 5273312);
            i237 = 0;
            break;
          }
        } else {
          i237 = i236;
        }
      } while (0);
      i209 = i212 - i36 | 0;
      i215 = i206 - i211 | 0;
      i214 = i209 >>> 16;
      i238 = i209 & 65535;
      i209 = i215 >>> 16;
      i239 = i215 & 65535;
      i215 = Math_imul(i239, i238);
      i240 = Math_imul(i239, i214);
      i239 = (i240 + Math_imul(i209, i238) | 0) + (i215 >>> 16) | 0;
      i238 = (i239 >>> 16) + Math_imul(i209, i214) | 0;
      i214 = i40 - i211 | 0;
      i209 = i208 - i36 | 0;
      i240 = i214 >>> 16;
      i241 = i214 & 65535;
      i214 = i209 >>> 16;
      i242 = i209 & 65535;
      i209 = Math_imul(i242, i241);
      i243 = Math_imul(i242, i240);
      i242 = (i243 + Math_imul(i214, i241) | 0) + (i209 >>> 16) | 0;
      if (!((i238 | 0) == ((i242 >>> 16) + Math_imul(i214, i240) | 0) & (i239 << 16 | i215 & 65535 | 0) == (i242 << 16 | i209 & 65535 | 0))) {
        if ((i237 | 0) == 0) {
          continue;
        }
        HEAP32[i24 >> 2] = i43;
        HEAP32[i133 >> 2] = i210;
        HEAP32[i134 >> 2] = i36;
        HEAP32[i135 >> 2] = i211;
        HEAP32[i136 >> 2] = i212;
        HEAP32[i137 >> 2] = i40;
        HEAP32[i138 >> 2] = i208;
        HEAP32[i139 >> 2] = i206;
        HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 4;
        continue;
      }
      i209 = HEAP32[i29 >> 2] | 0;
      if ((i209 | 0) == 0) {
        i242 = HEAP32[_stderr >> 2] | 0;
        _fprintf(i242 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5272600, tempInt) | 0) | 0;
        i242 = HEAP32[_stderr >> 2] | 0;
        _fputc(10, i242 | 0) | 0;
        continue;
      } else {
        FUNCTION_TABLE_vii[i209 & 511](i1, 5272600);
        continue;
      }
    }
    if ((_memcmp(i44, 5245944, 4) | 0) == 0) {
      i209 = HEAP32[i33 >> 2] | 0;
      if ((i209 & 1 | 0) == 0) {
        i207 = 320;
        break;
      }
      if ((i209 & 4 | 0) != 0) {
        i242 = HEAP32[i29 >> 2] | 0;
        if ((i242 | 0) == 0) {
          i215 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i215 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5270484, tempInt) | 0) | 0;
          i215 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i215 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i242 & 511](i1, 5270484);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      do {
        if ((i209 & 2 | 0) != 0) {
          i242 = HEAP32[i29 >> 2] | 0;
          if ((i242 | 0) == 0) {
            i215 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i215 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5270348, tempInt) | 0) | 0;
            i215 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i215 | 0) | 0;
            break;
          } else {
            FUNCTION_TABLE_vii[i242 & 511](i1, 5270348);
            break;
          }
        }
      } while (0);
      if ((HEAP32[i27 >> 2] & 2049 | 0) == 1) {
        i209 = HEAP32[i29 >> 2] | 0;
        if ((i209 | 0) == 0) {
          i206 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i206 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5270112, tempInt) | 0) | 0;
          i206 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i206 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i209 & 511](i1, 5270112);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      if ((i205 | 0) != 4) {
        i209 = HEAP32[i29 >> 2] | 0;
        if ((i209 | 0) == 0) {
          i206 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i206 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5269972, tempInt) | 0) | 0;
          i206 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i206 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i209 & 511](i1, 5269972);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      i209 = HEAP32[i34 >> 2] | 0;
      if ((i209 | 0) == 0) {
        i207 = 341;
        break;
      }
      FUNCTION_TABLE_viii[i209 & 511](i35, i140, 4);
      i209 = HEAP32[i75 >> 2] | 0;
      do {
        if ((HEAP8[i44] & 32) << 24 >> 24 == 0) {
          if ((i209 & 2048 | 0) == 0) {
            i207 = 345;
            break;
          } else {
            break;
          }
        } else {
          if ((i209 & 768 | 0) == 768) {
            break;
          } else {
            i207 = 345;
            break;
          }
        }
      } while (0);
      if ((i207 | 0) == 345) {
        i207 = 0;
        HEAP32[i76 >> 2] = _crc32(HEAP32[i76 >> 2] | 0, i140, 4) | 0;
      }
      if ((_png_crc_finish(i1, 0) | 0) != 0) {
        continue;
      }
      i209 = (HEAPU8[i141] | 0) << 16 | (HEAPU8[i140] | 0) << 24 | (HEAPU8[i142] | 0) << 8 | (HEAPU8[i143] | 0);
      i206 = (i209 | 0) > -1 ? i209 : -1;
      if ((i206 | 0) < 1) {
        i209 = HEAP32[i29 >> 2] | 0;
        if ((i209 | 0) == 0) {
          i208 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i208 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5269820, tempInt) | 0) | 0;
          i208 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i208 | 0) | 0;
          continue;
        } else {
          FUNCTION_TABLE_vii[i209 & 511](i1, 5269820);
          continue;
        }
      }
      do {
        if ((HEAP32[i27 >> 2] & 2048 | 0) != 0) {
          if ((i206 - 45e3 | 0) >>> 0 <= 1e3) {
            break;
          }
          i209 = HEAP32[i29 >> 2] | 0;
          if ((i209 | 0) == 0) {
            i208 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i208 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5269580, tempInt) | 0) | 0;
            i208 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i208 | 0) | 0;
          } else {
            FUNCTION_TABLE_vii[i209 & 511](i1, 5269580);
          }
          _fprintf(HEAP32[_stderr >> 2] | 0, 5269412, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = i206, tempInt) | 0) | 0;
          continue L29;
        }
      } while (0);
      HEAP32[i23 >> 2] = i206;
      HEAP32[i144 >> 2] = i206;
      HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 1;
      continue;
    }
    if ((_memcmp(i44, 5245936, 4) | 0) == 0) {
      i209 = HEAP32[i33 >> 2] | 0;
      if ((i209 & 1 | 0) == 0) {
        i207 = 360;
        break;
      }
      if ((i209 & 4 | 0) != 0) {
        i208 = HEAP32[i29 >> 2] | 0;
        if ((i208 | 0) == 0) {
          i40 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i40 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5264644, tempInt) | 0) | 0;
          i40 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i40 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i208 & 511](i1, 5264644);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      if ((i209 & 2 | 0) == 0) {
        i209 = HEAP32[i29 >> 2] | 0;
        if ((i209 | 0) == 0) {
          i208 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i208 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5264532, tempInt) | 0) | 0;
          i208 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i208 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i209 & 511](i1, 5264532);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      if ((HEAP32[i27 >> 2] & 64 | 0) != 0) {
        i209 = HEAP32[i29 >> 2] | 0;
        if ((i209 | 0) == 0) {
          i208 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i208 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5264480, tempInt) | 0) | 0;
          i208 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i208 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i209 & 511](i1, 5264480);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      i209 = i205 >>> 1;
      if ((i209 | 0) != (HEAPU16[i86 >> 1] | 0 | 0) | i205 >>> 0 > 513) {
        i208 = HEAP32[i29 >> 2] | 0;
        if ((i208 | 0) == 0) {
          i40 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i40 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5264408, tempInt) | 0) | 0;
          i40 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i40 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i208 & 511](i1, 5264408);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      L490 : do {
        if ((i209 | 0) != 0) {
          i208 = 0;
          while (1) {
            i40 = HEAP32[i34 >> 2] | 0;
            if ((i40 | 0) == 0) {
              i207 = 383;
              break L29;
            }
            FUNCTION_TABLE_viii[i40 & 511](i35, i145, 2);
            i40 = HEAP32[i75 >> 2] | 0;
            do {
              if ((HEAP8[i44] & 32) << 24 >> 24 == 0) {
                if ((i40 & 2048 | 0) == 0) {
                  i207 = 387;
                  break;
                } else {
                  break;
                }
              } else {
                if ((i40 & 768 | 0) == 768) {
                  break;
                } else {
                  i207 = 387;
                  break;
                }
              }
            } while (0);
            if ((i207 | 0) == 387) {
              i207 = 0;
              HEAP32[i76 >> 2] = _crc32(HEAP32[i76 >> 2] | 0, i145, 2) | 0;
            }
            HEAP16[i21 + (i208 << 1) >> 1] = (HEAPU8[i145] | 0) << 8 | (HEAPU8[i148] | 0);
            i40 = i208 + 1 | 0;
            if (i40 >>> 0 < i209 >>> 0) {
              i208 = i40;
            } else {
              break L490;
            }
          }
        }
      } while (0);
      if ((_png_crc_finish(i1, 0) | 0) != 0) {
        continue;
      }
      i209 = HEAP16[i87 >> 1] | 0;
      if (i209 << 16 >> 16 == 0 | (i209 & 65535) > 256) {
        i209 = HEAP32[i29 >> 2] | 0;
        if ((i209 | 0) == 0) {
          i206 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i206 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5274064, tempInt) | 0) | 0;
          i206 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i206 | 0) | 0;
          continue;
        } else {
          FUNCTION_TABLE_vii[i209 & 511](i1, 5274064);
          continue;
        }
      }
      _png_free_data(i1, i2, 8, 0);
      i209 = HEAP32[i75 >> 2] | 0;
      HEAP32[i75 >> 2] = i209 | 1048576;
      i206 = HEAP32[i83 >> 2] | 0;
      if ((i206 | 0) == 0) {
        i244 = _malloc(512) | 0;
      } else {
        i244 = FUNCTION_TABLE_iii[i206 & 511](i89, 512) | 0;
      }
      if ((i244 | 0) != 0) {
        HEAP32[i75 >> 2] = i209;
        i206 = i244;
        HEAP32[i146 >> 2] = i206;
        L514 : do {
          if (HEAP16[i87 >> 1] << 16 >> 16 == 0) {
            i245 = i206;
          } else {
            i208 = 0;
            i40 = i206;
            while (1) {
              HEAP16[i40 + (i208 << 1) >> 1] = HEAP16[i21 + (i208 << 1) >> 1] | 0;
              i212 = i208 + 1 | 0;
              i211 = HEAP32[i146 >> 2] | 0;
              if ((i212 | 0) < (HEAPU16[i87 >> 1] | 0 | 0)) {
                i208 = i212;
                i40 = i211;
              } else {
                i245 = i211;
                break L514;
              }
            }
          }
        } while (0);
        HEAP32[i147 >> 2] = i245;
        HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 64;
        HEAP32[i88 >> 2] = HEAP32[i88 >> 2] | 8;
        continue;
      }
      if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
        i207 = 400;
        break;
      }
      HEAP32[i75 >> 2] = i209;
      HEAP32[i146 >> 2] = 0;
      i206 = HEAP32[i29 >> 2] | 0;
      if ((i206 | 0) == 0) {
        i40 = HEAP32[_stderr >> 2] | 0;
        _fprintf(i40 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5273e3, tempInt) | 0) | 0;
        i40 = HEAP32[_stderr >> 2] | 0;
        _fputc(10, i40 | 0) | 0;
        continue;
      } else {
        FUNCTION_TABLE_vii[i206 & 511](i1, 5273e3);
        continue;
      }
    }
    if ((_memcmp(i44, 5245912, 4) | 0) == 0) {
      i206 = HEAP32[i33 >> 2] | 0;
      if ((i206 & 1 | 0) == 0) {
        i207 = 408;
        break;
      }
      if ((i206 & 4 | 0) != 0) {
        i206 = HEAP32[i29 >> 2] | 0;
        if ((i206 | 0) == 0) {
          i40 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i40 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5263928, tempInt) | 0) | 0;
          i40 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i40 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i206 & 511](i1, 5263928);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      if ((HEAP32[i27 >> 2] & 256 | 0) != 0) {
        i206 = HEAP32[i29 >> 2] | 0;
        if ((i206 | 0) == 0) {
          i40 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i40 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5263784, tempInt) | 0) | 0;
          i40 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i40 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i206 & 511](i1, 5263784);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      if ((i205 | 0) != 9) {
        i206 = HEAP32[i29 >> 2] | 0;
        if ((i206 | 0) == 0) {
          i40 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i40 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5263708, tempInt) | 0) | 0;
          i40 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i40 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i206 & 511](i1, 5263708);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      i206 = HEAP32[i34 >> 2] | 0;
      if ((i206 | 0) == 0) {
        i207 = 425;
        break;
      }
      FUNCTION_TABLE_viii[i206 & 511](i35, i22, 9);
      i206 = HEAP32[i75 >> 2] | 0;
      do {
        if ((HEAP8[i44] & 32) << 24 >> 24 == 0) {
          if ((i206 & 2048 | 0) == 0) {
            i207 = 429;
            break;
          } else {
            break;
          }
        } else {
          if ((i206 & 768 | 0) == 768) {
            break;
          } else {
            i207 = 429;
            break;
          }
        }
      } while (0);
      if ((i207 | 0) == 429) {
        i207 = 0;
        HEAP32[i76 >> 2] = _crc32(HEAP32[i76 >> 2] | 0, i22, 9) | 0;
      }
      if ((_png_crc_finish(i1, 0) | 0) != 0) {
        continue;
      }
      i206 = HEAP8[i156] | 0;
      i209 = (HEAPU8[i150] | 0) << 24 | (HEAPU8[i149] | 0) << 16 | (HEAPU8[i152] | 0) << 8 | (HEAPU8[i154] | 0);
      HEAP32[i20 >> 2] = (HEAPU8[i22] | 0) << 24 | (HEAPU8[i151] | 0) << 16 | (HEAPU8[i153] | 0) << 8 | (HEAPU8[i155] | 0);
      HEAP32[i157 >> 2] = i209;
      HEAP8[i158] = i206;
      HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 256;
      continue;
    }
    if ((_memcmp(i44, 5245904, 4) | 0) == 0) {
      i206 = HEAP32[i33 >> 2] | 0;
      if ((i206 & 1 | 0) == 0) {
        i207 = 434;
        break;
      }
      if ((i206 & 4 | 0) != 0) {
        i206 = HEAP32[i29 >> 2] | 0;
        if ((i206 | 0) == 0) {
          i209 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i209 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5263580, tempInt) | 0) | 0;
          i209 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i209 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i206 & 511](i1, 5263580);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      if ((HEAP32[i27 >> 2] & 1024 | 0) != 0) {
        i206 = HEAP32[i29 >> 2] | 0;
        if ((i206 | 0) == 0) {
          i209 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i209 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5263452, tempInt) | 0) | 0;
          i209 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i209 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i206 & 511](i1, 5263452);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      i206 = HEAP32[i159 >> 2] | 0;
      do {
        if ((i206 | 0) != 0) {
          i209 = HEAP32[i160 >> 2] | 0;
          if ((i209 | 0) == 0) {
            _free(i206);
            break;
          } else {
            FUNCTION_TABLE_vii[i209 & 511](i89, i206);
            break;
          }
        }
      } while (0);
      i206 = i205 + 1 | 0;
      i209 = HEAP32[i75 >> 2] | 0;
      HEAP32[i75 >> 2] = i209 | 1048576;
      do {
        if ((i206 | 0) != 0) {
          i40 = HEAP32[i83 >> 2] | 0;
          if ((i40 | 0) == 0) {
            i246 = _malloc(i206) | 0;
          } else {
            i246 = FUNCTION_TABLE_iii[i40 & 511](i89, i206) | 0;
          }
          if ((i246 | 0) == 0) {
            if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
              i207 = 455;
              break L29;
            } else {
              break;
            }
          }
          HEAP32[i75 >> 2] = i209;
          HEAP32[i159 >> 2] = i246;
          i40 = HEAP32[i34 >> 2] | 0;
          if ((i40 | 0) == 0) {
            i207 = 460;
            break L29;
          }
          FUNCTION_TABLE_viii[i40 & 511](i35, i246, i205);
          i40 = HEAP32[i75 >> 2] | 0;
          do {
            if ((HEAP8[i44] & 32) << 24 >> 24 == 0) {
              if ((i40 & 2048 | 0) == 0) {
                i207 = 464;
                break;
              } else {
                break;
              }
            } else {
              if ((i40 & 768 | 0) == 768) {
                break;
              } else {
                i207 = 464;
                break;
              }
            }
          } while (0);
          if ((i207 | 0) == 464) {
            i207 = 0;
            HEAP32[i76 >> 2] = _crc32(HEAP32[i76 >> 2] | 0, i246, i205) | 0;
          }
          i40 = (_png_crc_finish(i1, 0) | 0) == 0;
          i208 = HEAP32[i159 >> 2] | 0;
          if (!i40) {
            do {
              if ((i208 | 0) != 0) {
                i40 = HEAP32[i160 >> 2] | 0;
                if ((i40 | 0) == 0) {
                  _free(i208);
                  break;
                } else {
                  FUNCTION_TABLE_vii[i40 & 511](i89, i208);
                  break;
                }
              }
            } while (0);
            HEAP32[i159 >> 2] = 0;
            continue L29;
          }
          HEAP8[i208 + i205 | 0] = 0;
          i40 = HEAP32[i159 >> 2] | 0;
          i211 = i40;
          while (1) {
            i247 = i211 + 1 | 0;
            if (HEAP8[i211] << 24 >> 24 == 0) {
              break;
            } else {
              i211 = i247;
            }
          }
          i208 = i40 + i205 | 0;
          if (i208 >>> 0 <= (i211 + 12 | 0) >>> 0) {
            i212 = HEAP32[i29 >> 2] | 0;
            if ((i212 | 0) == 0) {
              i36 = HEAP32[_stderr >> 2] | 0;
              _fprintf(i36 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5263248, tempInt) | 0) | 0;
              i36 = HEAP32[_stderr >> 2] | 0;
              _fputc(10, i36 | 0) | 0;
            } else {
              FUNCTION_TABLE_vii[i212 & 511](i1, 5263248);
            }
            i212 = HEAP32[i159 >> 2] | 0;
            do {
              if ((i212 | 0) != 0) {
                i36 = HEAP32[i160 >> 2] | 0;
                if ((i36 | 0) == 0) {
                  _free(i212);
                  break;
                } else {
                  FUNCTION_TABLE_vii[i36 & 511](i89, i212);
                  break;
                }
              }
            } while (0);
            HEAP32[i159 >> 2] = 0;
            continue L29;
          }
          i212 = (HEAPU8[i211 + 2 | 0] | 0) << 16 | (HEAPU8[i247] | 0) << 24 | (HEAPU8[i211 + 3 | 0] | 0) << 8 | (HEAPU8[i211 + 4 | 0] | 0);
          i40 = (HEAPU8[i211 + 6 | 0] | 0) << 16 | (HEAPU8[i211 + 5 | 0] | 0) << 24 | (HEAPU8[i211 + 7 | 0] | 0) << 8 | (HEAPU8[i211 + 8 | 0] | 0);
          i36 = HEAP8[i211 + 9 | 0] | 0;
          i210 = HEAP8[i211 + 10 | 0] | 0;
          i43 = i211 + 11 | 0;
          do {
            if (i36 << 24 >> 24 != 0 | i210 << 24 >> 24 == 2) {
              if (!((i36 - 1 & 255) > 1 | i210 << 24 >> 24 == 3)) {
                break;
              }
              if (!(i36 << 24 >> 24 != 3 | i210 << 24 >> 24 == 4)) {
                break;
              }
              i242 = (i36 & 255) > 3;
              do {
                if (i242) {
                  i215 = HEAP32[i29 >> 2] | 0;
                  if ((i215 | 0) == 0) {
                    i239 = HEAP32[_stderr >> 2] | 0;
                    _fprintf(i239 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5267876, tempInt) | 0) | 0;
                    i239 = HEAP32[_stderr >> 2] | 0;
                    _fputc(10, i239 | 0) | 0;
                    i248 = i43;
                    break;
                  } else {
                    FUNCTION_TABLE_vii[i215 & 511](i1, 5267876);
                    i248 = i43;
                    break;
                  }
                } else {
                  i248 = i43;
                }
              } while (0);
              while (1) {
                if (HEAP8[i248] << 24 >> 24 == 0) {
                  break;
                } else {
                  i248 = i248 + 1 | 0;
                }
              }
              i215 = i210 & 255;
              i239 = i215 << 2;
              i240 = HEAP32[i75 >> 2] | 0;
              HEAP32[i75 >> 2] = i240 | 1048576;
              do {
                if (i210 << 24 >> 24 != 0) {
                  i214 = HEAP32[i83 >> 2] | 0;
                  if ((i214 | 0) == 0) {
                    i249 = _malloc(i239) | 0;
                  } else {
                    i249 = FUNCTION_TABLE_iii[i214 & 511](i89, i239) | 0;
                  }
                  if ((i249 | 0) == 0) {
                    if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
                      i207 = 505;
                      break L29;
                    } else {
                      break;
                    }
                  }
                  HEAP32[i75 >> 2] = i240;
                  i214 = i249;
                  i238 = i248;
                  i241 = 0;
                  L642 : while (1) {
                    i243 = i238 + 1 | 0;
                    HEAP32[i214 + (i241 << 2) >> 2] = i243;
                    i250 = i243;
                    while (1) {
                      if (i250 >>> 0 > i208 >>> 0) {
                        i207 = 516;
                        break L642;
                      }
                      if (HEAP8[i250] << 24 >> 24 == 0) {
                        break;
                      } else {
                        i250 = i250 + 1 | 0;
                      }
                    }
                    i243 = i241 + 1 | 0;
                    if ((i243 | 0) < (i215 | 0)) {
                      i238 = i250;
                      i241 = i243;
                    } else {
                      break;
                    }
                  }
                  if ((i207 | 0) == 516) {
                    i207 = 0;
                    i241 = HEAP32[i29 >> 2] | 0;
                    if ((i241 | 0) == 0) {
                      i238 = HEAP32[_stderr >> 2] | 0;
                      _fprintf(i238 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5263248, tempInt) | 0) | 0;
                      i238 = HEAP32[_stderr >> 2] | 0;
                      _fputc(10, i238 | 0) | 0;
                    } else {
                      FUNCTION_TABLE_vii[i241 & 511](i1, 5263248);
                    }
                    i241 = HEAP32[i159 >> 2] | 0;
                    do {
                      if ((i241 | 0) != 0) {
                        i238 = HEAP32[i160 >> 2] | 0;
                        if ((i238 | 0) == 0) {
                          _free(i241);
                          break;
                        } else {
                          FUNCTION_TABLE_vii[i238 & 511](i89, i241);
                          break;
                        }
                      }
                    } while (0);
                    HEAP32[i159 >> 2] = 0;
                    i241 = HEAP32[i160 >> 2] | 0;
                    if ((i241 | 0) == 0) {
                      _free(i249);
                      continue L29;
                    } else {
                      FUNCTION_TABLE_vii[i241 & 511](i89, i249);
                      continue L29;
                    }
                  }
                  i241 = HEAP32[i159 >> 2] | 0;
                  i238 = (_strlen(i241) | 0) + 1 | 0;
                  if (i242) {
                    i207 = 528;
                    break L29;
                  } else {
                    i251 = 0;
                  }
                  while (1) {
                    i243 = HEAP32[i214 + (i251 << 2) >> 2] | 0;
                    i252 = _strlen(i243) | 0;
                    HEAP32[i18 >> 2] = 0;
                    HEAP32[i19 >> 2] = 0;
                    if ((_png_check_fp_number(i243, i252, i18, i19) | 0) == 0) {
                      i207 = 1385;
                      break L29;
                    }
                    i253 = HEAP32[i19 >> 2] | 0;
                    if ((i253 | 0) != (i252 | 0)) {
                      if (HEAP8[i243 + i253 | 0] << 24 >> 24 != 0) {
                        i207 = 1386;
                        break L29;
                      }
                    }
                    i253 = i251 + 1 | 0;
                    if ((i253 | 0) < (i215 | 0)) {
                      i251 = i253;
                    } else {
                      break;
                    }
                  }
                  i253 = HEAP32[i75 >> 2] | 0;
                  HEAP32[i75 >> 2] = i253 | 1048576;
                  L671 : do {
                    if ((i238 | 0) == 0) {
                      i207 = 541;
                    } else {
                      i243 = HEAP32[i83 >> 2] | 0;
                      if ((i243 | 0) == 0) {
                        i254 = _malloc(i238) | 0;
                      } else {
                        i254 = FUNCTION_TABLE_iii[i243 & 511](i89, i238) | 0;
                      }
                      if ((i254 | 0) == 0) {
                        if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
                          i207 = 540;
                          break L29;
                        } else {
                          i207 = 541;
                          break;
                        }
                      }
                      HEAP32[i75 >> 2] = i253;
                      HEAP32[i161 >> 2] = i254;
                      _memcpy(i254, i241, i238);
                      HEAP32[i162 >> 2] = i212;
                      HEAP32[i163 >> 2] = i40;
                      HEAP8[i164] = i36;
                      HEAP8[i165] = i210;
                      i243 = (_strlen(i43) | 0) + 1 | 0;
                      i252 = HEAP32[i75 >> 2] | 0;
                      HEAP32[i75 >> 2] = i252 | 1048576;
                      do {
                        if ((i243 | 0) != 0) {
                          i255 = HEAP32[i83 >> 2] | 0;
                          if ((i255 | 0) == 0) {
                            i256 = _malloc(i243) | 0;
                          } else {
                            i256 = FUNCTION_TABLE_iii[i255 & 511](i89, i243) | 0;
                          }
                          if ((i256 | 0) == 0) {
                            if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
                              i207 = 550;
                              break L29;
                            } else {
                              break;
                            }
                          }
                          HEAP32[i75 >> 2] = i252;
                          HEAP32[i166 >> 2] = i256;
                          _memcpy(i256, i43, i243);
                          i255 = i239 + 4 | 0;
                          i257 = HEAP32[i75 >> 2] | 0;
                          HEAP32[i75 >> 2] = i257 | 1048576;
                          i258 = HEAP32[i83 >> 2] | 0;
                          if ((i258 | 0) == 0) {
                            i259 = _malloc(i255) | 0;
                          } else {
                            i259 = FUNCTION_TABLE_iii[i258 & 511](i89, i255) | 0;
                          }
                          if ((i259 | 0) == 0) {
                            if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
                              i207 = 559;
                              break L29;
                            }
                            HEAP32[i75 >> 2] = i257;
                            HEAP32[i167 >> 2] = 0;
                            i258 = HEAP32[i29 >> 2] | 0;
                            if ((i258 | 0) == 0) {
                              i260 = HEAP32[_stderr >> 2] | 0;
                              _fprintf(i260 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5271092, tempInt) | 0) | 0;
                              i260 = HEAP32[_stderr >> 2] | 0;
                              _fputc(10, i260 | 0) | 0;
                              break L671;
                            } else {
                              FUNCTION_TABLE_vii[i258 & 511](i1, 5271092);
                              break L671;
                            }
                          }
                          HEAP32[i75 >> 2] = i257;
                          HEAP32[i167 >> 2] = i259;
                          _memset(i259 | 0, 0, i255 | 0);
                          i255 = 0;
                          while (1) {
                            i257 = i214 + (i255 << 2) | 0;
                            i258 = (_strlen(HEAP32[i257 >> 2] | 0) | 0) + 1 | 0;
                            i260 = HEAP32[i75 >> 2] | 0;
                            HEAP32[i75 >> 2] = i260 | 1048576;
                            do {
                              if ((i258 | 0) == 0) {
                                i261 = 0;
                              } else {
                                i262 = HEAP32[i83 >> 2] | 0;
                                if ((i262 | 0) == 0) {
                                  i263 = _malloc(i258) | 0;
                                } else {
                                  i263 = FUNCTION_TABLE_iii[i262 & 511](i89, i258) | 0;
                                }
                                if ((i263 | 0) != 0) {
                                  i261 = i263;
                                  break;
                                }
                                if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
                                  i207 = 570;
                                  break L29;
                                } else {
                                  i261 = 0;
                                }
                              }
                            } while (0);
                            HEAP32[i75 >> 2] = i260;
                            HEAP32[(HEAP32[i167 >> 2] | 0) + (i255 << 2) >> 2] = i261;
                            i262 = HEAP32[(HEAP32[i167 >> 2] | 0) + (i255 << 2) >> 2] | 0;
                            if ((i262 | 0) == 0) {
                              break;
                            }
                            _memcpy(i262, HEAP32[i257 >> 2] | 0, i258);
                            i262 = i255 + 1 | 0;
                            if ((i262 | 0) < (i215 | 0)) {
                              i255 = i262;
                            } else {
                              i207 = 576;
                              break;
                            }
                          }
                          if ((i207 | 0) == 576) {
                            i207 = 0;
                            HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 1024;
                            HEAP32[i88 >> 2] = HEAP32[i88 >> 2] | 128;
                            break L671;
                          }
                          i255 = HEAP32[i29 >> 2] | 0;
                          if ((i255 | 0) == 0) {
                            i262 = HEAP32[_stderr >> 2] | 0;
                            _fprintf(i262 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5270884, tempInt) | 0) | 0;
                            i262 = HEAP32[_stderr >> 2] | 0;
                            _fputc(10, i262 | 0) | 0;
                            break L671;
                          } else {
                            FUNCTION_TABLE_vii[i255 & 511](i1, 5270884);
                            break L671;
                          }
                        }
                      } while (0);
                      HEAP32[i75 >> 2] = i252;
                      HEAP32[i166 >> 2] = 0;
                      i243 = HEAP32[i29 >> 2] | 0;
                      if ((i243 | 0) == 0) {
                        i250 = HEAP32[_stderr >> 2] | 0;
                        _fprintf(i250 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5271444, tempInt) | 0) | 0;
                        i250 = HEAP32[_stderr >> 2] | 0;
                        _fputc(10, i250 | 0) | 0;
                        break;
                      } else {
                        FUNCTION_TABLE_vii[i243 & 511](i1, 5271444);
                        break;
                      }
                    }
                  } while (0);
                  do {
                    if ((i207 | 0) == 541) {
                      i207 = 0;
                      HEAP32[i75 >> 2] = i253;
                      HEAP32[i161 >> 2] = 0;
                      i214 = HEAP32[i29 >> 2] | 0;
                      if ((i214 | 0) == 0) {
                        i238 = HEAP32[_stderr >> 2] | 0;
                        _fprintf(i238 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5271628, tempInt) | 0) | 0;
                        i238 = HEAP32[_stderr >> 2] | 0;
                        _fputc(10, i238 | 0) | 0;
                        break;
                      } else {
                        FUNCTION_TABLE_vii[i214 & 511](i1, 5271628);
                        break;
                      }
                    }
                  } while (0);
                  i253 = HEAP32[i159 >> 2] | 0;
                  do {
                    if ((i253 | 0) != 0) {
                      i214 = HEAP32[i160 >> 2] | 0;
                      if ((i214 | 0) == 0) {
                        _free(i253);
                        break;
                      } else {
                        FUNCTION_TABLE_vii[i214 & 511](i89, i253);
                        break;
                      }
                    }
                  } while (0);
                  HEAP32[i159 >> 2] = 0;
                  i253 = HEAP32[i160 >> 2] | 0;
                  if ((i253 | 0) == 0) {
                    _free(i249);
                    continue L29;
                  } else {
                    FUNCTION_TABLE_vii[i253 & 511](i89, i249);
                    continue L29;
                  }
                }
              } while (0);
              HEAP32[i75 >> 2] = i240;
              i215 = HEAP32[i159 >> 2] | 0;
              do {
                if ((i215 | 0) != 0) {
                  i239 = HEAP32[i160 >> 2] | 0;
                  if ((i239 | 0) == 0) {
                    _free(i215);
                    break;
                  } else {
                    FUNCTION_TABLE_vii[i239 & 511](i89, i215);
                    break;
                  }
                }
              } while (0);
              HEAP32[i159 >> 2] = 0;
              i215 = HEAP32[i29 >> 2] | 0;
              if ((i215 | 0) == 0) {
                i240 = HEAP32[_stderr >> 2] | 0;
                _fprintf(i240 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5263076, tempInt) | 0) | 0;
                i240 = HEAP32[_stderr >> 2] | 0;
                _fputc(10, i240 | 0) | 0;
                continue L29;
              } else {
                FUNCTION_TABLE_vii[i215 & 511](i1, 5263076);
                continue L29;
              }
            }
          } while (0);
          i43 = HEAP32[i29 >> 2] | 0;
          if ((i43 | 0) == 0) {
            i210 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i210 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5263180, tempInt) | 0) | 0;
            i210 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i210 | 0) | 0;
          } else {
            FUNCTION_TABLE_vii[i43 & 511](i1, 5263180);
          }
          i43 = HEAP32[i159 >> 2] | 0;
          do {
            if ((i43 | 0) != 0) {
              i210 = HEAP32[i160 >> 2] | 0;
              if ((i210 | 0) == 0) {
                _free(i43);
                break;
              } else {
                FUNCTION_TABLE_vii[i210 & 511](i89, i43);
                break;
              }
            }
          } while (0);
          HEAP32[i159 >> 2] = 0;
          continue L29;
        }
      } while (0);
      HEAP32[i75 >> 2] = i209;
      HEAP32[i159 >> 2] = 0;
      i206 = HEAP32[i29 >> 2] | 0;
      if ((i206 | 0) == 0) {
        i43 = HEAP32[_stderr >> 2] | 0;
        _fprintf(i43 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5263304, tempInt) | 0) | 0;
        i43 = HEAP32[_stderr >> 2] | 0;
        _fputc(10, i43 | 0) | 0;
        continue;
      } else {
        FUNCTION_TABLE_vii[i206 & 511](i1, 5263304);
        continue;
      }
    }
    if ((_memcmp(i44, 5245880, 4) | 0) == 0) {
      i206 = HEAP32[i33 >> 2] | 0;
      if ((i206 & 1 | 0) == 0) {
        i207 = 586;
        break;
      }
      if ((i206 & 4 | 0) != 0) {
        i206 = HEAP32[i29 >> 2] | 0;
        if ((i206 | 0) == 0) {
          i43 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i43 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5262916, tempInt) | 0) | 0;
          i43 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i43 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i206 & 511](i1, 5262916);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      if ((HEAP32[i27 >> 2] & 16384 | 0) != 0) {
        i206 = HEAP32[i29 >> 2] | 0;
        if ((i206 | 0) == 0) {
          i43 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i43 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5275620, tempInt) | 0) | 0;
          i43 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i43 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i206 & 511](i1, 5275620);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      i206 = i205 + 1 | 0;
      i43 = HEAP32[i75 >> 2] | 0;
      HEAP32[i75 >> 2] = i43 | 1048576;
      do {
        if ((i206 | 0) != 0) {
          i210 = HEAP32[i83 >> 2] | 0;
          if ((i210 | 0) == 0) {
            i264 = _malloc(i206) | 0;
          } else {
            i264 = FUNCTION_TABLE_iii[i210 & 511](i89, i206) | 0;
          }
          if ((i264 | 0) == 0) {
            if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
              i207 = 603;
              break L29;
            } else {
              break;
            }
          }
          HEAP32[i75 >> 2] = i43;
          HEAP32[i159 >> 2] = i264;
          i210 = HEAP32[i34 >> 2] | 0;
          if ((i210 | 0) == 0) {
            i207 = 609;
            break L29;
          }
          FUNCTION_TABLE_viii[i210 & 511](i35, i264, i205);
          i210 = HEAP32[i75 >> 2] | 0;
          do {
            if ((HEAP8[i44] & 32) << 24 >> 24 == 0) {
              if ((i210 & 2048 | 0) == 0) {
                i207 = 613;
                break;
              } else {
                break;
              }
            } else {
              if ((i210 & 768 | 0) == 768) {
                break;
              } else {
                i207 = 613;
                break;
              }
            }
          } while (0);
          if ((i207 | 0) == 613) {
            i207 = 0;
            HEAP32[i76 >> 2] = _crc32(HEAP32[i76 >> 2] | 0, i264, i205) | 0;
          }
          HEAP8[(HEAP32[i159 >> 2] | 0) + i205 | 0] = 0;
          i210 = (_png_crc_finish(i1, 0) | 0) == 0;
          i36 = HEAP32[i159 >> 2] | 0;
          if (!i210) {
            do {
              if ((i36 | 0) != 0) {
                i210 = HEAP32[i160 >> 2] | 0;
                if ((i210 | 0) == 0) {
                  _free(i36);
                  break;
                } else {
                  FUNCTION_TABLE_vii[i210 & 511](i89, i36);
                  break;
                }
              }
            } while (0);
            HEAP32[i159 >> 2] = 0;
            continue L29;
          }
          if (((HEAP8[i36] | 0) - 1 & 255) >= 2) {
            i210 = HEAP32[i29 >> 2] | 0;
            if ((i210 | 0) == 0) {
              i40 = HEAP32[_stderr >> 2] | 0;
              _fprintf(i40 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5275468, tempInt) | 0) | 0;
              i40 = HEAP32[_stderr >> 2] | 0;
              _fputc(10, i40 | 0) | 0;
            } else {
              FUNCTION_TABLE_vii[i210 & 511](i1, 5275468);
            }
            i210 = HEAP32[i159 >> 2] | 0;
            do {
              if ((i210 | 0) != 0) {
                i40 = HEAP32[i160 >> 2] | 0;
                if ((i40 | 0) == 0) {
                  _free(i210);
                  break;
                } else {
                  FUNCTION_TABLE_vii[i40 & 511](i89, i210);
                  break;
                }
              }
            } while (0);
            HEAP32[i159 >> 2] = 0;
            continue L29;
          }
          HEAP32[i16 >> 2] = 0;
          HEAP32[i17 >> 2] = 0;
          L817 : do {
            if (HEAP8[i36 + 1 | 0] << 24 >> 24 == 45) {
              i207 = 633;
            } else {
              if ((_png_check_fp_number(i36, i205, i17, i16) | 0) == 0) {
                i207 = 633;
                break;
              }
              i210 = HEAP32[i16 >> 2] | 0;
              if (i210 >>> 0 >= i205 >>> 0) {
                i207 = 633;
                break;
              }
              i40 = i210 + 1 | 0;
              HEAP32[i16 >> 2] = i40;
              i212 = HEAP32[i159 >> 2] | 0;
              if (HEAP8[i212 + i210 | 0] << 24 >> 24 != 0) {
                i207 = 633;
                break;
              }
              do {
                if (HEAP8[i212 + i40 | 0] << 24 >> 24 != 45) {
                  i210 = (_png_check_fp_number(i212, i205, i17, i16) | 0) != 0;
                  if (!(i210 & (HEAP32[i16 >> 2] | 0) == (i205 | 0))) {
                    break;
                  }
                  i210 = HEAP32[i159 >> 2] | 0;
                  i208 = HEAP8[i210] | 0;
                  i211 = i210 + 1 | 0;
                  i215 = i210 + i40 | 0;
                  if (((i208 << 24 >> 24) - 1 | 0) >>> 0 > 1) {
                    i207 = 642;
                    break L29;
                  }
                  if ((i211 | 0) == 0) {
                    i207 = 1387;
                    break L29;
                  }
                  i240 = _strlen(i211) | 0;
                  if ((i240 | 0) == 0) {
                    i207 = 1388;
                    break L29;
                  }
                  if (HEAP8[i211] << 24 >> 24 == 45) {
                    i207 = 1389;
                    break L29;
                  }
                  HEAP32[i14 >> 2] = 0;
                  HEAP32[i15 >> 2] = 0;
                  if ((_png_check_fp_number(i211, i240, i14, i15) | 0) == 0) {
                    i207 = 1390;
                    break L29;
                  }
                  i239 = HEAP32[i15 >> 2] | 0;
                  if ((i239 | 0) != (i240 | 0)) {
                    if (HEAP8[i210 + (i239 + 1 | 0) | 0] << 24 >> 24 != 0) {
                      i207 = 1391;
                      break L29;
                    }
                  }
                  if ((i215 | 0) == 0) {
                    i207 = 1392;
                    break L29;
                  }
                  i239 = _strlen(i215) | 0;
                  if ((i239 | 0) == 0) {
                    i207 = 1393;
                    break L29;
                  }
                  if (HEAP8[i215] << 24 >> 24 == 45) {
                    i207 = 1394;
                    break L29;
                  }
                  HEAP32[i12 >> 2] = 0;
                  HEAP32[i13 >> 2] = 0;
                  if ((_png_check_fp_number(i215, i239, i12, i13) | 0) == 0) {
                    i207 = 1395;
                    break L29;
                  }
                  i242 = HEAP32[i13 >> 2] | 0;
                  if ((i242 | 0) != (i239 | 0)) {
                    if (HEAP8[i210 + (i40 + i242 | 0) | 0] << 24 >> 24 != 0) {
                      i207 = 1396;
                      break L29;
                    }
                  }
                  HEAP8[i168] = i208;
                  i208 = i240 + 1 | 0;
                  i240 = HEAP32[i75 >> 2] | 0;
                  HEAP32[i75 >> 2] = i240 | 1048576;
                  do {
                    if ((i208 | 0) != 0) {
                      i242 = HEAP32[i83 >> 2] | 0;
                      if ((i242 | 0) == 0) {
                        i265 = _malloc(i208) | 0;
                      } else {
                        i265 = FUNCTION_TABLE_iii[i242 & 511](i89, i208) | 0;
                      }
                      if ((i265 | 0) == 0) {
                        if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
                          i207 = 663;
                          break L29;
                        } else {
                          break;
                        }
                      }
                      HEAP32[i75 >> 2] = i240;
                      HEAP32[i169 >> 2] = i265;
                      _memcpy(i265, i211, i208);
                      i242 = i239 + 1 | 0;
                      i210 = HEAP32[i75 >> 2] | 0;
                      HEAP32[i75 >> 2] = i210 | 1048576;
                      do {
                        if ((i242 | 0) != 0) {
                          i253 = HEAP32[i83 >> 2] | 0;
                          if ((i253 | 0) == 0) {
                            i266 = _malloc(i242) | 0;
                          } else {
                            i266 = FUNCTION_TABLE_iii[i253 & 511](i89, i242) | 0;
                          }
                          if ((i266 | 0) == 0) {
                            if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
                              i207 = 673;
                              break L29;
                            } else {
                              break;
                            }
                          } else {
                            HEAP32[i75 >> 2] = i210;
                            HEAP32[i170 >> 2] = i266;
                            _memcpy(i266, i215, i242);
                            HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 16384;
                            HEAP32[i88 >> 2] = HEAP32[i88 >> 2] | 256;
                            break L817;
                          }
                        }
                      } while (0);
                      HEAP32[i75 >> 2] = i210;
                      HEAP32[i170 >> 2] = 0;
                      i242 = HEAP32[i169 >> 2] | 0;
                      do {
                        if ((i242 | 0) != 0) {
                          i252 = HEAP32[i160 >> 2] | 0;
                          if ((i252 | 0) == 0) {
                            _free(i242);
                            break;
                          } else {
                            FUNCTION_TABLE_vii[i252 & 511](i89, i242);
                            break;
                          }
                        }
                      } while (0);
                      HEAP32[i169 >> 2] = 0;
                      i242 = HEAP32[i29 >> 2] | 0;
                      if ((i242 | 0) == 0) {
                        i210 = HEAP32[_stderr >> 2] | 0;
                        _fprintf(i210 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5270300, tempInt) | 0) | 0;
                        i210 = HEAP32[_stderr >> 2] | 0;
                        _fputc(10, i210 | 0) | 0;
                        break L817;
                      } else {
                        FUNCTION_TABLE_vii[i242 & 511](i1, 5270300);
                        break L817;
                      }
                    }
                  } while (0);
                  HEAP32[i75 >> 2] = i240;
                  HEAP32[i169 >> 2] = 0;
                  i215 = HEAP32[i29 >> 2] | 0;
                  if ((i215 | 0) == 0) {
                    i239 = HEAP32[_stderr >> 2] | 0;
                    _fprintf(i239 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5270300, tempInt) | 0) | 0;
                    i239 = HEAP32[_stderr >> 2] | 0;
                    _fputc(10, i239 | 0) | 0;
                    break L817;
                  } else {
                    FUNCTION_TABLE_vii[i215 & 511](i1, 5270300);
                    break L817;
                  }
                }
              } while (0);
              i40 = HEAP32[i29 >> 2] | 0;
              if ((i40 | 0) == 0) {
                i212 = HEAP32[_stderr >> 2] | 0;
                _fprintf(i212 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5275184, tempInt) | 0) | 0;
                i212 = HEAP32[_stderr >> 2] | 0;
                _fputc(10, i212 | 0) | 0;
                break;
              } else {
                FUNCTION_TABLE_vii[i40 & 511](i1, 5275184);
                break;
              }
            }
          } while (0);
          do {
            if ((i207 | 0) == 633) {
              i207 = 0;
              i36 = HEAP32[i29 >> 2] | 0;
              if ((i36 | 0) == 0) {
                i40 = HEAP32[_stderr >> 2] | 0;
                _fprintf(i40 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5275264, tempInt) | 0) | 0;
                i40 = HEAP32[_stderr >> 2] | 0;
                _fputc(10, i40 | 0) | 0;
                break;
              } else {
                FUNCTION_TABLE_vii[i36 & 511](i1, 5275264);
                break;
              }
            }
          } while (0);
          i36 = HEAP32[i159 >> 2] | 0;
          do {
            if ((i36 | 0) != 0) {
              i40 = HEAP32[i160 >> 2] | 0;
              if ((i40 | 0) == 0) {
                _free(i36);
                break;
              } else {
                FUNCTION_TABLE_vii[i40 & 511](i89, i36);
                break;
              }
            }
          } while (0);
          HEAP32[i159 >> 2] = 0;
          continue L29;
        }
      } while (0);
      HEAP32[i75 >> 2] = i43;
      HEAP32[i159 >> 2] = 0;
      i206 = HEAP32[i29 >> 2] | 0;
      if ((i206 | 0) == 0) {
        i209 = HEAP32[_stderr >> 2] | 0;
        _fprintf(i209 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5275544, tempInt) | 0) | 0;
        i209 = HEAP32[_stderr >> 2] | 0;
        _fputc(10, i209 | 0) | 0;
      } else {
        FUNCTION_TABLE_vii[i206 & 511](i1, 5275544);
      }
      _png_crc_finish(i1, i205) | 0;
      continue;
    }
    if ((_memcmp(i44, 5245896, 4) | 0) == 0) {
      i206 = HEAP32[i33 >> 2] | 0;
      if ((i206 & 1 | 0) == 0) {
        i207 = 689;
        break;
      }
      if ((i206 & 4 | 0) != 0) {
        i206 = HEAP32[i29 >> 2] | 0;
        if ((i206 | 0) == 0) {
          i209 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i209 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5264168, tempInt) | 0) | 0;
          i209 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i209 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i206 & 511](i1, 5264168);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      if ((HEAP32[i27 >> 2] & 128 | 0) != 0) {
        i206 = HEAP32[i29 >> 2] | 0;
        if ((i206 | 0) == 0) {
          i209 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i209 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5264120, tempInt) | 0) | 0;
          i209 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i209 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i206 & 511](i1, 5264120);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      if ((i205 | 0) != 9) {
        i206 = HEAP32[i29 >> 2] | 0;
        if ((i206 | 0) == 0) {
          i209 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i209 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5264076, tempInt) | 0) | 0;
          i209 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i209 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i206 & 511](i1, 5264076);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      i206 = HEAP32[i34 >> 2] | 0;
      if ((i206 | 0) == 0) {
        i207 = 706;
        break;
      }
      FUNCTION_TABLE_viii[i206 & 511](i35, i22, 9);
      i206 = HEAP32[i75 >> 2] | 0;
      do {
        if ((HEAP8[i44] & 32) << 24 >> 24 == 0) {
          if ((i206 & 2048 | 0) == 0) {
            i207 = 710;
            break;
          } else {
            break;
          }
        } else {
          if ((i206 & 768 | 0) == 768) {
            break;
          } else {
            i207 = 710;
            break;
          }
        }
      } while (0);
      if ((i207 | 0) == 710) {
        i207 = 0;
        HEAP32[i76 >> 2] = _crc32(HEAP32[i76 >> 2] | 0, i22, 9) | 0;
      }
      if ((_png_crc_finish(i1, 0) | 0) != 0) {
        continue;
      }
      i206 = HEAP8[i156] | 0;
      i43 = (HEAPU8[i150] | 0) << 24 | (HEAPU8[i149] | 0) << 16 | (HEAPU8[i152] | 0) << 8 | (HEAPU8[i154] | 0);
      HEAP32[i171 >> 2] = (HEAPU8[i22] | 0) << 24 | (HEAPU8[i151] | 0) << 16 | (HEAPU8[i153] | 0) << 8 | (HEAPU8[i155] | 0);
      HEAP32[i172 >> 2] = i43;
      HEAP8[i173] = i206;
      HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 128;
      continue;
    }
    if ((_memcmp(i44, 5245888, 4) | 0) == 0) {
      HEAP32[i11 >> 2] = 0;
      i206 = HEAP32[i33 >> 2] | 0;
      if ((i206 & 1 | 0) == 0) {
        i207 = 715;
        break;
      }
      if ((i206 & 4 | 0) != 0) {
        i43 = HEAP32[i29 >> 2] | 0;
        if ((i43 | 0) == 0) {
          i209 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i209 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5269172, tempInt) | 0) | 0;
          i209 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i209 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i43 & 511](i1, 5269172);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      do {
        if ((i206 & 2 | 0) != 0) {
          i43 = HEAP32[i29 >> 2] | 0;
          if ((i43 | 0) == 0) {
            i209 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i209 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5269060, tempInt) | 0) | 0;
            i209 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i209 | 0) | 0;
            break;
          } else {
            FUNCTION_TABLE_vii[i43 & 511](i1, 5269060);
            break;
          }
        }
      } while (0);
      if ((HEAP32[i27 >> 2] & 2 | 0) != 0) {
        i206 = HEAP32[i29 >> 2] | 0;
        if ((i206 | 0) == 0) {
          i43 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i43 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5268964, tempInt) | 0) | 0;
          i43 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i43 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i206 & 511](i1, 5268964);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      if (HEAP8[i56] << 24 >> 24 == 3) {
        i267 = 3;
      } else {
        i267 = HEAPU8[i59] | 0;
      }
      if ((i267 | 0) != (i205 | 0) | i205 >>> 0 > 4) {
        i206 = HEAP32[i29 >> 2] | 0;
        if ((i206 | 0) == 0) {
          i43 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i43 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5268812, tempInt) | 0) | 0;
          i43 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i43 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i206 & 511](i1, 5268812);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      i206 = HEAP32[i34 >> 2] | 0;
      if ((i206 | 0) == 0) {
        i207 = 738;
        break;
      }
      FUNCTION_TABLE_viii[i206 & 511](i35, i174, i205);
      i206 = HEAP32[i75 >> 2] | 0;
      do {
        if ((HEAP8[i44] & 32) << 24 >> 24 == 0) {
          if ((i206 & 2048 | 0) == 0) {
            i207 = 742;
            break;
          } else {
            break;
          }
        } else {
          if ((i206 & 768 | 0) == 768) {
            break;
          } else {
            i207 = 742;
            break;
          }
        }
      } while (0);
      if ((i207 | 0) == 742) {
        i207 = 0;
        HEAP32[i76 >> 2] = _crc32(HEAP32[i76 >> 2] | 0, i174, i205) | 0;
      }
      if ((_png_crc_finish(i1, 0) | 0) != 0) {
        continue;
      }
      i206 = HEAP32[i11 >> 2] | 0;
      i43 = i206 & 255;
      if ((HEAP8[i56] & 2) << 24 >> 24 == 0) {
        _memset(i175 | 0, i43 | 0, 4);
        i268 = (i206 & 65535) >>> 8 & 255;
      } else {
        i209 = (HEAPU16[i11 >> 1] | 0) >>> 8 & 255;
        HEAP8[i175] = i43;
        HEAP8[i178] = i209;
        HEAP8[i179] = i206 >>> 16 & 255;
        i268 = i206 >>> 24 & 255;
      }
      HEAP8[i176] = i268;
      HEAP8[i177] = HEAP8[i175] | 0;
      HEAP8[i177 + 1 | 0] = HEAP8[i175 + 1 | 0] | 0;
      HEAP8[i177 + 2 | 0] = HEAP8[i175 + 2 | 0] | 0;
      HEAP8[i177 + 3 | 0] = HEAP8[i175 + 3 | 0] | 0;
      HEAP8[i177 + 4 | 0] = HEAP8[i175 + 4 | 0] | 0;
      HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 2;
      continue;
    }
    if ((_memcmp(i44, 5245864, 4) | 0) == 0) {
      i206 = HEAP32[i33 >> 2] | 0;
      if ((i206 & 1 | 0) == 0) {
        i207 = 750;
        break;
      }
      if ((i206 & 4 | 0) != 0) {
        i209 = HEAP32[i29 >> 2] | 0;
        if ((i209 | 0) == 0) {
          i43 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i43 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5267728, tempInt) | 0) | 0;
          i43 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i43 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i209 & 511](i1, 5267728);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      do {
        if ((i206 & 2 | 0) != 0) {
          i209 = HEAP32[i29 >> 2] | 0;
          if ((i209 | 0) == 0) {
            i43 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i43 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5267640, tempInt) | 0) | 0;
            i43 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i43 | 0) | 0;
            break;
          } else {
            FUNCTION_TABLE_vii[i209 & 511](i1, 5267640);
            break;
          }
        }
      } while (0);
      if ((HEAP32[i27 >> 2] & 2048 | 0) != 0) {
        i206 = HEAP32[i29 >> 2] | 0;
        if ((i206 | 0) == 0) {
          i209 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i209 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5267576, tempInt) | 0) | 0;
          i209 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i209 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i206 & 511](i1, 5267576);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      if ((i205 | 0) != 1) {
        i206 = HEAP32[i29 >> 2] | 0;
        if ((i206 | 0) == 0) {
          i209 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i209 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5267508, tempInt) | 0) | 0;
          i209 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i209 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i206 & 511](i1, 5267508);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      i206 = HEAP32[i34 >> 2] | 0;
      if ((i206 | 0) == 0) {
        i207 = 771;
        break;
      }
      FUNCTION_TABLE_viii[i206 & 511](i35, i180, 1);
      i206 = HEAP32[i75 >> 2] | 0;
      do {
        if ((HEAP8[i44] & 32) << 24 >> 24 == 0) {
          if ((i206 & 2048 | 0) == 0) {
            i207 = 775;
            break;
          } else {
            break;
          }
        } else {
          if ((i206 & 768 | 0) == 768) {
            break;
          } else {
            i207 = 775;
            break;
          }
        }
      } while (0);
      if ((i207 | 0) == 775) {
        i207 = 0;
        HEAP32[i76 >> 2] = _crc32(HEAP32[i76 >> 2] | 0, i180, 1) | 0;
      }
      if ((_png_crc_finish(i1, 0) | 0) != 0) {
        continue;
      }
      i206 = HEAP8[i180] | 0;
      if ((i206 & 255) > 3) {
        i209 = HEAP32[i29 >> 2] | 0;
        if ((i209 | 0) == 0) {
          i43 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i43 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5267440, tempInt) | 0) | 0;
          i43 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i43 | 0) | 0;
          continue;
        } else {
          FUNCTION_TABLE_vii[i209 & 511](i1, 5267440);
          continue;
        }
      }
      i209 = HEAP32[i27 >> 2] | 0;
      do {
        if ((i209 & 1 | 0) == 0) {
          i269 = i209;
        } else {
          if (((HEAP32[i144 >> 2] | 0) - 45e3 | 0) >>> 0 <= 1e3) {
            i269 = i209;
            break;
          }
          i43 = HEAP32[i29 >> 2] | 0;
          if ((i43 | 0) == 0) {
            i36 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i36 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5269580, tempInt) | 0) | 0;
            i36 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i36 | 0) | 0;
          } else {
            FUNCTION_TABLE_vii[i43 & 511](i1, 5269580);
          }
          _fprintf(HEAP32[_stderr >> 2] | 0, 5267312, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAP32[i144 >> 2] | 0, tempInt) | 0) | 0;
          i269 = HEAP32[i27 >> 2] | 0;
        }
      } while (0);
      L1025 : do {
        if ((i269 & 4 | 0) != 0) {
          do {
            if (((HEAP32[i24 >> 2] | 0) - 30270 | 0) >>> 0 <= 2e3) {
              if (((HEAP32[i133 >> 2] | 0) - 31900 | 0) >>> 0 > 2e3) {
                break;
              }
              if (((HEAP32[i134 >> 2] | 0) - 63e3 | 0) >>> 0 > 2e3) {
                break;
              }
              if (((HEAP32[i135 >> 2] | 0) - 32e3 | 0) >>> 0 > 2e3) {
                break;
              }
              if (((HEAP32[i136 >> 2] | 0) - 29e3 | 0) >>> 0 > 2e3) {
                break;
              }
              if (((HEAP32[i137 >> 2] | 0) - 59e3 | 0) >>> 0 > 2e3) {
                break;
              }
              if (((HEAP32[i138 >> 2] | 0) - 14e3 | 0) >>> 0 > 2e3) {
                break;
              }
              if (((HEAP32[i139 >> 2] | 0) - 5e3 | 0) >>> 0 <= 2e3) {
                break L1025;
              }
            }
          } while (0);
          i209 = HEAP32[i29 >> 2] | 0;
          if ((i209 | 0) == 0) {
            i43 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i43 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5268072, tempInt) | 0) | 0;
            i43 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i43 | 0) | 0;
            break;
          } else {
            FUNCTION_TABLE_vii[i209 & 511](i1, 5268072);
            break;
          }
        }
      } while (0);
      HEAP8[i10] = i206;
      i209 = HEAP32[i27 >> 2] | 0;
      HEAP32[i144 >> 2] = 45455;
      HEAP32[i24 >> 2] = 31270;
      HEAP32[i133 >> 2] = 32900;
      HEAP32[i134 >> 2] = 64e3;
      HEAP32[i135 >> 2] = 33e3;
      HEAP32[i136 >> 2] = 3e4;
      HEAP32[i137 >> 2] = 6e4;
      HEAP32[i138 >> 2] = 15e3;
      HEAP32[i139 >> 2] = 6e3;
      HEAP32[i27 >> 2] = i209 | 2053;
      continue;
    }
    if ((_memcmp(i44, 5245928, 4) | 0) == 0) {
      i209 = HEAP32[i33 >> 2] | 0;
      if ((i209 & 1 | 0) == 0) {
        i207 = 802;
        break;
      }
      if ((i209 & 4 | 0) != 0) {
        i43 = HEAP32[i29 >> 2] | 0;
        if ((i43 | 0) == 0) {
          i36 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i36 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5267232, tempInt) | 0) | 0;
          i36 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i36 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i43 & 511](i1, 5267232);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      do {
        if ((i209 & 2 | 0) != 0) {
          i43 = HEAP32[i29 >> 2] | 0;
          if ((i43 | 0) == 0) {
            i36 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i36 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5267168, tempInt) | 0) | 0;
            i36 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i36 | 0) | 0;
            break;
          } else {
            FUNCTION_TABLE_vii[i43 & 511](i1, 5267168);
            break;
          }
        }
      } while (0);
      if ((HEAP32[i27 >> 2] & 4096 | 0) != 0) {
        i209 = HEAP32[i29 >> 2] | 0;
        if ((i209 | 0) == 0) {
          i206 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i206 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5267040, tempInt) | 0) | 0;
          i206 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i206 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i209 & 511](i1, 5267040);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      i209 = HEAP32[i159 >> 2] | 0;
      do {
        if ((i209 | 0) != 0) {
          i206 = HEAP32[i160 >> 2] | 0;
          if ((i206 | 0) == 0) {
            _free(i209);
            break;
          } else {
            FUNCTION_TABLE_vii[i206 & 511](i89, i209);
            break;
          }
        }
      } while (0);
      i209 = i205 + 1 | 0;
      do {
        if ((i209 | 0) == 0) {
          i270 = 0;
          i207 = 829;
        } else {
          i206 = HEAP32[i83 >> 2] | 0;
          if ((i206 | 0) == 0) {
            i271 = _malloc(i209) | 0;
          } else {
            i271 = FUNCTION_TABLE_iii[i206 & 511](i89, i209) | 0;
          }
          if ((i271 | 0) != 0) {
            i270 = i271;
            i207 = 829;
            break;
          }
          if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
            i207 = 828;
            break L29;
          }
          HEAP32[i159 >> 2] = 0;
          i272 = 0;
          break;
        }
      } while (0);
      if ((i207 | 0) == 829) {
        i207 = 0;
        HEAP32[i159 >> 2] = i270;
        i272 = i270;
      }
      i209 = HEAP32[i34 >> 2] | 0;
      if ((i209 | 0) == 0) {
        i207 = 831;
        break;
      }
      FUNCTION_TABLE_viii[i209 & 511](i35, i272, i205);
      i209 = HEAP32[i75 >> 2] | 0;
      do {
        if ((HEAP8[i44] & 32) << 24 >> 24 == 0) {
          if ((i209 & 2048 | 0) == 0) {
            i207 = 835;
            break;
          } else {
            break;
          }
        } else {
          if ((i209 & 768 | 0) == 768) {
            break;
          } else {
            i207 = 835;
            break;
          }
        }
      } while (0);
      if ((i207 | 0) == 835) {
        i207 = 0;
        HEAP32[i76 >> 2] = _crc32(HEAP32[i76 >> 2] | 0, i272, i205) | 0;
      }
      i209 = (_png_crc_finish(i1, 0) | 0) == 0;
      i206 = HEAP32[i159 >> 2] | 0;
      if (!i209) {
        do {
          if ((i206 | 0) != 0) {
            i209 = HEAP32[i160 >> 2] | 0;
            if ((i209 | 0) == 0) {
              _free(i206);
              break;
            } else {
              FUNCTION_TABLE_vii[i209 & 511](i89, i206);
              break;
            }
          }
        } while (0);
        HEAP32[i159 >> 2] = 0;
        continue;
      }
      HEAP8[i206 + i205 | 0] = 0;
      i209 = HEAP32[i159 >> 2] | 0;
      i43 = i209;
      while (1) {
        i273 = i43 + 1 | 0;
        if (HEAP8[i43] << 24 >> 24 == 0) {
          break;
        } else {
          i43 = i273;
        }
      }
      if (i273 >>> 0 >= (i209 + (i205 - 1 | 0) | 0) >>> 0) {
        do {
          if ((i209 | 0) != 0) {
            i206 = HEAP32[i160 >> 2] | 0;
            if ((i206 | 0) == 0) {
              _free(i209);
              break;
            } else {
              FUNCTION_TABLE_vii[i206 & 511](i89, i209);
              break;
            }
          }
        } while (0);
        HEAP32[i159 >> 2] = 0;
        i209 = HEAP32[i29 >> 2] | 0;
        if ((i209 | 0) == 0) {
          i206 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i206 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5266928, tempInt) | 0) | 0;
          i206 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i206 | 0) | 0;
          continue;
        } else {
          FUNCTION_TABLE_vii[i209 & 511](i1, 5266928);
          continue;
        }
      }
      i209 = i43 + 2 | 0;
      do {
        if (HEAP8[i273] << 24 >> 24 != 0) {
          i206 = HEAP32[i29 >> 2] | 0;
          if ((i206 | 0) == 0) {
            i36 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i36 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5266848, tempInt) | 0) | 0;
            i36 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i36 | 0) | 0;
            break;
          } else {
            FUNCTION_TABLE_vii[i206 & 511](i1, 5266848);
            break;
          }
        }
      } while (0);
      i43 = i209 - (HEAP32[i159 >> 2] | 0) | 0;
      _png_decompress_chunk(i1, 0, i205, i43, i8);
      i206 = HEAP32[i8 >> 2] | 0;
      i36 = i206 - i43 | 0;
      i40 = HEAP32[i159 >> 2] | 0;
      if (i43 >>> 0 > i206 >>> 0 | i36 >>> 0 < 4) {
        do {
          if ((i40 | 0) != 0) {
            i206 = HEAP32[i160 >> 2] | 0;
            if ((i206 | 0) == 0) {
              _free(i40);
              break;
            } else {
              FUNCTION_TABLE_vii[i206 & 511](i89, i40);
              break;
            }
          }
        } while (0);
        HEAP32[i159 >> 2] = 0;
        i209 = HEAP32[i29 >> 2] | 0;
        if ((i209 | 0) == 0) {
          i206 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i206 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5266756, tempInt) | 0) | 0;
          i206 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i206 | 0) | 0;
          continue;
        } else {
          FUNCTION_TABLE_vii[i209 & 511](i1, 5266756);
          continue;
        }
      }
      i209 = i40 + i43 | 0;
      i206 = (HEAPU8[i40 + (i43 + 1 | 0) | 0] | 0) << 16 | (HEAPU8[i209] | 0) << 24 | (HEAPU8[i40 + (i43 + 2 | 0) | 0] | 0) << 8 | (HEAPU8[i40 + (i43 + 3 | 0) | 0] | 0);
      i212 = i206 >>> 0 < i36 >>> 0 ? i206 : i36;
      if (i206 >>> 0 > i212 >>> 0) {
        i215 = HEAP32[i160 >> 2] | 0;
        if ((i215 | 0) == 0) {
          _free(i40);
        } else {
          FUNCTION_TABLE_vii[i215 & 511](i89, i40);
        }
        HEAP32[i159 >> 2] = 0;
        _snprintf(i181 | 0, 80, 5266648, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = i206, HEAP32[tempInt + 4 >> 2] = i212, tempInt) | 0) | 0;
        L1136 : do {
          if (HEAP8[i181] << 24 >> 24 == 35) {
            i212 = 1;
            while (1) {
              if ((i212 | 0) >= 15) {
                i274 = i212;
                break L1136;
              }
              if (HEAP8[i9 + i212 | 0] << 24 >> 24 == 32) {
                i274 = i212;
                break L1136;
              } else {
                i212 = i212 + 1 | 0;
              }
            }
          } else {
            i274 = 0;
          }
        } while (0);
        i36 = HEAP32[i29 >> 2] | 0;
        i43 = i9 + i274 | 0;
        if ((i36 | 0) == 0) {
          i212 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i212 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = i43, tempInt) | 0) | 0;
          i212 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i212 | 0) | 0;
          continue;
        } else {
          FUNCTION_TABLE_vii[i36 & 511](i1, i43);
          continue;
        }
      }
      L1145 : do {
        if (!((i40 | 0) == 0 | (i209 | 0) == 0)) {
          i43 = (_strlen(i40) | 0) + 1 | 0;
          i36 = HEAP32[i75 >> 2] | 0;
          HEAP32[i75 >> 2] = i36 | 1048576;
          do {
            if ((i43 | 0) != 0) {
              i212 = HEAP32[i83 >> 2] | 0;
              if ((i212 | 0) == 0) {
                i275 = _malloc(i43) | 0;
              } else {
                i275 = FUNCTION_TABLE_iii[i212 & 511](i89, i43) | 0;
              }
              if ((i275 | 0) == 0) {
                if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
                  i207 = 881;
                  break L29;
                } else {
                  break;
                }
              }
              HEAP32[i75 >> 2] = i36;
              _memcpy(i275, i40, i43);
              i212 = HEAP32[i75 >> 2] | 0;
              HEAP32[i75 >> 2] = i212 | 1048576;
              do {
                if ((i206 | 0) != 0) {
                  i215 = HEAP32[i83 >> 2] | 0;
                  if ((i215 | 0) == 0) {
                    i276 = _malloc(i206) | 0;
                  } else {
                    i276 = FUNCTION_TABLE_iii[i215 & 511](i89, i206) | 0;
                  }
                  if ((i276 | 0) == 0) {
                    if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
                      i207 = 891;
                      break L29;
                    } else {
                      break;
                    }
                  } else {
                    HEAP32[i75 >> 2] = i212;
                    _memcpy(i276, i209, i206);
                    _png_free_data(i1, i2, 16, 0);
                    HEAP32[i182 >> 2] = i206;
                    HEAP32[i183 >> 2] = i275;
                    HEAP32[i184 >> 2] = i276;
                    HEAP8[i185] = 0;
                    HEAP32[i88 >> 2] = HEAP32[i88 >> 2] | 16;
                    HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 4096;
                    break L1145;
                  }
                }
              } while (0);
              HEAP32[i75 >> 2] = i212;
              i215 = HEAP32[i160 >> 2] | 0;
              if ((i215 | 0) == 0) {
                _free(i275);
              } else {
                FUNCTION_TABLE_vii[i215 & 511](i89, i275);
              }
              i215 = HEAP32[i29 >> 2] | 0;
              if ((i215 | 0) == 0) {
                i239 = HEAP32[_stderr >> 2] | 0;
                _fprintf(i239 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5269360, tempInt) | 0) | 0;
                i239 = HEAP32[_stderr >> 2] | 0;
                _fputc(10, i239 | 0) | 0;
                break L1145;
              } else {
                FUNCTION_TABLE_vii[i215 & 511](i1, 5269360);
                break L1145;
              }
            }
          } while (0);
          HEAP32[i75 >> 2] = i36;
          i43 = HEAP32[i29 >> 2] | 0;
          if ((i43 | 0) == 0) {
            i215 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i215 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5269536, tempInt) | 0) | 0;
            i215 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i215 | 0) | 0;
            break;
          } else {
            FUNCTION_TABLE_vii[i43 & 511](i1, 5269536);
            break;
          }
        }
      } while (0);
      i206 = HEAP32[i159 >> 2] | 0;
      do {
        if ((i206 | 0) != 0) {
          i209 = HEAP32[i160 >> 2] | 0;
          if ((i209 | 0) == 0) {
            _free(i206);
            break;
          } else {
            FUNCTION_TABLE_vii[i209 & 511](i89, i206);
            break;
          }
        }
      } while (0);
      HEAP32[i159 >> 2] = 0;
      continue;
    }
    if ((_memcmp(i44, 5245872, 4) | 0) == 0) {
      i206 = HEAP32[i186 >> 2] | 0;
      if ((i206 | 0) == 1) {
        _png_crc_finish(i1, i205) | 0;
        continue;
      } else if ((i206 | 0) != 0) {
        i207 = 907;
      }
      do {
        if ((i207 | 0) == 907) {
          i207 = 0;
          i209 = i206 - 1 | 0;
          HEAP32[i186 >> 2] = i209;
          if ((i209 | 0) != 1) {
            break;
          }
          i209 = HEAP32[i29 >> 2] | 0;
          if ((i209 | 0) == 0) {
            i40 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i40 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5266540, tempInt) | 0) | 0;
            i40 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i40 | 0) | 0;
          } else {
            FUNCTION_TABLE_vii[i209 & 511](i1, 5266540);
          }
          _png_crc_finish(i1, i205) | 0;
          continue L29;
        }
      } while (0);
      i206 = HEAP32[i33 >> 2] | 0;
      if ((i206 & 1 | 0) == 0) {
        i207 = 913;
        break;
      }
      if ((i206 & 4 | 0) != 0) {
        i206 = HEAP32[i29 >> 2] | 0;
        if ((i206 | 0) == 0) {
          i209 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i209 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5266364, tempInt) | 0) | 0;
          i209 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i209 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i206 & 511](i1, 5266364);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      i206 = HEAP32[i159 >> 2] | 0;
      do {
        if ((i206 | 0) != 0) {
          i209 = HEAP32[i160 >> 2] | 0;
          if ((i209 | 0) == 0) {
            _free(i206);
            break;
          } else {
            FUNCTION_TABLE_vii[i209 & 511](i89, i206);
            break;
          }
        }
      } while (0);
      i206 = i205 + 1 | 0;
      do {
        if ((i206 | 0) == 0) {
          i277 = 0;
          i207 = 931;
        } else {
          i209 = HEAP32[i83 >> 2] | 0;
          if ((i209 | 0) == 0) {
            i278 = _malloc(i206) | 0;
          } else {
            i278 = FUNCTION_TABLE_iii[i209 & 511](i89, i206) | 0;
          }
          if ((i278 | 0) != 0) {
            i277 = i278;
            i207 = 931;
            break;
          }
          if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
            i207 = 930;
            break L29;
          }
          HEAP32[i159 >> 2] = 0;
          i279 = 0;
          break;
        }
      } while (0);
      if ((i207 | 0) == 931) {
        i207 = 0;
        HEAP32[i159 >> 2] = i277;
        i279 = i277;
      }
      i206 = HEAP32[i34 >> 2] | 0;
      if ((i206 | 0) == 0) {
        i207 = 933;
        break;
      }
      FUNCTION_TABLE_viii[i206 & 511](i35, i279, i205);
      i206 = HEAP32[i75 >> 2] | 0;
      do {
        if ((HEAP8[i44] & 32) << 24 >> 24 == 0) {
          if ((i206 & 2048 | 0) == 0) {
            i207 = 937;
            break;
          } else {
            break;
          }
        } else {
          if ((i206 & 768 | 0) == 768) {
            break;
          } else {
            i207 = 937;
            break;
          }
        }
      } while (0);
      if ((i207 | 0) == 937) {
        i207 = 0;
        HEAP32[i76 >> 2] = _crc32(HEAP32[i76 >> 2] | 0, i279, i205) | 0;
      }
      i206 = (_png_crc_finish(i1, 0) | 0) == 0;
      i209 = HEAP32[i159 >> 2] | 0;
      if (!i206) {
        do {
          if ((i209 | 0) != 0) {
            i206 = HEAP32[i160 >> 2] | 0;
            if ((i206 | 0) == 0) {
              _free(i209);
              break;
            } else {
              FUNCTION_TABLE_vii[i206 & 511](i89, i209);
              break;
            }
          }
        } while (0);
        HEAP32[i159 >> 2] = 0;
        continue;
      }
      HEAP8[i209 + i205 | 0] = 0;
      i206 = HEAP32[i159 >> 2] | 0;
      i40 = i206;
      while (1) {
        i280 = i40 + 1 | 0;
        if (HEAP8[i40] << 24 >> 24 == 0) {
          break;
        } else {
          i40 = i280;
        }
      }
      if (i280 >>> 0 > (i206 + (i205 - 2 | 0) | 0) >>> 0) {
        do {
          if ((i206 | 0) != 0) {
            i209 = HEAP32[i160 >> 2] | 0;
            if ((i209 | 0) == 0) {
              _free(i206);
              break;
            } else {
              FUNCTION_TABLE_vii[i209 & 511](i89, i206);
              break;
            }
          }
        } while (0);
        HEAP32[i159 >> 2] = 0;
        i209 = HEAP32[i29 >> 2] | 0;
        if ((i209 | 0) == 0) {
          i43 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i43 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5266296, tempInt) | 0) | 0;
          i43 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i43 | 0) | 0;
          continue;
        } else {
          FUNCTION_TABLE_vii[i209 & 511](i1, 5266296);
          continue;
        }
      }
      i209 = i40 + 2 | 0;
      i43 = HEAP8[i280] | 0;
      i215 = i43 << 24 >> 24 == 8;
      i239 = i215 ? 6 : 10;
      i208 = (i206 - i209 | 0) + i205 | 0;
      if (((i208 >>> 0) % (i239 >>> 0) | 0) != 0) {
        do {
          if ((i206 | 0) != 0) {
            i211 = HEAP32[i160 >> 2] | 0;
            if ((i211 | 0) == 0) {
              _free(i206);
              break;
            } else {
              FUNCTION_TABLE_vii[i211 & 511](i89, i206);
              break;
            }
          }
        } while (0);
        HEAP32[i159 >> 2] = 0;
        i206 = HEAP32[i29 >> 2] | 0;
        if ((i206 | 0) == 0) {
          i40 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i40 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5266220, tempInt) | 0) | 0;
          i40 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i40 | 0) | 0;
          continue;
        } else {
          FUNCTION_TABLE_vii[i206 & 511](i1, 5266220);
          continue;
        }
      }
      i206 = (i208 >>> 0) / (i239 >>> 0) >>> 0;
      if (i206 >>> 0 > 429496729) {
        i40 = HEAP32[i29 >> 2] | 0;
        if ((i40 | 0) == 0) {
          i211 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i211 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5266044, tempInt) | 0) | 0;
          i211 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i211 | 0) | 0;
          continue;
        } else {
          FUNCTION_TABLE_vii[i40 & 511](i1, 5266044);
          continue;
        }
      }
      i40 = i206 * 10 & -1;
      i211 = HEAP32[i75 >> 2] | 0;
      HEAP32[i75 >> 2] = i211 | 1048576;
      do {
        if ((i40 | 0) != 0) {
          i242 = HEAP32[i83 >> 2] | 0;
          if ((i242 | 0) == 0) {
            i281 = _malloc(i40) | 0;
          } else {
            i281 = FUNCTION_TABLE_iii[i242 & 511](i89, i40) | 0;
          }
          if ((i281 | 0) == 0) {
            if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
              i207 = 973;
              break L29;
            } else {
              break;
            }
          }
          HEAP32[i75 >> 2] = i211;
          i242 = i281;
          L1280 : do {
            if ((i206 | 0) != 0) {
              i210 = 0;
              i252 = i209;
              while (1) {
                i253 = i242 + (i210 * 10 & -1) | 0;
                if (i215) {
                  HEAP16[i253 >> 1] = HEAPU8[i252] | 0;
                  HEAP16[i242 + (i210 * 10 & -1) + 2 >> 1] = HEAPU8[i252 + 1 | 0] | 0;
                  HEAP16[i242 + (i210 * 10 & -1) + 4 >> 1] = HEAPU8[i252 + 2 | 0] | 0;
                  HEAP16[i242 + (i210 * 10 & -1) + 6 >> 1] = HEAPU8[i252 + 3 | 0] | 0;
                  i282 = i252 + 4 | 0;
                } else {
                  HEAP16[i253 >> 1] = (HEAPU8[i252] | 0) << 8 | (HEAPU8[i252 + 1 | 0] | 0);
                  HEAP16[i242 + (i210 * 10 & -1) + 2 >> 1] = (HEAPU8[i252 + 2 | 0] | 0) << 8 | (HEAPU8[i252 + 3 | 0] | 0);
                  HEAP16[i242 + (i210 * 10 & -1) + 4 >> 1] = (HEAPU8[i252 + 4 | 0] | 0) << 8 | (HEAPU8[i252 + 5 | 0] | 0);
                  HEAP16[i242 + (i210 * 10 & -1) + 6 >> 1] = (HEAPU8[i252 + 6 | 0] | 0) << 8 | (HEAPU8[i252 + 7 | 0] | 0);
                  i282 = i252 + 8 | 0;
                }
                HEAP16[i242 + (i210 * 10 & -1) + 8 >> 1] = (HEAPU8[i282] | 0) << 8 | (HEAPU8[i282 + 1 | 0] | 0);
                i253 = i210 + 1 | 0;
                if ((i253 | 0) < (i206 | 0)) {
                  i210 = i253;
                  i252 = i282 + 2 | 0;
                } else {
                  break L1280;
                }
              }
            }
          } while (0);
          i242 = HEAP32[i159 >> 2] | 0;
          i36 = (HEAP32[i187 >> 2] << 4) + 16 | 0;
          i252 = HEAP32[i75 >> 2] | 0;
          HEAP32[i75 >> 2] = i252 | 1048576;
          do {
            if ((i36 | 0) == 0) {
              i207 = 988;
            } else {
              i210 = HEAP32[i83 >> 2] | 0;
              if ((i210 | 0) == 0) {
                i283 = _malloc(i36) | 0;
              } else {
                i283 = FUNCTION_TABLE_iii[i210 & 511](i89, i36) | 0;
              }
              if ((i283 | 0) == 0) {
                if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
                  i207 = 987;
                  break L29;
                } else {
                  i207 = 988;
                  break;
                }
              }
              HEAP32[i75 >> 2] = i252;
              i210 = i283;
              _memcpy(i283, HEAP32[i188 >> 2] | 0, HEAP32[i187 >> 2] << 4);
              i212 = HEAP32[i188 >> 2] | 0;
              i253 = i212;
              do {
                if ((i212 | 0) != 0) {
                  i214 = HEAP32[i160 >> 2] | 0;
                  if ((i214 | 0) == 0) {
                    _free(i253);
                    break;
                  } else {
                    FUNCTION_TABLE_vii[i214 & 511](i89, i253);
                    break;
                  }
                }
              } while (0);
              HEAP32[i188 >> 2] = 0;
              i253 = HEAP32[i187 >> 2] | 0;
              i212 = (_strlen(i242) | 0) + 1 | 0;
              i214 = HEAP32[i75 >> 2] | 0;
              HEAP32[i75 >> 2] = i214 | 1048576;
              do {
                if ((i212 | 0) == 0) {
                  i207 = 1002;
                } else {
                  i238 = HEAP32[i83 >> 2] | 0;
                  if ((i238 | 0) == 0) {
                    i284 = _malloc(i212) | 0;
                  } else {
                    i284 = FUNCTION_TABLE_iii[i238 & 511](i89, i212) | 0;
                  }
                  if ((i284 | 0) == 0) {
                    if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
                      i207 = 1001;
                      break L29;
                    } else {
                      i207 = 1002;
                      break;
                    }
                  }
                  HEAP32[i75 >> 2] = i214;
                  i238 = i210 + (i253 << 4) | 0;
                  HEAP32[i238 >> 2] = i284;
                  _memcpy(i284, i242, i212);
                  i241 = HEAP32[i75 >> 2] | 0;
                  HEAP32[i75 >> 2] = i241 | 1048576;
                  i243 = HEAP32[i83 >> 2] | 0;
                  if ((i243 | 0) == 0) {
                    i285 = _malloc(i40) | 0;
                  } else {
                    i285 = FUNCTION_TABLE_iii[i243 & 511](i89, i40) | 0;
                  }
                  if ((i285 | 0) != 0) {
                    HEAP32[i75 >> 2] = i241;
                    HEAP32[i210 + (i253 << 4) + 8 >> 2] = i285;
                    _memcpy(i285, i281, i40);
                    HEAP32[i210 + (i253 << 4) + 12 >> 2] = i206;
                    HEAP8[i210 + (i253 << 4) + 4 | 0] = i43;
                    break;
                  }
                  if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
                    i207 = 1010;
                    break L29;
                  }
                  HEAP32[i75 >> 2] = i241;
                  HEAP32[i210 + (i253 << 4) + 8 >> 2] = 0;
                  i241 = HEAP32[i29 >> 2] | 0;
                  if ((i241 | 0) == 0) {
                    i243 = HEAP32[_stderr >> 2] | 0;
                    _fprintf(i243 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5268768, tempInt) | 0) | 0;
                    i243 = HEAP32[_stderr >> 2] | 0;
                    _fputc(10, i243 | 0) | 0;
                  } else {
                    FUNCTION_TABLE_vii[i241 & 511](i1, 5268768);
                  }
                  i241 = HEAP32[i238 >> 2] | 0;
                  do {
                    if ((i241 | 0) != 0) {
                      i243 = HEAP32[i160 >> 2] | 0;
                      if ((i243 | 0) == 0) {
                        _free(i241);
                        break;
                      } else {
                        FUNCTION_TABLE_vii[i243 & 511](i89, i241);
                        break;
                      }
                    }
                  } while (0);
                  HEAP32[i238 >> 2] = 0;
                  break;
                }
              } while (0);
              do {
                if ((i207 | 0) == 1002) {
                  i207 = 0;
                  HEAP32[i75 >> 2] = i214;
                  HEAP32[i210 + (i253 << 4) >> 2] = 0;
                  i212 = HEAP32[i29 >> 2] | 0;
                  if ((i212 | 0) == 0) {
                    i241 = HEAP32[_stderr >> 2] | 0;
                    _fprintf(i241 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5268768, tempInt) | 0) | 0;
                    i241 = HEAP32[_stderr >> 2] | 0;
                    _fputc(10, i241 | 0) | 0;
                    break;
                  } else {
                    FUNCTION_TABLE_vii[i212 & 511](i1, 5268768);
                    break;
                  }
                }
              } while (0);
              HEAP32[i188 >> 2] = i210;
              HEAP32[i187 >> 2] = (HEAP32[i187 >> 2] | 0) + 1 | 0;
              HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 8192;
              HEAP32[i88 >> 2] = HEAP32[i88 >> 2] | 32;
              break;
            }
          } while (0);
          do {
            if ((i207 | 0) == 988) {
              i207 = 0;
              HEAP32[i75 >> 2] = i252;
              i242 = HEAP32[i29 >> 2] | 0;
              if ((i242 | 0) == 0) {
                i36 = HEAP32[_stderr >> 2] | 0;
                _fprintf(i36 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5268936, tempInt) | 0) | 0;
                i36 = HEAP32[_stderr >> 2] | 0;
                _fputc(10, i36 | 0) | 0;
                break;
              } else {
                FUNCTION_TABLE_vii[i242 & 511](i1, 5268936);
                break;
              }
            }
          } while (0);
          i252 = HEAP32[i159 >> 2] | 0;
          do {
            if ((i252 | 0) != 0) {
              i242 = HEAP32[i160 >> 2] | 0;
              if ((i242 | 0) == 0) {
                _free(i252);
                break;
              } else {
                FUNCTION_TABLE_vii[i242 & 511](i89, i252);
                break;
              }
            }
          } while (0);
          HEAP32[i159 >> 2] = 0;
          if ((i281 | 0) == 0) {
            continue L29;
          }
          i252 = HEAP32[i160 >> 2] | 0;
          if ((i252 | 0) == 0) {
            _free(i281);
            continue L29;
          } else {
            FUNCTION_TABLE_vii[i252 & 511](i89, i281);
            continue L29;
          }
        }
      } while (0);
      HEAP32[i75 >> 2] = i211;
      i43 = HEAP32[i29 >> 2] | 0;
      if ((i43 | 0) == 0) {
        i206 = HEAP32[_stderr >> 2] | 0;
        _fprintf(i206 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5265920, tempInt) | 0) | 0;
        i206 = HEAP32[_stderr >> 2] | 0;
        _fputc(10, i206 | 0) | 0;
        continue;
      } else {
        FUNCTION_TABLE_vii[i43 & 511](i1, 5265920);
        continue;
      }
    }
    if ((_memcmp(i44, 5245856, 4) | 0) == 0) {
      i43 = HEAP32[i186 >> 2] | 0;
      if ((i43 | 0) == 1) {
        _png_crc_finish(i1, i205) | 0;
        continue;
      } else if ((i43 | 0) != 0) {
        i207 = 1032;
      }
      do {
        if ((i207 | 0) == 1032) {
          i207 = 0;
          i206 = i43 - 1 | 0;
          HEAP32[i186 >> 2] = i206;
          if ((i206 | 0) != 1) {
            break;
          }
          i206 = HEAP32[i29 >> 2] | 0;
          if ((i206 | 0) == 0) {
            i40 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i40 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5274868, tempInt) | 0) | 0;
            i40 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i40 | 0) | 0;
          } else {
            FUNCTION_TABLE_vii[i206 & 511](i1, 5274868);
          }
          _png_crc_finish(i1, i205) | 0;
          continue L29;
        }
      } while (0);
      i43 = HEAP32[i33 >> 2] | 0;
      if ((i43 & 1 | 0) == 0) {
        i207 = 1038;
        break;
      }
      if ((i43 & 4 | 0) != 0) {
        HEAP32[i33 >> 2] = i43 | 8;
      }
      i43 = HEAP32[i159 >> 2] | 0;
      do {
        if ((i43 | 0) != 0) {
          i211 = HEAP32[i160 >> 2] | 0;
          if ((i211 | 0) == 0) {
            _free(i43);
            break;
          } else {
            FUNCTION_TABLE_vii[i211 & 511](i89, i43);
            break;
          }
        }
      } while (0);
      i43 = i205 + 1 | 0;
      i211 = HEAP32[i75 >> 2] | 0;
      HEAP32[i75 >> 2] = i211 | 1048576;
      do {
        if ((i43 | 0) != 0) {
          i206 = HEAP32[i83 >> 2] | 0;
          if ((i206 | 0) == 0) {
            i286 = _malloc(i43) | 0;
          } else {
            i286 = FUNCTION_TABLE_iii[i206 & 511](i89, i43) | 0;
          }
          if ((i286 | 0) == 0) {
            if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
              i207 = 1051;
              break L29;
            } else {
              break;
            }
          }
          HEAP32[i75 >> 2] = i211;
          HEAP32[i159 >> 2] = i286;
          i206 = HEAP32[i34 >> 2] | 0;
          if ((i206 | 0) == 0) {
            i207 = 1056;
            break L29;
          }
          FUNCTION_TABLE_viii[i206 & 511](i35, i286, i205);
          i206 = HEAP32[i75 >> 2] | 0;
          do {
            if ((HEAP8[i44] & 32) << 24 >> 24 == 0) {
              if ((i206 & 2048 | 0) == 0) {
                i207 = 1060;
                break;
              } else {
                break;
              }
            } else {
              if ((i206 & 768 | 0) == 768) {
                break;
              } else {
                i207 = 1060;
                break;
              }
            }
          } while (0);
          if ((i207 | 0) == 1060) {
            i207 = 0;
            HEAP32[i76 >> 2] = _crc32(HEAP32[i76 >> 2] | 0, i286, i205) | 0;
          }
          i206 = (_png_crc_finish(i1, 0) | 0) == 0;
          i40 = HEAP32[i159 >> 2] | 0;
          if (!i206) {
            do {
              if ((i40 | 0) != 0) {
                i206 = HEAP32[i160 >> 2] | 0;
                if ((i206 | 0) == 0) {
                  _free(i40);
                  break;
                } else {
                  FUNCTION_TABLE_vii[i206 & 511](i89, i40);
                  break;
                }
              }
            } while (0);
            HEAP32[i159 >> 2] = 0;
            continue L29;
          }
          i206 = i40 + i205 | 0;
          HEAP8[i206] = 0;
          i215 = i40;
          while (1) {
            i287 = i215 + 1 | 0;
            if (HEAP8[i215] << 24 >> 24 == 0) {
              break;
            } else {
              i215 = i287;
            }
          }
          i209 = (i215 | 0) == (i206 | 0) ? i215 : i287;
          i239 = HEAP32[i75 >> 2] | 0;
          HEAP32[i75 >> 2] = i239 | 1048576;
          i208 = HEAP32[i83 >> 2] | 0;
          if ((i208 | 0) == 0) {
            i288 = _malloc(28) | 0;
          } else {
            i288 = FUNCTION_TABLE_iii[i208 & 511](i89, 28) | 0;
          }
          if ((i288 | 0) == 0) {
            if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
              i207 = 1074;
              break L29;
            }
            HEAP32[i75 >> 2] = i239;
            i208 = HEAP32[i29 >> 2] | 0;
            if ((i208 | 0) == 0) {
              i252 = HEAP32[_stderr >> 2] | 0;
              _fprintf(i252 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5274600, tempInt) | 0) | 0;
              i252 = HEAP32[_stderr >> 2] | 0;
              _fputc(10, i252 | 0) | 0;
            } else {
              FUNCTION_TABLE_vii[i208 & 511](i1, 5274600);
            }
            i208 = HEAP32[i159 >> 2] | 0;
            do {
              if ((i208 | 0) != 0) {
                i252 = HEAP32[i160 >> 2] | 0;
                if ((i252 | 0) == 0) {
                  _free(i208);
                  break;
                } else {
                  FUNCTION_TABLE_vii[i252 & 511](i89, i208);
                  break;
                }
              }
            } while (0);
            HEAP32[i159 >> 2] = 0;
            continue L29;
          }
          HEAP32[i75 >> 2] = i239;
          HEAP32[i288 >> 2] = -1;
          HEAP32[i288 + 4 >> 2] = i40;
          HEAP32[i288 + 20 >> 2] = 0;
          HEAP32[i288 + 24 >> 2] = 0;
          HEAP32[i288 + 16 >> 2] = 0;
          HEAP32[i288 + 8 >> 2] = i209;
          HEAP32[i288 + 12 >> 2] = _strlen(i209) | 0;
          i208 = _png_set_text_2(i1, i2, i288) | 0;
          i215 = HEAP32[i159 >> 2] | 0;
          do {
            if ((i215 | 0) != 0) {
              i206 = HEAP32[i160 >> 2] | 0;
              if ((i206 | 0) == 0) {
                _free(i215);
                break;
              } else {
                FUNCTION_TABLE_vii[i206 & 511](i89, i215);
                break;
              }
            }
          } while (0);
          HEAP32[i159 >> 2] = 0;
          i215 = HEAP32[i160 >> 2] | 0;
          if ((i215 | 0) == 0) {
            _free(i288);
          } else {
            FUNCTION_TABLE_vii[i215 & 511](i89, i288);
          }
          if ((i208 | 0) == 0) {
            continue L29;
          }
          i215 = HEAP32[i29 >> 2] | 0;
          if ((i215 | 0) == 0) {
            i209 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i209 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5274460, tempInt) | 0) | 0;
            i209 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i209 | 0) | 0;
            continue L29;
          } else {
            FUNCTION_TABLE_vii[i215 & 511](i1, 5274460);
            continue L29;
          }
        }
      } while (0);
      HEAP32[i75 >> 2] = i211;
      HEAP32[i159 >> 2] = 0;
      i43 = HEAP32[i29 >> 2] | 0;
      if ((i43 | 0) == 0) {
        i215 = HEAP32[_stderr >> 2] | 0;
        _fprintf(i215 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5274692, tempInt) | 0) | 0;
        i215 = HEAP32[_stderr >> 2] | 0;
        _fputc(10, i215 | 0) | 0;
        continue;
      } else {
        FUNCTION_TABLE_vii[i43 & 511](i1, 5274692);
        continue;
      }
    }
    if ((_memcmp(i44, 5245848, 4) | 0) == 0) {
      i43 = HEAP32[i33 >> 2] | 0;
      if ((i43 & 1 | 0) == 0) {
        i207 = 1096;
        break;
      }
      if ((HEAP32[i27 >> 2] & 512 | 0) != 0) {
        i215 = HEAP32[i29 >> 2] | 0;
        if ((i215 | 0) == 0) {
          i209 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i209 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5275076, tempInt) | 0) | 0;
          i209 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i209 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i215 & 511](i1, 5275076);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      if ((i43 & 4 | 0) != 0) {
        HEAP32[i33 >> 2] = i43 | 8;
      }
      if ((i205 | 0) != 7) {
        i43 = HEAP32[i29 >> 2] | 0;
        if ((i43 | 0) == 0) {
          i215 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i215 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5275020, tempInt) | 0) | 0;
          i215 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i215 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i43 & 511](i1, 5275020);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      i43 = HEAP32[i34 >> 2] | 0;
      if ((i43 | 0) == 0) {
        i207 = 1110;
        break;
      }
      FUNCTION_TABLE_viii[i43 & 511](i35, i189, 7);
      i43 = HEAP32[i75 >> 2] | 0;
      do {
        if ((HEAP8[i44] & 32) << 24 >> 24 == 0) {
          if ((i43 & 2048 | 0) == 0) {
            i207 = 1114;
            break;
          } else {
            break;
          }
        } else {
          if ((i43 & 768 | 0) == 768) {
            break;
          } else {
            i207 = 1114;
            break;
          }
        }
      } while (0);
      if ((i207 | 0) == 1114) {
        i207 = 0;
        HEAP32[i76 >> 2] = _crc32(HEAP32[i76 >> 2] | 0, i189, 7) | 0;
      }
      if ((_png_crc_finish(i1, 0) | 0) != 0) {
        continue;
      }
      if ((HEAP32[i33 >> 2] & 512 | 0) != 0) {
        continue;
      }
      i43 = HEAPU8[i193] | 0;
      i211 = HEAPU8[i194] | 0;
      i215 = (HEAPU8[i191] | 0) << 8 | 0 >>> 24 | ((HEAPU8[i190] | 0) << 16 | 0 >>> 16) | (HEAPU8[i192] | 0) | (0 << 24 | i43 >>> 8) | (0 << 16 | i211 >>> 16) | 0;
      i209 = i7 | 0;
      tempBigInt = 0 << 8 | 0 >>> 24 | (0 << 16 | 0 >>> 16) | (i43 << 24 | 0 >>> 8) | (i211 << 16 | 0 >>> 16) | ((HEAPU8[i189] | 0) << 8 | (HEAPU8[i195] | 0)) & 65535;
      HEAP16[i209 >> 1] = tempBigInt & 65535;
      HEAP16[i209 + 2 >> 1] = tempBigInt >> 16;
      i209 = i7 + 4 | 0;
      tempBigInt = i215;
      HEAP16[i209 >> 1] = tempBigInt & 65535;
      HEAP16[i209 + 2 >> 1] = tempBigInt >> 16;
      HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 512;
      continue;
    }
    if ((_memcmp(i44, 5245840, 4) | 0) == 0) {
      i209 = HEAP32[i33 >> 2] | 0;
      if ((i209 & 1 | 0) == 0) {
        i207 = 1120;
        break;
      }
      if ((i209 & 4 | 0) != 0) {
        i215 = HEAP32[i29 >> 2] | 0;
        if ((i215 | 0) == 0) {
          i211 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i211 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5265804, tempInt) | 0) | 0;
          i211 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i211 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i215 & 511](i1, 5265804);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      if ((HEAP32[i27 >> 2] & 16 | 0) != 0) {
        i215 = HEAP32[i29 >> 2] | 0;
        if ((i215 | 0) == 0) {
          i211 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i211 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5265724, tempInt) | 0) | 0;
          i211 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i211 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i215 & 511](i1, 5265724);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      i215 = HEAP8[i56] | 0;
      if ((i215 << 24 >> 24 | 0) == 0) {
        if ((i205 | 0) != 2) {
          i211 = HEAP32[i29 >> 2] | 0;
          if ((i211 | 0) == 0) {
            i43 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i43 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5265640, tempInt) | 0) | 0;
            i43 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i43 | 0) | 0;
          } else {
            FUNCTION_TABLE_vii[i211 & 511](i1, 5265640);
          }
          _png_crc_finish(i1, i205) | 0;
          continue;
        }
        i211 = HEAP32[i34 >> 2] | 0;
        if ((i211 | 0) == 0) {
          i207 = 1138;
          break;
        }
        FUNCTION_TABLE_viii[i211 & 511](i35, i145, 2);
        i211 = HEAP32[i75 >> 2] | 0;
        do {
          if ((HEAP8[i44] & 32) << 24 >> 24 == 0) {
            if ((i211 & 2048 | 0) == 0) {
              i207 = 1142;
              break;
            } else {
              break;
            }
          } else {
            if ((i211 & 768 | 0) == 768) {
              break;
            } else {
              i207 = 1142;
              break;
            }
          }
        } while (0);
        if ((i207 | 0) == 1142) {
          i207 = 0;
          HEAP32[i76 >> 2] = _crc32(HEAP32[i76 >> 2] | 0, i145, 2) | 0;
        }
        HEAP16[i81 >> 1] = 1;
        HEAP16[i6 >> 1] = (HEAPU8[i145] | 0) << 8 | (HEAPU8[i148] | 0);
      } else if ((i215 << 24 >> 24 | 0) == 2) {
        if ((i205 | 0) != 6) {
          i211 = HEAP32[i29 >> 2] | 0;
          if ((i211 | 0) == 0) {
            i43 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i43 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5265640, tempInt) | 0) | 0;
            i43 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i43 | 0) | 0;
          } else {
            FUNCTION_TABLE_vii[i211 & 511](i1, 5265640);
          }
          _png_crc_finish(i1, i205) | 0;
          continue;
        }
        i211 = HEAP32[i34 >> 2] | 0;
        if ((i211 | 0) == 0) {
          i207 = 1150;
          break;
        }
        FUNCTION_TABLE_viii[i211 & 511](i35, i90, 6);
        i211 = HEAP32[i75 >> 2] | 0;
        do {
          if ((HEAP8[i44] & 32) << 24 >> 24 == 0) {
            if ((i211 & 2048 | 0) == 0) {
              i207 = 1154;
              break;
            } else {
              break;
            }
          } else {
            if ((i211 & 768 | 0) == 768) {
              break;
            } else {
              i207 = 1154;
              break;
            }
          }
        } while (0);
        if ((i207 | 0) == 1154) {
          i207 = 0;
          HEAP32[i76 >> 2] = _crc32(HEAP32[i76 >> 2] | 0, i90, 6) | 0;
        }
        HEAP16[i81 >> 1] = 1;
        HEAP16[i197 >> 1] = (HEAPU8[i90] | 0) << 8 | (HEAPU8[i96] | 0);
        HEAP16[i203 >> 1] = (HEAPU8[i98] | 0) << 8 | (HEAPU8[i99] | 0);
        HEAP16[i204 >> 1] = (HEAPU8[i100] | 0) << 8 | (HEAPU8[i101] | 0);
      } else if ((i215 << 24 >> 24 | 0) == 3) {
        do {
          if ((i209 & 2 | 0) == 0) {
            i211 = HEAP32[i29 >> 2] | 0;
            if ((i211 | 0) == 0) {
              i43 = HEAP32[_stderr >> 2] | 0;
              _fprintf(i43 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5265504, tempInt) | 0) | 0;
              i43 = HEAP32[_stderr >> 2] | 0;
              _fputc(10, i43 | 0) | 0;
              break;
            } else {
              FUNCTION_TABLE_vii[i211 & 511](i1, 5265504);
              break;
            }
          }
        } while (0);
        if ((HEAPU16[i86 >> 1] | 0) >>> 0 < i205 >>> 0 | i205 >>> 0 > 256) {
          i209 = HEAP32[i29 >> 2] | 0;
          if ((i209 | 0) == 0) {
            i215 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i215 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5265640, tempInt) | 0) | 0;
            i215 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i215 | 0) | 0;
          } else {
            FUNCTION_TABLE_vii[i209 & 511](i1, 5265640);
          }
          _png_crc_finish(i1, i205) | 0;
          continue;
        }
        if ((i205 | 0) == 0) {
          i209 = HEAP32[i29 >> 2] | 0;
          if ((i209 | 0) == 0) {
            i215 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i215 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5265444, tempInt) | 0) | 0;
            i215 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i215 | 0) | 0;
          } else {
            FUNCTION_TABLE_vii[i209 & 511](i1, 5265444);
          }
          _png_crc_finish(i1, 0) | 0;
          continue;
        }
        i209 = HEAP32[i34 >> 2] | 0;
        if ((i209 | 0) == 0) {
          i207 = 1171;
          break;
        }
        FUNCTION_TABLE_viii[i209 & 511](i35, i196, i205);
        i209 = HEAP32[i75 >> 2] | 0;
        do {
          if ((HEAP8[i44] & 32) << 24 >> 24 == 0) {
            if ((i209 & 2048 | 0) == 0) {
              i207 = 1175;
              break;
            } else {
              break;
            }
          } else {
            if ((i209 & 768 | 0) == 768) {
              break;
            } else {
              i207 = 1175;
              break;
            }
          }
        } while (0);
        if ((i207 | 0) == 1175) {
          i207 = 0;
          HEAP32[i76 >> 2] = _crc32(HEAP32[i76 >> 2] | 0, i196, i205) | 0;
        }
        HEAP16[i81 >> 1] = i205 & 65535;
      } else {
        i209 = HEAP32[i29 >> 2] | 0;
        if ((i209 | 0) == 0) {
          i215 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i215 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5265360, tempInt) | 0) | 0;
          i215 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i215 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i209 & 511](i1, 5265360);
        }
        _png_crc_finish(i1, i205) | 0;
        continue;
      }
      if ((_png_crc_finish(i1, 0) | 0) != 0) {
        HEAP16[i81 >> 1] = 0;
        continue;
      }
      i209 = HEAP16[i81 >> 1] | 0;
      i215 = i209 & 65535;
      _png_free_data(i1, i2, 8192, 0);
      i211 = HEAP32[i83 >> 2] | 0;
      if ((i211 | 0) == 0) {
        i289 = _malloc(256) | 0;
      } else {
        i289 = FUNCTION_TABLE_iii[i211 & 511](i89, 256) | 0;
      }
      if ((i289 | 0) == 0) {
        if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
          i207 = 1188;
          break;
        } else {
          i290 = 0;
        }
      } else {
        i290 = i289;
      }
      HEAP32[i198 >> 2] = i290;
      HEAP32[i199 >> 2] = i290;
      if ((i215 - 1 | 0) >>> 0 < 256) {
        _memcpy(HEAP32[i198 >> 2] | 0, i196, i215);
      }
      if (i200) {
        HEAP16[i82 >> 1] = i209;
        if (i209 << 16 >> 16 == 0) {
          continue;
        }
      } else {
        i215 = 1 << (HEAPU8[i64] | 0);
        i211 = HEAP8[i65] | 0;
        do {
          if ((i211 << 24 >> 24 | 0) == 0) {
            if ((HEAPU16[i6 >> 1] | 0 | 0) > (i215 | 0)) {
              i207 = 1197;
              break;
            } else {
              break;
            }
          } else if ((i211 << 24 >> 24 | 0) == 2) {
            if ((HEAPU16[i197 >> 1] | 0 | 0) > (i215 | 0)) {
              i207 = 1197;
              break;
            }
            if ((HEAPU16[i203 >> 1] | 0 | 0) > (i215 | 0)) {
              i207 = 1197;
              break;
            }
            if ((HEAPU16[i204 >> 1] | 0 | 0) > (i215 | 0)) {
              i207 = 1197;
              break;
            } else {
              break;
            }
          }
        } while (0);
        do {
          if ((i207 | 0) == 1197) {
            i207 = 0;
            i215 = HEAP32[i29 >> 2] | 0;
            if ((i215 | 0) == 0) {
              i211 = HEAP32[_stderr >> 2] | 0;
              _fprintf(i211 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5269008, tempInt) | 0) | 0;
              i211 = HEAP32[_stderr >> 2] | 0;
              _fputc(10, i211 | 0) | 0;
              break;
            } else {
              FUNCTION_TABLE_vii[i215 & 511](i1, 5269008);
              break;
            }
          }
        } while (0);
        HEAP16[i201 >> 1] = HEAP16[i202 >> 1] | 0;
        HEAP16[i201 + 2 >> 1] = HEAP16[i202 + 2 >> 1] | 0;
        HEAP16[i201 + 4 >> 1] = HEAP16[i202 + 4 >> 1] | 0;
        HEAP16[i201 + 6 >> 1] = HEAP16[i202 + 6 >> 1] | 0;
        HEAP16[i201 + 8 >> 1] = HEAP16[i202 + 8 >> 1] | 0;
        HEAP16[i82 >> 1] = i209 << 16 >> 16 == 0 ? 1 : i209;
      }
      HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 16;
      HEAP32[i88 >> 2] = HEAP32[i88 >> 2] | 8192;
      continue;
    }
    if ((_memcmp(i44, 5245832, 4) | 0) == 0) {
      i215 = HEAP32[i186 >> 2] | 0;
      if ((i215 | 0) == 1) {
        _png_crc_finish(i1, i205) | 0;
        continue;
      } else if ((i215 | 0) != 0) {
        i207 = 1206;
      }
      do {
        if ((i207 | 0) == 1206) {
          i207 = 0;
          i211 = i215 - 1 | 0;
          HEAP32[i186 >> 2] = i211;
          if ((i211 | 0) != 1) {
            break;
          }
          i211 = HEAP32[i29 >> 2] | 0;
          if ((i211 | 0) == 0) {
            i43 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i43 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5274316, tempInt) | 0) | 0;
            i43 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i43 | 0) | 0;
          } else {
            FUNCTION_TABLE_vii[i211 & 511](i1, 5274316);
          }
          _png_crc_finish(i1, i205) | 0;
          continue L29;
        }
      } while (0);
      i215 = HEAP32[i33 >> 2] | 0;
      if ((i215 & 1 | 0) == 0) {
        i207 = 1212;
        break;
      }
      if ((i215 & 4 | 0) != 0) {
        HEAP32[i33 >> 2] = i215 | 8;
      }
      i215 = HEAP32[i159 >> 2] | 0;
      do {
        if ((i215 | 0) != 0) {
          i209 = HEAP32[i160 >> 2] | 0;
          if ((i209 | 0) == 0) {
            _free(i215);
            break;
          } else {
            FUNCTION_TABLE_vii[i209 & 511](i89, i215);
            break;
          }
        }
      } while (0);
      i215 = i205 + 1 | 0;
      i209 = HEAP32[i75 >> 2] | 0;
      HEAP32[i75 >> 2] = i209 | 1048576;
      do {
        if ((i215 | 0) != 0) {
          i211 = HEAP32[i83 >> 2] | 0;
          if ((i211 | 0) == 0) {
            i291 = _malloc(i215) | 0;
          } else {
            i291 = FUNCTION_TABLE_iii[i211 & 511](i89, i215) | 0;
          }
          if ((i291 | 0) == 0) {
            if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
              i207 = 1225;
              break L29;
            } else {
              break;
            }
          }
          HEAP32[i75 >> 2] = i209;
          HEAP32[i159 >> 2] = i291;
          i211 = HEAP32[i34 >> 2] | 0;
          if ((i211 | 0) == 0) {
            i207 = 1230;
            break L29;
          }
          FUNCTION_TABLE_viii[i211 & 511](i35, i291, i205);
          i211 = HEAP32[i75 >> 2] | 0;
          do {
            if ((HEAP8[i44] & 32) << 24 >> 24 == 0) {
              if ((i211 & 2048 | 0) == 0) {
                i207 = 1234;
                break;
              } else {
                break;
              }
            } else {
              if ((i211 & 768 | 0) == 768) {
                break;
              } else {
                i207 = 1234;
                break;
              }
            }
          } while (0);
          if ((i207 | 0) == 1234) {
            i207 = 0;
            HEAP32[i76 >> 2] = _crc32(HEAP32[i76 >> 2] | 0, i291, i205) | 0;
          }
          i211 = (_png_crc_finish(i1, 0) | 0) == 0;
          i208 = HEAP32[i159 >> 2] | 0;
          if (!i211) {
            do {
              if ((i208 | 0) != 0) {
                i211 = HEAP32[i160 >> 2] | 0;
                if ((i211 | 0) == 0) {
                  _free(i208);
                  break;
                } else {
                  FUNCTION_TABLE_vii[i211 & 511](i89, i208);
                  break;
                }
              }
            } while (0);
            HEAP32[i159 >> 2] = 0;
            continue L29;
          }
          HEAP8[i208 + i205 | 0] = 0;
          i211 = HEAP32[i159 >> 2] | 0;
          i43 = i211;
          while (1) {
            i292 = i43 + 1 | 0;
            if (HEAP8[i43] << 24 >> 24 == 0) {
              break;
            } else {
              i43 = i292;
            }
          }
          if (i43 >>> 0 >= (i211 + (i205 - 2 | 0) | 0) >>> 0) {
            i208 = HEAP32[i29 >> 2] | 0;
            if ((i208 | 0) == 0) {
              i40 = HEAP32[_stderr >> 2] | 0;
              _fprintf(i40 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5273944, tempInt) | 0) | 0;
              i40 = HEAP32[_stderr >> 2] | 0;
              _fputc(10, i40 | 0) | 0;
            } else {
              FUNCTION_TABLE_vii[i208 & 511](i1, 5273944);
            }
            i208 = HEAP32[i159 >> 2] | 0;
            do {
              if ((i208 | 0) != 0) {
                i40 = HEAP32[i160 >> 2] | 0;
                if ((i40 | 0) == 0) {
                  _free(i208);
                  break;
                } else {
                  FUNCTION_TABLE_vii[i40 & 511](i89, i208);
                  break;
                }
              }
            } while (0);
            HEAP32[i159 >> 2] = 0;
            continue L29;
          }
          i208 = HEAP8[i292] | 0;
          do {
            if (i208 << 24 >> 24 == 0) {
              i293 = i208 << 24 >> 24;
            } else {
              i211 = HEAP32[i29 >> 2] | 0;
              if ((i211 | 0) == 0) {
                i40 = HEAP32[_stderr >> 2] | 0;
                _fprintf(i40 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5273852, tempInt) | 0) | 0;
                i40 = HEAP32[_stderr >> 2] | 0;
                _fputc(10, i40 | 0) | 0;
                i293 = 0;
                break;
              } else {
                FUNCTION_TABLE_vii[i211 & 511](i1, 5273852);
                i293 = 0;
                break;
              }
            }
          } while (0);
          i208 = (i43 + 2 | 0) - (HEAP32[i159 >> 2] | 0) | 0;
          _png_decompress_chunk(i1, i293, i205, i208, i5);
          i211 = HEAP32[i75 >> 2] | 0;
          HEAP32[i75 >> 2] = i211 | 1048576;
          i40 = HEAP32[i83 >> 2] | 0;
          if ((i40 | 0) == 0) {
            i294 = _malloc(28) | 0;
          } else {
            i294 = FUNCTION_TABLE_iii[i40 & 511](i89, 28) | 0;
          }
          if ((i294 | 0) != 0) {
            HEAP32[i75 >> 2] = i211;
            HEAP32[i294 >> 2] = i293;
            HEAP32[i294 + 4 >> 2] = HEAP32[i159 >> 2] | 0;
            HEAP32[i294 + 20 >> 2] = 0;
            HEAP32[i294 + 24 >> 2] = 0;
            HEAP32[i294 + 16 >> 2] = 0;
            HEAP32[i294 + 8 >> 2] = (HEAP32[i159 >> 2] | 0) + i208 | 0;
            HEAP32[i294 + 12 >> 2] = HEAP32[i5 >> 2] | 0;
            i208 = _png_set_text_2(i1, i2, i294) | 0;
            i40 = HEAP32[i160 >> 2] | 0;
            if ((i40 | 0) == 0) {
              _free(i294);
            } else {
              FUNCTION_TABLE_vii[i40 & 511](i89, i294);
            }
            i40 = HEAP32[i159 >> 2] | 0;
            do {
              if ((i40 | 0) != 0) {
                i239 = HEAP32[i160 >> 2] | 0;
                if ((i239 | 0) == 0) {
                  _free(i40);
                  break;
                } else {
                  FUNCTION_TABLE_vii[i239 & 511](i89, i40);
                  break;
                }
              }
            } while (0);
            HEAP32[i159 >> 2] = 0;
            if ((i208 | 0) == 0) {
              continue L29;
            } else {
              i207 = 1278;
              break L29;
            }
          }
          if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
            i207 = 1261;
            break L29;
          }
          HEAP32[i75 >> 2] = i211;
          i40 = HEAP32[i29 >> 2] | 0;
          if ((i40 | 0) == 0) {
            i43 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i43 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5273740, tempInt) | 0) | 0;
            i43 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i43 | 0) | 0;
          } else {
            FUNCTION_TABLE_vii[i40 & 511](i1, 5273740);
          }
          i40 = HEAP32[i159 >> 2] | 0;
          do {
            if ((i40 | 0) != 0) {
              i43 = HEAP32[i160 >> 2] | 0;
              if ((i43 | 0) == 0) {
                _free(i40);
                break;
              } else {
                FUNCTION_TABLE_vii[i43 & 511](i89, i40);
                break;
              }
            }
          } while (0);
          HEAP32[i159 >> 2] = 0;
          continue L29;
        }
      } while (0);
      HEAP32[i75 >> 2] = i209;
      HEAP32[i159 >> 2] = 0;
      i215 = HEAP32[i29 >> 2] | 0;
      if ((i215 | 0) == 0) {
        i40 = HEAP32[_stderr >> 2] | 0;
        _fprintf(i40 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5274028, tempInt) | 0) | 0;
        i40 = HEAP32[_stderr >> 2] | 0;
        _fputc(10, i40 | 0) | 0;
        continue;
      } else {
        FUNCTION_TABLE_vii[i215 & 511](i1, 5274028);
        continue;
      }
    }
    if ((_memcmp(i44, 5245920, 4) | 0) != 0) {
      _png_handle_unknown(i1, i2, i205);
      continue;
    }
    i215 = HEAP32[i186 >> 2] | 0;
    if ((i215 | 0) == 1) {
      _png_crc_finish(i1, i205) | 0;
      continue;
    } else if ((i215 | 0) != 0) {
      i207 = 1282;
    }
    do {
      if ((i207 | 0) == 1282) {
        i207 = 0;
        i40 = i215 - 1 | 0;
        HEAP32[i186 >> 2] = i40;
        if ((i40 | 0) != 1) {
          break;
        }
        i40 = HEAP32[i29 >> 2] | 0;
        if ((i40 | 0) == 0) {
          i211 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i211 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5273516, tempInt) | 0) | 0;
          i211 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i211 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i40 & 511](i1, 5273516);
        }
        _png_crc_finish(i1, i205) | 0;
        continue L29;
      }
    } while (0);
    i215 = HEAP32[i33 >> 2] | 0;
    if ((i215 & 1 | 0) == 0) {
      i207 = 1288;
      break;
    }
    if ((i215 & 4 | 0) != 0) {
      HEAP32[i33 >> 2] = i215 | 8;
    }
    i215 = HEAP32[i159 >> 2] | 0;
    do {
      if ((i215 | 0) != 0) {
        i209 = HEAP32[i160 >> 2] | 0;
        if ((i209 | 0) == 0) {
          _free(i215);
          break;
        } else {
          FUNCTION_TABLE_vii[i209 & 511](i89, i215);
          break;
        }
      }
    } while (0);
    i215 = i205 + 1 | 0;
    i209 = HEAP32[i75 >> 2] | 0;
    HEAP32[i75 >> 2] = i209 | 1048576;
    do {
      if ((i215 | 0) != 0) {
        i40 = HEAP32[i83 >> 2] | 0;
        if ((i40 | 0) == 0) {
          i295 = _malloc(i215) | 0;
        } else {
          i295 = FUNCTION_TABLE_iii[i40 & 511](i89, i215) | 0;
        }
        if ((i295 | 0) == 0) {
          if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
            i207 = 1301;
            break L29;
          } else {
            break;
          }
        }
        HEAP32[i75 >> 2] = i209;
        HEAP32[i159 >> 2] = i295;
        i40 = HEAP32[i34 >> 2] | 0;
        if ((i40 | 0) == 0) {
          i207 = 1306;
          break L29;
        }
        FUNCTION_TABLE_viii[i40 & 511](i35, i295, i205);
        i40 = HEAP32[i75 >> 2] | 0;
        do {
          if ((HEAP8[i44] & 32) << 24 >> 24 == 0) {
            if ((i40 & 2048 | 0) == 0) {
              i207 = 1310;
              break;
            } else {
              break;
            }
          } else {
            if ((i40 & 768 | 0) == 768) {
              break;
            } else {
              i207 = 1310;
              break;
            }
          }
        } while (0);
        if ((i207 | 0) == 1310) {
          i207 = 0;
          HEAP32[i76 >> 2] = _crc32(HEAP32[i76 >> 2] | 0, i295, i205) | 0;
        }
        i40 = (_png_crc_finish(i1, 0) | 0) == 0;
        i211 = HEAP32[i159 >> 2] | 0;
        if (!i40) {
          do {
            if ((i211 | 0) != 0) {
              i40 = HEAP32[i160 >> 2] | 0;
              if ((i40 | 0) == 0) {
                _free(i211);
                break;
              } else {
                FUNCTION_TABLE_vii[i40 & 511](i89, i211);
                break;
              }
            }
          } while (0);
          HEAP32[i159 >> 2] = 0;
          continue L29;
        }
        HEAP8[i211 + i205 | 0] = 0;
        i40 = HEAP32[i159 >> 2] | 0;
        i208 = i40;
        while (1) {
          i296 = i208 + 1 | 0;
          if (HEAP8[i208] << 24 >> 24 == 0) {
            break;
          } else {
            i208 = i296;
          }
        }
        if (i296 >>> 0 >= (i40 + (i205 - 3 | 0) | 0) >>> 0) {
          i211 = HEAP32[i29 >> 2] | 0;
          if ((i211 | 0) == 0) {
            i43 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i43 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5273104, tempInt) | 0) | 0;
            i43 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i43 | 0) | 0;
          } else {
            FUNCTION_TABLE_vii[i211 & 511](i1, 5273104);
          }
          i211 = HEAP32[i159 >> 2] | 0;
          do {
            if ((i211 | 0) != 0) {
              i43 = HEAP32[i160 >> 2] | 0;
              if ((i43 | 0) == 0) {
                _free(i211);
                break;
              } else {
                FUNCTION_TABLE_vii[i43 & 511](i89, i211);
                break;
              }
            }
          } while (0);
          HEAP32[i159 >> 2] = 0;
          continue L29;
        }
        i211 = HEAP8[i296] | 0;
        i43 = i208 + 3 | 0;
        i239 = HEAP8[i208 + 2 | 0] | 0;
        i206 = i43;
        while (1) {
          i297 = i206 + 1 | 0;
          if (HEAP8[i206] << 24 >> 24 == 0) {
            break;
          } else {
            i206 = i297;
          }
        }
        i206 = i211 << 24 >> 24;
        i208 = i239 << 24 >> 24;
        i252 = i40 + i205 | 0;
        if (i297 >>> 0 < i252 >>> 0) {
          i298 = i297;
        } else {
          i242 = HEAP32[i29 >> 2] | 0;
          if ((i242 | 0) == 0) {
            i36 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i36 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5273104, tempInt) | 0) | 0;
            i36 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i36 | 0) | 0;
          } else {
            FUNCTION_TABLE_vii[i242 & 511](i1, 5273104);
          }
          i242 = HEAP32[i159 >> 2] | 0;
          do {
            if ((i242 | 0) != 0) {
              i36 = HEAP32[i160 >> 2] | 0;
              if ((i36 | 0) == 0) {
                _free(i242);
                break;
              } else {
                FUNCTION_TABLE_vii[i36 & 511](i89, i242);
                break;
              }
            }
          } while (0);
          HEAP32[i159 >> 2] = 0;
          continue L29;
        }
        while (1) {
          i299 = i298 + 1 | 0;
          if (HEAP8[i298] << 24 >> 24 == 0) {
            break;
          } else {
            i298 = i299;
          }
        }
        if (i299 >>> 0 >= i252 >>> 0) {
          i242 = HEAP32[i29 >> 2] | 0;
          if ((i242 | 0) == 0) {
            i239 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i239 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5273080, tempInt) | 0) | 0;
            i239 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i239 | 0) | 0;
          } else {
            FUNCTION_TABLE_vii[i242 & 511](i1, 5273080);
          }
          i242 = HEAP32[i159 >> 2] | 0;
          do {
            if ((i242 | 0) != 0) {
              i239 = HEAP32[i160 >> 2] | 0;
              if ((i239 | 0) == 0) {
                _free(i242);
                break;
              } else {
                FUNCTION_TABLE_vii[i239 & 511](i89, i242);
                break;
              }
            }
          } while (0);
          HEAP32[i159 >> 2] = 0;
          continue L29;
        }
        i242 = i40;
        i252 = i299 - i242 | 0;
        if (i211 << 24 >> 24 == 0) {
          HEAP32[i4 >> 2] = _strlen(i40 + i252 | 0) | 0;
        } else {
          _png_decompress_chunk(i1, i208, i205, i252, i4);
        }
        i239 = HEAP32[i75 >> 2] | 0;
        HEAP32[i75 >> 2] = i239 | 1048576;
        i36 = HEAP32[i83 >> 2] | 0;
        if ((i36 | 0) == 0) {
          i300 = _malloc(28) | 0;
        } else {
          i300 = FUNCTION_TABLE_iii[i36 & 511](i89, 28) | 0;
        }
        if ((i300 | 0) != 0) {
          HEAP32[i75 >> 2] = i239;
          HEAP32[i300 >> 2] = i206 + 1 | 0;
          HEAP32[i300 + 24 >> 2] = (HEAP32[i159 >> 2] | 0) + (i297 - i242 | 0) | 0;
          HEAP32[i300 + 20 >> 2] = (HEAP32[i159 >> 2] | 0) + (i43 - i242 | 0) | 0;
          HEAP32[i300 + 16 >> 2] = HEAP32[i4 >> 2] | 0;
          HEAP32[i300 + 12 >> 2] = 0;
          HEAP32[i300 + 4 >> 2] = HEAP32[i159 >> 2] | 0;
          HEAP32[i300 + 8 >> 2] = (HEAP32[i159 >> 2] | 0) + i252 | 0;
          i252 = _png_set_text_2(i1, i2, i300) | 0;
          i242 = HEAP32[i160 >> 2] | 0;
          if ((i242 | 0) == 0) {
            _free(i300);
          } else {
            FUNCTION_TABLE_vii[i242 & 511](i89, i300);
          }
          i242 = HEAP32[i159 >> 2] | 0;
          do {
            if ((i242 | 0) != 0) {
              i36 = HEAP32[i160 >> 2] | 0;
              if ((i36 | 0) == 0) {
                _free(i242);
                break;
              } else {
                FUNCTION_TABLE_vii[i36 & 511](i89, i242);
                break;
              }
            }
          } while (0);
          HEAP32[i159 >> 2] = 0;
          if ((i252 | 0) == 0) {
            continue L29;
          } else {
            i207 = 1374;
            break L29;
          }
        }
        if ((HEAP32[i75 >> 2] & 1048576 | 0) == 0) {
          i207 = 1357;
          break L29;
        }
        HEAP32[i75 >> 2] = i239;
        i242 = HEAP32[i29 >> 2] | 0;
        if ((i242 | 0) == 0) {
          i43 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i43 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5273040, tempInt) | 0) | 0;
          i43 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i43 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i242 & 511](i1, 5273040);
        }
        i242 = HEAP32[i159 >> 2] | 0;
        do {
          if ((i242 | 0) != 0) {
            i43 = HEAP32[i160 >> 2] | 0;
            if ((i43 | 0) == 0) {
              _free(i242);
              break;
            } else {
              FUNCTION_TABLE_vii[i43 & 511](i89, i242);
              break;
            }
          }
        } while (0);
        HEAP32[i159 >> 2] = 0;
        continue L29;
      }
    } while (0);
    HEAP32[i75 >> 2] = i209;
    HEAP32[i159 >> 2] = 0;
    i215 = HEAP32[i29 >> 2] | 0;
    if ((i215 | 0) == 0) {
      i242 = HEAP32[_stderr >> 2] | 0;
      _fprintf(i242 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5273280, tempInt) | 0) | 0;
      i242 = HEAP32[_stderr >> 2] | 0;
      _fputc(10, i242 | 0) | 0;
      continue;
    } else {
      FUNCTION_TABLE_vii[i215 & 511](i1, 5273280);
      continue;
    }
  }
  if ((i207 | 0) == 23) {
    _png_error(i1, 5263332);
  } else if ((i207 | 0) == 25) {
    _png_error(i1, 5275312);
  } else if ((i207 | 0) == 27) {
    _png_error(i1, 5269084);
  } else if ((i207 | 0) == 33) {
    _png_error(i1, 5268688);
  } else if ((i207 | 0) == 35) {
    _png_error(i1, 5268688);
  } else if ((i207 | 0) == 100) {
    i159 = HEAP32[i29 >> 2] | 0;
    if ((i159 | 0) == 0) {
      i29 = HEAP32[_stderr >> 2] | 0;
      _fprintf(i29 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5269268, tempInt) | 0) | 0;
      i29 = HEAP32[_stderr >> 2] | 0;
      _fputc(10, i29 | 0) | 0;
      _png_error(i1, 5269196);
    } else {
      FUNCTION_TABLE_vii[i159 & 511](i1, 5269268);
      _png_error(i1, 5269196);
    }
  } else if ((i207 | 0) == 117) {
    _png_error(i1, 5270924);
  } else if ((i207 | 0) == 134) {
    i159 = HEAP32[i33 >> 2] | 0;
    if ((i159 & 1 | 0) == 0) {
      _png_error(i1, 5266016);
    }
    if (HEAP8[i56] << 24 >> 24 != 3) {
      STACKTOP = i3;
      return;
    }
    if ((i159 & 2 | 0) == 0) {
      _png_error(i1, 5265152);
    } else {
      STACKTOP = i3;
      return;
    }
  } else if ((i207 | 0) == 141) {
    _png_error(i1, 5274352);
  } else if ((i207 | 0) == 148) {
    _png_error(i1, 5272516);
  } else if ((i207 | 0) == 160) {
    _png_error(i1, 5271668);
  } else if ((i207 | 0) == 163) {
    _png_error(i1, 5269084);
  } else if ((i207 | 0) == 171) {
    _png_error(i1, 5269796);
  } else if ((i207 | 0) == 180) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 196) {
    i159 = HEAP32[i33 >> 2] | 0;
    if ((i159 & 1 | 0) == 0) {
      _png_error(i1, 5266016);
    }
    do {
      if (HEAP8[i56] << 24 >> 24 == 3) {
        if ((i159 & 2 | 0) != 0) {
          break;
        }
        _png_error(i1, 5265152);
      }
    } while (0);
    HEAP32[i1 + 244 >> 2] = i205;
    HEAP32[i33 >> 2] = i159 | 4;
    STACKTOP = i3;
    return;
  } else if ((i207 | 0) == 204) {
    _png_error(i1, 5265308);
  } else if ((i207 | 0) == 229) {
    _png_error(i1, 5269084);
  } else if ((i207 | 0) == 248) {
    _png_error(i1, 5268648);
  } else if ((i207 | 0) == 269) {
    _png_error(i1, 5269084);
  } else if ((i207 | 0) == 320) {
    _png_error(i1, 5270644);
  } else if ((i207 | 0) == 341) {
    _png_error(i1, 5269084);
  } else if ((i207 | 0) == 360) {
    _png_error(i1, 5264692);
  } else if ((i207 | 0) == 383) {
    _png_error(i1, 5269084);
  } else if ((i207 | 0) == 400) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 408) {
    _png_error(i1, 5264008);
  } else if ((i207 | 0) == 425) {
    _png_error(i1, 5269084);
  } else if ((i207 | 0) == 434) {
    _png_error(i1, 5263644);
  } else if ((i207 | 0) == 455) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 460) {
    _png_error(i1, 5269084);
  } else if ((i207 | 0) == 505) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 528) {
    _png_error(i1, 5272376);
  } else if ((i207 | 0) == 540) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 550) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 559) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 570) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 586) {
    _png_error(i1, 5263e3);
  } else if ((i207 | 0) == 603) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 609) {
    _png_error(i1, 5269084);
  } else if ((i207 | 0) == 642) {
    _png_error(i1, 5270772);
  } else if ((i207 | 0) == 663) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 673) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 689) {
    _png_error(i1, 5264284);
  } else if ((i207 | 0) == 706) {
    _png_error(i1, 5269084);
  } else if ((i207 | 0) == 715) {
    _png_error(i1, 5269240);
  } else if ((i207 | 0) == 738) {
    _png_error(i1, 5269084);
  } else if ((i207 | 0) == 750) {
    _png_error(i1, 5267800);
  } else if ((i207 | 0) == 771) {
    _png_error(i1, 5269084);
  } else if ((i207 | 0) == 802) {
    _png_error(i1, 5267256);
  } else if ((i207 | 0) == 828) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 831) {
    _png_error(i1, 5269084);
  } else if ((i207 | 0) == 881) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 891) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 913) {
    _png_error(i1, 5266436);
  } else if ((i207 | 0) == 930) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 933) {
    _png_error(i1, 5269084);
  } else if ((i207 | 0) == 973) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 987) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 1001) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 1010) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 1038) {
    _png_error(i1, 5274780);
  } else if ((i207 | 0) == 1051) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 1056) {
    _png_error(i1, 5269084);
  } else if ((i207 | 0) == 1074) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 1096) {
    _png_error(i1, 5275128);
  } else if ((i207 | 0) == 1110) {
    _png_error(i1, 5269084);
  } else if ((i207 | 0) == 1120) {
    _png_error(i1, 5265860);
  } else if ((i207 | 0) == 1138) {
    _png_error(i1, 5269084);
  } else if ((i207 | 0) == 1150) {
    _png_error(i1, 5269084);
  } else if ((i207 | 0) == 1171) {
    _png_error(i1, 5269084);
  } else if ((i207 | 0) == 1188) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 1212) {
    _png_error(i1, 5274180);
  } else if ((i207 | 0) == 1225) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 1230) {
    _png_error(i1, 5269084);
  } else if ((i207 | 0) == 1261) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 1278) {
    _png_error(i1, 5273616);
  } else if ((i207 | 0) == 1288) {
    _png_error(i1, 5273432);
  } else if ((i207 | 0) == 1301) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 1306) {
    _png_error(i1, 5269084);
  } else if ((i207 | 0) == 1357) {
    _png_error(i1, 5269956);
  } else if ((i207 | 0) == 1374) {
    _png_error(i1, 5272960);
  } else if ((i207 | 0) == 1384) {
    _png_error(i1, 5269196);
  } else if ((i207 | 0) == 1385) {
    _png_error(i1, 5271852);
  } else if ((i207 | 0) == 1386) {
    _png_error(i1, 5271852);
  } else if ((i207 | 0) == 1387) {
    _png_error(i1, 5270624);
  } else if ((i207 | 0) == 1388) {
    _png_error(i1, 5270624);
  } else if ((i207 | 0) == 1389) {
    _png_error(i1, 5270624);
  } else if ((i207 | 0) == 1390) {
    _png_error(i1, 5270624);
  } else if ((i207 | 0) == 1391) {
    _png_error(i1, 5270624);
  } else if ((i207 | 0) == 1392) {
    _png_error(i1, 5270464);
  } else if ((i207 | 0) == 1393) {
    _png_error(i1, 5270464);
  } else if ((i207 | 0) == 1394) {
    _png_error(i1, 5270464);
  } else if ((i207 | 0) == 1395) {
    _png_error(i1, 5270464);
  } else if ((i207 | 0) == 1396) {
    _png_error(i1, 5270464);
  }
}
function _png_read_image(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0;
  i3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  i4 = i3 | 0;
  if ((i1 | 0) == 0) {
    STACKTOP = i3;
    return;
  }
  i5 = i1 + 88 | 0;
  i6 = i1 + 267 | 0;
  i7 = HEAP8[i6] | 0;
  i8 = i7 << 24 >> 24 == 0;
  do {
    if ((HEAP32[i5 >> 2] & 64 | 0) == 0) {
      if (i8) {
        i9 = 1;
      } else {
        i10 = i1 + 92 | 0;
        HEAP32[i10 >> 2] = HEAP32[i10 >> 2] | 2;
        i9 = 7;
      }
      _png_read_start_row(i1);
      i11 = i9;
    } else {
      if (i8) {
        i11 = 1;
        break;
      }
      i10 = i1 + 92 | 0;
      if ((HEAP32[i10 >> 2] & 2 | 0) == 0) {
        i12 = HEAP32[i1 + 48 >> 2] | 0;
        if ((i12 | 0) == 0) {
          i13 = HEAP32[_stderr >> 2] | 0;
          _fprintf(i13 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5271928, tempInt) | 0) | 0;
          i13 = HEAP32[_stderr >> 2] | 0;
          _fputc(10, i13 | 0) | 0;
        } else {
          FUNCTION_TABLE_vii[i12 & 511](i1, 5271928);
        }
        HEAP32[i1 + 188 >> 2] = HEAP32[i1 + 184 >> 2] | 0;
        i14 = HEAP8[i6] | 0;
      } else {
        i14 = i7;
      }
      if (i14 << 24 >> 24 == 0) {
        i11 = 1;
        break;
      }
      HEAP32[i10 >> 2] = HEAP32[i10 >> 2] | 2;
      i11 = 7;
    }
  } while (0);
  i14 = HEAP32[i1 + 184 >> 2] | 0;
  i7 = (i14 | 0) == 0;
  i8 = i1 + 204 | 0;
  i9 = i1 + 84 | 0;
  i10 = i1 + 212 | 0;
  i12 = i1 + 96 | 0;
  i13 = i1 + 108 | 0;
  i15 = i1 + 273 | 0;
  i16 = i1 + 200 | 0;
  i17 = i1 + 112 | 0;
  i18 = i1 + 100 | 0;
  i19 = i1 + 244 | 0;
  i20 = i1 + 260 | 0;
  i21 = i1 + 156 | 0;
  i22 = i1 + 152 | 0;
  i23 = i12 | 0;
  i24 = i1 + 60 | 0;
  i25 = i1;
  i26 = i1 + 248 | 0;
  i27 = i1 + 48 | 0;
  i28 = i1 + 270 | 0;
  i29 = i1 + 240 | 0;
  i30 = i1 + 232 | 0;
  i31 = i1 + 274 | 0;
  i32 = i1 + 242 | 0;
  i33 = i1 + 271 | 0;
  i34 = i1 + 241 | 0;
  i35 = i1 + 243 | 0;
  i36 = i1 + 236 | 0;
  i37 = i1 + 208 | 0;
  i38 = i1 + 196 | 0;
  i39 = i1 + 536 | 0;
  i40 = i1 + 92 | 0;
  i41 = i1 + 180 | 0;
  i42 = i1 + 384 | 0;
  i43 = i1 + 268 | 0;
  i44 = i4 | 0;
  i4 = i1 + 232 | 0;
  i45 = (i4 | 0) == 0;
  i46 = i4 | 0;
  i4 = i1 + 540 | 0;
  i47 = 0;
  L1954 : while (1) {
    L1956 : do {
      if (!i7) {
        i48 = 0;
        i49 = i2;
        while (1) {
          i50 = HEAP32[i49 >> 2] | 0;
          if ((HEAP32[i5 >> 2] & 64 | 0) == 0) {
            _png_read_start_row(i1);
          }
          i51 = HEAP32[i8 >> 2] | 0;
          do {
            if (HEAP8[i6] << 24 >> 24 == 0) {
              i52 = 1438;
            } else {
              if ((HEAP32[i40 >> 2] & 2 | 0) == 0) {
                i52 = 1438;
                break;
              }
              i53 = HEAPU8[i43] | 0;
              if ((i53 | 0) == 3) {
                if ((i51 & 3 | 0) == 0) {
                  if ((HEAP32[i41 >> 2] | 0) >>> 0 >= 3) {
                    i52 = 1438;
                    break;
                  }
                }
                _png_read_finish_row(i1);
                break;
              } else if ((i53 | 0) == 4) {
                if ((i51 & 3 | 0) == 2) {
                  i52 = 1438;
                  break;
                }
                _png_read_finish_row(i1);
                break;
              } else if ((i53 | 0) == 0) {
                if ((i51 & 7 | 0) == 0) {
                  i52 = 1438;
                  break;
                }
                _png_read_finish_row(i1);
                break;
              } else if ((i53 | 0) == 1) {
                if ((i51 & 7 | 0) == 0) {
                  if ((HEAP32[i41 >> 2] | 0) >>> 0 >= 5) {
                    i52 = 1438;
                    break;
                  }
                }
                _png_read_finish_row(i1);
                break;
              } else if ((i53 | 0) == 2) {
                if ((i51 & 7 | 0) == 4) {
                  i52 = 1438;
                  break;
                }
                _png_read_finish_row(i1);
                break;
              } else if ((i53 | 0) == 5) {
                if ((i51 & 1 | 0) == 0) {
                  if ((HEAP32[i41 >> 2] | 0) >>> 0 >= 2) {
                    i52 = 1438;
                    break;
                  }
                }
                _png_read_finish_row(i1);
                break;
              } else {
                if ((i51 & 1 | 0) != 0) {
                  i52 = 1438;
                  break;
                }
                _png_read_finish_row(i1);
                break;
              }
            }
          } while (0);
          do {
            if ((i52 | 0) == 1438) {
              i52 = 0;
              if ((HEAP32[i9 >> 2] & 4 | 0) == 0) {
                i52 = 1439;
                break L1954;
              }
              HEAP32[i13 >> 2] = HEAP32[i10 >> 2] | 0;
              i51 = HEAP8[i15] | 0;
              i53 = i51 & 255;
              i54 = HEAP32[i16 >> 2] | 0;
              if ((i51 & 255) > 7) {
                i55 = Math_imul(i53 >>> 3, i54);
              } else {
                i55 = (Math_imul(i54, i53) + 7 | 0) >>> 3;
              }
              HEAP32[i17 >> 2] = i55 + 1 | 0;
              while (1) {
                if ((HEAP32[i18 >> 2] | 0) == 0) {
                  i53 = HEAP32[i19 >> 2] | 0;
                  while (1) {
                    if ((i53 | 0) != 0) {
                      break;
                    }
                    _png_crc_finish(i1, 0) | 0;
                    i54 = _png_read_chunk_header(i1) | 0;
                    HEAP32[i19 >> 2] = i54;
                    if ((_memcmp(i20, 5245824, 4) | 0) == 0) {
                      i53 = i54;
                    } else {
                      i52 = 1448;
                      break L1954;
                    }
                  }
                  i54 = HEAP32[i21 >> 2] | 0;
                  HEAP32[i18 >> 2] = i54;
                  i51 = HEAP32[i22 >> 2] | 0;
                  HEAP32[i23 >> 2] = i51;
                  if (i54 >>> 0 > i53 >>> 0) {
                    HEAP32[i18 >> 2] = i53;
                    i56 = i53;
                  } else {
                    i56 = i54;
                  }
                  i54 = HEAP32[i24 >> 2] | 0;
                  if ((i54 | 0) == 0) {
                    i52 = 1452;
                    break L1954;
                  }
                  FUNCTION_TABLE_viii[i54 & 511](i25, i51, i56);
                  i54 = HEAP32[i5 >> 2] | 0;
                  do {
                    if ((HEAP8[i20] & 32) << 24 >> 24 == 0) {
                      if ((i54 & 2048 | 0) == 0) {
                        i52 = 1456;
                        break;
                      } else {
                        break;
                      }
                    } else {
                      if ((i54 & 768 | 0) == 768) {
                        break;
                      } else {
                        i52 = 1456;
                        break;
                      }
                    }
                  } while (0);
                  if ((i52 | 0) == 1456) {
                    i52 = 0;
                    HEAP32[i26 >> 2] = _crc32(HEAP32[i26 >> 2] | 0, i51, i56) | 0;
                  }
                  HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) - (HEAP32[i18 >> 2] | 0) | 0;
                }
                i54 = _inflate(i12, 1) | 0;
                if ((i54 | 0) == 1) {
                  i52 = 1459;
                  break;
                } else if ((i54 | 0) != 0) {
                  i52 = 1468;
                  break L1954;
                }
                if ((HEAP32[i17 >> 2] | 0) == 0) {
                  break;
                }
              }
              if ((i52 | 0) == 1459) {
                i52 = 0;
                do {
                  if ((HEAP32[i17 >> 2] | 0) == 0) {
                    if ((HEAP32[i18 >> 2] | 0) != 0) {
                      i52 = 1462;
                      break;
                    }
                    if ((HEAP32[i19 >> 2] | 0) == 0) {
                      break;
                    } else {
                      i52 = 1462;
                      break;
                    }
                  } else {
                    i52 = 1462;
                  }
                } while (0);
                do {
                  if ((i52 | 0) == 1462) {
                    i52 = 0;
                    if ((HEAP32[i5 >> 2] & 8388608 | 0) == 0) {
                      i52 = 1466;
                      break L1954;
                    }
                    i54 = HEAP32[i27 >> 2] | 0;
                    if ((i54 | 0) == 0) {
                      i53 = HEAP32[_stderr >> 2] | 0;
                      _fprintf(i53 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5272556, tempInt) | 0) | 0;
                      i53 = HEAP32[_stderr >> 2] | 0;
                      _fputc(10, i53 | 0) | 0;
                      break;
                    } else {
                      FUNCTION_TABLE_vii[i54 & 511](i1, 5272556);
                      break;
                    }
                  }
                } while (0);
                HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 8;
                HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 32;
              }
              HEAP8[i29] = HEAP8[i28] | 0;
              i54 = HEAP32[i16 >> 2] | 0;
              HEAP32[i30 >> 2] = i54;
              HEAP8[i32] = HEAP8[i31] | 0;
              HEAP8[i34] = HEAP8[i33] | 0;
              i53 = HEAP8[i15] | 0;
              HEAP8[i35] = i53;
              i57 = i53 & 255;
              if ((i53 & 255) > 7) {
                i58 = Math_imul(i57 >>> 3, i54);
              } else {
                i58 = (Math_imul(i54, i57) + 7 | 0) >>> 3;
              }
              HEAP32[i36 >> 2] = i58;
              i54 = HEAP32[i10 >> 2] | 0;
              i53 = HEAP8[i54] | 0;
              if (i53 << 24 >> 24 == 0) {
                i59 = i54;
              } else {
                i60 = i54 + 1 | 0;
                i61 = HEAP32[i37 >> 2] | 0;
                i62 = i61 + 1 | 0;
                i63 = i53 & 255;
                L2032 : do {
                  if ((i63 | 0) == 1) {
                    i53 = (i57 + 7 | 0) >>> 3;
                    if (i53 >>> 0 >= i58 >>> 0) {
                      break;
                    }
                    i64 = i60;
                    i65 = i54 + (i53 + 1 | 0) | 0;
                    i66 = i53;
                    while (1) {
                      HEAP8[i65] = (HEAP8[i64] | 0) + (HEAP8[i65] | 0) & 255;
                      i53 = i66 + 1 | 0;
                      if ((i53 | 0) == (i58 | 0)) {
                        break L2032;
                      } else {
                        i64 = i64 + 1 | 0;
                        i65 = i65 + 1 | 0;
                        i66 = i53;
                      }
                    }
                  } else if ((i63 | 0) == 2) {
                    if ((i58 | 0) == 0) {
                      break;
                    } else {
                      i67 = i62;
                      i68 = i60;
                      i69 = 0;
                    }
                    while (1) {
                      HEAP8[i68] = (HEAP8[i67] | 0) + (HEAP8[i68] | 0) & 255;
                      i66 = i69 + 1 | 0;
                      if ((i66 | 0) == (i58 | 0)) {
                        break L2032;
                      } else {
                        i67 = i67 + 1 | 0;
                        i68 = i68 + 1 | 0;
                        i69 = i66;
                      }
                    }
                  } else if ((i63 | 0) == 3) {
                    i66 = (i57 + 7 | 0) >>> 3;
                    if ((i66 | 0) == 0) {
                      i70 = i62;
                      i71 = i60;
                    } else {
                      i65 = i66 + 1 | 0;
                      i64 = i54 + i65 | 0;
                      i51 = i62;
                      i53 = i60;
                      i72 = 0;
                      while (1) {
                        HEAP8[i53] = ((HEAPU8[i51] | 0) >>> 1) + (HEAP8[i53] | 0) & 255;
                        i73 = i72 + 1 | 0;
                        if (i73 >>> 0 < i66 >>> 0) {
                          i51 = i51 + 1 | 0;
                          i53 = i53 + 1 | 0;
                          i72 = i73;
                        } else {
                          break;
                        }
                      }
                      i70 = i61 + i65 | 0;
                      i71 = i64;
                    }
                    if ((i58 | 0) == (i66 | 0)) {
                      break;
                    }
                    i72 = i58 - i66 | 0;
                    i53 = i60;
                    i51 = i70;
                    i73 = i71;
                    i74 = 0;
                    while (1) {
                      HEAP8[i73] = (((HEAPU8[i53] | 0) + (HEAPU8[i51] | 0) | 0) >>> 1) + (HEAPU8[i73] | 0) & 255;
                      i75 = i74 + 1 | 0;
                      if ((i75 | 0) == (i72 | 0)) {
                        break L2032;
                      } else {
                        i53 = i53 + 1 | 0;
                        i51 = i51 + 1 | 0;
                        i73 = i73 + 1 | 0;
                        i74 = i75;
                      }
                    }
                  } else if ((i63 | 0) == 4) {
                    i74 = (i57 + 7 | 0) >>> 3;
                    if ((i74 | 0) == 0) {
                      i76 = i60;
                      i77 = i62;
                    } else {
                      i73 = i74 + 1 | 0;
                      i51 = i54 + i73 | 0;
                      i53 = 0;
                      i72 = i60;
                      i66 = i62;
                      while (1) {
                        HEAP8[i72] = (HEAP8[i66] | 0) + (HEAP8[i72] | 0) & 255;
                        i64 = i53 + 1 | 0;
                        if (i64 >>> 0 < i74 >>> 0) {
                          i53 = i64;
                          i72 = i72 + 1 | 0;
                          i66 = i66 + 1 | 0;
                        } else {
                          break;
                        }
                      }
                      i76 = i51;
                      i77 = i61 + i73 | 0;
                    }
                    if ((i58 | 0) == (i74 | 0)) {
                      break;
                    }
                    i66 = i58 - i74 | 0;
                    i72 = 0;
                    i53 = i76;
                    i64 = i77;
                    i65 = i60;
                    i75 = i62;
                    while (1) {
                      i78 = HEAP8[i65] | 0;
                      i79 = HEAP8[i64] | 0;
                      i80 = HEAP8[i75] | 0;
                      i81 = i80 & 255;
                      i82 = (i79 & 255) - i81 | 0;
                      i83 = (i78 & 255) - i81 | 0;
                      i81 = (i82 | 0) < 0 ? -i82 | 0 : i82;
                      i84 = (i83 | 0) < 0 ? -i83 | 0 : i83;
                      i85 = i82 + i83 | 0;
                      i83 = (i85 | 0) < 0 ? -i85 | 0 : i85;
                      if ((i81 | 0) > (i84 | 0) | (i81 | 0) > (i83 | 0)) {
                        i86 = (i84 | 0) <= (i83 | 0) ? i79 : i80;
                      } else {
                        i86 = i78;
                      }
                      HEAP8[i53] = (HEAP8[i53] | 0) + i86 & 255;
                      i78 = i72 + 1 | 0;
                      if ((i78 | 0) == (i66 | 0)) {
                        break L2032;
                      } else {
                        i72 = i78;
                        i53 = i53 + 1 | 0;
                        i64 = i64 + 1 | 0;
                        i65 = i65 + 1 | 0;
                        i75 = i75 + 1 | 0;
                      }
                    }
                  } else if ((i63 | 0) != 0) {
                    i52 = 1496;
                    break L1954;
                  }
                } while (0);
                i59 = HEAP32[i10 >> 2] | 0;
              }
              _memcpy(HEAP32[i37 >> 2] | 0, i59, (HEAP32[i38 >> 2] | 0) + 1 | 0);
              L2065 : do {
                if ((HEAP32[i39 >> 2] & 4 | 0) != 0) {
                  if (HEAP8[i4] << 24 >> 24 != 64) {
                    break;
                  }
                  i63 = (HEAP32[i10 >> 2] | 0) + 1 | 0;
                  i62 = HEAP8[i29] | 0;
                  if ((i62 & 2) << 24 >> 24 == 0) {
                    break;
                  }
                  i60 = HEAP32[i30 >> 2] | 0;
                  i61 = HEAP8[i34] | 0;
                  if ((i61 << 24 >> 24 | 0) == 8) {
                    if ((i62 << 24 >> 24 | 0) == 6) {
                      i87 = 4;
                    } else if ((i62 << 24 >> 24 | 0) == 2) {
                      i87 = 3;
                    } else {
                      break;
                    }
                    if ((i60 | 0) == 0) {
                      break;
                    } else {
                      i88 = 0;
                      i89 = i63;
                    }
                    while (1) {
                      i54 = HEAP8[i89 + 1 | 0] | 0;
                      HEAP8[i89] = i54 + (HEAP8[i89] | 0) & 255;
                      i57 = i89 + 2 | 0;
                      HEAP8[i57] = (HEAP8[i57] | 0) + i54 & 255;
                      i54 = i88 + 1 | 0;
                      if ((i54 | 0) == (i60 | 0)) {
                        break L2065;
                      } else {
                        i88 = i54;
                        i89 = i89 + i87 | 0;
                      }
                    }
                  } else if ((i61 << 24 >> 24 | 0) == 16) {
                    if ((i62 << 24 >> 24 | 0) == 6) {
                      i90 = 8;
                    } else if ((i62 << 24 >> 24 | 0) == 2) {
                      i90 = 6;
                    } else {
                      break;
                    }
                    if ((i60 | 0) == 0) {
                      break;
                    } else {
                      i91 = 0;
                      i92 = i63;
                    }
                    while (1) {
                      i54 = i92 + 1 | 0;
                      i57 = (HEAPU8[i92 + 2 | 0] | 0) << 8 | (HEAPU8[i92 + 3 | 0] | 0);
                      i75 = i92 + 4 | 0;
                      i65 = i92 + 5 | 0;
                      i64 = i57 + ((HEAPU8[i92] | 0) << 8 | (HEAPU8[i54] | 0)) | 0;
                      i53 = ((HEAPU8[i75] | 0) << 8 | (HEAPU8[i65] | 0)) + i57 | 0;
                      HEAP8[i92] = i64 >>> 8 & 255;
                      HEAP8[i54] = i64 & 255;
                      HEAP8[i75] = i53 >>> 8 & 255;
                      HEAP8[i65] = i53 & 255;
                      i53 = i91 + 1 | 0;
                      if ((i53 | 0) == (i60 | 0)) {
                        break L2065;
                      } else {
                        i91 = i53;
                        i92 = i92 + i90 | 0;
                      }
                    }
                  } else {
                    break;
                  }
                }
              } while (0);
              if ((HEAP32[i40 >> 2] | 0) != 0) {
                _png_do_read_transformations(i1);
              }
              L2086 : do {
                if (HEAP8[i6] << 24 >> 24 == 0) {
                  i52 = 1584;
                } else {
                  i60 = HEAP32[i40 >> 2] | 0;
                  if ((i60 & 2 | 0) == 0) {
                    i52 = 1584;
                    break;
                  }
                  i63 = HEAP8[i43] | 0;
                  do {
                    if ((i63 & 255) < 6) {
                      i62 = HEAP32[i10 >> 2] | 0;
                      if ((i62 + 1 | 0) == 0 | i45) {
                        break;
                      }
                      i61 = HEAP32[i46 >> 2] | 0;
                      i53 = HEAP32[5246044 + ((i63 & 255) << 2) >> 2] | 0;
                      i65 = Math_imul(i53, i61);
                      i75 = HEAPU8[i35] | 0;
                      L2092 : do {
                        if ((i75 | 0) == 1) {
                          i64 = i61 + 7 & 7;
                          if ((i60 & 65536 | 0) == 0) {
                            i93 = i64 ^ 7;
                            i94 = i65 + 7 & 7 ^ 7;
                            i95 = 0;
                            i96 = 7;
                            i97 = 1;
                          } else {
                            i93 = i64;
                            i94 = i65 + 7 & 7;
                            i95 = 7;
                            i96 = 0;
                            i97 = -1;
                          }
                          if ((i61 | 0) == 0) {
                            break;
                          } else {
                            i98 = 0;
                            i99 = i94;
                            i100 = i93;
                            i101 = i62 + (((i65 - 1 | 0) >>> 3) + 1 | 0) | 0;
                            i102 = i62 + (((i61 - 1 | 0) >>> 3) + 1 | 0) | 0;
                          }
                          while (1) {
                            i64 = (HEAPU8[i102] | 0) >>> (i100 >>> 0) & 1;
                            i54 = 0;
                            i57 = i99;
                            i72 = i101;
                            while (1) {
                              HEAP8[i72] = ((HEAPU8[i72] | 0) & 32639 >>> ((7 - i57 | 0) >>> 0) | i64 << i57) & 255;
                              i66 = (i57 | 0) == (i96 | 0);
                              i103 = i66 ? i95 : i57 + i97 | 0;
                              i104 = i66 ? i72 - 1 | 0 : i72;
                              i66 = i54 + 1 | 0;
                              if ((i66 | 0) < (i53 | 0)) {
                                i54 = i66;
                                i57 = i103;
                                i72 = i104;
                              } else {
                                break;
                              }
                            }
                            i72 = (i100 | 0) == (i96 | 0);
                            i57 = i98 + 1 | 0;
                            if (i57 >>> 0 < (HEAP32[i46 >> 2] | 0) >>> 0) {
                              i98 = i57;
                              i99 = i103;
                              i100 = i72 ? i95 : i100 + i97 | 0;
                              i101 = i104;
                              i102 = i72 ? i102 - 1 | 0 : i102;
                            } else {
                              break L2092;
                            }
                          }
                        } else if ((i75 | 0) == 2) {
                          i72 = (i61 << 1) + 6 & 6;
                          if ((i60 & 65536 | 0) == 0) {
                            i105 = 2;
                            i106 = 6;
                            i107 = 0;
                            i108 = (i65 << 1) + 6 & 6 ^ 6;
                            i109 = i72 ^ 6;
                          } else {
                            i105 = -2;
                            i106 = 0;
                            i107 = 6;
                            i108 = (i65 << 1) + 6 & 6;
                            i109 = i72;
                          }
                          if ((i61 | 0) == 0) {
                            break;
                          } else {
                            i110 = i62 + (((i61 - 1 | 0) >>> 2) + 1 | 0) | 0;
                            i111 = i62 + (((i65 - 1 | 0) >>> 2) + 1 | 0) | 0;
                            i112 = i109;
                            i113 = i108;
                            i114 = 0;
                          }
                          while (1) {
                            i72 = (HEAPU8[i110] | 0) >>> (i112 >>> 0) & 3;
                            i57 = i111;
                            i54 = i113;
                            i64 = 0;
                            while (1) {
                              HEAP8[i57] = ((HEAPU8[i57] | 0) & 16191 >>> ((6 - i54 | 0) >>> 0) | i72 << i54) & 255;
                              i66 = (i54 | 0) == (i106 | 0);
                              i115 = i66 ? i57 - 1 | 0 : i57;
                              i116 = i66 ? i107 : i54 + i105 | 0;
                              i66 = i64 + 1 | 0;
                              if ((i66 | 0) < (i53 | 0)) {
                                i57 = i115;
                                i54 = i116;
                                i64 = i66;
                              } else {
                                break;
                              }
                            }
                            i64 = (i112 | 0) == (i106 | 0);
                            i54 = i114 + 1 | 0;
                            if (i54 >>> 0 < (HEAP32[i46 >> 2] | 0) >>> 0) {
                              i110 = i64 ? i110 - 1 | 0 : i110;
                              i111 = i115;
                              i112 = i64 ? i107 : i112 + i105 | 0;
                              i113 = i116;
                              i114 = i54;
                            } else {
                              break L2092;
                            }
                          }
                        } else if ((i75 | 0) == 4) {
                          i54 = i61 & 1;
                          if ((i60 & 65536 | 0) == 0) {
                            i117 = 4;
                            i118 = 4;
                            i119 = 0;
                            i120 = i65 & 1;
                            i121 = i54;
                          } else {
                            i117 = -4;
                            i118 = 0;
                            i119 = 4;
                            i120 = i65 & 1 ^ 1;
                            i121 = i54 ^ 1;
                          }
                          if ((i61 | 0) == 0) {
                            break;
                          }
                          i54 = i62 + (((i61 - 1 | 0) >>> 1) + 1 | 0) | 0;
                          i64 = i62 + (((i65 - 1 | 0) >>> 1) + 1 | 0) | 0;
                          i57 = i121 << 2;
                          i72 = i120 << 2;
                          i66 = 0;
                          while (1) {
                            i74 = (HEAPU8[i54] | 0) >>> (i57 >>> 0) & 15;
                            i73 = i64;
                            i51 = i72;
                            i78 = 0;
                            while (1) {
                              HEAP8[i73] = ((HEAPU8[i73] | 0) & 3855 >>> ((4 - i51 | 0) >>> 0) | i74 << i51) & 255;
                              i80 = (i51 | 0) == (i118 | 0);
                              i122 = i80 ? i73 - 1 | 0 : i73;
                              i123 = i80 ? i119 : i51 + i117 | 0;
                              i80 = i78 + 1 | 0;
                              if ((i80 | 0) < (i53 | 0)) {
                                i73 = i122;
                                i51 = i123;
                                i78 = i80;
                              } else {
                                break;
                              }
                            }
                            i78 = (i57 | 0) == (i118 | 0);
                            i51 = i66 + 1 | 0;
                            if (i51 >>> 0 < (HEAP32[i46 >> 2] | 0) >>> 0) {
                              i54 = i78 ? i54 - 1 | 0 : i54;
                              i64 = i122;
                              i57 = i78 ? i119 : i57 + i117 | 0;
                              i72 = i123;
                              i66 = i51;
                            } else {
                              break L2092;
                            }
                          }
                        } else {
                          i66 = i75 >>> 3;
                          if ((i61 | 0) == 0) {
                            break;
                          }
                          i72 = Math_imul(i66, i65 - 1 | 0);
                          i57 = i62 + (Math_imul(i66, i61 - 1 | 0) + 1 | 0) | 0;
                          i64 = -i66 | 0;
                          i54 = -Math_imul((i53 | 0) > 1 ? i53 : 1, i66) | 0;
                          i51 = i57;
                          i57 = i62 + (i72 + 1 | 0) | 0;
                          i72 = 0;
                          while (1) {
                            _memcpy(i44, i51, i66);
                            i78 = i57;
                            i73 = 0;
                            while (1) {
                              _memcpy(i78, i44, i66);
                              i74 = i73 + 1 | 0;
                              if ((i74 | 0) < (i53 | 0)) {
                                i78 = i78 + i64 | 0;
                                i73 = i74;
                              } else {
                                break;
                              }
                            }
                            i73 = i72 + 1 | 0;
                            if (i73 >>> 0 < (HEAP32[i46 >> 2] | 0) >>> 0) {
                              i51 = i51 + i64 | 0;
                              i57 = i57 + i54 | 0;
                              i72 = i73;
                            } else {
                              break L2092;
                            }
                          }
                        }
                      } while (0);
                      HEAP32[i46 >> 2] = i65;
                      i53 = HEAP8[i35] | 0;
                      i62 = i53 & 255;
                      if ((i53 & 255) > 7) {
                        i124 = Math_imul(i62 >>> 3, i65);
                      } else {
                        i124 = (Math_imul(i62, i65) + 7 | 0) >>> 3;
                      }
                      HEAP32[i36 >> 2] = i124;
                    }
                  } while (0);
                  if ((i50 | 0) == 0) {
                    break;
                  }
                  i60 = HEAP8[i43] | 0;
                  i63 = HEAP32[5245796 + ((i60 & 255) << 2) >> 2] | 0;
                  if (i60 << 24 >> 24 == 6) {
                    i60 = (HEAP32[i10 >> 2] | 0) + 1 | 0;
                    i62 = HEAP8[i35] | 0;
                    i53 = i62 & 255;
                    i61 = HEAP32[i41 >> 2] | 0;
                    if ((i62 & 255) > 7) {
                      i125 = Math_imul(i53 >>> 3, i61);
                    } else {
                      i125 = (Math_imul(i61, i53) + 7 | 0) >>> 3;
                    }
                    _memcpy(i50, i60, i125);
                    break;
                  }
                  i60 = HEAPU8[i35] | 0;
                  if ((i60 | 0) == 1) {
                    i53 = HEAP32[i41 >> 2] | 0;
                    i61 = HEAP32[i40 >> 2] & 65536;
                    i62 = (i61 | 0) == 0;
                    i75 = i62 ? 0 : 7;
                    i72 = i62 ? 7 : 0;
                    i62 = (i61 >>> 15) - 1 | 0;
                    if ((i53 | 0) == 0) {
                      break;
                    }
                    i61 = 0;
                    i54 = i72;
                    i57 = 128;
                    i64 = i50;
                    i51 = (HEAP32[i10 >> 2] | 0) + 1 | 0;
                    while (1) {
                      if ((i57 & i63 | 0) != 0) {
                        HEAP8[i64] = (((HEAPU8[i51] | 0) >>> (i54 >>> 0) & 1) << i54 | (HEAPU8[i64] | 0) & 32639 >>> ((7 - i54 | 0) >>> 0)) & 255;
                      }
                      if ((i54 | 0) == (i75 | 0)) {
                        i126 = i51 + 1 | 0;
                        i127 = i64 + 1 | 0;
                        i128 = i72;
                      } else {
                        i126 = i51;
                        i127 = i64;
                        i128 = i62 + i54 | 0;
                      }
                      i66 = i61 + 1 | 0;
                      if ((i66 | 0) == (i53 | 0)) {
                        break L2086;
                      } else {
                        i61 = i66;
                        i54 = i128;
                        i57 = (i57 | 0) == 1 ? 128 : i57 >> 1;
                        i64 = i127;
                        i51 = i126;
                      }
                    }
                  } else if ((i60 | 0) == 2) {
                    i51 = HEAP32[i41 >> 2] | 0;
                    i64 = HEAP32[i40 >> 2] & 65536;
                    i57 = (i64 | 0) == 0;
                    i54 = i57 ? 6 : 0;
                    i61 = i57 ? 0 : 6;
                    i57 = (i64 >>> 14) - 2 | 0;
                    if ((i51 | 0) == 0) {
                      break;
                    }
                    i64 = (HEAP32[i10 >> 2] | 0) + 1 | 0;
                    i53 = i50;
                    i62 = 128;
                    i72 = i54;
                    i75 = 0;
                    while (1) {
                      if ((i62 & i63 | 0) != 0) {
                        HEAP8[i53] = (((HEAPU8[i64] | 0) >>> (i72 >>> 0) & 3) << i72 | (HEAPU8[i53] | 0) & 16191 >>> ((6 - i72 | 0) >>> 0)) & 255;
                      }
                      if ((i72 | 0) == (i61 | 0)) {
                        i129 = i54;
                        i130 = i53 + 1 | 0;
                        i131 = i64 + 1 | 0;
                      } else {
                        i129 = i57 + i72 | 0;
                        i130 = i53;
                        i131 = i64;
                      }
                      i66 = i75 + 1 | 0;
                      if ((i66 | 0) == (i51 | 0)) {
                        break L2086;
                      } else {
                        i64 = i131;
                        i53 = i130;
                        i62 = (i62 | 0) == 1 ? 128 : i62 >> 1;
                        i72 = i129;
                        i75 = i66;
                      }
                    }
                  } else if ((i60 | 0) == 4) {
                    i75 = HEAP32[i41 >> 2] | 0;
                    i72 = HEAP32[i40 >> 2] & 65536;
                    i62 = i72 >>> 14;
                    i53 = i62 ^ 4;
                    i64 = (i72 >>> 13) - 4 | 0;
                    if ((i75 | 0) == 0) {
                      break;
                    }
                    i72 = (HEAP32[i10 >> 2] | 0) + 1 | 0;
                    i51 = i50;
                    i57 = 128;
                    i54 = i53;
                    i61 = 0;
                    while (1) {
                      if ((i57 & i63 | 0) != 0) {
                        HEAP8[i51] = (((HEAPU8[i72] | 0) >>> (i54 >>> 0) & 15) << i54 | (HEAPU8[i51] | 0) & 3855 >>> ((4 - i54 | 0) >>> 0)) & 255;
                      }
                      if ((i54 | 0) == (i62 | 0)) {
                        i132 = i53;
                        i133 = i51 + 1 | 0;
                        i134 = i72 + 1 | 0;
                      } else {
                        i132 = i64 + i54 | 0;
                        i133 = i51;
                        i134 = i72;
                      }
                      i66 = i61 + 1 | 0;
                      if ((i66 | 0) == (i75 | 0)) {
                        break L2086;
                      } else {
                        i72 = i134;
                        i51 = i133;
                        i57 = (i57 | 0) == 1 ? 128 : i57 >> 1;
                        i54 = i132;
                        i61 = i66;
                      }
                    }
                  } else {
                    i61 = i60 >>> 3;
                    i54 = HEAP32[i41 >> 2] | 0;
                    if ((i54 | 0) == 0) {
                      break;
                    }
                    i57 = (HEAP32[i10 >> 2] | 0) + 1 | 0;
                    i51 = i50;
                    i72 = 0;
                    i75 = 128;
                    while (1) {
                      if ((i75 & i63 | 0) != 0) {
                        _memcpy(i51, i57, i61);
                      }
                      i64 = i72 + 1 | 0;
                      if ((i64 | 0) == (i54 | 0)) {
                        break L2086;
                      } else {
                        i57 = i57 + i61 | 0;
                        i51 = i51 + i61 | 0;
                        i72 = i64;
                        i75 = (i75 | 0) == 1 ? 128 : i75 >>> 1 & 255;
                      }
                    }
                  }
                }
              } while (0);
              do {
                if ((i52 | 0) == 1584) {
                  i52 = 0;
                  if ((i50 | 0) == 0) {
                    break;
                  }
                  i75 = (HEAP32[i10 >> 2] | 0) + 1 | 0;
                  i72 = HEAP8[i35] | 0;
                  i61 = i72 & 255;
                  i51 = HEAP32[i41 >> 2] | 0;
                  if ((i72 & 255) > 7) {
                    i135 = Math_imul(i61 >>> 3, i51);
                  } else {
                    i135 = (Math_imul(i51, i61) + 7 | 0) >>> 3;
                  }
                  _memcpy(i50, i75, i135);
                }
              } while (0);
              _png_read_finish_row(i1);
              i75 = HEAP32[i42 >> 2] | 0;
              if ((i75 | 0) == 0) {
                break;
              }
              FUNCTION_TABLE_viii[i75 & 511](i1, HEAP32[i8 >> 2] | 0, HEAPU8[i43] | 0);
            }
          } while (0);
          i50 = i48 + 1 | 0;
          if ((i50 | 0) == (i14 | 0)) {
            break L1956;
          } else {
            i48 = i50;
            i49 = i49 + 4 | 0;
          }
        }
      }
    } while (0);
    i49 = i47 + 1 | 0;
    if ((i49 | 0) < (i11 | 0)) {
      i47 = i49;
    } else {
      i52 = 1594;
      break;
    }
  }
  if ((i52 | 0) == 1452) {
    _png_error(i1, 5269084);
  } else if ((i52 | 0) == 1466) {
    _png_error(i1, 5272556);
  } else if ((i52 | 0) == 1468) {
    i47 = HEAP32[i1 + 120 >> 2] | 0;
    _png_error(i1, (i47 | 0) == 0 ? 5272580 : i47);
  } else if ((i52 | 0) == 1594) {
    STACKTOP = i3;
    return;
  } else if ((i52 | 0) == 1496) {
    _png_error(i1, 5272688);
  } else if ((i52 | 0) == 1439) {
    _png_error(i1, 5275404);
  } else if ((i52 | 0) == 1448) {
    _png_error(i1, 5272660);
  }
}
function _png_destroy_read_struct(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
  i3 = STACKTOP;
  STACKTOP = STACKTOP + 1296 | 0;
  i4 = i3 | 0;
  i5 = i3 + 40 | 0;
  i6 = i3 + 668 | 0;
  if ((i1 | 0) == 0) {
    STACKTOP = i3;
    return;
  }
  i7 = HEAP32[i1 >> 2] | 0;
  if ((i7 | 0) == 0) {
    STACKTOP = i3;
    return;
  }
  i8 = i7 + 552 | 0;
  i9 = HEAP32[i8 >> 2] | 0;
  i10 = HEAP32[i7 + 544 >> 2] | 0;
  do {
    if ((i2 | 0) == 0) {
      i11 = 0;
    } else {
      i12 = HEAP32[i2 >> 2] | 0;
      if ((i12 | 0) == 0) {
        i11 = 0;
        break;
      }
      _png_free_data(i7, i12, 32767, -1);
      i13 = i7 + 520 | 0;
      if ((HEAP32[i13 >> 2] | 0) != 0) {
        i14 = i7 + 524 | 0;
        i15 = HEAP32[i14 >> 2] | 0;
        i16 = i7;
        do {
          if ((i15 | 0) != 0) {
            i17 = HEAP32[i8 >> 2] | 0;
            if ((i17 | 0) == 0) {
              _free(i15);
              break;
            } else {
              FUNCTION_TABLE_vii[i17 & 511](i16, i15);
              break;
            }
          }
        } while (0);
        HEAP32[i14 >> 2] = 0;
        HEAP32[i13 >> 2] = 0;
      }
      i15 = i12;
      HEAP32[i15 >> 2] = 0;
      HEAP32[i15 + 4 >> 2] = 0;
      HEAP32[i15 + 8 >> 2] = 0;
      HEAP32[i15 + 12 >> 2] = 0;
      HEAP32[i15 + 16 >> 2] = 0;
      HEAP32[i15 + 20 >> 2] = 0;
      HEAP32[i15 + 24 >> 2] = 0;
      HEAP32[i15 + 28 >> 2] = 0;
      HEAP32[i15 + 32 >> 2] = 0;
      HEAP32[i15 + 36 >> 2] = 0;
      HEAP32[i15 + 40 >> 2] = 0;
      HEAP32[i15 + 44 >> 2] = 0;
      HEAP32[i15 + 48 >> 2] = 0;
      HEAP32[i15 + 52 >> 2] = 0;
      HEAP32[i15 + 56 >> 2] = 0;
      HEAP32[i15 + 60 >> 2] = 0;
      HEAP32[i15 + 64 >> 2] = 0;
      HEAP32[i15 + 68 >> 2] = 0;
      HEAP32[i15 + 72 >> 2] = 0;
      HEAP32[i15 + 76 >> 2] = 0;
      HEAP32[i15 + 80 >> 2] = 0;
      HEAP32[i15 + 84 >> 2] = 0;
      HEAP32[i15 + 88 >> 2] = 0;
      HEAP32[i15 + 92 >> 2] = 0;
      HEAP32[i15 + 96 >> 2] = 0;
      HEAP32[i15 + 100 >> 2] = 0;
      HEAP32[i15 + 104 >> 2] = 0;
      HEAP32[i15 + 108 >> 2] = 0;
      HEAP32[i15 + 112 >> 2] = 0;
      HEAP32[i15 + 116 >> 2] = 0;
      HEAP32[i15 + 120 >> 2] = 0;
      HEAP32[i15 + 124 >> 2] = 0;
      HEAP32[i15 + 128 >> 2] = 0;
      HEAP32[i15 + 132 >> 2] = 0;
      HEAP32[i15 + 136 >> 2] = 0;
      HEAP32[i15 + 140 >> 2] = 0;
      HEAP32[i15 + 144 >> 2] = 0;
      HEAP32[i15 + 148 >> 2] = 0;
      HEAP32[i15 + 152 >> 2] = 0;
      HEAP32[i15 + 156 >> 2] = 0;
      HEAP32[i15 + 160 >> 2] = 0;
      HEAP32[i15 + 164 >> 2] = 0;
      HEAP32[i15 + 168 >> 2] = 0;
      HEAP32[i15 + 172 >> 2] = 0;
      HEAP32[i15 + 176 >> 2] = 0;
      HEAP32[i15 + 180 >> 2] = 0;
      HEAP32[i15 + 184 >> 2] = 0;
      HEAP32[i15 + 188 >> 2] = 0;
      HEAP32[i15 + 192 >> 2] = 0;
      HEAP32[i15 + 196 >> 2] = 0;
      HEAP32[i15 + 200 >> 2] = 0;
      HEAP32[i15 + 204 >> 2] = 0;
      HEAP32[i15 + 208 >> 2] = 0;
      HEAP32[i15 + 212 >> 2] = 0;
      HEAP32[i15 + 216 >> 2] = 0;
      HEAP32[i15 + 220 >> 2] = 0;
      HEAP32[i15 + 224 >> 2] = 0;
      HEAP32[i15 + 228 >> 2] = 0;
      HEAP32[i15 + 232 >> 2] = 0;
      HEAP32[i15 + 236 >> 2] = 0;
      i11 = i12;
    }
  } while (0);
  i15 = HEAP32[i7 + 152 >> 2] | 0;
  i16 = i7;
  do {
    if ((i15 | 0) != 0) {
      i17 = HEAP32[i8 >> 2] | 0;
      if ((i17 | 0) == 0) {
        _free(i15);
        break;
      } else {
        FUNCTION_TABLE_vii[i17 & 511](i16, i15);
        break;
      }
    }
  } while (0);
  i15 = HEAP32[i7 + 556 >> 2] | 0;
  do {
    if ((i15 | 0) != 0) {
      i17 = HEAP32[i8 >> 2] | 0;
      if ((i17 | 0) == 0) {
        _free(i15);
        break;
      } else {
        FUNCTION_TABLE_vii[i17 & 511](i16, i15);
        break;
      }
    }
  } while (0);
  i15 = HEAP32[i7 + 208 >> 2] | 0;
  do {
    if ((i15 | 0) != 0) {
      i17 = HEAP32[i8 >> 2] | 0;
      if ((i17 | 0) == 0) {
        _free(i15);
        break;
      } else {
        FUNCTION_TABLE_vii[i17 & 511](i16, i15);
        break;
      }
    }
  } while (0);
  i15 = HEAP32[i7 + 620 >> 2] | 0;
  do {
    if ((i15 | 0) != 0) {
      i17 = HEAP32[i8 >> 2] | 0;
      if ((i17 | 0) == 0) {
        _free(i15);
        break;
      } else {
        FUNCTION_TABLE_vii[i17 & 511](i16, i15);
        break;
      }
    }
  } while (0);
  i15 = HEAP32[i7 + 468 >> 2] | 0;
  do {
    if ((i15 | 0) != 0) {
      i17 = HEAP32[i8 >> 2] | 0;
      if ((i17 | 0) == 0) {
        _free(i15);
        break;
      } else {
        FUNCTION_TABLE_vii[i17 & 511](i16, i15);
        break;
      }
    }
  } while (0);
  i15 = HEAP32[i7 + 472 >> 2] | 0;
  do {
    if ((i15 | 0) != 0) {
      i17 = HEAP32[i8 >> 2] | 0;
      if ((i17 | 0) == 0) {
        _free(i15);
        break;
      } else {
        FUNCTION_TABLE_vii[i17 & 511](i16, i15);
        break;
      }
    }
  } while (0);
  i15 = HEAP32[i7 + 332 >> 2] | 0;
  do {
    if ((i15 | 0) != 0) {
      i17 = HEAP32[i8 >> 2] | 0;
      if ((i17 | 0) == 0) {
        _free(i15);
        break;
      } else {
        FUNCTION_TABLE_vii[i17 & 511](i16, i15);
        break;
      }
    }
  } while (0);
  i15 = HEAP32[i7 + 336 >> 2] | 0;
  do {
    if ((i15 | 0) != 0) {
      i17 = HEAP32[i8 >> 2] | 0;
      if ((i17 | 0) == 0) {
        _free(i15);
        break;
      } else {
        FUNCTION_TABLE_vii[i17 & 511](i16, i15);
        break;
      }
    }
  } while (0);
  i15 = HEAP32[i7 + 340 >> 2] | 0;
  do {
    if ((i15 | 0) != 0) {
      i17 = HEAP32[i8 >> 2] | 0;
      if ((i17 | 0) == 0) {
        _free(i15);
        break;
      } else {
        FUNCTION_TABLE_vii[i17 & 511](i16, i15);
        break;
      }
    }
  } while (0);
  i15 = i7 + 508 | 0;
  do {
    if ((HEAP32[i15 >> 2] & 4096 | 0) != 0) {
      i17 = HEAP32[i7 + 252 >> 2] | 0;
      i18 = i17 | 0;
      if ((i17 | 0) == 0) {
        break;
      }
      i17 = HEAP32[i8 >> 2] | 0;
      if ((i17 | 0) == 0) {
        _free(i18);
        break;
      } else {
        FUNCTION_TABLE_vii[i17 & 511](i16, i18);
        break;
      }
    }
  } while (0);
  i18 = HEAP32[i15 >> 2] | 0;
  HEAP32[i15 >> 2] = i18 & -4097;
  do {
    if ((i18 & 8192 | 0) != 0) {
      i17 = HEAP32[i7 + 368 >> 2] | 0;
      if ((i17 | 0) == 0) {
        break;
      }
      i19 = HEAP32[i8 >> 2] | 0;
      if ((i19 | 0) == 0) {
        _free(i17);
        break;
      } else {
        FUNCTION_TABLE_vii[i19 & 511](i16, i17);
        break;
      }
    }
  } while (0);
  i18 = HEAP32[i15 >> 2] | 0;
  HEAP32[i15 >> 2] = i18 & -8193;
  do {
    if ((i18 & 8 | 0) != 0) {
      i17 = HEAP32[i7 + 476 >> 2] | 0;
      i19 = i17;
      if ((i17 | 0) == 0) {
        break;
      }
      i17 = HEAP32[i8 >> 2] | 0;
      if ((i17 | 0) == 0) {
        _free(i19);
        break;
      } else {
        FUNCTION_TABLE_vii[i17 & 511](i16, i19);
        break;
      }
    }
  } while (0);
  HEAP32[i15 >> 2] = HEAP32[i15 >> 2] & -9;
  i15 = i7 + 344 | 0;
  i18 = HEAP32[i15 >> 2] | 0;
  do {
    if ((i18 | 0) != 0) {
      i19 = 1 << 8 - (HEAP32[i7 + 320 >> 2] | 0);
      if ((i19 | 0) > 0) {
        i17 = 0;
        i20 = i18;
        while (1) {
          i21 = HEAP32[i20 + (i17 << 2) >> 2] | 0;
          i22 = i21;
          do {
            if ((i21 | 0) != 0) {
              i23 = HEAP32[i8 >> 2] | 0;
              if ((i23 | 0) == 0) {
                _free(i22);
                break;
              } else {
                FUNCTION_TABLE_vii[i23 & 511](i16, i22);
                break;
              }
            }
          } while (0);
          i22 = i17 + 1 | 0;
          i21 = HEAP32[i15 >> 2] | 0;
          if ((i22 | 0) == (i19 | 0)) {
            i24 = i21;
            break;
          } else {
            i17 = i22;
            i20 = i21;
          }
        }
        if ((i24 | 0) == 0) {
          break;
        } else {
          i25 = i24;
        }
      } else {
        i25 = i18;
      }
      i20 = HEAP32[i8 >> 2] | 0;
      if ((i20 | 0) == 0) {
        _free(i25);
        break;
      } else {
        FUNCTION_TABLE_vii[i20 & 511](i16, i25);
        break;
      }
    }
  } while (0);
  i25 = i7 + 348 | 0;
  i18 = HEAP32[i25 >> 2] | 0;
  do {
    if ((i18 | 0) != 0) {
      i24 = 1 << 8 - (HEAP32[i7 + 320 >> 2] | 0);
      if ((i24 | 0) > 0) {
        i15 = 0;
        i20 = i18;
        while (1) {
          i17 = HEAP32[i20 + (i15 << 2) >> 2] | 0;
          i19 = i17;
          do {
            if ((i17 | 0) != 0) {
              i12 = HEAP32[i8 >> 2] | 0;
              if ((i12 | 0) == 0) {
                _free(i19);
                break;
              } else {
                FUNCTION_TABLE_vii[i12 & 511](i16, i19);
                break;
              }
            }
          } while (0);
          i19 = i15 + 1 | 0;
          i17 = HEAP32[i25 >> 2] | 0;
          if ((i19 | 0) == (i24 | 0)) {
            i26 = i17;
            break;
          } else {
            i15 = i19;
            i20 = i17;
          }
        }
        if ((i26 | 0) == 0) {
          break;
        } else {
          i27 = i26;
        }
      } else {
        i27 = i18;
      }
      i20 = HEAP32[i8 >> 2] | 0;
      if ((i20 | 0) == 0) {
        _free(i27);
        break;
      } else {
        FUNCTION_TABLE_vii[i20 & 511](i16, i27);
        break;
      }
    }
  } while (0);
  i27 = i7 + 352 | 0;
  i18 = HEAP32[i27 >> 2] | 0;
  do {
    if ((i18 | 0) != 0) {
      i26 = 1 << 8 - (HEAP32[i7 + 320 >> 2] | 0);
      if ((i26 | 0) > 0) {
        i25 = 0;
        i20 = i18;
        while (1) {
          i15 = HEAP32[i20 + (i25 << 2) >> 2] | 0;
          i24 = i15;
          do {
            if ((i15 | 0) != 0) {
              i17 = HEAP32[i8 >> 2] | 0;
              if ((i17 | 0) == 0) {
                _free(i24);
                break;
              } else {
                FUNCTION_TABLE_vii[i17 & 511](i16, i24);
                break;
              }
            }
          } while (0);
          i24 = i25 + 1 | 0;
          i15 = HEAP32[i27 >> 2] | 0;
          if ((i24 | 0) == (i26 | 0)) {
            i28 = i15;
            break;
          } else {
            i25 = i24;
            i20 = i15;
          }
        }
        if ((i28 | 0) == 0) {
          break;
        } else {
          i29 = i28;
        }
      } else {
        i29 = i18;
      }
      i20 = HEAP32[i8 >> 2] | 0;
      if ((i20 | 0) == 0) {
        _free(i29);
        break;
      } else {
        FUNCTION_TABLE_vii[i20 & 511](i16, i29);
        break;
      }
    }
  } while (0);
  i29 = HEAP32[i7 + 504 >> 2] | 0;
  do {
    if ((i29 | 0) != 0) {
      i18 = HEAP32[i8 >> 2] | 0;
      if ((i18 | 0) == 0) {
        _free(i29);
        break;
      } else {
        FUNCTION_TABLE_vii[i18 & 511](i16, i29);
        break;
      }
    }
  } while (0);
  do {
    if ((i7 + 96 | 0) != 0) {
      i29 = i7 + 124 | 0;
      i18 = HEAP32[i29 >> 2] | 0;
      if ((i18 | 0) == 0) {
        break;
      }
      i28 = i7 + 132 | 0;
      i27 = HEAP32[i28 >> 2] | 0;
      if ((i27 | 0) == 0) {
        break;
      }
      i20 = HEAP32[i18 + 52 >> 2] | 0;
      i25 = i7 + 136 | 0;
      if ((i20 | 0) == 0) {
        i30 = i27;
        i31 = i18;
      } else {
        FUNCTION_TABLE_vii[i27 & 511](HEAP32[i25 >> 2] | 0, i20);
        i30 = HEAP32[i28 >> 2] | 0;
        i31 = HEAP32[i29 >> 2] | 0;
      }
      FUNCTION_TABLE_vii[i30 & 511](HEAP32[i25 >> 2] | 0, i31);
      HEAP32[i29 >> 2] = 0;
    }
  } while (0);
  i31 = HEAP32[i7 + 408 >> 2] | 0;
  do {
    if ((i31 | 0) != 0) {
      i30 = HEAP32[i8 >> 2] | 0;
      if ((i30 | 0) == 0) {
        _free(i31);
        break;
      } else {
        FUNCTION_TABLE_vii[i30 & 511](i16, i31);
        break;
      }
    }
  } while (0);
  i31 = HEAP32[i7 + 460 >> 2] | 0;
  do {
    if ((i31 | 0) != 0) {
      i30 = HEAP32[i8 >> 2] | 0;
      if ((i30 | 0) == 0) {
        _free(i31);
        break;
      } else {
        FUNCTION_TABLE_vii[i30 & 511](i16, i31);
        break;
      }
    }
  } while (0);
  i31 = i4;
  i4 = i7;
  _memcpy(i31, i4, 40);
  i16 = i7 + 44 | 0;
  i30 = HEAP32[i16 >> 2] | 0;
  i29 = i7 + 48 | 0;
  i25 = HEAP32[i29 >> 2] | 0;
  i28 = i7 + 52 | 0;
  i20 = HEAP32[i28 >> 2] | 0;
  i27 = HEAP32[i8 >> 2] | 0;
  HEAP32[i4 >> 2] = 0;
  HEAP32[i4 + 4 >> 2] = 0;
  HEAP32[i4 + 8 >> 2] = 0;
  HEAP32[i4 + 12 >> 2] = 0;
  HEAP32[i4 + 16 >> 2] = 0;
  HEAP32[i4 + 20 >> 2] = 0;
  HEAP32[i4 + 24 >> 2] = 0;
  HEAP32[i4 + 28 >> 2] = 0;
  HEAP32[i4 + 32 >> 2] = 0;
  HEAP32[i4 + 36 >> 2] = 0;
  HEAP32[i4 + 40 >> 2] = 0;
  HEAP32[i4 + 44 >> 2] = 0;
  HEAP32[i4 + 48 >> 2] = 0;
  HEAP32[i4 + 52 >> 2] = 0;
  HEAP32[i4 + 56 >> 2] = 0;
  HEAP32[i4 + 60 >> 2] = 0;
  HEAP32[i4 + 64 >> 2] = 0;
  HEAP32[i4 + 68 >> 2] = 0;
  HEAP32[i4 + 72 >> 2] = 0;
  HEAP32[i4 + 76 >> 2] = 0;
  HEAP32[i4 + 80 >> 2] = 0;
  HEAP32[i4 + 84 >> 2] = 0;
  HEAP32[i4 + 88 >> 2] = 0;
  HEAP32[i4 + 92 >> 2] = 0;
  HEAP32[i4 + 96 >> 2] = 0;
  HEAP32[i4 + 100 >> 2] = 0;
  HEAP32[i4 + 104 >> 2] = 0;
  HEAP32[i4 + 108 >> 2] = 0;
  HEAP32[i4 + 112 >> 2] = 0;
  HEAP32[i4 + 116 >> 2] = 0;
  HEAP32[i4 + 120 >> 2] = 0;
  HEAP32[i4 + 124 >> 2] = 0;
  HEAP32[i4 + 128 >> 2] = 0;
  HEAP32[i4 + 132 >> 2] = 0;
  HEAP32[i4 + 136 >> 2] = 0;
  HEAP32[i4 + 140 >> 2] = 0;
  HEAP32[i4 + 144 >> 2] = 0;
  HEAP32[i4 + 148 >> 2] = 0;
  HEAP32[i4 + 152 >> 2] = 0;
  HEAP32[i4 + 156 >> 2] = 0;
  HEAP32[i4 + 160 >> 2] = 0;
  HEAP32[i4 + 164 >> 2] = 0;
  HEAP32[i4 + 168 >> 2] = 0;
  HEAP32[i4 + 172 >> 2] = 0;
  HEAP32[i4 + 176 >> 2] = 0;
  HEAP32[i4 + 180 >> 2] = 0;
  HEAP32[i4 + 184 >> 2] = 0;
  HEAP32[i4 + 188 >> 2] = 0;
  HEAP32[i4 + 192 >> 2] = 0;
  HEAP32[i4 + 196 >> 2] = 0;
  HEAP32[i4 + 200 >> 2] = 0;
  HEAP32[i4 + 204 >> 2] = 0;
  HEAP32[i4 + 208 >> 2] = 0;
  HEAP32[i4 + 212 >> 2] = 0;
  HEAP32[i4 + 216 >> 2] = 0;
  HEAP32[i4 + 220 >> 2] = 0;
  HEAP32[i4 + 224 >> 2] = 0;
  HEAP32[i4 + 228 >> 2] = 0;
  HEAP32[i4 + 232 >> 2] = 0;
  HEAP32[i4 + 236 >> 2] = 0;
  HEAP32[i4 + 240 >> 2] = 0;
  HEAP32[i4 + 244 >> 2] = 0;
  HEAP32[i4 + 248 >> 2] = 0;
  HEAP32[i4 + 252 >> 2] = 0;
  HEAP32[i4 + 256 >> 2] = 0;
  HEAP32[i4 + 260 >> 2] = 0;
  HEAP32[i4 + 264 >> 2] = 0;
  HEAP32[i4 + 268 >> 2] = 0;
  HEAP32[i4 + 272 >> 2] = 0;
  HEAP32[i4 + 276 >> 2] = 0;
  HEAP32[i4 + 280 >> 2] = 0;
  HEAP32[i4 + 284 >> 2] = 0;
  HEAP32[i4 + 288 >> 2] = 0;
  HEAP32[i4 + 292 >> 2] = 0;
  HEAP32[i4 + 296 >> 2] = 0;
  HEAP32[i4 + 300 >> 2] = 0;
  HEAP32[i4 + 304 >> 2] = 0;
  HEAP32[i4 + 308 >> 2] = 0;
  HEAP32[i4 + 312 >> 2] = 0;
  HEAP32[i4 + 316 >> 2] = 0;
  HEAP32[i4 + 320 >> 2] = 0;
  HEAP32[i4 + 324 >> 2] = 0;
  HEAP32[i4 + 328 >> 2] = 0;
  HEAP32[i4 + 332 >> 2] = 0;
  HEAP32[i4 + 336 >> 2] = 0;
  HEAP32[i4 + 340 >> 2] = 0;
  HEAP32[i4 + 344 >> 2] = 0;
  HEAP32[i4 + 348 >> 2] = 0;
  HEAP32[i4 + 352 >> 2] = 0;
  HEAP32[i4 + 356 >> 2] = 0;
  HEAP32[i4 + 360 >> 2] = 0;
  HEAP32[i4 + 364 >> 2] = 0;
  HEAP32[i4 + 368 >> 2] = 0;
  HEAP32[i4 + 372 >> 2] = 0;
  HEAP32[i4 + 376 >> 2] = 0;
  HEAP32[i4 + 380 >> 2] = 0;
  HEAP32[i4 + 384 >> 2] = 0;
  HEAP32[i4 + 388 >> 2] = 0;
  HEAP32[i4 + 392 >> 2] = 0;
  HEAP32[i4 + 396 >> 2] = 0;
  HEAP32[i4 + 400 >> 2] = 0;
  HEAP32[i4 + 404 >> 2] = 0;
  HEAP32[i4 + 408 >> 2] = 0;
  HEAP32[i4 + 412 >> 2] = 0;
  HEAP32[i4 + 416 >> 2] = 0;
  HEAP32[i4 + 420 >> 2] = 0;
  HEAP32[i4 + 424 >> 2] = 0;
  HEAP32[i4 + 428 >> 2] = 0;
  HEAP32[i4 + 432 >> 2] = 0;
  HEAP32[i4 + 436 >> 2] = 0;
  HEAP32[i4 + 440 >> 2] = 0;
  HEAP32[i4 + 444 >> 2] = 0;
  HEAP32[i4 + 448 >> 2] = 0;
  HEAP32[i4 + 452 >> 2] = 0;
  HEAP32[i4 + 456 >> 2] = 0;
  HEAP32[i4 + 460 >> 2] = 0;
  HEAP32[i4 + 464 >> 2] = 0;
  HEAP32[i4 + 468 >> 2] = 0;
  HEAP32[i4 + 472 >> 2] = 0;
  HEAP32[i4 + 476 >> 2] = 0;
  HEAP32[i4 + 480 >> 2] = 0;
  HEAP32[i4 + 484 >> 2] = 0;
  HEAP32[i4 + 488 >> 2] = 0;
  HEAP32[i4 + 492 >> 2] = 0;
  HEAP32[i4 + 496 >> 2] = 0;
  HEAP32[i4 + 500 >> 2] = 0;
  HEAP32[i4 + 504 >> 2] = 0;
  HEAP32[i4 + 508 >> 2] = 0;
  HEAP32[i4 + 512 >> 2] = 0;
  HEAP32[i4 + 516 >> 2] = 0;
  HEAP32[i4 + 520 >> 2] = 0;
  HEAP32[i4 + 524 >> 2] = 0;
  HEAP32[i4 + 528 >> 2] = 0;
  HEAP32[i4 + 532 >> 2] = 0;
  HEAP32[i4 + 536 >> 2] = 0;
  HEAP32[i4 + 540 >> 2] = 0;
  HEAP32[i4 + 544 >> 2] = 0;
  HEAP32[i4 + 548 >> 2] = 0;
  HEAP32[i4 + 552 >> 2] = 0;
  HEAP32[i4 + 556 >> 2] = 0;
  HEAP32[i4 + 560 >> 2] = 0;
  HEAP32[i4 + 564 >> 2] = 0;
  HEAP32[i4 + 568 >> 2] = 0;
  HEAP32[i4 + 572 >> 2] = 0;
  HEAP32[i4 + 576 >> 2] = 0;
  HEAP32[i4 + 580 >> 2] = 0;
  HEAP32[i4 + 584 >> 2] = 0;
  HEAP32[i4 + 588 >> 2] = 0;
  HEAP32[i4 + 592 >> 2] = 0;
  HEAP32[i4 + 596 >> 2] = 0;
  HEAP32[i4 + 600 >> 2] = 0;
  HEAP32[i4 + 604 >> 2] = 0;
  HEAP32[i4 + 608 >> 2] = 0;
  HEAP32[i4 + 612 >> 2] = 0;
  HEAP32[i4 + 616 >> 2] = 0;
  HEAP32[i4 + 620 >> 2] = 0;
  HEAP32[i4 + 624 >> 2] = 0;
  HEAP32[i16 >> 2] = i30;
  HEAP32[i29 >> 2] = i25;
  HEAP32[i28 >> 2] = i20;
  HEAP32[i8 >> 2] = i27;
  _memcpy(i4, i31, 40);
  if ((i11 | 0) != 0) {
    _png_free_data(i7, i11, 16384, -1);
    i7 = i11;
    if ((i9 | 0) == 0) {
      _free(i7);
    } else {
      HEAP32[i6 + 544 >> 2] = i10;
      FUNCTION_TABLE_vii[i9 & 511](i6, i7);
    }
    HEAP32[i2 >> 2] = 0;
  }
  if ((i9 | 0) == 0) {
    _free(i4);
  } else {
    HEAP32[i5 + 544 >> 2] = i10;
    FUNCTION_TABLE_vii[i9 & 511](i5, i4);
  }
  HEAP32[i1 >> 2] = 0;
  STACKTOP = i3;
  return;
}
function _png_default_read_data(i1, i2, i3) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  if ((i1 | 0) == 0) {
    return;
  }
  if ((_fread(i2 | 0, 1, i3 | 0, HEAP32[i1 + 64 >> 2] | 0) | 0) == (i3 | 0)) {
    return;
  } else {
    _png_error(i1, 5272724);
  }
}
function _png_do_read_transformations(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, i150 = 0, i151 = 0, i152 = 0, i153 = 0, i154 = 0, i155 = 0, i156 = 0, i157 = 0, i158 = 0, i159 = 0, i160 = 0, i161 = 0, i162 = 0, i163 = 0, i164 = 0, i165 = 0, i166 = 0, i167 = 0, i168 = 0, i169 = 0, i170 = 0;
  i2 = STACKTOP;
  STACKTOP = STACKTOP + 68 | 0;
  i3 = i2 | 0;
  i4 = i1 + 212 | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  if ((i5 | 0) == 0) {
    i6 = i2 + 16 | 0;
    i7 = HEAP32[i1 + 204 >> 2] | 0;
    i8 = HEAPU8[i1 + 268 | 0] | 0;
    _snprintf(i6 | 0, 50, 5275332, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = i7, HEAP32[tempInt + 4 >> 2] = i8, tempInt) | 0) | 0;
    _png_error(i1, i6);
  }
  i6 = i1 + 92 | 0;
  i8 = HEAP32[i6 >> 2] | 0;
  L2404 : do {
    if ((i8 & 4096 | 0) != 0) {
      i7 = i1 + 232 | 0;
      i9 = i1 + 240 | 0;
      if (HEAP8[i9] << 24 >> 24 != 3) {
        do {
          if (HEAP16[i1 + 258 >> 1] << 16 >> 16 != 0) {
            if ((i8 & 33554432 | 0) == 0) {
              break;
            }
            _png_do_expand(i7, i5 + 1 | 0, i1 + 372 | 0);
            break L2404;
          }
        } while (0);
        _png_do_expand(i7, i5 + 1 | 0, 0);
        break;
      }
      i10 = HEAP32[i1 + 252 >> 2] | 0;
      i11 = HEAP32[i1 + 368 >> 2] | 0;
      i12 = HEAPU16[i1 + 258 >> 1] | 0;
      i13 = HEAP32[i7 >> 2] | 0;
      i14 = i1 + 241 | 0;
      i15 = HEAP8[i14] | 0;
      if ((i15 & 255) < 8) {
        i16 = i15 & 255;
        L2415 : do {
          if ((i16 | 0) == 1) {
            if ((i13 | 0) == 0) {
              break;
            }
            i17 = i5 + (((i13 - 1 | 0) >>> 3) + 1 | 0) | 0;
            i18 = i5 + i13 | 0;
            i19 = 0;
            i20 = i13 + 7 & 7 ^ 7;
            while (1) {
              HEAP8[i18] = ((HEAPU8[i17] | 0) & 1 << i20 | 0) != 0 & 1;
              i21 = (i20 | 0) == 7;
              i22 = i19 + 1 | 0;
              if ((i22 | 0) == (i13 | 0)) {
                break L2415;
              } else {
                i17 = i21 ? i17 - 1 | 0 : i17;
                i18 = i18 - 1 | 0;
                i19 = i22;
                i20 = i21 ? 0 : i20 + 1 | 0;
              }
            }
          } else if ((i16 | 0) == 2) {
            if ((i13 | 0) == 0) {
              break;
            }
            i20 = i5 + (((i13 - 1 | 0) >>> 2) + 1 | 0) | 0;
            i19 = i5 + i13 | 0;
            i18 = 0;
            i17 = (i13 << 1) + 6 & 6 ^ 6;
            while (1) {
              HEAP8[i19] = (HEAPU8[i20] | 0) >>> (i17 >>> 0) & 3;
              i21 = (i17 | 0) == 6;
              i22 = i18 + 1 | 0;
              if ((i22 | 0) == (i13 | 0)) {
                break L2415;
              } else {
                i20 = i21 ? i20 - 1 | 0 : i20;
                i19 = i19 - 1 | 0;
                i18 = i22;
                i17 = i21 ? 0 : i17 + 2 | 0;
              }
            }
          } else if ((i16 | 0) == 4) {
            if ((i13 | 0) == 0) {
              break;
            }
            i17 = i5 + (((i13 - 1 | 0) >>> 1) + 1 | 0) | 0;
            i18 = i5 + i13 | 0;
            i19 = 0;
            i20 = i13 << 2 & 4;
            while (1) {
              HEAP8[i18] = (HEAPU8[i17] | 0) >>> (i20 >>> 0) & 15;
              i21 = (i20 | 0) == 4;
              i22 = i19 + 1 | 0;
              if ((i22 | 0) == (i13 | 0)) {
                break L2415;
              } else {
                i17 = i21 ? i17 - 1 | 0 : i17;
                i18 = i18 - 1 | 0;
                i19 = i22;
                i20 = i21 ? 0 : i20 + 4 | 0;
              }
            }
          }
        } while (0);
        HEAP8[i14] = 8;
        HEAP8[i1 + 243 | 0] = 8;
        HEAP32[i1 + 236 >> 2] = i13;
      } else {
        if (i15 << 24 >> 24 != 8) {
          break;
        }
      }
      i16 = i5 + i13 | 0;
      if ((i11 | 0) == 0) {
        i7 = i13 * 3 & -1;
        L2433 : do {
          if ((i13 | 0) != 0) {
            i20 = i16;
            i19 = i5 + i7 | 0;
            i18 = 0;
            while (1) {
              HEAP8[i19] = HEAP8[i10 + ((HEAPU8[i20] | 0) * 3 & -1) + 2 | 0] | 0;
              HEAP8[i19 - 1 | 0] = HEAP8[i10 + ((HEAPU8[i20] | 0) * 3 & -1) + 1 | 0] | 0;
              HEAP8[i19 - 2 | 0] = HEAP8[i10 + ((HEAPU8[i20] | 0) * 3 & -1) | 0] | 0;
              i17 = i18 + 1 | 0;
              if ((i17 | 0) == (i13 | 0)) {
                break L2433;
              } else {
                i20 = i20 - 1 | 0;
                i19 = i19 - 3 | 0;
                i18 = i17;
              }
            }
          }
        } while (0);
        HEAP8[i14] = 8;
        HEAP8[i1 + 243 | 0] = 24;
        HEAP32[i1 + 236 >> 2] = i7;
        HEAP8[i9] = 2;
        HEAP8[i1 + 242 | 0] = 3;
        break;
      }
      i15 = i13 << 2;
      L2439 : do {
        if ((i13 | 0) != 0) {
          i18 = i16;
          i19 = i5 + i15 | 0;
          i20 = 0;
          while (1) {
            i17 = HEAPU8[i18] | 0;
            if (i17 >>> 0 < i12 >>> 0) {
              i23 = HEAP8[i11 + i17 | 0] | 0;
            } else {
              i23 = -1;
            }
            HEAP8[i19] = i23;
            HEAP8[i19 - 1 | 0] = HEAP8[i10 + ((HEAPU8[i18] | 0) * 3 & -1) + 2 | 0] | 0;
            HEAP8[i19 - 2 | 0] = HEAP8[i10 + ((HEAPU8[i18] | 0) * 3 & -1) + 1 | 0] | 0;
            HEAP8[i19 - 3 | 0] = HEAP8[i10 + ((HEAPU8[i18] | 0) * 3 & -1) | 0] | 0;
            i17 = i20 + 1 | 0;
            if ((i17 | 0) == (i13 | 0)) {
              break L2439;
            } else {
              i18 = i18 - 1 | 0;
              i19 = i19 - 4 | 0;
              i20 = i17;
            }
          }
        }
      } while (0);
      HEAP8[i14] = 8;
      HEAP8[i1 + 243 | 0] = 32;
      HEAP32[i1 + 236 >> 2] = i15;
      HEAP8[i9] = 6;
      HEAP8[i1 + 242 | 0] = 4;
    }
  } while (0);
  i23 = HEAP32[i6 >> 2] | 0;
  L2448 : do {
    if ((i23 & 262144 | 0) == 0) {
      i24 = i23;
    } else {
      i5 = i1 + 240 | 0;
      i8 = HEAP8[i5] | 0;
      if (!((i8 << 24 >> 24 | 0) == 6 | (i8 << 24 >> 24 | 0) == 4)) {
        i24 = i23;
        break;
      }
      i8 = HEAP32[i4 >> 2] | 0;
      i13 = i8 + 1 | 0;
      i10 = i1 + 236 | 0;
      i11 = HEAP32[i10 >> 2] | 0;
      i12 = i8 + (i11 + 1 | 0) | 0;
      i16 = i1 + 242 | 0;
      i7 = HEAP8[i16] | 0;
      do {
        if ((i7 << 24 >> 24 | 0) == 2) {
          i20 = HEAP8[i1 + 241 | 0] | 0;
          if ((i20 << 24 >> 24 | 0) == 8) {
            i19 = i8 + 2 | 0;
            L2455 : do {
              if ((i11 | 0) > 2) {
                i18 = i19;
                i17 = i8 + 3 | 0;
                while (1) {
                  i21 = i18 + 1 | 0;
                  HEAP8[i18] = HEAP8[i17] | 0;
                  i22 = i17 + 2 | 0;
                  if (i22 >>> 0 < i12 >>> 0) {
                    i18 = i21;
                    i17 = i22;
                  } else {
                    i25 = i21;
                    break L2455;
                  }
                }
              } else {
                i25 = i19;
              }
            } while (0);
            HEAP8[i1 + 243 | 0] = 8;
            i26 = i25;
          } else if ((i20 << 24 >> 24 | 0) == 16) {
            i19 = i8 + 3 | 0;
            L2461 : do {
              if ((i11 | 0) > 4) {
                i17 = i19;
                i18 = i8 + 5 | 0;
                while (1) {
                  HEAP8[i17] = HEAP8[i18] | 0;
                  i21 = i17 + 2 | 0;
                  HEAP8[i17 + 1 | 0] = HEAP8[i18 + 1 | 0] | 0;
                  i22 = i18 + 4 | 0;
                  if (i22 >>> 0 < i12 >>> 0) {
                    i17 = i21;
                    i18 = i22;
                  } else {
                    i27 = i21;
                    break L2461;
                  }
                }
              } else {
                i27 = i19;
              }
            } while (0);
            HEAP8[i1 + 243 | 0] = 16;
            i26 = i27;
          } else {
            i24 = i23;
            break L2448;
          }
          HEAP8[i16] = 1;
          if (HEAP8[i5] << 24 >> 24 != 4) {
            i28 = i26;
            break;
          }
          HEAP8[i5] = 0;
          i28 = i26;
        } else if ((i7 << 24 >> 24 | 0) == 4) {
          i19 = HEAP8[i1 + 241 | 0] | 0;
          if ((i19 << 24 >> 24 | 0) == 8) {
            i20 = i8 + 4 | 0;
            L2471 : do {
              if ((i11 | 0) > 4) {
                i18 = i20;
                i17 = i8 + 5 | 0;
                while (1) {
                  HEAP8[i18] = HEAP8[i17] | 0;
                  HEAP8[i18 + 1 | 0] = HEAP8[i17 + 1 | 0] | 0;
                  i21 = i18 + 3 | 0;
                  HEAP8[i18 + 2 | 0] = HEAP8[i17 + 2 | 0] | 0;
                  i22 = i17 + 4 | 0;
                  if (i22 >>> 0 < i12 >>> 0) {
                    i18 = i21;
                    i17 = i22;
                  } else {
                    i29 = i21;
                    break L2471;
                  }
                }
              } else {
                i29 = i20;
              }
            } while (0);
            HEAP8[i1 + 243 | 0] = 24;
            i30 = i29;
          } else if ((i19 << 24 >> 24 | 0) == 16) {
            i20 = i8 + 7 | 0;
            L2477 : do {
              if ((i11 | 0) > 8) {
                i17 = i20;
                i18 = i8 + 9 | 0;
                while (1) {
                  HEAP8[i17] = HEAP8[i18] | 0;
                  HEAP8[i17 + 1 | 0] = HEAP8[i18 + 1 | 0] | 0;
                  HEAP8[i17 + 2 | 0] = HEAP8[i18 + 2 | 0] | 0;
                  HEAP8[i17 + 3 | 0] = HEAP8[i18 + 3 | 0] | 0;
                  HEAP8[i17 + 4 | 0] = HEAP8[i18 + 4 | 0] | 0;
                  i21 = i17 + 6 | 0;
                  HEAP8[i17 + 5 | 0] = HEAP8[i18 + 5 | 0] | 0;
                  i22 = i18 + 8 | 0;
                  if (i22 >>> 0 < i12 >>> 0) {
                    i17 = i21;
                    i18 = i22;
                  } else {
                    i31 = i21;
                    break L2477;
                  }
                }
              } else {
                i31 = i20;
              }
            } while (0);
            HEAP8[i1 + 243 | 0] = 48;
            i30 = i31;
          } else {
            i24 = i23;
            break L2448;
          }
          HEAP8[i16] = 3;
          if (HEAP8[i5] << 24 >> 24 != 6) {
            i28 = i30;
            break;
          }
          HEAP8[i5] = 2;
          i28 = i30;
        } else {
          i24 = i23;
          break L2448;
        }
      } while (0);
      HEAP32[i10 >> 2] = i28 - i13 | 0;
      i24 = HEAP32[i6 >> 2] | 0;
    }
  } while (0);
  do {
    if ((i24 & 6291456 | 0) == 0) {
      i32 = i24;
    } else {
      i28 = (HEAP32[i4 >> 2] | 0) + 1 | 0;
      i23 = HEAP32[i1 + 232 >> 2] | 0;
      i30 = i1 + 240 | 0;
      i31 = HEAP8[i30] | 0;
      if ((i31 & 3) << 24 >> 24 != 2) {
        i32 = i24;
        break;
      }
      i29 = HEAPU16[i1 + 530 >> 1] | 0;
      i26 = HEAPU16[i1 + 532 >> 1] | 0;
      i27 = HEAPU16[i1 + 534 >> 1] | 0;
      i25 = i1 + 241 | 0;
      L2489 : do {
        if (i31 << 24 >> 24 == 2) {
          if (HEAP8[i25] << 24 >> 24 != 8) {
            i5 = i1 + 352 | 0;
            do {
              if ((HEAP32[i5 >> 2] | 0) != 0) {
                i16 = i1 + 348 | 0;
                if ((HEAP32[i16 >> 2] | 0) == 0) {
                  break;
                }
                if ((i23 | 0) == 0) {
                  i33 = 0;
                  i34 = i25;
                  break L2489;
                }
                i12 = i1 + 320 | 0;
                i8 = i28;
                i11 = i28;
                i7 = 0;
                i9 = 0;
                while (1) {
                  i15 = (HEAPU8[i11] | 0) << 8 | (HEAPU8[i11 + 1 | 0] | 0);
                  i14 = HEAPU8[i11 + 2 | 0] | 0;
                  i20 = HEAPU8[i11 + 3 | 0] | 0;
                  i19 = (HEAPU8[i11 + 4 | 0] | 0) << 8 | (HEAPU8[i11 + 5 | 0] | 0);
                  i18 = i15 & 65535;
                  if ((i18 | 0) == (i14 << 8 | i20 | 0) & i15 << 16 >> 16 == i19 << 16 >> 16) {
                    i35 = i7;
                    i36 = i15;
                  } else {
                    i15 = HEAP32[i12 >> 2] | 0;
                    i17 = HEAP32[i5 >> 2] | 0;
                    i21 = HEAP16[(HEAP32[i17 + (i20 >>> (i15 >>> 0) << 2) >> 2] | 0) + (i14 << 1) >> 1] | 0;
                    i14 = i19 & 65535;
                    i19 = HEAP16[(HEAP32[i17 + ((i14 & 255) >>> (i15 >>> 0) << 2) >> 2] | 0) + (i14 >>> 8 << 1) >> 1] | 0;
                    i14 = Math_imul(HEAPU16[(HEAP32[i17 + ((i18 & 255) >>> (i15 >>> 0) << 2) >> 2] | 0) + (i18 >>> 8 << 1) >> 1] | 0, i29);
                    i18 = Math_imul(i21 & 65535, i26) + i14 | 0;
                    i14 = i18 + Math_imul(i19 & 65535, i27) | 0;
                    i35 = i7 | 1;
                    i36 = HEAP16[(HEAP32[(HEAP32[i16 >> 2] | 0) + ((i14 >>> 15 & 255) >>> (i15 >>> 0) << 2) >> 2] | 0) + ((i14 >>> 23 & 255) << 1) >> 1] | 0;
                  }
                  HEAP8[i8] = (i36 & 65535) >>> 8 & 255;
                  HEAP8[i8 + 1 | 0] = i36 & 255;
                  i14 = i9 + 1 | 0;
                  if ((i14 | 0) == (i23 | 0)) {
                    i33 = i35;
                    i34 = i25;
                    break L2489;
                  } else {
                    i8 = i8 + 2 | 0;
                    i11 = i11 + 6 | 0;
                    i7 = i35;
                    i9 = i14;
                  }
                }
              }
            } while (0);
            if ((i23 | 0) == 0) {
              i33 = 0;
              i34 = i25;
              break;
            } else {
              i37 = i28;
              i38 = i28;
              i39 = 0;
              i40 = 0;
            }
            while (1) {
              i5 = (HEAPU8[i38] | 0) << 8 | (HEAPU8[i38 + 1 | 0] | 0);
              i9 = (HEAPU8[i38 + 2 | 0] | 0) << 8 | (HEAPU8[i38 + 3 | 0] | 0);
              i7 = (HEAPU8[i38 + 4 | 0] | 0) << 8 | (HEAPU8[i38 + 5 | 0] | 0);
              i11 = i39 | (i5 | 0) == (i9 | 0) & (i5 | 0) == (i7 | 0) & 1 ^ 1;
              i8 = Math_imul(i5, i29);
              i5 = Math_imul(i9, i26) + i8 | 0;
              i8 = i5 + Math_imul(i7, i27) | 0;
              HEAP8[i37] = i8 >>> 23 & 255;
              HEAP8[i37 + 1 | 0] = i8 >>> 15 & 255;
              i8 = i40 + 1 | 0;
              if ((i8 | 0) == (i23 | 0)) {
                i33 = i11;
                i34 = i25;
                break L2489;
              } else {
                i37 = i37 + 2 | 0;
                i38 = i38 + 6 | 0;
                i39 = i11;
                i40 = i8;
              }
            }
          }
          i8 = i1 + 336 | 0;
          do {
            if ((HEAP32[i8 >> 2] | 0) != 0) {
              i11 = i1 + 340 | 0;
              i7 = HEAP32[i11 >> 2] | 0;
              if ((i7 | 0) == 0) {
                break;
              }
              if ((i23 | 0) == 0) {
                i33 = 0;
                i34 = i25;
                break L2489;
              } else {
                i41 = i28;
                i42 = i28;
                i43 = 0;
                i44 = 1;
                i45 = i7;
              }
              while (1) {
                i7 = HEAP8[i45 + (HEAPU8[i42] | 0) | 0] | 0;
                i5 = HEAP8[i45 + (HEAPU8[i42 + 1 | 0] | 0) | 0] | 0;
                i9 = HEAP8[i42 + 2 | 0] | 0;
                i16 = HEAP8[i45 + (i9 & 255) | 0] | 0;
                if (i7 << 24 >> 24 == i5 << 24 >> 24 & i7 << 24 >> 24 == i16 << 24 >> 24) {
                  i46 = i43;
                  i47 = i9;
                } else {
                  i9 = Math_imul(i7 & 255, i29);
                  i7 = Math_imul(i5 & 255, i26) + i9 | 0;
                  i9 = (i7 + Math_imul(i16 & 255, i27) | 0) >>> 15;
                  i46 = i43 | 1;
                  i47 = HEAP8[(HEAP32[i8 >> 2] | 0) + i9 | 0] | 0;
                }
                HEAP8[i41] = i47;
                if ((i44 | 0) == (i23 | 0)) {
                  i33 = i46;
                  i34 = i25;
                  break L2489;
                }
                i41 = i41 + 1 | 0;
                i42 = i42 + 3 | 0;
                i43 = i46;
                i44 = i44 + 1 | 0;
                i45 = HEAP32[i11 >> 2] | 0;
              }
            }
          } while (0);
          if ((i23 | 0) == 0) {
            i33 = 0;
            i34 = i25;
            break;
          } else {
            i48 = i28;
            i49 = i28;
            i50 = 0;
            i51 = 0;
          }
          while (1) {
            i8 = HEAP8[i49] | 0;
            i11 = HEAP8[i49 + 1 | 0] | 0;
            i9 = HEAP8[i49 + 2 | 0] | 0;
            if (i8 << 24 >> 24 == i11 << 24 >> 24 & i8 << 24 >> 24 == i9 << 24 >> 24) {
              i52 = i50;
              i53 = i8;
            } else {
              i16 = Math_imul(i8 & 255, i29);
              i8 = Math_imul(i11 & 255, i26) + i16 | 0;
              i52 = i50 | 1;
              i53 = (i8 + Math_imul(i9 & 255, i27) | 0) >>> 15 & 255;
            }
            HEAP8[i48] = i53;
            i9 = i51 + 1 | 0;
            if ((i9 | 0) == (i23 | 0)) {
              i33 = i52;
              i34 = i25;
              break L2489;
            } else {
              i48 = i48 + 1 | 0;
              i49 = i49 + 3 | 0;
              i50 = i52;
              i51 = i9;
            }
          }
        } else {
          i33 = 0;
          i34 = i25;
        }
      } while (0);
      L2522 : do {
        if (HEAP8[i30] << 24 >> 24 == 6) {
          if (HEAP8[i34] << 24 >> 24 == 8) {
            i25 = i1 + 336 | 0;
            i31 = HEAP32[i25 >> 2] | 0;
            do {
              if ((i31 | 0) != 0) {
                i13 = i1 + 340 | 0;
                i10 = HEAP32[i13 >> 2] | 0;
                if ((i10 | 0) == 0) {
                  break;
                }
                if ((i23 | 0) == 0) {
                  i54 = i33;
                  break L2522;
                } else {
                  i55 = i28;
                  i56 = i28;
                  i57 = i33;
                  i58 = 1;
                  i59 = i10;
                  i60 = i31;
                }
                while (1) {
                  i10 = HEAP8[i59 + (HEAPU8[i56] | 0) | 0] | 0;
                  i9 = HEAP8[i59 + (HEAPU8[i56 + 1 | 0] | 0) | 0] | 0;
                  i8 = HEAP8[i59 + (HEAPU8[i56 + 2 | 0] | 0) | 0] | 0;
                  i16 = i10 << 24 >> 24 == i9 << 24 >> 24 & i10 << 24 >> 24 == i8 << 24 >> 24 & 1 ^ 1 | i57;
                  i11 = Math_imul(i10 & 255, i29);
                  i10 = Math_imul(i9 & 255, i26) + i11 | 0;
                  HEAP8[i55] = HEAP8[i60 + ((i10 + Math_imul(i8 & 255, i27) | 0) >>> 15) | 0] | 0;
                  HEAP8[i55 + 1 | 0] = HEAP8[i56 + 3 | 0] | 0;
                  if ((i58 | 0) == (i23 | 0)) {
                    i54 = i16;
                    break L2522;
                  }
                  i55 = i55 + 2 | 0;
                  i56 = i56 + 4 | 0;
                  i57 = i16;
                  i58 = i58 + 1 | 0;
                  i59 = HEAP32[i13 >> 2] | 0;
                  i60 = HEAP32[i25 >> 2] | 0;
                }
              }
            } while (0);
            if ((i23 | 0) == 0) {
              i54 = i33;
              break;
            } else {
              i61 = i28;
              i62 = i28;
              i63 = i33;
              i64 = 0;
            }
            while (1) {
              i25 = HEAP8[i62] | 0;
              i31 = HEAP8[i62 + 1 | 0] | 0;
              i13 = HEAP8[i62 + 2 | 0] | 0;
              i16 = i25 << 24 >> 24 == i31 << 24 >> 24 & i25 << 24 >> 24 == i13 << 24 >> 24 & 1 ^ 1 | i63;
              i8 = Math_imul(i25 & 255, i29);
              i25 = Math_imul(i31 & 255, i26) + i8 | 0;
              HEAP8[i61] = (i25 + Math_imul(i13 & 255, i27) | 0) >>> 15 & 255;
              HEAP8[i61 + 1 | 0] = HEAP8[i62 + 3 | 0] | 0;
              i13 = i64 + 1 | 0;
              if ((i13 | 0) == (i23 | 0)) {
                i54 = i16;
                break L2522;
              } else {
                i61 = i61 + 2 | 0;
                i62 = i62 + 4 | 0;
                i63 = i16;
                i64 = i13;
              }
            }
          }
          i13 = i1 + 352 | 0;
          do {
            if ((HEAP32[i13 >> 2] | 0) != 0) {
              i16 = i1 + 348 | 0;
              if ((HEAP32[i16 >> 2] | 0) == 0) {
                break;
              }
              if ((i23 | 0) == 0) {
                i54 = i33;
                break L2522;
              }
              i25 = i1 + 320 | 0;
              i8 = i28;
              i31 = i28;
              i10 = i33;
              i11 = 0;
              while (1) {
                i9 = (HEAPU8[i8] | 0) << 8 | (HEAPU8[i8 + 1 | 0] | 0);
                i7 = HEAPU8[i8 + 2 | 0] | 0;
                i5 = HEAPU8[i8 + 3 | 0] | 0;
                i12 = (HEAPU8[i8 + 4 | 0] | 0) << 8 | (HEAPU8[i8 + 5 | 0] | 0);
                i14 = i9 & 65535;
                if ((i14 | 0) == (i7 << 8 | i5 | 0) & i9 << 16 >> 16 == i12 << 16 >> 16) {
                  i65 = i10;
                  i66 = i9;
                } else {
                  i9 = HEAP32[i25 >> 2] | 0;
                  i15 = HEAP32[i13 >> 2] | 0;
                  i19 = HEAP16[(HEAP32[i15 + (i5 >>> (i9 >>> 0) << 2) >> 2] | 0) + (i7 << 1) >> 1] | 0;
                  i7 = i12 & 65535;
                  i12 = HEAP16[(HEAP32[i15 + ((i7 & 255) >>> (i9 >>> 0) << 2) >> 2] | 0) + (i7 >>> 8 << 1) >> 1] | 0;
                  i7 = Math_imul(HEAPU16[(HEAP32[i15 + ((i14 & 255) >>> (i9 >>> 0) << 2) >> 2] | 0) + (i14 >>> 8 << 1) >> 1] | 0, i29);
                  i14 = Math_imul(i19 & 65535, i26) + i7 | 0;
                  i7 = i14 + Math_imul(i12 & 65535, i27) | 0;
                  i65 = i10 | 1;
                  i66 = HEAP16[(HEAP32[(HEAP32[i16 >> 2] | 0) + ((i7 >>> 15 & 255) >>> (i9 >>> 0) << 2) >> 2] | 0) + ((i7 >>> 23 & 255) << 1) >> 1] | 0;
                }
                HEAP8[i31] = (i66 & 65535) >>> 8 & 255;
                HEAP8[i31 + 1 | 0] = i66 & 255;
                HEAP8[i31 + 2 | 0] = HEAP8[i8 + 6 | 0] | 0;
                HEAP8[i31 + 3 | 0] = HEAP8[i8 + 7 | 0] | 0;
                i7 = i11 + 1 | 0;
                if ((i7 | 0) == (i23 | 0)) {
                  i54 = i65;
                  break L2522;
                } else {
                  i8 = i8 + 8 | 0;
                  i31 = i31 + 4 | 0;
                  i10 = i65;
                  i11 = i7;
                }
              }
            }
          } while (0);
          if ((i23 | 0) == 0) {
            i54 = i33;
            break;
          } else {
            i67 = i28;
            i68 = i28;
            i69 = i33;
            i70 = 0;
          }
          while (1) {
            i13 = (HEAPU8[i67] | 0) << 8 | (HEAPU8[i67 + 1 | 0] | 0);
            i11 = (HEAPU8[i67 + 2 | 0] | 0) << 8 | (HEAPU8[i67 + 3 | 0] | 0);
            i10 = (HEAPU8[i67 + 4 | 0] | 0) << 8 | (HEAPU8[i67 + 5 | 0] | 0);
            i31 = i69 | (i13 | 0) == (i11 | 0) & (i13 | 0) == (i10 | 0) & 1 ^ 1;
            i8 = Math_imul(i13, i29);
            i13 = Math_imul(i11, i26) + i8 | 0;
            i8 = i13 + Math_imul(i10, i27) | 0;
            HEAP8[i68] = i8 >>> 23 & 255;
            HEAP8[i68 + 1 | 0] = i8 >>> 15 & 255;
            HEAP8[i68 + 2 | 0] = HEAP8[i67 + 6 | 0] | 0;
            HEAP8[i68 + 3 | 0] = HEAP8[i67 + 7 | 0] | 0;
            i8 = i70 + 1 | 0;
            if ((i8 | 0) == (i23 | 0)) {
              i54 = i31;
              break L2522;
            } else {
              i67 = i67 + 8 | 0;
              i68 = i68 + 4 | 0;
              i69 = i31;
              i70 = i8;
            }
          }
        } else {
          i54 = i33;
        }
      } while (0);
      i27 = i1 + 242 | 0;
      i26 = (HEAP8[i27] | 0) - 2 & 255;
      HEAP8[i27] = i26;
      HEAP8[i30] = HEAP8[i30] & -3;
      i27 = Math_imul(HEAP8[i34] | 0, i26);
      HEAP8[i1 + 243 | 0] = i27;
      i26 = i27 & 255;
      if ((i27 & 255) > 7) {
        i71 = Math_imul(i26 >>> 3, i23);
      } else {
        i71 = (Math_imul(i26, i23) + 7 | 0) >>> 3;
      }
      HEAP32[i1 + 236 >> 2] = i71;
      if ((i54 | 0) == 0) {
        i32 = HEAP32[i6 >> 2] | 0;
        break;
      }
      HEAP8[i1 + 528 | 0] = 1;
      L2556 : do {
        if ((HEAP32[i6 >> 2] & 6291456 | 0) == 4194304) {
          do {
            if ((i1 | 0) != 0) {
              i26 = HEAP32[i1 + 48 >> 2] | 0;
              if ((i26 | 0) == 0) {
                break;
              }
              FUNCTION_TABLE_vii[i26 & 511](i1, 5274380);
              break L2556;
            }
          } while (0);
          _fprintf(HEAP32[_stderr >> 2] | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5274380, tempInt) | 0) | 0;
          _fputc(10, HEAP32[_stderr >> 2] | 0) | 0;
        }
      } while (0);
      i23 = HEAP32[i6 >> 2] | 0;
      if ((i23 & 6291456 | 0) != 2097152) {
        i32 = i23;
        break;
      }
      _png_error(i1, 5274380);
    }
  } while (0);
  do {
    if ((i32 & 16384 | 0) == 0) {
      i72 = i32;
    } else {
      if ((HEAP32[i1 + 84 >> 2] & 2048 | 0) != 0) {
        i72 = i32;
        break;
      }
      _png_do_gray_to_rgb(i1 + 232 | 0, (HEAP32[i4 >> 2] | 0) + 1 | 0);
      i72 = HEAP32[i6 >> 2] | 0;
    }
  } while (0);
  do {
    if ((i72 & 128 | 0) == 0) {
      i73 = i72;
    } else {
      if (HEAP16[i1 + 258 >> 1] << 16 >> 16 == 0) {
        if ((HEAP8[i1 + 270 | 0] & 4) << 24 >> 24 == 0) {
          i73 = i72;
          break;
        }
      }
      i32 = (HEAP32[i4 >> 2] | 0) + 1 | 0;
      i54 = i1 + 372 | 0;
      i71 = HEAP32[i1 + 332 >> 2] | 0;
      i34 = HEAP32[i1 + 336 >> 2] | 0;
      i33 = HEAP32[i1 + 340 >> 2] | 0;
      i70 = HEAP32[i1 + 344 >> 2] | 0;
      i69 = HEAP32[i1 + 348 >> 2] | 0;
      i68 = HEAP32[i1 + 352 >> 2] | 0;
      i67 = HEAP32[i1 + 320 >> 2] | 0;
      i65 = HEAP32[i1 + 232 >> 2] | 0;
      do {
        if ((i1 + 288 | 0) != 0) {
          i66 = i1 + 240 | 0;
          i64 = HEAP8[i66] | 0;
          if ((i64 & 4) << 24 >> 24 != 0) {
            if (i64 << 24 >> 24 == 3 | (i54 | 0) == 0) {
              break;
            }
          }
          i63 = i64 & 255;
          L2579 : do {
            if ((i63 | 0) == 4) {
              if (HEAP8[i1 + 241 | 0] << 24 >> 24 == 8) {
                i64 = (i65 | 0) == 0;
                if ((i33 | 0) == 0 | (i34 | 0) == 0 | (i71 | 0) == 0) {
                  if (i64) {
                    break;
                  }
                  i62 = i1 + 306 | 0;
                  i61 = i1 + 296 | 0;
                  i60 = 0;
                  i59 = i32;
                  i58 = i32;
                  while (1) {
                    i57 = HEAP8[i58 + 1 | 0] | 0;
                    if ((i57 << 24 >> 24 | 0) == (-1 | 0)) {
                      HEAP8[i59] = HEAP8[i58] | 0;
                    } else if ((i57 << 24 >> 24 | 0) == 0) {
                      HEAP8[i59] = HEAP16[i61 >> 1] & 255;
                    } else {
                      i56 = i57 & 255;
                      i57 = Math_imul(HEAPU8[i58] | 0, i56);
                      i55 = (i57 + 128 | 0) + Math_imul(HEAPU16[i62 >> 1] | 0, i56 ^ 255) | 0;
                      HEAP8[i59] = ((i55 >>> 8 & 255) + i55 | 0) >>> 8 & 255;
                    }
                    i55 = i60 + 1 | 0;
                    if ((i55 | 0) == (i65 | 0)) {
                      break L2579;
                    } else {
                      i60 = i55;
                      i59 = i59 + 1 | 0;
                      i58 = i58 + 2 | 0;
                    }
                  }
                } else {
                  if (i64) {
                    break;
                  }
                  i58 = i1 + 306 | 0;
                  i59 = i1 + 296 | 0;
                  i60 = 0;
                  i62 = i32;
                  i61 = i32;
                  while (1) {
                    i55 = HEAP8[i61 + 1 | 0] | 0;
                    i56 = i55 & 255;
                    if ((i55 << 24 >> 24 | 0) == (-1 | 0)) {
                      HEAP8[i62] = HEAP8[i71 + (HEAPU8[i61] | 0) | 0] | 0;
                    } else if ((i55 << 24 >> 24 | 0) == 0) {
                      HEAP8[i62] = HEAP16[i59 >> 1] & 255;
                    } else {
                      i55 = Math_imul(HEAPU8[i33 + (HEAPU8[i61] | 0) | 0] | 0, i56);
                      i57 = (i55 + 128 | 0) + Math_imul(HEAPU16[i58 >> 1] | 0, i56 ^ 255) | 0;
                      HEAP8[i62] = HEAP8[i34 + (((i57 >>> 8 & 255) + i57 | 0) >>> 8 & 255) | 0] | 0;
                    }
                    i57 = i60 + 1 | 0;
                    if ((i57 | 0) == (i65 | 0)) {
                      break L2579;
                    } else {
                      i60 = i57;
                      i62 = i62 + 1 | 0;
                      i61 = i61 + 2 | 0;
                    }
                  }
                }
              } else {
                i61 = (i65 | 0) == 0;
                if ((i70 | 0) == 0 | (i69 | 0) == 0 | (i68 | 0) == 0) {
                  if (i61) {
                    break;
                  }
                  i62 = i1 + 306 | 0;
                  i60 = i1 + 296 | 0;
                  i58 = 0;
                  i59 = i32;
                  i64 = i32;
                  while (1) {
                    i57 = (HEAPU8[i64 + 2 | 0] | 0) << 8 | (HEAPU8[i64 + 3 | 0] | 0);
                    if ((i57 | 0) == 65535) {
                      i56 = i64;
                      i55 = i59;
                      tempBigInt = (tempInt = HEAPU8[i56] | HEAPU8[i56 + 1 | 0] << 8, tempInt << 16 >> 16);
                      HEAP8[i55] = tempBigInt & 255;
                      tempBigInt = tempBigInt >> 8;
                      HEAP8[i55 + 1 | 0] = tempBigInt & 255;
                    } else if ((i57 | 0) == 0) {
                      HEAP8[i59] = (HEAPU16[i60 >> 1] | 0) >>> 8 & 255;
                      HEAP8[i59 + 1 | 0] = HEAP16[i60 >> 1] & 255;
                    } else {
                      i55 = Math_imul((HEAPU8[i64] | 0) << 8 | (HEAPU8[i64 + 1 | 0] | 0), i57);
                      i56 = (Math_imul(HEAPU16[i62 >> 1] | 0, i57 ^ 65535) + 32768 | 0) + i55 | 0;
                      i55 = (i56 >>> 16) + i56 | 0;
                      HEAP8[i59] = i55 >>> 24 & 255;
                      HEAP8[i59 + 1 | 0] = i55 >>> 16 & 255;
                    }
                    i55 = i58 + 1 | 0;
                    if ((i55 | 0) == (i65 | 0)) {
                      break L2579;
                    } else {
                      i58 = i55;
                      i59 = i59 + 2 | 0;
                      i64 = i64 + 4 | 0;
                    }
                  }
                } else {
                  if (i61) {
                    break;
                  }
                  i64 = i1 + 306 | 0;
                  i59 = i1 + 296 | 0;
                  i58 = 0;
                  i62 = i32;
                  i60 = i32;
                  while (1) {
                    i55 = (HEAPU8[i60 + 2 | 0] | 0) << 8 | (HEAPU8[i60 + 3 | 0] | 0);
                    if ((i55 | 0) == 65535) {
                      i56 = HEAP16[(HEAP32[i70 + ((HEAPU8[i60 + 1 | 0] | 0) >>> (i67 >>> 0) << 2) >> 2] | 0) + ((HEAPU8[i60] | 0) << 1) >> 1] | 0;
                      HEAP8[i62] = (i56 & 65535) >>> 8 & 255;
                      HEAP8[i62 + 1 | 0] = i56 & 255;
                    } else if ((i55 | 0) == 0) {
                      HEAP8[i62] = (HEAPU16[i59 >> 1] | 0) >>> 8 & 255;
                      HEAP8[i62 + 1 | 0] = HEAP16[i59 >> 1] & 255;
                    } else {
                      i56 = Math_imul(HEAPU16[(HEAP32[i68 + ((HEAPU8[i60 + 1 | 0] | 0) >>> (i67 >>> 0) << 2) >> 2] | 0) + ((HEAPU8[i60] | 0) << 1) >> 1] | 0, i55);
                      i57 = (i56 + 32768 | 0) + Math_imul(HEAPU16[i64 >> 1] | 0, i55 ^ 65535) | 0;
                      i55 = (i57 >>> 16) + i57 | 0;
                      i57 = HEAP16[(HEAP32[i69 + ((i55 >>> 16 & 255) >>> (i67 >>> 0) << 2) >> 2] | 0) + (i55 >>> 24 << 1) >> 1] | 0;
                      HEAP8[i62] = (i57 & 65535) >>> 8 & 255;
                      HEAP8[i62 + 1 | 0] = i57 & 255;
                    }
                    i57 = i58 + 1 | 0;
                    if ((i57 | 0) == (i65 | 0)) {
                      break L2579;
                    } else {
                      i58 = i57;
                      i62 = i62 + 2 | 0;
                      i60 = i60 + 4 | 0;
                    }
                  }
                }
              }
            } else if ((i63 | 0) == 6) {
              if (HEAP8[i1 + 241 | 0] << 24 >> 24 == 8) {
                i60 = (i65 | 0) == 0;
                if ((i33 | 0) == 0 | (i34 | 0) == 0 | (i71 | 0) == 0) {
                  if (i60) {
                    break;
                  }
                  i62 = i1 + 290 | 0;
                  i58 = i1 + 292 | 0;
                  i64 = i1 + 294 | 0;
                  i59 = 0;
                  i61 = i32;
                  i57 = i32;
                  while (1) {
                    i55 = HEAP8[i57 + 3 | 0] | 0;
                    if ((i55 << 24 >> 24 | 0) == (-1 | 0)) {
                      HEAP8[i61] = HEAP8[i57] | 0;
                      HEAP8[i61 + 1 | 0] = HEAP8[i57 + 1 | 0] | 0;
                      HEAP8[i61 + 2 | 0] = HEAP8[i57 + 2 | 0] | 0;
                    } else if ((i55 << 24 >> 24 | 0) == 0) {
                      HEAP8[i61] = HEAP16[i62 >> 1] & 255;
                      HEAP8[i61 + 1 | 0] = HEAP16[i58 >> 1] & 255;
                      HEAP8[i61 + 2 | 0] = HEAP16[i64 >> 1] & 255;
                    } else {
                      i56 = i55 & 255;
                      i55 = Math_imul(HEAPU8[i57] | 0, i56);
                      i51 = i56 ^ 255;
                      i52 = (i55 + 128 | 0) + Math_imul(HEAPU16[i62 >> 1] | 0, i51) | 0;
                      HEAP8[i61] = ((i52 >>> 8 & 255) + i52 | 0) >>> 8 & 255;
                      i52 = Math_imul(HEAPU8[i57 + 1 | 0] | 0, i56);
                      i55 = (i52 + 128 | 0) + Math_imul(HEAPU16[i58 >> 1] | 0, i51) | 0;
                      HEAP8[i61 + 1 | 0] = ((i55 >>> 8 & 255) + i55 | 0) >>> 8 & 255;
                      i55 = Math_imul(HEAPU8[i57 + 2 | 0] | 0, i56);
                      i56 = (i55 + 128 | 0) + Math_imul(HEAPU16[i64 >> 1] | 0, i51) | 0;
                      HEAP8[i61 + 2 | 0] = ((i56 >>> 8 & 255) + i56 | 0) >>> 8 & 255;
                    }
                    i56 = i59 + 1 | 0;
                    if ((i56 | 0) == (i65 | 0)) {
                      break L2579;
                    } else {
                      i59 = i56;
                      i61 = i61 + 3 | 0;
                      i57 = i57 + 4 | 0;
                    }
                  }
                } else {
                  if (i60) {
                    break;
                  }
                  i57 = i1 + 300 | 0;
                  i61 = i1 + 302 | 0;
                  i59 = i1 + 304 | 0;
                  i64 = i1 + 290 | 0;
                  i58 = i1 + 292 | 0;
                  i62 = i1 + 294 | 0;
                  i56 = 0;
                  i51 = i32;
                  i55 = i32;
                  while (1) {
                    i52 = HEAP8[i55 + 3 | 0] | 0;
                    if ((i52 << 24 >> 24 | 0) == (-1 | 0)) {
                      HEAP8[i51] = HEAP8[i71 + (HEAPU8[i55] | 0) | 0] | 0;
                      HEAP8[i51 + 1 | 0] = HEAP8[i71 + (HEAPU8[i55 + 1 | 0] | 0) | 0] | 0;
                      HEAP8[i51 + 2 | 0] = HEAP8[i71 + (HEAPU8[i55 + 2 | 0] | 0) | 0] | 0;
                    } else if ((i52 << 24 >> 24 | 0) == 0) {
                      HEAP8[i51] = HEAP16[i64 >> 1] & 255;
                      HEAP8[i51 + 1 | 0] = HEAP16[i58 >> 1] & 255;
                      HEAP8[i51 + 2 | 0] = HEAP16[i62 >> 1] & 255;
                    } else {
                      i50 = i52 & 255;
                      i52 = Math_imul(HEAPU8[i33 + (HEAPU8[i55] | 0) | 0] | 0, i50);
                      i49 = i50 ^ 255;
                      i48 = (i52 + 128 | 0) + Math_imul(HEAPU16[i57 >> 1] | 0, i49) | 0;
                      HEAP8[i51] = HEAP8[i34 + (((i48 >>> 8 & 255) + i48 | 0) >>> 8 & 255) | 0] | 0;
                      i48 = Math_imul(HEAPU8[i33 + (HEAPU8[i55 + 1 | 0] | 0) | 0] | 0, i50);
                      i52 = (i48 + 128 | 0) + Math_imul(HEAPU16[i61 >> 1] | 0, i49) | 0;
                      HEAP8[i51 + 1 | 0] = HEAP8[i34 + (((i52 >>> 8 & 255) + i52 | 0) >>> 8 & 255) | 0] | 0;
                      i52 = Math_imul(HEAPU8[i33 + (HEAPU8[i55 + 2 | 0] | 0) | 0] | 0, i50);
                      i50 = (i52 + 128 | 0) + Math_imul(HEAPU16[i59 >> 1] | 0, i49) | 0;
                      HEAP8[i51 + 2 | 0] = HEAP8[i34 + (((i50 >>> 8 & 255) + i50 | 0) >>> 8 & 255) | 0] | 0;
                    }
                    i50 = i56 + 1 | 0;
                    if ((i50 | 0) == (i65 | 0)) {
                      break L2579;
                    } else {
                      i56 = i50;
                      i51 = i51 + 3 | 0;
                      i55 = i55 + 4 | 0;
                    }
                  }
                }
              } else {
                i55 = (i65 | 0) == 0;
                if ((i70 | 0) == 0 | (i69 | 0) == 0 | (i68 | 0) == 0) {
                  if (i55) {
                    break;
                  }
                  i51 = i1 + 290 | 0;
                  i56 = i1 + 292 | 0;
                  i59 = i1 + 294 | 0;
                  i61 = 0;
                  i57 = i32;
                  i62 = i32;
                  while (1) {
                    i58 = (HEAPU8[i62 + 6 | 0] | 0) << 8 | (HEAPU8[i62 + 7 | 0] | 0);
                    if ((i58 | 0) == 65535) {
                      HEAP8[i57] = HEAP8[i62] | 0;
                      HEAP8[i57 + 1 | 0] = HEAP8[i62 + 1 | 0] | 0;
                      HEAP8[i57 + 2 | 0] = HEAP8[i62 + 2 | 0] | 0;
                      HEAP8[i57 + 3 | 0] = HEAP8[i62 + 3 | 0] | 0;
                      HEAP8[i57 + 4 | 0] = HEAP8[i62 + 4 | 0] | 0;
                      HEAP8[i57 + 5 | 0] = HEAP8[i62 + 5 | 0] | 0;
                    } else if ((i58 | 0) == 0) {
                      HEAP8[i57] = (HEAPU16[i51 >> 1] | 0) >>> 8 & 255;
                      HEAP8[i57 + 1 | 0] = HEAP16[i51 >> 1] & 255;
                      HEAP8[i57 + 2 | 0] = (HEAPU16[i56 >> 1] | 0) >>> 8 & 255;
                      HEAP8[i57 + 3 | 0] = HEAP16[i56 >> 1] & 255;
                      HEAP8[i57 + 4 | 0] = (HEAPU16[i59 >> 1] | 0) >>> 8 & 255;
                      HEAP8[i57 + 5 | 0] = HEAP16[i59 >> 1] & 255;
                    } else {
                      i64 = (HEAPU8[i62 + 2 | 0] | 0) << 8 | (HEAPU8[i62 + 3 | 0] | 0);
                      i60 = (HEAPU8[i62 + 4 | 0] | 0) << 8 | (HEAPU8[i62 + 5 | 0] | 0);
                      i50 = Math_imul((HEAPU8[i62] | 0) << 8 | (HEAPU8[i62 + 1 | 0] | 0), i58);
                      i49 = i58 ^ 65535;
                      i52 = (i50 + 32768 | 0) + Math_imul(HEAPU16[i51 >> 1] | 0, i49) | 0;
                      i50 = (i52 >>> 16) + i52 | 0;
                      HEAP8[i57] = i50 >>> 24 & 255;
                      HEAP8[i57 + 1 | 0] = i50 >>> 16 & 255;
                      i50 = Math_imul(i64, i58);
                      i64 = (i50 + 32768 | 0) + Math_imul(HEAPU16[i56 >> 1] | 0, i49) | 0;
                      i50 = (i64 >>> 16) + i64 | 0;
                      HEAP8[i57 + 2 | 0] = i50 >>> 24 & 255;
                      HEAP8[i57 + 3 | 0] = i50 >>> 16 & 255;
                      i50 = Math_imul(i60, i58);
                      i58 = (i50 + 32768 | 0) + Math_imul(HEAPU16[i59 >> 1] | 0, i49) | 0;
                      i49 = (i58 >>> 16) + i58 | 0;
                      HEAP8[i57 + 4 | 0] = i49 >>> 24 & 255;
                      HEAP8[i57 + 5 | 0] = i49 >>> 16 & 255;
                    }
                    i49 = i61 + 1 | 0;
                    if ((i49 | 0) == (i65 | 0)) {
                      break L2579;
                    } else {
                      i61 = i49;
                      i57 = i57 + 6 | 0;
                      i62 = i62 + 8 | 0;
                    }
                  }
                } else {
                  if (i55) {
                    break;
                  }
                  i62 = i1 + 300 | 0;
                  i57 = i1 + 302 | 0;
                  i61 = i1 + 304 | 0;
                  i59 = i1 + 290 | 0;
                  i56 = i1 + 292 | 0;
                  i51 = i1 + 294 | 0;
                  i49 = 0;
                  i58 = i32;
                  i50 = i32;
                  while (1) {
                    i60 = (HEAPU8[i50 + 6 | 0] | 0) << 8 | (HEAPU8[i50 + 7 | 0] | 0);
                    if ((i60 | 0) == 65535) {
                      i64 = HEAP16[(HEAP32[i70 + ((HEAPU8[i50 + 1 | 0] | 0) >>> (i67 >>> 0) << 2) >> 2] | 0) + ((HEAPU8[i50] | 0) << 1) >> 1] | 0;
                      HEAP8[i58] = (i64 & 65535) >>> 8 & 255;
                      HEAP8[i58 + 1 | 0] = i64 & 255;
                      i64 = HEAP16[(HEAP32[i70 + ((HEAPU8[i50 + 3 | 0] | 0) >>> (i67 >>> 0) << 2) >> 2] | 0) + ((HEAPU8[i50 + 2 | 0] | 0) << 1) >> 1] | 0;
                      HEAP8[i58 + 2 | 0] = (i64 & 65535) >>> 8 & 255;
                      HEAP8[i58 + 3 | 0] = i64 & 255;
                      i64 = HEAP16[(HEAP32[i70 + ((HEAPU8[i50 + 5 | 0] | 0) >>> (i67 >>> 0) << 2) >> 2] | 0) + ((HEAPU8[i50 + 4 | 0] | 0) << 1) >> 1] | 0;
                      HEAP8[i58 + 4 | 0] = (i64 & 65535) >>> 8 & 255;
                      HEAP8[i58 + 5 | 0] = i64 & 255;
                    } else if ((i60 | 0) == 0) {
                      HEAP8[i58] = (HEAPU16[i59 >> 1] | 0) >>> 8 & 255;
                      HEAP8[i58 + 1 | 0] = HEAP16[i59 >> 1] & 255;
                      HEAP8[i58 + 2 | 0] = (HEAPU16[i56 >> 1] | 0) >>> 8 & 255;
                      HEAP8[i58 + 3 | 0] = HEAP16[i56 >> 1] & 255;
                      HEAP8[i58 + 4 | 0] = (HEAPU16[i51 >> 1] | 0) >>> 8 & 255;
                      HEAP8[i58 + 5 | 0] = HEAP16[i51 >> 1] & 255;
                    } else {
                      i64 = Math_imul(HEAPU16[(HEAP32[i68 + ((HEAPU8[i50 + 1 | 0] | 0) >>> (i67 >>> 0) << 2) >> 2] | 0) + ((HEAPU8[i50] | 0) << 1) >> 1] | 0, i60);
                      i52 = i60 ^ 65535;
                      i48 = (i64 + 32768 | 0) + Math_imul(HEAPU16[i62 >> 1] | 0, i52) | 0;
                      i64 = (i48 >>> 16) + i48 | 0;
                      i48 = HEAP16[(HEAP32[i69 + ((i64 >>> 16 & 255) >>> (i67 >>> 0) << 2) >> 2] | 0) + (i64 >>> 24 << 1) >> 1] | 0;
                      HEAP8[i58] = (i48 & 65535) >>> 8 & 255;
                      HEAP8[i58 + 1 | 0] = i48 & 255;
                      i48 = Math_imul(HEAPU16[(HEAP32[i68 + ((HEAPU8[i50 + 3 | 0] | 0) >>> (i67 >>> 0) << 2) >> 2] | 0) + ((HEAPU8[i50 + 2 | 0] | 0) << 1) >> 1] | 0, i60);
                      i64 = (i48 + 32768 | 0) + Math_imul(HEAPU16[i57 >> 1] | 0, i52) | 0;
                      i48 = (i64 >>> 16) + i64 | 0;
                      i64 = HEAP16[(HEAP32[i69 + ((i48 >>> 16 & 255) >>> (i67 >>> 0) << 2) >> 2] | 0) + (i48 >>> 24 << 1) >> 1] | 0;
                      HEAP8[i58 + 2 | 0] = (i64 & 65535) >>> 8 & 255;
                      HEAP8[i58 + 3 | 0] = i64 & 255;
                      i64 = Math_imul(HEAPU16[(HEAP32[i68 + ((HEAPU8[i50 + 5 | 0] | 0) >>> (i67 >>> 0) << 2) >> 2] | 0) + ((HEAPU8[i50 + 4 | 0] | 0) << 1) >> 1] | 0, i60);
                      i60 = (i64 + 32768 | 0) + Math_imul(HEAPU16[i61 >> 1] | 0, i52) | 0;
                      i52 = (i60 >>> 16) + i60 | 0;
                      i60 = HEAP16[(HEAP32[i69 + ((i52 >>> 16 & 255) >>> (i67 >>> 0) << 2) >> 2] | 0) + (i52 >>> 24 << 1) >> 1] | 0;
                      HEAP8[i58 + 4 | 0] = (i60 & 65535) >>> 8 & 255;
                      HEAP8[i58 + 5 | 0] = i60 & 255;
                    }
                    i60 = i49 + 1 | 0;
                    if ((i60 | 0) == (i65 | 0)) {
                      break L2579;
                    } else {
                      i49 = i60;
                      i58 = i58 + 6 | 0;
                      i50 = i50 + 8 | 0;
                    }
                  }
                }
              }
            } else if ((i63 | 0) == 0) {
              i50 = HEAPU8[i1 + 241 | 0] | 0;
              if ((i50 | 0) == 1) {
                if ((i65 | 0) == 0) {
                  break;
                }
                i58 = i1 + 380 | 0;
                i49 = i1 + 296 | 0;
                i61 = 7;
                i57 = 1;
                i62 = i32;
                while (1) {
                  i51 = HEAPU8[i62] | 0;
                  if ((i51 >>> (i61 >>> 0) & 1 | 0) == (HEAPU16[i58 >> 1] | 0 | 0)) {
                    i56 = i51 & 32639 >>> ((7 - i61 | 0) >>> 0);
                    HEAP8[i62] = i56 & 255;
                    HEAP8[i62] = ((HEAPU16[i49 >> 1] | 0) << i61 | i56) & 255;
                  }
                  i56 = (i61 | 0) == 0;
                  if ((i57 | 0) == (i65 | 0)) {
                    break L2579;
                  }
                  i61 = i56 ? 7 : i61 - 1 | 0;
                  i57 = i57 + 1 | 0;
                  i62 = i56 ? i62 + 1 | 0 : i62;
                }
              } else if ((i50 | 0) == 2) {
                i62 = (i65 | 0) == 0;
                if ((i71 | 0) == 0) {
                  if (i62) {
                    break;
                  }
                  i57 = i1 + 380 | 0;
                  i61 = i1 + 296 | 0;
                  i49 = 6;
                  i58 = 1;
                  i56 = i32;
                  while (1) {
                    i51 = HEAPU8[i56] | 0;
                    if ((i51 >>> (i49 >>> 0) & 3 | 0) == (HEAPU16[i57 >> 1] | 0 | 0)) {
                      i59 = i51 & 16191 >>> ((6 - i49 | 0) >>> 0);
                      HEAP8[i56] = i59 & 255;
                      HEAP8[i56] = ((HEAPU16[i61 >> 1] | 0) << i49 | i59) & 255;
                    }
                    i59 = (i49 | 0) == 0;
                    if ((i58 | 0) == (i65 | 0)) {
                      break L2579;
                    }
                    i49 = i59 ? 6 : i49 - 2 | 0;
                    i58 = i58 + 1 | 0;
                    i56 = i59 ? i56 + 1 | 0 : i56;
                  }
                } else {
                  if (i62) {
                    break;
                  }
                  i56 = i1 + 380 | 0;
                  i58 = i1 + 296 | 0;
                  i49 = 6;
                  i61 = 0;
                  i57 = i32;
                  while (1) {
                    i59 = HEAPU8[i57] | 0;
                    i51 = i59 >>> (i49 >>> 0) & 3;
                    if ((i51 | 0) == (HEAPU16[i56 >> 1] | 0 | 0)) {
                      i55 = i59 & 16191 >>> ((6 - i49 | 0) >>> 0);
                      HEAP8[i57] = i55 & 255;
                      i74 = (HEAPU16[i58 >> 1] | 0) << i49 & 255 | i55;
                    } else {
                      i74 = ((HEAPU8[i71 + (i51 << 2 | i51 | i51 << 4 | i51 << 6) | 0] | 0) >>> 6 & 255) << i49 | i59 & 16191 >>> ((6 - i49 | 0) >>> 0);
                    }
                    HEAP8[i57] = i74 & 255;
                    i59 = (i49 | 0) == 0;
                    i51 = i61 + 1 | 0;
                    if ((i51 | 0) == (i65 | 0)) {
                      break L2579;
                    } else {
                      i49 = i59 ? 6 : i49 - 2 | 0;
                      i61 = i51;
                      i57 = i59 ? i57 + 1 | 0 : i57;
                    }
                  }
                }
              } else if ((i50 | 0) == 4) {
                i57 = (i65 | 0) == 0;
                if ((i71 | 0) == 0) {
                  if (i57) {
                    break;
                  }
                  i61 = i1 + 380 | 0;
                  i49 = i1 + 296 | 0;
                  i58 = 4;
                  i56 = 1;
                  i62 = i32;
                  while (1) {
                    i59 = HEAPU8[i62] | 0;
                    if ((i59 >>> (i58 >>> 0) & 15 | 0) == (HEAPU16[i61 >> 1] | 0 | 0)) {
                      i51 = i59 & 3855 >>> ((4 - i58 | 0) >>> 0);
                      HEAP8[i62] = i51 & 255;
                      HEAP8[i62] = ((HEAPU16[i49 >> 1] | 0) << i58 | i51) & 255;
                    }
                    i51 = (i58 | 0) == 0;
                    if ((i56 | 0) == (i65 | 0)) {
                      break L2579;
                    }
                    i58 = i51 ? 4 : i58 - 4 | 0;
                    i56 = i56 + 1 | 0;
                    i62 = i51 ? i62 + 1 | 0 : i62;
                  }
                } else {
                  if (i57) {
                    break;
                  }
                  i62 = i1 + 380 | 0;
                  i56 = i1 + 296 | 0;
                  i58 = 4;
                  i49 = 0;
                  i61 = i32;
                  while (1) {
                    i51 = HEAPU8[i61] | 0;
                    i59 = i51 >>> (i58 >>> 0) & 15;
                    if ((i59 | 0) == (HEAPU16[i62 >> 1] | 0 | 0)) {
                      i55 = i51 & 3855 >>> ((4 - i58 | 0) >>> 0);
                      HEAP8[i61] = i55 & 255;
                      i75 = (HEAPU16[i56 >> 1] | 0) << i58 & 255 | i55;
                    } else {
                      i75 = ((HEAPU8[i71 + (i59 << 4 | i59) | 0] | 0) >>> 4 & 255) << i58 | i51 & 3855 >>> ((4 - i58 | 0) >>> 0);
                    }
                    HEAP8[i61] = i75 & 255;
                    i51 = (i58 | 0) == 0;
                    i59 = i49 + 1 | 0;
                    if ((i59 | 0) == (i65 | 0)) {
                      break L2579;
                    } else {
                      i58 = i51 ? 4 : i58 - 4 | 0;
                      i49 = i59;
                      i61 = i51 ? i61 + 1 | 0 : i61;
                    }
                  }
                }
              } else if ((i50 | 0) == 8) {
                i61 = (i65 | 0) == 0;
                if ((i71 | 0) == 0) {
                  if (i61) {
                    break;
                  }
                  i49 = i1 + 380 | 0;
                  i58 = i1 + 296 | 0;
                  i56 = 1;
                  i62 = i32;
                  while (1) {
                    if ((HEAPU8[i62] | 0 | 0) == (HEAPU16[i49 >> 1] | 0 | 0)) {
                      HEAP8[i62] = HEAP16[i58 >> 1] & 255;
                    }
                    if ((i56 | 0) == (i65 | 0)) {
                      break L2579;
                    }
                    i56 = i56 + 1 | 0;
                    i62 = i62 + 1 | 0;
                  }
                } else {
                  if (i61) {
                    break;
                  }
                  i62 = i1 + 380 | 0;
                  i56 = i1 + 296 | 0;
                  i58 = 0;
                  i49 = i32;
                  while (1) {
                    i57 = HEAPU8[i49] | 0;
                    if ((i57 | 0) == (HEAPU16[i62 >> 1] | 0 | 0)) {
                      i76 = HEAP16[i56 >> 1] & 255;
                    } else {
                      i76 = HEAP8[i71 + i57 | 0] | 0;
                    }
                    HEAP8[i49] = i76;
                    i57 = i58 + 1 | 0;
                    if ((i57 | 0) == (i65 | 0)) {
                      break L2579;
                    } else {
                      i58 = i57;
                      i49 = i49 + 1 | 0;
                    }
                  }
                }
              } else if ((i50 | 0) == 16) {
                i49 = (i65 | 0) == 0;
                if ((i70 | 0) == 0) {
                  if (i49) {
                    break;
                  }
                  i58 = i1 + 380 | 0;
                  i56 = i1 + 296 | 0;
                  i62 = 1;
                  i61 = i32;
                  while (1) {
                    i57 = i61 + 1 | 0;
                    if (((HEAPU8[i61] | 0) << 8 | (HEAPU8[i57] | 0) | 0) == (HEAPU16[i58 >> 1] | 0 | 0)) {
                      HEAP8[i61] = (HEAPU16[i56 >> 1] | 0) >>> 8 & 255;
                      HEAP8[i57] = HEAP16[i56 >> 1] & 255;
                    }
                    if ((i62 | 0) == (i65 | 0)) {
                      break L2579;
                    }
                    i62 = i62 + 1 | 0;
                    i61 = i61 + 2 | 0;
                  }
                } else {
                  if (i49) {
                    break;
                  }
                  i61 = i1 + 380 | 0;
                  i62 = i1 + 296 | 0;
                  i56 = 0;
                  i58 = i32;
                  while (1) {
                    i50 = HEAPU8[i58] | 0;
                    i57 = i58 + 1 | 0;
                    i51 = HEAPU8[i57] | 0;
                    if ((i50 << 8 | i51 | 0) == (HEAPU16[i61 >> 1] | 0 | 0)) {
                      HEAP8[i58] = (HEAPU16[i62 >> 1] | 0) >>> 8 & 255;
                      i77 = HEAP16[i62 >> 1] | 0;
                    } else {
                      i59 = HEAP16[(HEAP32[i70 + (i51 >>> (i67 >>> 0) << 2) >> 2] | 0) + (i50 << 1) >> 1] | 0;
                      HEAP8[i58] = (i59 & 65535) >>> 8 & 255;
                      i77 = i59;
                    }
                    HEAP8[i57] = i77 & 255;
                    i57 = i56 + 1 | 0;
                    if ((i57 | 0) == (i65 | 0)) {
                      break L2579;
                    } else {
                      i56 = i57;
                      i58 = i58 + 2 | 0;
                    }
                  }
                }
              } else {
                break;
              }
            } else if ((i63 | 0) == 2) {
              if (HEAP8[i1 + 241 | 0] << 24 >> 24 == 8) {
                i58 = (i65 | 0) == 0;
                if ((i71 | 0) == 0) {
                  if (i58) {
                    break;
                  }
                  i56 = i1 + 374 | 0;
                  i62 = i1 + 376 | 0;
                  i61 = i1 + 378 | 0;
                  i49 = i1 + 290 | 0;
                  i57 = i1 + 292 | 0;
                  i59 = i1 + 294 | 0;
                  i50 = 1;
                  i51 = i32;
                  while (1) {
                    do {
                      if ((HEAPU8[i51] | 0 | 0) == (HEAPU16[i56 >> 1] | 0 | 0)) {
                        i55 = i51 + 1 | 0;
                        if ((HEAPU8[i55] | 0 | 0) != (HEAPU16[i62 >> 1] | 0 | 0)) {
                          break;
                        }
                        i60 = i51 + 2 | 0;
                        if ((HEAPU8[i60] | 0 | 0) != (HEAPU16[i61 >> 1] | 0 | 0)) {
                          break;
                        }
                        HEAP8[i51] = HEAP16[i49 >> 1] & 255;
                        HEAP8[i55] = HEAP16[i57 >> 1] & 255;
                        HEAP8[i60] = HEAP16[i59 >> 1] & 255;
                      }
                    } while (0);
                    if ((i50 | 0) == (i65 | 0)) {
                      break L2579;
                    }
                    i50 = i50 + 1 | 0;
                    i51 = i51 + 3 | 0;
                  }
                } else {
                  if (i58) {
                    break;
                  }
                  i51 = i1 + 374 | 0;
                  i50 = i1 + 376 | 0;
                  i59 = i1 + 378 | 0;
                  i57 = i1 + 290 | 0;
                  i49 = i1 + 292 | 0;
                  i61 = i1 + 294 | 0;
                  i62 = 0;
                  i56 = i32;
                  while (1) {
                    i60 = HEAPU8[i56] | 0;
                    i55 = i56 + 1 | 0;
                    i52 = HEAPU8[i55] | 0;
                    do {
                      if ((i60 | 0) == (HEAPU16[i51 >> 1] | 0 | 0)) {
                        if ((i52 | 0) != (HEAPU16[i50 >> 1] | 0 | 0)) {
                          i78 = i52;
                          i79 = 1923;
                          break;
                        }
                        i64 = i56 + 2 | 0;
                        if ((HEAPU8[i64] | 0 | 0) != (HEAPU16[i59 >> 1] | 0 | 0)) {
                          i78 = i52;
                          i79 = 1923;
                          break;
                        }
                        HEAP8[i56] = HEAP16[i57 >> 1] & 255;
                        HEAP8[i55] = HEAP16[i49 >> 1] & 255;
                        HEAP8[i64] = HEAP16[i61 >> 1] & 255;
                        break;
                      } else {
                        i78 = i52;
                        i79 = 1923;
                      }
                    } while (0);
                    if ((i79 | 0) == 1923) {
                      i79 = 0;
                      HEAP8[i56] = HEAP8[i71 + i60 | 0] | 0;
                      HEAP8[i55] = HEAP8[i71 + i78 | 0] | 0;
                      i52 = i56 + 2 | 0;
                      HEAP8[i52] = HEAP8[i71 + (HEAPU8[i52] | 0) | 0] | 0;
                    }
                    i52 = i62 + 1 | 0;
                    if ((i52 | 0) == (i65 | 0)) {
                      break L2579;
                    } else {
                      i62 = i52;
                      i56 = i56 + 3 | 0;
                    }
                  }
                }
              }
              i56 = (i65 | 0) == 0;
              if ((i70 | 0) == 0) {
                if (i56) {
                  break;
                }
                i62 = i1 + 374 | 0;
                i61 = i1 + 376 | 0;
                i49 = i1 + 378 | 0;
                i57 = i1 + 290 | 0;
                i59 = i1 + 292 | 0;
                i50 = i1 + 294 | 0;
                i51 = 1;
                i58 = i32;
                while (1) {
                  i52 = i58 + 1 | 0;
                  i64 = i58 + 2 | 0;
                  i48 = i58 + 3 | 0;
                  i53 = i58 + 4 | 0;
                  i45 = i58 + 5 | 0;
                  i44 = (HEAPU8[i53] | 0) << 8 | (HEAPU8[i45] | 0);
                  do {
                    if (((HEAPU8[i58] | 0) << 8 | (HEAPU8[i52] | 0) | 0) == (HEAPU16[i62 >> 1] | 0 | 0)) {
                      if (((HEAPU8[i64] | 0) << 8 | (HEAPU8[i48] | 0) | 0) != (HEAPU16[i61 >> 1] | 0 | 0)) {
                        break;
                      }
                      if ((i44 | 0) != (HEAPU16[i49 >> 1] | 0 | 0)) {
                        break;
                      }
                      HEAP8[i58] = (HEAPU16[i57 >> 1] | 0) >>> 8 & 255;
                      HEAP8[i52] = HEAP16[i57 >> 1] & 255;
                      HEAP8[i64] = (HEAPU16[i59 >> 1] | 0) >>> 8 & 255;
                      HEAP8[i48] = HEAP16[i59 >> 1] & 255;
                      HEAP8[i53] = (HEAPU16[i50 >> 1] | 0) >>> 8 & 255;
                      HEAP8[i45] = HEAP16[i50 >> 1] & 255;
                    }
                  } while (0);
                  if ((i51 | 0) == (i65 | 0)) {
                    break L2579;
                  }
                  i51 = i51 + 1 | 0;
                  i58 = i58 + 6 | 0;
                }
              }
              if (i56) {
                break;
              }
              i58 = i1 + 374 | 0;
              i51 = i1 + 376 | 0;
              i50 = i1 + 378 | 0;
              i59 = i1 + 290 | 0;
              i57 = i1 + 292 | 0;
              i49 = i1 + 294 | 0;
              i61 = 0;
              i62 = i32;
              while (1) {
                i45 = HEAPU8[i62] | 0;
                i53 = i62 + 1 | 0;
                i48 = HEAPU8[i53] | 0;
                i64 = i62 + 2 | 0;
                i52 = i62 + 3 | 0;
                i44 = i62 + 4 | 0;
                i55 = HEAPU8[i44] | 0;
                i60 = i62 + 5 | 0;
                i46 = HEAPU8[i60] | 0;
                i43 = i55 << 8 | i46;
                i42 = HEAP8[i52] | 0;
                i41 = HEAPU8[i64] | 0;
                do {
                  if ((i45 << 8 | i48 | 0) == (HEAPU16[i58 >> 1] | 0 | 0)) {
                    i47 = i42 & 255;
                    if ((i41 << 8 | i47 | 0) != (HEAPU16[i51 >> 1] | 0 | 0)) {
                      i80 = i41;
                      i81 = i47;
                      i79 = 1941;
                      break;
                    }
                    if ((i43 | 0) != (HEAPU16[i50 >> 1] | 0 | 0)) {
                      i80 = i41;
                      i81 = i47;
                      i79 = 1941;
                      break;
                    }
                    HEAP8[i62] = (HEAPU16[i59 >> 1] | 0) >>> 8 & 255;
                    HEAP8[i53] = HEAP16[i59 >> 1] & 255;
                    HEAP8[i64] = (HEAPU16[i57 >> 1] | 0) >>> 8 & 255;
                    HEAP8[i52] = HEAP16[i57 >> 1] & 255;
                    HEAP8[i44] = (HEAPU16[i49 >> 1] | 0) >>> 8 & 255;
                    i82 = HEAP16[i49 >> 1] | 0;
                    break;
                  } else {
                    i80 = i41;
                    i81 = i42 & 255;
                    i79 = 1941;
                    break;
                  }
                } while (0);
                if ((i79 | 0) == 1941) {
                  i79 = 0;
                  i42 = HEAP16[(HEAP32[i70 + (i48 >>> (i67 >>> 0) << 2) >> 2] | 0) + (i45 << 1) >> 1] | 0;
                  HEAP8[i62] = (i42 & 65535) >>> 8 & 255;
                  HEAP8[i53] = i42 & 255;
                  i42 = HEAP16[(HEAP32[i70 + (i81 >>> (i67 >>> 0) << 2) >> 2] | 0) + (i80 << 1) >> 1] | 0;
                  HEAP8[i64] = (i42 & 65535) >>> 8 & 255;
                  HEAP8[i52] = i42 & 255;
                  i42 = HEAP16[(HEAP32[i70 + (i46 >>> (i67 >>> 0) << 2) >> 2] | 0) + (i55 << 1) >> 1] | 0;
                  HEAP8[i44] = (i42 & 65535) >>> 8 & 255;
                  i82 = i42;
                }
                HEAP8[i60] = i82 & 255;
                i42 = i61 + 1 | 0;
                if ((i42 | 0) == (i65 | 0)) {
                  break L2579;
                } else {
                  i61 = i42;
                  i62 = i62 + 6 | 0;
                }
              }
            }
          } while (0);
          i63 = HEAP8[i66] | 0;
          if ((i63 & 4) << 24 >> 24 == 0) {
            break;
          }
          HEAP8[i66] = i63 & -5;
          i63 = i1 + 242 | 0;
          i62 = (HEAP8[i63] | 0) - 1 & 255;
          HEAP8[i63] = i62;
          i63 = Math_imul(i62, HEAP8[i1 + 241 | 0] | 0);
          HEAP8[i1 + 243 | 0] = i63;
          i62 = i63 & 255;
          if ((i63 & 255) > 7) {
            i83 = Math_imul(i62 >>> 3, i65);
          } else {
            i83 = (Math_imul(i62, i65) + 7 | 0) >>> 3;
          }
          HEAP32[i1 + 236 >> 2] = i83;
        }
      } while (0);
      i73 = HEAP32[i6 >> 2] | 0;
    }
  } while (0);
  do {
    if ((i73 & 8192 | 0) == 0) {
      i84 = i73;
    } else {
      if ((i73 & 128 | 0) == 0) {
        i85 = HEAP8[i1 + 270 | 0] | 0;
      } else {
        if (HEAP16[i1 + 258 >> 1] << 16 >> 16 != 0) {
          i84 = i73;
          break;
        }
        i83 = HEAP8[i1 + 270 | 0] | 0;
        if ((i83 & 4) << 24 >> 24 == 0) {
          i85 = i83;
        } else {
          i84 = i73;
          break;
        }
      }
      if (i85 << 24 >> 24 == 3) {
        i84 = i73;
        break;
      }
      i83 = (HEAP32[i4 >> 2] | 0) + 1 | 0;
      i82 = HEAP32[i1 + 332 >> 2] | 0;
      i80 = HEAP32[i1 + 344 >> 2] | 0;
      i81 = HEAP32[i1 + 320 >> 2] | 0;
      i78 = HEAP32[i1 + 232 >> 2] | 0;
      i77 = i1 + 241 | 0;
      i76 = HEAP8[i77] | 0;
      do {
        if ((i76 & 255) > 8 | (i82 | 0) == 0) {
          if (i76 << 24 >> 24 != 16 | (i80 | 0) == 0) {
            break;
          } else {
            i79 = 2025;
            break;
          }
        } else {
          i79 = 2025;
        }
      } while (0);
      L2813 : do {
        if ((i79 | 0) == 2025) {
          i75 = HEAPU8[i1 + 240 | 0] | 0;
          if ((i75 | 0) == 2) {
            i74 = (i78 | 0) == 0;
            if (i76 << 24 >> 24 == 8) {
              if (i74) {
                break;
              } else {
                i86 = 0;
                i87 = i83;
              }
              while (1) {
                HEAP8[i87] = HEAP8[i82 + (HEAPU8[i87] | 0) | 0] | 0;
                i72 = i87 + 1 | 0;
                HEAP8[i72] = HEAP8[i82 + (HEAPU8[i72] | 0) | 0] | 0;
                i72 = i87 + 2 | 0;
                HEAP8[i72] = HEAP8[i82 + (HEAPU8[i72] | 0) | 0] | 0;
                i72 = i86 + 1 | 0;
                if ((i72 | 0) == (i78 | 0)) {
                  break L2813;
                } else {
                  i86 = i72;
                  i87 = i87 + 3 | 0;
                }
              }
            } else {
              if (i74) {
                break;
              } else {
                i88 = 0;
                i89 = i83;
              }
              while (1) {
                i66 = i89 + 1 | 0;
                i72 = HEAP16[(HEAP32[i80 + ((HEAPU8[i66] | 0) >>> (i81 >>> 0) << 2) >> 2] | 0) + ((HEAPU8[i89] | 0) << 1) >> 1] | 0;
                HEAP8[i89] = (i72 & 65535) >>> 8 & 255;
                HEAP8[i66] = i72 & 255;
                i72 = i89 + 2 | 0;
                i66 = i89 + 3 | 0;
                i65 = HEAP16[(HEAP32[i80 + ((HEAPU8[i66] | 0) >>> (i81 >>> 0) << 2) >> 2] | 0) + ((HEAPU8[i72] | 0) << 1) >> 1] | 0;
                HEAP8[i72] = (i65 & 65535) >>> 8 & 255;
                HEAP8[i66] = i65 & 255;
                i65 = i89 + 4 | 0;
                i66 = i89 + 5 | 0;
                i72 = HEAP16[(HEAP32[i80 + ((HEAPU8[i66] | 0) >>> (i81 >>> 0) << 2) >> 2] | 0) + ((HEAPU8[i65] | 0) << 1) >> 1] | 0;
                HEAP8[i65] = (i72 & 65535) >>> 8 & 255;
                HEAP8[i66] = i72 & 255;
                i72 = i88 + 1 | 0;
                if ((i72 | 0) == (i78 | 0)) {
                  break L2813;
                } else {
                  i88 = i72;
                  i89 = i89 + 6 | 0;
                }
              }
            }
          } else if ((i75 | 0) == 6) {
            i74 = (i78 | 0) == 0;
            if (i76 << 24 >> 24 == 8) {
              if (i74) {
                break;
              } else {
                i90 = 0;
                i91 = i83;
              }
              while (1) {
                HEAP8[i91] = HEAP8[i82 + (HEAPU8[i91] | 0) | 0] | 0;
                i72 = i91 + 1 | 0;
                HEAP8[i72] = HEAP8[i82 + (HEAPU8[i72] | 0) | 0] | 0;
                i72 = i91 + 2 | 0;
                HEAP8[i72] = HEAP8[i82 + (HEAPU8[i72] | 0) | 0] | 0;
                i72 = i90 + 1 | 0;
                if ((i72 | 0) == (i78 | 0)) {
                  break L2813;
                } else {
                  i90 = i72;
                  i91 = i91 + 4 | 0;
                }
              }
            } else {
              if (i74) {
                break;
              } else {
                i92 = 0;
                i93 = i83;
              }
              while (1) {
                i72 = i93 + 1 | 0;
                i66 = HEAP16[(HEAP32[i80 + ((HEAPU8[i72] | 0) >>> (i81 >>> 0) << 2) >> 2] | 0) + ((HEAPU8[i93] | 0) << 1) >> 1] | 0;
                HEAP8[i93] = (i66 & 65535) >>> 8 & 255;
                HEAP8[i72] = i66 & 255;
                i66 = i93 + 2 | 0;
                i72 = i93 + 3 | 0;
                i65 = HEAP16[(HEAP32[i80 + ((HEAPU8[i72] | 0) >>> (i81 >>> 0) << 2) >> 2] | 0) + ((HEAPU8[i66] | 0) << 1) >> 1] | 0;
                HEAP8[i66] = (i65 & 65535) >>> 8 & 255;
                HEAP8[i72] = i65 & 255;
                i65 = i93 + 4 | 0;
                i72 = i93 + 5 | 0;
                i66 = HEAP16[(HEAP32[i80 + ((HEAPU8[i72] | 0) >>> (i81 >>> 0) << 2) >> 2] | 0) + ((HEAPU8[i65] | 0) << 1) >> 1] | 0;
                HEAP8[i65] = (i66 & 65535) >>> 8 & 255;
                HEAP8[i72] = i66 & 255;
                i66 = i92 + 1 | 0;
                if ((i66 | 0) == (i78 | 0)) {
                  break L2813;
                } else {
                  i92 = i66;
                  i93 = i93 + 8 | 0;
                }
              }
            }
          } else if ((i75 | 0) == 4) {
            i74 = (i78 | 0) == 0;
            if (i76 << 24 >> 24 == 8) {
              if (i74) {
                break;
              } else {
                i94 = 0;
                i95 = i83;
              }
              while (1) {
                HEAP8[i95] = HEAP8[i82 + (HEAPU8[i95] | 0) | 0] | 0;
                i66 = i94 + 1 | 0;
                if ((i66 | 0) == (i78 | 0)) {
                  break L2813;
                } else {
                  i94 = i66;
                  i95 = i95 + 2 | 0;
                }
              }
            } else {
              if (i74) {
                break;
              } else {
                i96 = 0;
                i97 = i83;
              }
              while (1) {
                i66 = i97 + 1 | 0;
                i72 = HEAP16[(HEAP32[i80 + ((HEAPU8[i66] | 0) >>> (i81 >>> 0) << 2) >> 2] | 0) + ((HEAPU8[i97] | 0) << 1) >> 1] | 0;
                HEAP8[i97] = (i72 & 65535) >>> 8 & 255;
                HEAP8[i66] = i72 & 255;
                i72 = i96 + 1 | 0;
                if ((i72 | 0) == (i78 | 0)) {
                  break L2813;
                } else {
                  i96 = i72;
                  i97 = i97 + 4 | 0;
                }
              }
            }
          } else if ((i75 | 0) == 0) {
            if (i76 << 24 >> 24 == 2) {
              if ((i78 | 0) == 0) {
                break;
              } else {
                i98 = 0;
                i99 = i83;
              }
              while (1) {
                i74 = HEAPU8[i99] | 0;
                i72 = i74 & 192;
                i66 = i74 & 48;
                i65 = i74 & 12;
                i67 = i74 & 3;
                HEAP8[i99] = (HEAPU8[i82 + (i66 << 2 | i66 | i66 >>> 2 | i66 >>> 4) | 0] | 0) >>> 2 & 48 | HEAP8[i82 + (i74 >>> 6 | i72 | i72 >>> 2 | i72 >>> 4) | 0] & -64 | (HEAPU8[i82 + (i65 << 2 | i65 | i65 << 4 | i65 >>> 2) | 0] | 0) >>> 4 & 12 | (HEAPU8[i82 + (i67 << 4 | i67 | i67 << 6 | i67 << 2) | 0] | 0) >>> 6;
                i67 = i98 + 4 | 0;
                if (i67 >>> 0 < i78 >>> 0) {
                  i98 = i67;
                  i99 = i99 + 1 | 0;
                } else {
                  break;
                }
              }
              i100 = HEAP8[i77] | 0;
            } else {
              i100 = i76;
            }
            if ((i100 << 24 >> 24 | 0) == 16) {
              if ((i78 | 0) == 0) {
                break;
              } else {
                i101 = 0;
                i102 = i83;
              }
              while (1) {
                i75 = i102 + 1 | 0;
                i67 = HEAP16[(HEAP32[i80 + ((HEAPU8[i75] | 0) >>> (i81 >>> 0) << 2) >> 2] | 0) + ((HEAPU8[i102] | 0) << 1) >> 1] | 0;
                HEAP8[i102] = (i67 & 65535) >>> 8 & 255;
                HEAP8[i75] = i67 & 255;
                i67 = i101 + 1 | 0;
                if ((i67 | 0) == (i78 | 0)) {
                  break L2813;
                } else {
                  i101 = i67;
                  i102 = i102 + 2 | 0;
                }
              }
            } else if ((i100 << 24 >> 24 | 0) == 8) {
              if ((i78 | 0) == 0) {
                break;
              } else {
                i103 = 0;
                i104 = i83;
              }
              while (1) {
                HEAP8[i104] = HEAP8[i82 + (HEAPU8[i104] | 0) | 0] | 0;
                i67 = i103 + 1 | 0;
                if ((i67 | 0) == (i78 | 0)) {
                  break L2813;
                } else {
                  i103 = i67;
                  i104 = i104 + 1 | 0;
                }
              }
            } else if ((i100 << 24 >> 24 | 0) == 4) {
              if ((i78 | 0) == 0) {
                break;
              } else {
                i105 = 0;
                i106 = i83;
              }
              while (1) {
                i67 = HEAPU8[i106] | 0;
                i75 = i67 & 15;
                HEAP8[i106] = (HEAPU8[i82 + (i75 << 4 | i75) | 0] | 0) >>> 4 | HEAP8[i82 + (i67 & 240 | i67 >>> 4) | 0] & -16;
                i67 = i105 + 2 | 0;
                if (i67 >>> 0 < i78 >>> 0) {
                  i105 = i67;
                  i106 = i106 + 1 | 0;
                } else {
                  break L2813;
                }
              }
            } else {
              break;
            }
          } else {
            break;
          }
        }
      } while (0);
      i84 = HEAP32[i6 >> 2] | 0;
    }
  } while (0);
  do {
    if ((i84 & 1024 | 0) == 0) {
      i107 = i84;
    } else {
      i106 = (HEAP32[i4 >> 2] | 0) + 1 | 0;
      i105 = i1 + 241 | 0;
      if (HEAP8[i105] << 24 >> 24 != 16) {
        i107 = i84;
        break;
      }
      i100 = i1 + 232 | 0;
      i104 = HEAP32[i100 >> 2] | 0;
      i103 = i1 + 242 | 0;
      i102 = HEAP8[i103] | 0;
      i101 = Math_imul(i102 & 255, i104);
      if ((i101 | 0) == 0) {
        i108 = i102;
        i109 = i104;
        i110 = i84;
      } else {
        i104 = i106;
        i102 = 0;
        i99 = i106;
        while (1) {
          HEAP8[i104] = HEAP8[i99] | 0;
          i106 = i102 + 1 | 0;
          if ((i106 | 0) == (i101 | 0)) {
            break;
          } else {
            i104 = i104 + 1 | 0;
            i102 = i106;
            i99 = i99 + 2 | 0;
          }
        }
        i108 = HEAP8[i103] | 0;
        i109 = HEAP32[i100 >> 2] | 0;
        i110 = HEAP32[i6 >> 2] | 0;
      }
      HEAP8[i105] = 8;
      HEAP8[i1 + 243 | 0] = i108 << 3;
      HEAP32[i1 + 236 >> 2] = Math_imul(i108 & 255, i109);
      i107 = i110;
    }
  } while (0);
  do {
    if ((i107 & 64 | 0) == 0) {
      i111 = i107;
    } else {
      i110 = (HEAP32[i4 >> 2] | 0) + 1 | 0;
      i109 = HEAP32[i1 + 468 >> 2] | 0;
      i108 = HEAP32[i1 + 472 >> 2] | 0;
      i84 = HEAP32[i1 + 232 >> 2] | 0;
      i99 = i1 + 241 | 0;
      L2870 : do {
        if (HEAP8[i99] << 24 >> 24 == 8) {
          i102 = i1 + 240 | 0;
          i104 = HEAP8[i102] | 0;
          i101 = (i109 | 0) == 0;
          if (!(i104 << 24 >> 24 != 2 | i101)) {
            if ((i84 | 0) == 0) {
              i112 = 8;
            } else {
              i106 = 0;
              i98 = i110;
              i97 = i110;
              while (1) {
                HEAP8[i98] = HEAP8[i109 + ((HEAPU8[i97 + 1 | 0] | 0) >>> 3 << 5 | (HEAPU8[i97] | 0) >>> 3 << 10 | (HEAPU8[i97 + 2 | 0] | 0) >>> 3) | 0] | 0;
                i96 = i106 + 1 | 0;
                if ((i96 | 0) == (i84 | 0)) {
                  break;
                } else {
                  i106 = i96;
                  i98 = i98 + 1 | 0;
                  i97 = i97 + 3 | 0;
                }
              }
              i112 = HEAP8[i99] | 0;
            }
            HEAP8[i102] = 3;
            HEAP8[i1 + 242 | 0] = 1;
            HEAP8[i1 + 243 | 0] = i112;
            i97 = i112 & 255;
            if ((i112 & 255) > 7) {
              i113 = Math_imul(i97 >>> 3, i84);
            } else {
              i113 = (Math_imul(i97, i84) + 7 | 0) >>> 3;
            }
            HEAP32[i1 + 236 >> 2] = i113;
            break;
          }
          if (i104 << 24 >> 24 != 6 | i101) {
            if (i104 << 24 >> 24 != 3 | (i108 | 0) == 0 | (i84 | 0) == 0) {
              break;
            } else {
              i114 = 0;
              i115 = i110;
            }
            while (1) {
              HEAP8[i115] = HEAP8[i108 + (HEAPU8[i115] | 0) | 0] | 0;
              i97 = i114 + 1 | 0;
              if ((i97 | 0) == (i84 | 0)) {
                break L2870;
              } else {
                i114 = i97;
                i115 = i115 + 1 | 0;
              }
            }
          }
          if ((i84 | 0) == 0) {
            i116 = 8;
          } else {
            i104 = 0;
            i101 = i110;
            i97 = i110;
            while (1) {
              HEAP8[i101] = HEAP8[i109 + ((HEAPU8[i97 + 1 | 0] | 0) >>> 3 << 5 | (HEAPU8[i97] | 0) >>> 3 << 10 | (HEAPU8[i97 + 2 | 0] | 0) >>> 3) | 0] | 0;
              i98 = i104 + 1 | 0;
              if ((i98 | 0) == (i84 | 0)) {
                break;
              } else {
                i104 = i98;
                i101 = i101 + 1 | 0;
                i97 = i97 + 4 | 0;
              }
            }
            i116 = HEAP8[i99] | 0;
          }
          HEAP8[i102] = 3;
          HEAP8[i1 + 242 | 0] = 1;
          HEAP8[i1 + 243 | 0] = i116;
          i97 = i116 & 255;
          if ((i116 & 255) > 7) {
            i117 = Math_imul(i97 >>> 3, i84);
          } else {
            i117 = (Math_imul(i97, i84) + 7 | 0) >>> 3;
          }
          HEAP32[i1 + 236 >> 2] = i117;
        }
      } while (0);
      if ((HEAP32[i1 + 236 >> 2] | 0) == 0) {
        _png_error(i1, 5273172);
      } else {
        i111 = HEAP32[i6 >> 2] | 0;
        break;
      }
    }
  } while (0);
  do {
    if ((i111 & 512 | 0) == 0) {
      i118 = i111;
    } else {
      i117 = HEAP32[i4 >> 2] | 0;
      i116 = i1 + 241 | 0;
      if (HEAP8[i116] << 24 >> 24 != 8) {
        i118 = i111;
        break;
      }
      if (HEAP8[i1 + 240 | 0] << 24 >> 24 == 3) {
        i118 = i111;
        break;
      }
      i115 = i1 + 236 | 0;
      i114 = HEAP32[i115 >> 2] | 0;
      i113 = i114 << 1;
      if ((i113 | 0) > (i114 | 0)) {
        i112 = i117 + (i114 + 1 | 0) | 0;
        i107 = i117 + (i113 | 1) | 0;
        while (1) {
          i113 = i112 - 1 | 0;
          i117 = HEAP8[i113] | 0;
          HEAP8[i107 - 1 | 0] = i117;
          i84 = i107 - 2 | 0;
          HEAP8[i84] = i117;
          if (i84 >>> 0 > i113 >>> 0) {
            i112 = i113;
            i107 = i84;
          } else {
            break;
          }
        }
        i119 = HEAP32[i115 >> 2] | 0;
        i120 = HEAP32[i6 >> 2] | 0;
      } else {
        i119 = i114;
        i120 = i111;
      }
      HEAP32[i115 >> 2] = i119 << 1;
      HEAP8[i116] = 16;
      HEAP8[i1 + 243 | 0] = HEAP8[i1 + 242 | 0] << 4;
      i118 = i120;
    }
  } while (0);
  L2914 : do {
    if ((i118 & 32 | 0) != 0) {
      i120 = (HEAP32[i4 >> 2] | 0) + 1 | 0;
      i119 = HEAP8[i1 + 240 | 0] | 0;
      if ((i119 << 24 >> 24 | 0) == 0) {
        i111 = HEAP32[i1 + 236 >> 2] | 0;
        if ((i111 | 0) == 0) {
          break;
        } else {
          i121 = 0;
          i122 = i120;
        }
        while (1) {
          HEAP8[i122] = HEAP8[i122] ^ -1;
          i107 = i121 + 1 | 0;
          if ((i107 | 0) == (i111 | 0)) {
            break L2914;
          } else {
            i121 = i107;
            i122 = i122 + 1 | 0;
          }
        }
      } else if ((i119 << 24 >> 24 | 0) != 4) {
        break;
      }
      i111 = HEAP8[i1 + 241 | 0] | 0;
      if ((i111 << 24 >> 24 | 0) == 8) {
        i116 = HEAP32[i1 + 236 >> 2] | 0;
        if ((i116 | 0) == 0) {
          break;
        } else {
          i123 = i120;
          i124 = 0;
        }
        while (1) {
          HEAP8[i123] = HEAP8[i123] ^ -1;
          i115 = i124 + 2 | 0;
          if (i115 >>> 0 < i116 >>> 0) {
            i123 = i123 + 2 | 0;
            i124 = i115;
          } else {
            break L2914;
          }
        }
      } else if ((i111 << 24 >> 24 | 0) == 16) {
        i116 = HEAP32[i1 + 236 >> 2] | 0;
        if ((i116 | 0) == 0) {
          break;
        } else {
          i125 = i120;
          i126 = 0;
        }
        while (1) {
          HEAP8[i125] = HEAP8[i125] ^ -1;
          i119 = i125 + 1 | 0;
          HEAP8[i119] = HEAP8[i119] ^ -1;
          i119 = i126 + 4 | 0;
          if (i119 >>> 0 < i116 >>> 0) {
            i125 = i125 + 4 | 0;
            i126 = i119;
          } else {
            break L2914;
          }
        }
      } else {
        break;
      }
    }
  } while (0);
  i126 = HEAP32[i6 >> 2] | 0;
  if ((i126 & 8 | 0) == 0) {
    i127 = i126;
  } else {
    i126 = (HEAP32[i4 >> 2] | 0) + 1 | 0;
    i125 = HEAP8[i1 + 240 | 0] | 0;
    L2931 : do {
      if (i125 << 24 >> 24 != 3) {
        i124 = HEAP32[i1 + 232 >> 2] | 0;
        i123 = HEAPU8[i1 + 241 | 0] | 0;
        if ((i125 & 2) << 24 >> 24 == 0) {
          HEAP32[i3 >> 2] = i123 - (HEAPU8[i1 + 364 | 0] | 0) | 0;
          i128 = 1;
        } else {
          HEAP32[i3 >> 2] = i123 - (HEAPU8[i1 + 361 | 0] | 0) | 0;
          HEAP32[i3 + 4 >> 2] = i123 - (HEAPU8[i1 + 362 | 0] | 0) | 0;
          HEAP32[i3 + 8 >> 2] = i123 - (HEAPU8[i1 + 363 | 0] | 0) | 0;
          i128 = 3;
        }
        if ((i125 & 4) << 24 >> 24 == 0) {
          i129 = i128;
        } else {
          HEAP32[i3 + (i128 << 2) >> 2] = i123 - (HEAPU8[i1 + 365 | 0] | 0) | 0;
          i129 = i128 + 1 | 0;
        }
        i122 = 0;
        i121 = 0;
        while (1) {
          i118 = i3 + (i121 << 2) | 0;
          if ((HEAP32[i118 >> 2] | 0) < 1) {
            HEAP32[i118 >> 2] = 0;
            i130 = i122;
          } else {
            i130 = 1;
          }
          i118 = i121 + 1 | 0;
          if ((i118 | 0) < (i129 | 0)) {
            i122 = i130;
            i121 = i118;
          } else {
            break;
          }
        }
        if (i130 << 16 >> 16 == 0) {
          break;
        }
        if ((i123 | 0) == 2) {
          i121 = HEAP32[i1 + 236 >> 2] | 0;
          if ((i121 | 0) == 0) {
            break;
          } else {
            i131 = 0;
            i132 = i126;
          }
          while (1) {
            HEAP8[i132] = (HEAPU8[i132] | 0) >>> 1 & 85;
            i122 = i131 + 1 | 0;
            if ((i122 | 0) == (i121 | 0)) {
              break L2931;
            } else {
              i131 = i122;
              i132 = i132 + 1 | 0;
            }
          }
        } else if ((i123 | 0) == 4) {
          i121 = HEAP32[i1 + 236 >> 2] | 0;
          i122 = i3 | 0;
          i118 = HEAP32[i122 >> 2] | 0;
          if ((i121 | 0) == 0) {
            break;
          }
          i116 = 240 >>> (i118 >>> 0) & 240 | 15 >>> (i118 >>> 0);
          i120 = i126;
          i111 = 1;
          i119 = i118;
          while (1) {
            HEAP8[i120] = (HEAPU8[i120] | 0) >>> (i119 >>> 0) & i116 & 255;
            if ((i111 | 0) == (i121 | 0)) {
              break L2931;
            }
            i120 = i120 + 1 | 0;
            i111 = i111 + 1 | 0;
            i119 = HEAP32[i122 >> 2] | 0;
          }
        } else if ((i123 | 0) == 8) {
          i122 = Math_imul(i129, i124);
          if ((i122 | 0) == 0) {
            break;
          } else {
            i133 = i126;
            i134 = 0;
          }
          while (1) {
            HEAP8[i133] = (HEAPU8[i133] | 0) >>> ((HEAP32[i3 + ((i134 >>> 0) % (i129 >>> 0) << 2) >> 2] | 0) >>> 0) & 255;
            i119 = i134 + 1 | 0;
            if ((i119 | 0) == (i122 | 0)) {
              break L2931;
            } else {
              i133 = i133 + 1 | 0;
              i134 = i119;
            }
          }
        } else if ((i123 | 0) == 16) {
          i122 = Math_imul(i129, i124);
          if ((i122 | 0) == 0) {
            break;
          } else {
            i135 = i126;
            i136 = 0;
          }
          while (1) {
            i119 = i135 + 1 | 0;
            i111 = ((HEAPU8[i135] | 0) << 8 | (HEAPU8[i119] | 0)) >>> ((HEAP32[i3 + ((i136 >>> 0) % (i129 >>> 0) << 2) >> 2] | 0) >>> 0);
            HEAP8[i135] = i111 >>> 8 & 255;
            HEAP8[i119] = i111 & 255;
            i111 = i136 + 1 | 0;
            if ((i111 | 0) == (i122 | 0)) {
              break L2931;
            } else {
              i135 = i135 + 2 | 0;
              i136 = i111;
            }
          }
        } else {
          break;
        }
      }
    } while (0);
    i127 = HEAP32[i6 >> 2] | 0;
  }
  do {
    if ((i127 & 4 | 0) == 0) {
      i137 = i127;
    } else {
      i136 = HEAP32[i4 >> 2] | 0;
      i135 = i1 + 241 | 0;
      i129 = HEAP8[i135] | 0;
      if ((i129 & 255) >= 8) {
        i137 = i127;
        break;
      }
      i3 = i129 & 255;
      i129 = HEAP32[i1 + 232 >> 2] | 0;
      L2967 : do {
        if ((i3 | 0) == 1) {
          if ((i129 | 0) == 0) {
            break;
          }
          i126 = 0;
          i134 = i136 + (((i129 - 1 | 0) >>> 3) + 1 | 0) | 0;
          i133 = i136 + i129 | 0;
          i132 = i129 + 7 & 7 ^ 7;
          while (1) {
            HEAP8[i133] = (HEAPU8[i134] | 0) >>> (i132 >>> 0) & 1;
            i131 = (i132 | 0) == 7;
            i130 = i126 + 1 | 0;
            if ((i130 | 0) == (i129 | 0)) {
              break L2967;
            } else {
              i126 = i130;
              i134 = i131 ? i134 - 1 | 0 : i134;
              i133 = i133 - 1 | 0;
              i132 = i131 ? 0 : i132 + 1 | 0;
            }
          }
        } else if ((i3 | 0) == 2) {
          if ((i129 | 0) == 0) {
            break;
          }
          i132 = 0;
          i133 = i136 + (((i129 - 1 | 0) >>> 2) + 1 | 0) | 0;
          i134 = i136 + i129 | 0;
          i126 = (i129 << 1) + 6 & 6 ^ 6;
          while (1) {
            HEAP8[i134] = (HEAPU8[i133] | 0) >>> (i126 >>> 0) & 3;
            i102 = (i126 | 0) == 6;
            i131 = i132 + 1 | 0;
            if ((i131 | 0) == (i129 | 0)) {
              break L2967;
            } else {
              i132 = i131;
              i133 = i102 ? i133 - 1 | 0 : i133;
              i134 = i134 - 1 | 0;
              i126 = i102 ? 0 : i126 + 2 | 0;
            }
          }
        } else if ((i3 | 0) == 4) {
          if ((i129 | 0) == 0) {
            break;
          }
          i126 = 0;
          i134 = i136 + (((i129 - 1 | 0) >>> 1) + 1 | 0) | 0;
          i133 = i136 + i129 | 0;
          i132 = i129 << 2 & 4;
          while (1) {
            HEAP8[i133] = (HEAPU8[i134] | 0) >>> (i132 >>> 0) & 15;
            i102 = (i132 | 0) == 4;
            i131 = i126 + 1 | 0;
            if ((i131 | 0) == (i129 | 0)) {
              break L2967;
            } else {
              i126 = i131;
              i134 = i102 ? i134 - 1 | 0 : i134;
              i133 = i133 - 1 | 0;
              i132 = i102 ? 0 : 4;
            }
          }
        }
      } while (0);
      HEAP8[i135] = 8;
      i136 = HEAP8[i1 + 242 | 0] | 0;
      HEAP8[i1 + 243 | 0] = i136 << 3;
      HEAP32[i1 + 236 >> 2] = Math_imul(i136 & 255, i129);
      i137 = HEAP32[i6 >> 2] | 0;
    }
  } while (0);
  L2982 : do {
    if ((i137 & 1 | 0) != 0) {
      i127 = (HEAP32[i4 >> 2] | 0) + 1 | 0;
      i136 = HEAP8[i1 + 240 | 0] | 0;
      if ((i136 & 2) << 24 >> 24 == 0) {
        break;
      }
      i3 = HEAP32[i1 + 232 >> 2] | 0;
      i132 = HEAP8[i1 + 241 | 0] | 0;
      if ((i132 << 24 >> 24 | 0) == 8) {
        if ((i136 << 24 >> 24 | 0) == 6) {
          if ((i3 | 0) == 0) {
            break;
          } else {
            i138 = 0;
            i139 = i127;
          }
          while (1) {
            i133 = HEAP8[i139] | 0;
            i134 = i139 + 2 | 0;
            HEAP8[i139] = HEAP8[i134] | 0;
            HEAP8[i134] = i133;
            i133 = i138 + 1 | 0;
            if ((i133 | 0) == (i3 | 0)) {
              break L2982;
            } else {
              i138 = i133;
              i139 = i139 + 4 | 0;
            }
          }
        } else if ((i136 << 24 >> 24 | 0) == 2) {
          if ((i3 | 0) == 0) {
            break;
          } else {
            i140 = 0;
            i141 = i127;
          }
          while (1) {
            i129 = HEAP8[i141] | 0;
            i135 = i141 + 2 | 0;
            HEAP8[i141] = HEAP8[i135] | 0;
            HEAP8[i135] = i129;
            i129 = i140 + 1 | 0;
            if ((i129 | 0) == (i3 | 0)) {
              break L2982;
            } else {
              i140 = i129;
              i141 = i141 + 3 | 0;
            }
          }
        } else {
          break;
        }
      } else if ((i132 << 24 >> 24 | 0) == 16) {
        if ((i136 << 24 >> 24 | 0) == 6) {
          if ((i3 | 0) == 0) {
            break;
          } else {
            i142 = i127;
            i143 = 0;
          }
          while (1) {
            i129 = HEAP8[i142] | 0;
            i135 = i142 + 4 | 0;
            HEAP8[i142] = HEAP8[i135] | 0;
            HEAP8[i135] = i129;
            i129 = i142 + 1 | 0;
            i135 = HEAP8[i129] | 0;
            i133 = i142 + 5 | 0;
            HEAP8[i129] = HEAP8[i133] | 0;
            HEAP8[i133] = i135;
            i135 = i143 + 1 | 0;
            if ((i135 | 0) == (i3 | 0)) {
              break L2982;
            } else {
              i142 = i142 + 8 | 0;
              i143 = i135;
            }
          }
        } else if ((i136 << 24 >> 24 | 0) == 2) {
          if ((i3 | 0) == 0) {
            break;
          } else {
            i144 = i127;
            i145 = 0;
          }
          while (1) {
            i132 = HEAP8[i144] | 0;
            i135 = i144 + 4 | 0;
            HEAP8[i144] = HEAP8[i135] | 0;
            HEAP8[i135] = i132;
            i132 = i144 + 1 | 0;
            i135 = HEAP8[i132] | 0;
            i133 = i144 + 5 | 0;
            HEAP8[i132] = HEAP8[i133] | 0;
            HEAP8[i133] = i135;
            i135 = i145 + 1 | 0;
            if ((i135 | 0) == (i3 | 0)) {
              break L2982;
            } else {
              i144 = i144 + 6 | 0;
              i145 = i135;
            }
          }
        } else {
          break;
        }
      } else {
        break;
      }
    }
  } while (0);
  i145 = HEAP32[i6 >> 2] | 0;
  do {
    if ((i145 & 65536 | 0) == 0) {
      i146 = i145;
    } else {
      i144 = HEAP32[i4 >> 2] | 0;
      i143 = i144 + 1 | 0;
      i142 = HEAP8[i1 + 241 | 0] | 0;
      if ((i142 & 255) >= 8) {
        i146 = i145;
        break;
      }
      i141 = HEAP32[i1 + 236 >> 2] | 0;
      i140 = i144 + (i141 + 1 | 0) | 0;
      if ((i142 << 24 >> 24 | 0) == 2) {
        i147 = 5242880;
      } else if ((i142 << 24 >> 24 | 0) == 4) {
        i147 = 5249976;
      } else if ((i142 << 24 >> 24 | 0) == 1) {
        i147 = 5246100;
      } else {
        i146 = i145;
        break;
      }
      if ((i141 | 0) > 0) {
        i148 = i143;
      } else {
        i146 = i145;
        break;
      }
      while (1) {
        HEAP8[i148] = HEAP8[i147 + (HEAPU8[i148] | 0) | 0] | 0;
        i143 = i148 + 1 | 0;
        if (i143 >>> 0 < i140 >>> 0) {
          i148 = i143;
        } else {
          break;
        }
      }
      i146 = HEAP32[i6 >> 2] | 0;
    }
  } while (0);
  do {
    if ((i146 & 16384 | 0) == 0) {
      i149 = i146;
    } else {
      if ((HEAP32[i1 + 84 >> 2] & 2048 | 0) == 0) {
        i149 = i146;
        break;
      }
      _png_do_gray_to_rgb(i1 + 232 | 0, (HEAP32[i4 >> 2] | 0) + 1 | 0);
      i149 = HEAP32[i6 >> 2] | 0;
    }
  } while (0);
  if ((i149 & 32768 | 0) == 0) {
    i150 = i149;
  } else {
    i149 = HEAP32[i4 >> 2] | 0;
    i146 = HEAP16[i1 + 278 >> 1] | 0;
    i148 = HEAP32[i1 + 88 >> 2] | 0;
    i147 = HEAP32[i1 + 232 >> 2] | 0;
    i145 = (i146 & 65535) >>> 8 & 255;
    i140 = i146 & 255;
    i146 = HEAP8[i1 + 240 | 0] | 0;
    do {
      if ((i146 << 24 >> 24 | 0) == 0) {
        i143 = HEAP8[i1 + 241 | 0] | 0;
        if ((i143 << 24 >> 24 | 0) == 8) {
          i141 = i149 + (i147 + 1 | 0) | 0;
          i142 = i147 << 1;
          i144 = i149 + (i142 | 1) | 0;
          if ((i148 & 128 | 0) == 0) {
            L3031 : do {
              if ((i147 | 0) != 0) {
                i139 = 0;
                i138 = i141;
                i137 = i144;
                while (1) {
                  i3 = i138 - 1 | 0;
                  HEAP8[i137 - 1 | 0] = HEAP8[i3] | 0;
                  i127 = i137 - 2 | 0;
                  HEAP8[i127] = i140;
                  i136 = i139 + 1 | 0;
                  if ((i136 | 0) == (i147 | 0)) {
                    break L3031;
                  } else {
                    i139 = i136;
                    i138 = i3;
                    i137 = i127;
                  }
                }
              }
            } while (0);
            HEAP8[i1 + 242 | 0] = 2;
            HEAP8[i1 + 243 | 0] = 16;
            HEAP32[i1 + 236 >> 2] = i142;
            break;
          } else {
            HEAP8[i149 + i142 | 0] = i140;
            L3026 : do {
              if (i147 >>> 0 > 1) {
                i137 = 1;
                i138 = i141;
                i139 = i144;
                while (1) {
                  i127 = i138 - 1 | 0;
                  i3 = i139 - 2 | 0;
                  HEAP8[i3] = HEAP8[i127] | 0;
                  i136 = i137 + 1 | 0;
                  HEAP8[i139 - 3 | 0] = i140;
                  if ((i136 | 0) == (i147 | 0)) {
                    break L3026;
                  } else {
                    i137 = i136;
                    i138 = i127;
                    i139 = i3;
                  }
                }
              }
            } while (0);
            HEAP8[i1 + 242 | 0] = 2;
            HEAP8[i1 + 243 | 0] = 16;
            HEAP32[i1 + 236 >> 2] = i142;
            break;
          }
        } else if ((i143 << 24 >> 24 | 0) == 16) {
          i144 = i149 + (i147 << 1 | 1) | 0;
          i141 = i147 << 2;
          i139 = i149 + (i141 | 1) | 0;
          if ((i148 & 128 | 0) == 0) {
            L3043 : do {
              if ((i147 | 0) != 0) {
                i138 = 0;
                i137 = i144;
                i3 = i139;
                while (1) {
                  HEAP8[i3 - 1 | 0] = HEAP8[i137 - 1 | 0] | 0;
                  i127 = i137 - 2 | 0;
                  HEAP8[i3 - 2 | 0] = HEAP8[i127] | 0;
                  HEAP8[i3 - 3 | 0] = i145;
                  i136 = i3 - 4 | 0;
                  HEAP8[i136] = i140;
                  i135 = i138 + 1 | 0;
                  if ((i135 | 0) == (i147 | 0)) {
                    break L3043;
                  } else {
                    i138 = i135;
                    i137 = i127;
                    i3 = i136;
                  }
                }
              }
            } while (0);
            HEAP8[i1 + 242 | 0] = 2;
            HEAP8[i1 + 243 | 0] = 32;
            HEAP32[i1 + 236 >> 2] = i141;
            break;
          } else {
            HEAP8[i149 + i141 | 0] = i145;
            HEAP8[i149 + (i141 - 1 | 0) | 0] = i140;
            L3038 : do {
              if (i147 >>> 0 > 1) {
                i143 = 1;
                i142 = i144;
                i3 = i139;
                while (1) {
                  HEAP8[i3 - 3 | 0] = HEAP8[i142 - 1 | 0] | 0;
                  i137 = i142 - 2 | 0;
                  i138 = i3 - 4 | 0;
                  HEAP8[i138] = HEAP8[i137] | 0;
                  i136 = i143 + 1 | 0;
                  HEAP8[i3 - 5 | 0] = i145;
                  HEAP8[i3 - 6 | 0] = i140;
                  if ((i136 | 0) == (i147 | 0)) {
                    break L3038;
                  } else {
                    i143 = i136;
                    i142 = i137;
                    i3 = i138;
                  }
                }
              }
            } while (0);
            HEAP8[i1 + 242 | 0] = 2;
            HEAP8[i1 + 243 | 0] = 32;
            HEAP32[i1 + 236 >> 2] = i141;
            break;
          }
        } else {
          break;
        }
      } else if ((i146 << 24 >> 24 | 0) == 2) {
        i139 = HEAP8[i1 + 241 | 0] | 0;
        if ((i139 << 24 >> 24 | 0) == 8) {
          i144 = i147 * 3 & -1;
          i3 = i149 + (i144 + 1 | 0) | 0;
          i142 = i144 + i147 | 0;
          i144 = i149 + (i142 + 1 | 0) | 0;
          if ((i148 & 128 | 0) == 0) {
            L3057 : do {
              if ((i147 | 0) != 0) {
                i143 = 0;
                i138 = i3;
                i137 = i144;
                while (1) {
                  HEAP8[i137 - 1 | 0] = HEAP8[i138 - 1 | 0] | 0;
                  HEAP8[i137 - 2 | 0] = HEAP8[i138 - 2 | 0] | 0;
                  i136 = i138 - 3 | 0;
                  HEAP8[i137 - 3 | 0] = HEAP8[i136] | 0;
                  i127 = i137 - 4 | 0;
                  HEAP8[i127] = i140;
                  i135 = i143 + 1 | 0;
                  if ((i135 | 0) == (i147 | 0)) {
                    break L3057;
                  } else {
                    i143 = i135;
                    i138 = i136;
                    i137 = i127;
                  }
                }
              }
            } while (0);
            HEAP8[i1 + 242 | 0] = 4;
            HEAP8[i1 + 243 | 0] = 32;
            HEAP32[i1 + 236 >> 2] = i147 << 2;
            break;
          } else {
            HEAP8[i149 + i142 | 0] = i140;
            L3052 : do {
              if (i147 >>> 0 > 1) {
                i141 = 1;
                i137 = i3;
                i138 = i144;
                while (1) {
                  HEAP8[i138 - 2 | 0] = HEAP8[i137 - 1 | 0] | 0;
                  HEAP8[i138 - 3 | 0] = HEAP8[i137 - 2 | 0] | 0;
                  i143 = i137 - 3 | 0;
                  i127 = i138 - 4 | 0;
                  HEAP8[i127] = HEAP8[i143] | 0;
                  i136 = i141 + 1 | 0;
                  HEAP8[i138 - 5 | 0] = i140;
                  if ((i136 | 0) == (i147 | 0)) {
                    break L3052;
                  } else {
                    i141 = i136;
                    i137 = i143;
                    i138 = i127;
                  }
                }
              }
            } while (0);
            HEAP8[i1 + 242 | 0] = 4;
            HEAP8[i1 + 243 | 0] = 32;
            HEAP32[i1 + 236 >> 2] = i147 << 2;
            break;
          }
        } else if ((i139 << 24 >> 24 | 0) == 16) {
          i144 = i147 * 6 & -1;
          i3 = i149 + (i144 | 1) | 0;
          i142 = i144 + (i147 << 1) | 0;
          i144 = i149 + (i142 | 1) | 0;
          if ((i148 & 128 | 0) == 0) {
            L3069 : do {
              if ((i147 | 0) != 0) {
                i138 = 0;
                i137 = i3;
                i141 = i144;
                while (1) {
                  HEAP8[i141 - 1 | 0] = HEAP8[i137 - 1 | 0] | 0;
                  HEAP8[i141 - 2 | 0] = HEAP8[i137 - 2 | 0] | 0;
                  HEAP8[i141 - 3 | 0] = HEAP8[i137 - 3 | 0] | 0;
                  HEAP8[i141 - 4 | 0] = HEAP8[i137 - 4 | 0] | 0;
                  HEAP8[i141 - 5 | 0] = HEAP8[i137 - 5 | 0] | 0;
                  i127 = i137 - 6 | 0;
                  HEAP8[i141 - 6 | 0] = HEAP8[i127] | 0;
                  HEAP8[i141 - 7 | 0] = i145;
                  i143 = i141 - 8 | 0;
                  HEAP8[i143] = i140;
                  i136 = i138 + 1 | 0;
                  if ((i136 | 0) == (i147 | 0)) {
                    break L3069;
                  } else {
                    i138 = i136;
                    i137 = i127;
                    i141 = i143;
                  }
                }
              }
            } while (0);
            HEAP8[i1 + 242 | 0] = 4;
            HEAP8[i1 + 243 | 0] = 64;
            HEAP32[i1 + 236 >> 2] = i147 << 3;
            break;
          } else {
            HEAP8[i149 + i142 | 0] = i145;
            HEAP8[i149 + (i142 - 1 | 0) | 0] = i140;
            L3064 : do {
              if (i147 >>> 0 > 1) {
                i139 = 1;
                i141 = i3;
                i137 = i144;
                while (1) {
                  HEAP8[i137 - 3 | 0] = HEAP8[i141 - 1 | 0] | 0;
                  HEAP8[i137 - 4 | 0] = HEAP8[i141 - 2 | 0] | 0;
                  HEAP8[i137 - 5 | 0] = HEAP8[i141 - 3 | 0] | 0;
                  HEAP8[i137 - 6 | 0] = HEAP8[i141 - 4 | 0] | 0;
                  HEAP8[i137 - 7 | 0] = HEAP8[i141 - 5 | 0] | 0;
                  i138 = i141 - 6 | 0;
                  i143 = i137 - 8 | 0;
                  HEAP8[i143] = HEAP8[i138] | 0;
                  i127 = i139 + 1 | 0;
                  HEAP8[i137 - 9 | 0] = i145;
                  HEAP8[i137 - 10 | 0] = i140;
                  if ((i127 | 0) == (i147 | 0)) {
                    break L3064;
                  } else {
                    i139 = i127;
                    i141 = i138;
                    i137 = i143;
                  }
                }
              }
            } while (0);
            HEAP8[i1 + 242 | 0] = 4;
            HEAP8[i1 + 243 | 0] = 64;
            HEAP32[i1 + 236 >> 2] = i147 << 3;
            break;
          }
        } else {
          break;
        }
      }
    } while (0);
    i150 = HEAP32[i6 >> 2] | 0;
  }
  L3075 : do {
    if ((i150 & 524288 | 0) != 0) {
      i147 = HEAP32[i4 >> 2] | 0;
      i140 = HEAP32[i1 + 232 >> 2] | 0;
      i145 = HEAP8[i1 + 240 | 0] | 0;
      if ((i145 << 24 >> 24 | 0) == 6) {
        i149 = i147 + ((HEAP32[i1 + 236 >> 2] | 0) + 1 | 0) | 0;
        i148 = (i140 | 0) == 0;
        if (HEAP8[i1 + 241 | 0] << 24 >> 24 == 8) {
          if (i148) {
            break;
          } else {
            i151 = i149;
            i152 = 0;
          }
          while (1) {
            i146 = i151 - 1 | 0;
            HEAP8[i146] = HEAP8[i146] ^ -1;
            i146 = i152 + 1 | 0;
            if ((i146 | 0) == (i140 | 0)) {
              break L3075;
            } else {
              i151 = i151 - 4 | 0;
              i152 = i146;
            }
          }
        } else {
          if (i148) {
            break;
          } else {
            i153 = i149;
            i154 = 0;
          }
          while (1) {
            i146 = i153 - 1 | 0;
            HEAP8[i146] = HEAP8[i146] ^ -1;
            i146 = i153 - 2 | 0;
            HEAP8[i146] = HEAP8[i146] ^ -1;
            i146 = i154 + 1 | 0;
            if ((i146 | 0) == (i140 | 0)) {
              break L3075;
            } else {
              i153 = i153 - 8 | 0;
              i154 = i146;
            }
          }
        }
      } else if ((i145 << 24 >> 24 | 0) == 4) {
        i149 = i147 + ((HEAP32[i1 + 236 >> 2] | 0) + 1 | 0) | 0;
        i148 = (i140 | 0) == 0;
        if (HEAP8[i1 + 241 | 0] << 24 >> 24 == 8) {
          if (i148) {
            break;
          } else {
            i155 = i149;
            i156 = 0;
          }
          while (1) {
            i146 = i155 - 1 | 0;
            HEAP8[i146] = HEAP8[i146] ^ -1;
            i146 = i156 + 1 | 0;
            if ((i146 | 0) == (i140 | 0)) {
              break L3075;
            } else {
              i155 = i155 - 2 | 0;
              i156 = i146;
            }
          }
        } else {
          if (i148) {
            break;
          } else {
            i157 = i149;
            i158 = 0;
          }
          while (1) {
            i147 = i157 - 1 | 0;
            HEAP8[i147] = HEAP8[i147] ^ -1;
            i147 = i157 - 2 | 0;
            HEAP8[i147] = HEAP8[i147] ^ -1;
            i147 = i158 + 1 | 0;
            if ((i147 | 0) == (i140 | 0)) {
              break L3075;
            } else {
              i157 = i157 - 4 | 0;
              i158 = i147;
            }
          }
        }
      } else {
        break;
      }
    }
  } while (0);
  i158 = HEAP32[i6 >> 2] | 0;
  if ((i158 & 131072 | 0) == 0) {
    i159 = i158;
  } else {
    i158 = HEAP32[i4 >> 2] | 0;
    i157 = HEAP32[i1 + 232 >> 2] | 0;
    i156 = HEAP8[i1 + 240 | 0] | 0;
    L3097 : do {
      if ((i156 << 24 >> 24 | 0) == 6) {
        i155 = i158 + ((HEAP32[i1 + 236 >> 2] | 0) + 1 | 0) | 0;
        i154 = (i157 | 0) == 0;
        if (HEAP8[i1 + 241 | 0] << 24 >> 24 == 8) {
          if (i154) {
            break;
          } else {
            i160 = 0;
            i161 = i155;
          }
          while (1) {
            i153 = i161 - 1 | 0;
            i152 = HEAP8[i153] | 0;
            i151 = i161 - 2 | 0;
            HEAP8[i153] = HEAP8[i151] | 0;
            i153 = i161 - 3 | 0;
            HEAP8[i151] = HEAP8[i153] | 0;
            i151 = i161 - 4 | 0;
            HEAP8[i153] = HEAP8[i151] | 0;
            HEAP8[i151] = i152;
            i152 = i160 + 1 | 0;
            if ((i152 | 0) == (i157 | 0)) {
              break L3097;
            } else {
              i160 = i152;
              i161 = i151;
            }
          }
        } else {
          if (i154) {
            break;
          } else {
            i162 = i155;
            i163 = 0;
          }
          while (1) {
            i151 = i162 - 1 | 0;
            i152 = HEAP8[i151] | 0;
            i153 = i162 - 2 | 0;
            i150 = HEAP8[i153] | 0;
            i140 = i162 - 3 | 0;
            HEAP8[i151] = HEAP8[i140] | 0;
            i151 = i162 - 4 | 0;
            HEAP8[i153] = HEAP8[i151] | 0;
            i153 = i162 - 5 | 0;
            HEAP8[i140] = HEAP8[i153] | 0;
            i140 = i162 - 6 | 0;
            HEAP8[i151] = HEAP8[i140] | 0;
            i151 = i162 - 7 | 0;
            HEAP8[i153] = HEAP8[i151] | 0;
            i153 = i162 - 8 | 0;
            HEAP8[i140] = HEAP8[i153] | 0;
            HEAP8[i151] = i152;
            HEAP8[i153] = i150;
            i150 = i163 + 1 | 0;
            if ((i150 | 0) == (i157 | 0)) {
              break L3097;
            } else {
              i162 = i153;
              i163 = i150;
            }
          }
        }
      } else if ((i156 << 24 >> 24 | 0) == 4) {
        i155 = i158 + ((HEAP32[i1 + 236 >> 2] | 0) + 1 | 0) | 0;
        i154 = (i157 | 0) == 0;
        if (HEAP8[i1 + 241 | 0] << 24 >> 24 == 8) {
          if (i154) {
            break;
          } else {
            i164 = i155;
            i165 = 0;
          }
          while (1) {
            i150 = i164 - 1 | 0;
            i153 = HEAP8[i150] | 0;
            i152 = i164 - 2 | 0;
            HEAP8[i150] = HEAP8[i152] | 0;
            HEAP8[i152] = i153;
            i153 = i165 + 1 | 0;
            if ((i153 | 0) == (i157 | 0)) {
              break L3097;
            } else {
              i164 = i152;
              i165 = i153;
            }
          }
        } else {
          if (i154) {
            break;
          } else {
            i166 = i155;
            i167 = 0;
          }
          while (1) {
            i153 = i166 - 1 | 0;
            i152 = HEAP8[i153] | 0;
            i150 = i166 - 2 | 0;
            i151 = HEAP8[i150] | 0;
            i140 = i166 - 3 | 0;
            HEAP8[i153] = HEAP8[i140] | 0;
            i153 = i166 - 4 | 0;
            HEAP8[i150] = HEAP8[i153] | 0;
            HEAP8[i140] = i152;
            HEAP8[i153] = i151;
            i151 = i167 + 1 | 0;
            if ((i151 | 0) == (i157 | 0)) {
              break L3097;
            } else {
              i166 = i153;
              i167 = i151;
            }
          }
        }
      }
    } while (0);
    i159 = HEAP32[i6 >> 2] | 0;
  }
  do {
    if ((i159 & 16 | 0) == 0) {
      i168 = i159;
    } else {
      if (HEAP8[i1 + 241 | 0] << 24 >> 24 != 16) {
        i168 = i159;
        break;
      }
      i167 = Math_imul(HEAPU8[i1 + 242 | 0] | 0, HEAP32[i1 + 232 >> 2] | 0);
      if ((i167 | 0) == 0) {
        i168 = i159;
        break;
      }
      i166 = 0;
      i157 = (HEAP32[i4 >> 2] | 0) + 1 | 0;
      while (1) {
        i165 = HEAP8[i157] | 0;
        i164 = i157 + 1 | 0;
        HEAP8[i157] = HEAP8[i164] | 0;
        HEAP8[i164] = i165;
        i165 = i166 + 1 | 0;
        if ((i165 | 0) == (i167 | 0)) {
          break;
        } else {
          i166 = i165;
          i157 = i157 + 2 | 0;
        }
      }
      i168 = HEAP32[i6 >> 2] | 0;
    }
  } while (0);
  if ((i168 & 1048576 | 0) == 0) {
    STACKTOP = i2;
    return;
  }
  i168 = HEAP32[i1 + 68 >> 2] | 0;
  if ((i168 | 0) != 0) {
    FUNCTION_TABLE_viii[i168 & 511](i1, i1 + 232 | 0, (HEAP32[i4 >> 2] | 0) + 1 | 0);
  }
  i4 = HEAP8[i1 + 80 | 0] | 0;
  if (i4 << 24 >> 24 != 0) {
    HEAP8[i1 + 241 | 0] = i4;
  }
  i4 = HEAP8[i1 + 81 | 0] | 0;
  i168 = i1 + 242 | 0;
  if (i4 << 24 >> 24 == 0) {
    i169 = HEAP8[i168] | 0;
  } else {
    HEAP8[i168] = i4;
    i169 = i4;
  }
  i4 = Math_imul(i169, HEAP8[i1 + 241 | 0] | 0);
  HEAP8[i1 + 243 | 0] = i4;
  i169 = i4 & 255;
  i168 = HEAP32[i1 + 232 >> 2] | 0;
  if ((i4 & 255) > 7) {
    i170 = Math_imul(i169 >>> 3, i168);
  } else {
    i170 = (Math_imul(i169, i168) + 7 | 0) >>> 3;
  }
  HEAP32[i1 + 236 >> 2] = i170;
  STACKTOP = i2;
  return;
}
function _png_do_expand(i1, i2, i3) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
  i4 = HEAP32[i1 >> 2] | 0;
  i5 = i1 + 8 | 0;
  i6 = HEAP8[i5] | 0;
  if ((i6 << 24 >> 24 | 0) == 0) {
    i7 = (i3 | 0) != 0;
    if (i7) {
      i8 = HEAP16[i3 + 8 >> 1] | 0;
    } else {
      i8 = 0;
    }
    i9 = i1 + 9 | 0;
    i10 = HEAP8[i9] | 0;
    if ((i10 & 255) < 8) {
      i11 = i10 & 255;
      L3150 : do {
        if ((i11 | 0) == 1) {
          i12 = -(i8 & 1) & 255;
          i13 = i4 - 1 | 0;
          if ((i4 | 0) == 0) {
            i14 = i12;
            break;
          }
          i15 = 0;
          i16 = i2 + i13 | 0;
          i17 = i2 + (i13 >>> 3) | 0;
          i13 = i4 + 7 & 7 ^ 7;
          while (1) {
            HEAP8[i16] = (((HEAPU8[i17] | 0) & 1 << i13 | 0) != 0) << 31 >> 31;
            i18 = (i13 | 0) == 7;
            i19 = i15 + 1 | 0;
            if ((i19 | 0) == (i4 | 0)) {
              i14 = i12;
              break L3150;
            } else {
              i15 = i19;
              i16 = i16 - 1 | 0;
              i17 = i18 ? i17 - 1 | 0 : i17;
              i13 = i18 ? 0 : i13 + 1 | 0;
            }
          }
        } else if ((i11 | 0) == 2) {
          i13 = (i8 & 3) * 85 & 65535;
          i17 = i4 - 1 | 0;
          if ((i4 | 0) == 0) {
            i14 = i13;
            break;
          }
          i16 = 0;
          i15 = i2 + i17 | 0;
          i12 = i2 + (i17 >>> 2) | 0;
          i17 = (i4 << 1) + 6 & 6 ^ 6;
          while (1) {
            i18 = (HEAPU8[i12] | 0) >>> (i17 >>> 0) & 3;
            HEAP8[i15] = (i18 << 2 | i18 | i18 << 4 | i18 << 6) & 255;
            i18 = (i17 | 0) == 6;
            i19 = i16 + 1 | 0;
            if ((i19 | 0) == (i4 | 0)) {
              i14 = i13;
              break L3150;
            } else {
              i16 = i19;
              i15 = i15 - 1 | 0;
              i12 = i18 ? i12 - 1 | 0 : i12;
              i17 = i18 ? 0 : i17 + 2 | 0;
            }
          }
        } else if ((i11 | 0) == 4) {
          i17 = (i8 & 15) * 17 & 65535;
          i12 = i4 - 1 | 0;
          if ((i4 | 0) == 0) {
            i14 = i17;
            break;
          }
          i15 = 0;
          i16 = i2 + i12 | 0;
          i13 = i2 + (i12 >>> 1) | 0;
          i12 = i4 << 2 & 4;
          while (1) {
            i18 = (HEAPU8[i13] | 0) >>> (i12 >>> 0) & 15;
            HEAP8[i16] = (i18 << 4 | i18) & 255;
            i18 = (i12 | 0) == 4;
            i19 = i15 + 1 | 0;
            if ((i19 | 0) == (i4 | 0)) {
              i14 = i17;
              break L3150;
            } else {
              i15 = i19;
              i16 = i16 - 1 | 0;
              i13 = i18 ? i13 - 1 | 0 : i13;
              i12 = i18 ? 0 : 4;
            }
          }
        } else {
          i14 = i8;
        }
      } while (0);
      HEAP8[i9] = 8;
      HEAP8[i1 + 11 | 0] = 8;
      HEAP32[i1 + 4 >> 2] = i4;
      i20 = i14;
      i21 = 8;
    } else {
      i20 = i8;
      i21 = i10;
    }
    if (!i7) {
      return;
    }
    L3168 : do {
      if ((i21 << 24 >> 24 | 0) == 8) {
        if ((i4 | 0) == 0) {
          break;
        }
        i7 = i20 & 255;
        i10 = 0;
        i8 = i2 + ((i4 << 1) - 1 | 0) | 0;
        i14 = i2 + (i4 - 1 | 0) | 0;
        while (1) {
          HEAP8[i8] = ((HEAPU8[i14] | 0 | 0) != (i7 | 0)) << 31 >> 31;
          HEAP8[i8 - 1 | 0] = HEAP8[i14] | 0;
          i11 = i10 + 1 | 0;
          if ((i11 | 0) == (i4 | 0)) {
            break L3168;
          } else {
            i10 = i11;
            i8 = i8 - 2 | 0;
            i14 = i14 - 1 | 0;
          }
        }
      } else if ((i21 << 24 >> 24 | 0) == 16) {
        i14 = (i20 & 65535) >>> 8 & 65535;
        i8 = HEAP32[i1 + 4 >> 2] | 0;
        if ((i4 | 0) == 0) {
          break;
        }
        i10 = i20 & 255;
        i7 = 0;
        i11 = i2 + ((i8 << 1) - 1 | 0) | 0;
        i12 = i2 + (i8 - 1 | 0) | 0;
        while (1) {
          i8 = i12 - 1 | 0;
          do {
            if ((HEAPU8[i8] | 0 | 0) == (i14 | 0)) {
              if (HEAP8[i12] << 24 >> 24 != i10 << 24 >> 24) {
                i22 = 2264;
                break;
              }
              HEAP8[i11] = 0;
              HEAP8[i11 - 1 | 0] = 0;
              break;
            } else {
              i22 = 2264;
            }
          } while (0);
          if ((i22 | 0) == 2264) {
            i22 = 0;
            HEAP8[i11] = -1;
            HEAP8[i11 - 1 | 0] = -1;
          }
          HEAP8[i11 - 2 | 0] = HEAP8[i12] | 0;
          HEAP8[i11 - 3 | 0] = HEAP8[i8] | 0;
          i13 = i7 + 1 | 0;
          if ((i13 | 0) == (i4 | 0)) {
            break L3168;
          } else {
            i7 = i13;
            i11 = i11 - 4 | 0;
            i12 = i12 - 2 | 0;
          }
        }
      }
    } while (0);
    HEAP8[i5] = 4;
    HEAP8[i1 + 10 | 0] = 2;
    i20 = HEAP8[i9] << 1;
    HEAP8[i1 + 11 | 0] = i20;
    i9 = i20 & 255;
    if ((i20 & 255) > 7) {
      i23 = Math_imul(i9 >>> 3, i4);
    } else {
      i23 = (Math_imul(i9, i4) + 7 | 0) >>> 3;
    }
    HEAP32[i1 + 4 >> 2] = i23;
    return;
  } else if ((i6 << 24 >> 24 | 0) == 2) {
    if ((i3 | 0) == 0) {
      return;
    }
    i6 = i1 + 9 | 0;
    i23 = HEAP8[i6] | 0;
    L3193 : do {
      if ((i23 << 24 >> 24 | 0) == 8) {
        if ((i4 | 0) == 0) {
          break;
        }
        i9 = HEAP16[i3 + 2 >> 1] & 255;
        i20 = HEAP16[i3 + 4 >> 1] & 255;
        i21 = HEAP16[i3 + 6 >> 1] & 255;
        i12 = 0;
        i11 = i2 + ((i4 << 2) - 1 | 0) | 0;
        i7 = i2 + ((HEAP32[i1 + 4 >> 2] | 0) - 1 | 0) | 0;
        while (1) {
          i10 = i7 - 2 | 0;
          i14 = i7 - 1 | 0;
          do {
            if (HEAP8[i10] << 24 >> 24 == i9 << 24 >> 24) {
              if (HEAP8[i14] << 24 >> 24 != i20 << 24 >> 24) {
                i22 = 2277;
                break;
              }
              if (HEAP8[i7] << 24 >> 24 == i21 << 24 >> 24) {
                i24 = 0;
                break;
              } else {
                i22 = 2277;
                break;
              }
            } else {
              i22 = 2277;
            }
          } while (0);
          if ((i22 | 0) == 2277) {
            i22 = 0;
            i24 = -1;
          }
          HEAP8[i11] = i24;
          HEAP8[i11 - 1 | 0] = HEAP8[i7] | 0;
          HEAP8[i11 - 2 | 0] = HEAP8[i14] | 0;
          HEAP8[i11 - 3 | 0] = HEAP8[i10] | 0;
          i8 = i12 + 1 | 0;
          if ((i8 | 0) == (i4 | 0)) {
            break L3193;
          } else {
            i12 = i8;
            i11 = i11 - 4 | 0;
            i7 = i7 - 3 | 0;
          }
        }
      } else if ((i23 << 24 >> 24 | 0) == 16) {
        i7 = HEAP16[i3 + 2 >> 1] | 0;
        i11 = (i7 & 65535) >>> 8 & 65535;
        i12 = HEAP16[i3 + 4 >> 1] | 0;
        i21 = (i12 & 65535) >>> 8 & 65535;
        i20 = HEAP16[i3 + 6 >> 1] | 0;
        i9 = (i20 & 65535) >>> 8 & 65535;
        if ((i4 | 0) == 0) {
          break;
        }
        i8 = i7 & 255;
        i7 = i12 & 255;
        i12 = i20 & 255;
        i20 = 0;
        i13 = i2 + ((i4 << 3) - 1 | 0) | 0;
        i16 = i2 + ((HEAP32[i1 + 4 >> 2] | 0) - 1 | 0) | 0;
        while (1) {
          i15 = i16 - 5 | 0;
          i17 = i16 - 4 | 0;
          do {
            if ((HEAPU8[i15] | 0 | 0) == (i11 | 0)) {
              if (HEAP8[i17] << 24 >> 24 != i8 << 24 >> 24) {
                i22 = 2288;
                break;
              }
              i18 = i16 - 3 | 0;
              if ((HEAPU8[i18] | 0 | 0) != (i21 | 0)) {
                i22 = 2288;
                break;
              }
              i19 = i16 - 2 | 0;
              if (HEAP8[i19] << 24 >> 24 != i7 << 24 >> 24) {
                i22 = 2288;
                break;
              }
              i25 = i16 - 1 | 0;
              if ((HEAPU8[i25] | 0 | 0) != (i9 | 0)) {
                i22 = 2288;
                break;
              }
              if (HEAP8[i16] << 24 >> 24 != i12 << 24 >> 24) {
                i22 = 2288;
                break;
              }
              HEAP8[i13] = 0;
              HEAP8[i13 - 1 | 0] = 0;
              i26 = i25;
              i27 = i19;
              i28 = i18;
              break;
            } else {
              i22 = 2288;
            }
          } while (0);
          if ((i22 | 0) == 2288) {
            i22 = 0;
            HEAP8[i13] = -1;
            HEAP8[i13 - 1 | 0] = -1;
            i26 = i16 - 1 | 0;
            i27 = i16 - 2 | 0;
            i28 = i16 - 3 | 0;
          }
          HEAP8[i13 - 2 | 0] = HEAP8[i16] | 0;
          HEAP8[i13 - 3 | 0] = HEAP8[i26] | 0;
          HEAP8[i13 - 4 | 0] = HEAP8[i27] | 0;
          HEAP8[i13 - 5 | 0] = HEAP8[i28] | 0;
          HEAP8[i13 - 6 | 0] = HEAP8[i17] | 0;
          HEAP8[i13 - 7 | 0] = HEAP8[i15] | 0;
          i10 = i20 + 1 | 0;
          if ((i10 | 0) == (i4 | 0)) {
            break L3193;
          } else {
            i20 = i10;
            i13 = i13 - 8 | 0;
            i16 = i16 - 6 | 0;
          }
        }
      }
    } while (0);
    HEAP8[i5] = 6;
    HEAP8[i1 + 10 | 0] = 4;
    i5 = HEAP8[i6] << 2;
    HEAP8[i1 + 11 | 0] = i5;
    i6 = i5 & 255;
    if ((i5 & 255) > 7) {
      i29 = Math_imul(i6 >>> 3, i4);
    } else {
      i29 = (Math_imul(i6, i4) + 7 | 0) >>> 3;
    }
    HEAP32[i1 + 4 >> 2] = i29;
    return;
  } else {
    return;
  }
}
function _png_do_gray_to_rgb(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
  i3 = HEAP32[i1 >> 2] | 0;
  i4 = i1 + 9 | 0;
  i5 = HEAP8[i4] | 0;
  if ((i5 & 255) <= 7) {
    return;
  }
  i6 = i1 + 8 | 0;
  i7 = HEAP8[i6] | 0;
  if ((i7 & 2) << 24 >> 24 != 0) {
    return;
  }
  L3232 : do {
    if ((i7 << 24 >> 24 | 0) == 0) {
      if (i5 << 24 >> 24 == 8) {
        i8 = i3 - 1 | 0;
        if ((i3 | 0) == 0) {
          break;
        }
        i9 = 0;
        i10 = i2 + i8 | 0;
        i11 = i2 + (i8 + (i3 << 1) | 0) | 0;
        while (1) {
          HEAP8[i11] = HEAP8[i10] | 0;
          HEAP8[i11 - 1 | 0] = HEAP8[i10] | 0;
          HEAP8[i11 - 2 | 0] = HEAP8[i10] | 0;
          i8 = i9 + 1 | 0;
          if ((i8 | 0) == (i3 | 0)) {
            break L3232;
          } else {
            i9 = i8;
            i10 = i10 - 1 | 0;
            i11 = i11 - 3 | 0;
          }
        }
      } else {
        i11 = (i3 << 1) - 1 | 0;
        if ((i3 | 0) == 0) {
          break;
        }
        i10 = 0;
        i9 = i2 + i11 | 0;
        i8 = i2 + (i11 + (i3 << 2) | 0) | 0;
        while (1) {
          HEAP8[i8] = HEAP8[i9] | 0;
          i11 = i9 - 1 | 0;
          HEAP8[i8 - 1 | 0] = HEAP8[i11] | 0;
          HEAP8[i8 - 2 | 0] = HEAP8[i9] | 0;
          HEAP8[i8 - 3 | 0] = HEAP8[i11] | 0;
          HEAP8[i8 - 4 | 0] = HEAP8[i9] | 0;
          HEAP8[i8 - 5 | 0] = HEAP8[i11] | 0;
          i11 = i10 + 1 | 0;
          if ((i11 | 0) == (i3 | 0)) {
            break L3232;
          } else {
            i10 = i11;
            i9 = i9 - 2 | 0;
            i8 = i8 - 6 | 0;
          }
        }
      }
    } else if ((i7 << 24 >> 24 | 0) == 4) {
      if (i5 << 24 >> 24 == 8) {
        i8 = i3 << 1;
        i9 = i8 - 1 | 0;
        if ((i3 | 0) == 0) {
          break;
        }
        i10 = 0;
        i11 = i2 + i9 | 0;
        i12 = i2 + (i9 + i8 | 0) | 0;
        while (1) {
          i8 = i11 - 1 | 0;
          HEAP8[i12] = HEAP8[i11] | 0;
          HEAP8[i12 - 1 | 0] = HEAP8[i8] | 0;
          HEAP8[i12 - 2 | 0] = HEAP8[i8] | 0;
          HEAP8[i12 - 3 | 0] = HEAP8[i8] | 0;
          i8 = i10 + 1 | 0;
          if ((i8 | 0) == (i3 | 0)) {
            break L3232;
          } else {
            i10 = i8;
            i11 = i11 - 2 | 0;
            i12 = i12 - 4 | 0;
          }
        }
      } else {
        i12 = i3 << 2;
        i11 = i12 - 1 | 0;
        if ((i3 | 0) == 0) {
          break;
        }
        i10 = 0;
        i8 = i2 + i11 | 0;
        i9 = i2 + (i11 + i12 | 0) | 0;
        while (1) {
          HEAP8[i9] = HEAP8[i8] | 0;
          i12 = i8 - 2 | 0;
          HEAP8[i9 - 1 | 0] = HEAP8[i8 - 1 | 0] | 0;
          HEAP8[i9 - 2 | 0] = HEAP8[i12] | 0;
          i11 = i8 - 3 | 0;
          HEAP8[i9 - 3 | 0] = HEAP8[i11] | 0;
          HEAP8[i9 - 4 | 0] = HEAP8[i12] | 0;
          HEAP8[i9 - 5 | 0] = HEAP8[i11] | 0;
          HEAP8[i9 - 6 | 0] = HEAP8[i12] | 0;
          HEAP8[i9 - 7 | 0] = HEAP8[i11] | 0;
          i11 = i10 + 1 | 0;
          if ((i11 | 0) == (i3 | 0)) {
            break L3232;
          } else {
            i10 = i11;
            i8 = i8 - 4 | 0;
            i9 = i9 - 8 | 0;
          }
        }
      }
    }
  } while (0);
  i2 = i1 + 10 | 0;
  i5 = (HEAP8[i2] | 0) + 2 & 255;
  HEAP8[i2] = i5;
  HEAP8[i6] = HEAP8[i6] | 2;
  i6 = Math_imul(HEAP8[i4] | 0, i5);
  HEAP8[i1 + 11 | 0] = i6;
  i5 = i6 & 255;
  if ((i6 & 255) > 7) {
    i13 = Math_imul(i5 >>> 3, i3);
  } else {
    i13 = (Math_imul(i5, i3) + 7 | 0) >>> 3;
  }
  HEAP32[i1 + 4 >> 2] = i13;
  return;
}
function _png_read_chunk_header(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
  i2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  i3 = i2 | 0;
  i4 = i1 + 624 | 0;
  HEAP32[i4 >> 2] = 33;
  i5 = i3 | 0;
  i6 = HEAP32[i1 + 60 >> 2] | 0;
  if ((i6 | 0) == 0) {
    _png_error(i1, 5269084);
  }
  FUNCTION_TABLE_viii[i6 & 511](i1, i5, 8);
  i6 = (HEAPU8[i3 + 1 | 0] | 0) << 16 | (HEAPU8[i5] | 0) << 24 | (HEAPU8[i3 + 2 | 0] | 0) << 8 | (HEAPU8[i3 + 3 | 0] | 0);
  if ((i6 | 0) < 0) {
    _png_error(i1, 5268688);
  }
  i5 = i1 + 260 | 0;
  i7 = i3 + 4 | 0;
  i3 = i5;
  i8 = HEAPU8[i7] | HEAPU8[i7 + 1 | 0] << 8 | HEAPU8[i7 + 2 | 0] << 16 | HEAPU8[i7 + 3 | 0] << 24 | 0;
  tempBigInt = i8;
  HEAP8[i3] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i3 + 1 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i3 + 2 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i3 + 3 | 0] = tempBigInt & 255;
  i3 = i1 + 248 | 0;
  HEAP32[i3 >> 2] = 0;
  i7 = i5 | 0;
  i5 = i8 & 255;
  i9 = HEAP32[i1 + 88 >> 2] | 0;
  i10 = i8 >>> 8 & 255;
  i11 = i8 >>> 16 & 255;
  i12 = i8 >>> 24 & 255;
  do {
    if ((i5 & 32) << 24 >> 24 == 0) {
      if ((i9 & 2048 | 0) == 0) {
        i13 = 2332;
        break;
      } else {
        break;
      }
    } else {
      if ((i9 & 768 | 0) == 768) {
        break;
      } else {
        i13 = 2332;
        break;
      }
    }
  } while (0);
  if ((i13 | 0) == 2332) {
    HEAP32[i3 >> 2] = _crc32(0, i7, 4) | 0;
  }
  if ((i5 - 65 & 255) > 57 | (i5 - 91 & 255) < 6) {
    _png_chunk_error(i1, 5272736);
  }
  if ((i10 - 65 & 255) > 57 | (i10 - 91 & 255) < 6) {
    _png_chunk_error(i1, 5272736);
  }
  if ((i11 - 65 & 255) > 57 | (i11 - 91 & 255) < 6) {
    _png_chunk_error(i1, 5272736);
  }
  if ((i12 - 65 & 255) > 57 | (i12 - 91 & 255) < 6) {
    _png_chunk_error(i1, 5272736);
  } else {
    HEAP32[i4 >> 2] = 65;
    STACKTOP = i2;
    return i6 | 0;
  }
  return 0;
}
function _png_inflate(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
  i6 = STACKTOP;
  STACKTOP = STACKTOP + 52 | 0;
  i7 = i6 | 0;
  i8 = i1 + 96 | 0;
  HEAP32[i8 >> 2] = i2;
  i2 = i1 + 100 | 0;
  HEAP32[i2 >> 2] = 0;
  i9 = i1 + 152 | 0;
  i10 = i1 + 108 | 0;
  i11 = i1 + 156 | 0;
  i12 = i1 + 112 | 0;
  i13 = (i4 | 0) != 0;
  i14 = i3;
  i3 = 0;
  i15 = 0;
  while (1) {
    if (i15 | (i14 | 0) == 0) {
      i16 = i14;
    } else {
      HEAP32[i2 >> 2] = i14;
      i16 = 0;
    }
    HEAP32[i10 >> 2] = HEAP32[i9 >> 2] | 0;
    HEAP32[i12 >> 2] = HEAP32[i11 >> 2] | 0;
    i17 = _inflate(i8, 0) | 0;
    i18 = (HEAP32[i11 >> 2] | 0) - (HEAP32[i12 >> 2] | 0) | 0;
    i19 = (i17 | 0) == 0;
    if (i17 >>> 0 < 2 & (i18 | 0) > 0) {
      if (i13 & i3 >>> 0 < i5 >>> 0) {
        i20 = i5 - i3 | 0;
        _memcpy(i4 + i3 | 0, HEAP32[i9 >> 2] | 0, i18 >>> 0 < i20 >>> 0 ? i18 : i20);
      }
      i21 = i18 + i3 | 0;
    } else {
      i21 = i3;
    }
    if (!i19) {
      break;
    }
    i14 = i16;
    i3 = i21;
    i15 = (HEAP32[i2 >> 2] | 0) != 0;
  }
  i15 = (i17 | 0) == 1;
  HEAP32[i2 >> 2] = 0;
  do {
    if ((i8 | 0) != 0) {
      i2 = i1 + 124 | 0;
      i3 = HEAP32[i2 >> 2] | 0;
      if ((i3 | 0) == 0) {
        break;
      }
      HEAP32[i3 + 40 >> 2] = 0;
      HEAP32[i3 + 44 >> 2] = 0;
      HEAP32[i3 + 48 >> 2] = 0;
      i3 = HEAP32[i2 >> 2] | 0;
      if ((i3 | 0) == 0) {
        break;
      }
      HEAP32[i3 + 28 >> 2] = 0;
      HEAP32[i1 + 116 >> 2] = 0;
      HEAP32[i1 + 104 >> 2] = 0;
      HEAP32[i1 + 120 >> 2] = 0;
      i2 = HEAP32[i3 + 8 >> 2] | 0;
      if ((i2 | 0) != 0) {
        HEAP32[i1 + 144 >> 2] = i2 & 1;
      }
      HEAP32[i3 >> 2] = 0;
      HEAP32[i3 + 4 >> 2] = 0;
      HEAP32[i3 + 12 >> 2] = 0;
      HEAP32[i3 + 20 >> 2] = 32768;
      HEAP32[i3 + 32 >> 2] = 0;
      HEAP32[i3 + 56 >> 2] = 0;
      HEAP32[i3 + 60 >> 2] = 0;
      i2 = i3 + 1328 | 0;
      HEAP32[i3 + 108 >> 2] = i2;
      HEAP32[i3 + 80 >> 2] = i2;
      HEAP32[i3 + 76 >> 2] = i2;
      HEAP32[i3 + 7104 >> 2] = 1;
      HEAP32[i3 + 7108 >> 2] = -1;
    }
  } while (0);
  if (i15) {
    i22 = i21;
    STACKTOP = i6;
    return i22 | 0;
  }
  i21 = HEAP32[i1 + 120 >> 2] | 0;
  if ((i21 | 0) == 0) {
    if ((i17 | 0) == (-3 | 0)) {
      i23 = 5272156;
    } else if ((i17 | 0) == (-5 | 0)) {
      i23 = 5272252;
    } else {
      i23 = 5272080;
    }
    i17 = i7 | 0;
    _snprintf(i17 | 0, 52, i23 | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = i1 + 260 | 0, tempInt) | 0) | 0;
    i24 = i17;
  } else {
    i24 = i21;
  }
  do {
    if ((i1 | 0) == 0) {
      i25 = 0;
    } else {
      L3318 : do {
        if (HEAP8[i24] << 24 >> 24 == 35) {
          i21 = 1;
          while (1) {
            if ((i21 | 0) >= 15) {
              i26 = i21;
              break L3318;
            }
            if (HEAP8[i24 + i21 | 0] << 24 >> 24 == 32) {
              i26 = i21;
              break L3318;
            } else {
              i21 = i21 + 1 | 0;
            }
          }
        } else {
          i26 = 0;
        }
      } while (0);
      i21 = HEAP32[i1 + 48 >> 2] | 0;
      if ((i21 | 0) == 0) {
        i25 = i26;
        break;
      }
      FUNCTION_TABLE_vii[i21 & 511](i1, i24 + i26 | 0);
      i22 = 0;
      STACKTOP = i6;
      return i22 | 0;
    }
  } while (0);
  _fprintf(HEAP32[_stderr >> 2] | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = i24 + i25 | 0, tempInt) | 0) | 0;
  _fputc(10, HEAP32[_stderr >> 2] | 0) | 0;
  i22 = 0;
  STACKTOP = i6;
  return i22 | 0;
}
function _png_crc_finish(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
  i3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  i4 = i3 | 0;
  i5 = i1 + 156 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  L3328 : do {
    if (i6 >>> 0 < i2 >>> 0) {
      i7 = i1 + 152 | 0;
      i8 = i1 + 60 | 0;
      i9 = i1;
      i10 = i1 + 260 | 0;
      i11 = i1 + 88 | 0;
      i12 = i1 + 248 | 0;
      i13 = i2;
      i14 = i6;
      while (1) {
        i15 = HEAP32[i7 >> 2] | 0;
        i16 = HEAP32[i8 >> 2] | 0;
        if ((i16 | 0) == 0) {
          break;
        }
        FUNCTION_TABLE_viii[i16 & 511](i9, i15, i14);
        i16 = HEAP32[i11 >> 2] | 0;
        do {
          if ((HEAP8[i10] & 32) << 24 >> 24 == 0) {
            if ((i16 & 2048 | 0) == 0) {
              i17 = 2382;
              break;
            } else {
              break;
            }
          } else {
            if ((i16 & 768 | 0) == 768) {
              break;
            } else {
              i17 = 2382;
              break;
            }
          }
        } while (0);
        if ((i17 | 0) == 2382) {
          i17 = 0;
          HEAP32[i12 >> 2] = _crc32(HEAP32[i12 >> 2] | 0, i15, i14) | 0;
        }
        i16 = i13 - i6 | 0;
        if (i16 >>> 0 <= i6 >>> 0) {
          i18 = i16;
          break L3328;
        }
        i13 = i16;
        i14 = HEAP32[i5 >> 2] | 0;
      }
      _png_error(i1, 5269084);
    } else {
      i18 = i2;
    }
  } while (0);
  do {
    if ((i18 | 0) != 0) {
      i2 = HEAP32[i1 + 152 >> 2] | 0;
      if ((i1 | 0) == 0) {
        break;
      }
      i5 = HEAP32[i1 + 60 >> 2] | 0;
      if ((i5 | 0) == 0) {
        _png_error(i1, 5269084);
      }
      FUNCTION_TABLE_viii[i5 & 511](i1, i2, i18);
      i5 = HEAP32[i1 + 88 >> 2] | 0;
      if ((HEAP8[i1 + 260 | 0] & 32) << 24 >> 24 == 0) {
        if ((i5 & 2048 | 0) != 0) {
          break;
        }
      } else {
        if ((i5 & 768 | 0) == 768) {
          break;
        }
      }
      i5 = i1 + 248 | 0;
      HEAP32[i5 >> 2] = _crc32(HEAP32[i5 >> 2] | 0, i2, i18) | 0;
    }
  } while (0);
  i18 = i4 | 0;
  i2 = i1 + 260 | 0;
  i5 = i1 + 88 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  if ((HEAP8[i2] & 32) << 24 >> 24 == 0) {
    i19 = (i6 & 2048 | 0) == 0;
  } else {
    i19 = (i6 & 768 | 0) != 768;
  }
  HEAP32[i1 + 624 >> 2] = 129;
  i6 = HEAP32[i1 + 60 >> 2] | 0;
  if ((i6 | 0) == 0) {
    _png_error(i1, 5269084);
  }
  FUNCTION_TABLE_viii[i6 & 511](i1, i18, 4);
  if (!i19) {
    i20 = 0;
    STACKTOP = i3;
    return i20 | 0;
  }
  if (((HEAPU8[i4 + 1 | 0] | 0) << 16 | (HEAPU8[i18] | 0) << 24 | (HEAPU8[i4 + 2 | 0] | 0) << 8 | (HEAPU8[i4 + 3 | 0] | 0) | 0) == (HEAP32[i1 + 248 >> 2] | 0)) {
    i20 = 0;
    STACKTOP = i3;
    return i20 | 0;
  }
  i4 = HEAP32[i5 >> 2] | 0;
  do {
    if ((HEAP8[i2] & 32) << 24 >> 24 == 0) {
      if ((i4 & 1024 | 0) == 0) {
        break;
      } else {
        i17 = 2403;
        break;
      }
    } else {
      if ((i4 & 512 | 0) == 0) {
        i17 = 2403;
        break;
      } else {
        break;
      }
    }
  } while (0);
  if ((i17 | 0) == 2403) {
    _png_chunk_warning(i1);
    i20 = 1;
    STACKTOP = i3;
    return i20 | 0;
  }
  if ((i4 & 8388608 | 0) == 0) {
    _png_chunk_error(i1, 5268676);
  }
  _png_chunk_warning(i1);
  i20 = 0;
  STACKTOP = i3;
  return i20 | 0;
}
function _png_decompress_chunk(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
  i6 = STACKTOP;
  STACKTOP = STACKTOP + 52 | 0;
  i7 = i6 | 0;
  L3378 : do {
    if (i4 >>> 0 > i3 >>> 0) {
      do {
        if ((i1 | 0) != 0) {
          i8 = HEAP32[i1 + 48 >> 2] | 0;
          if ((i8 | 0) == 0) {
            break;
          }
          FUNCTION_TABLE_vii[i8 & 511](i1, 5267752);
          i8 = i1 + 88 | 0;
          i9 = HEAP32[i8 >> 2] | 0;
          HEAP32[i8 >> 2] = i9 | 1048576;
          i10 = 0;
          i11 = 1;
          i12 = i8;
          i13 = i9;
          i14 = 2459;
          break L3378;
        }
      } while (0);
      _fprintf(HEAP32[_stderr >> 2] | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5267752, tempInt) | 0) | 0;
      _fputc(10, HEAP32[_stderr >> 2] | 0) | 0;
      i15 = 0;
      i14 = 2457;
      break;
    } else {
      if ((i2 | 0) != 0) {
        i9 = i7 | 0;
        _snprintf(i9 | 0, 50, 5264192, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = i2, tempInt) | 0) | 0;
        do {
          if ((i1 | 0) == 0) {
            i16 = 0;
          } else {
            L3389 : do {
              if (HEAP8[i9] << 24 >> 24 == 35) {
                i8 = 1;
                while (1) {
                  if ((i8 | 0) >= 15) {
                    i17 = i8;
                    break L3389;
                  }
                  if (HEAP8[i7 + i8 | 0] << 24 >> 24 == 32) {
                    i17 = i8;
                    break L3389;
                  } else {
                    i8 = i8 + 1 | 0;
                  }
                }
              } else {
                i17 = 0;
              }
            } while (0);
            i8 = HEAP32[i1 + 48 >> 2] | 0;
            if ((i8 | 0) == 0) {
              i16 = i17;
              break;
            }
            FUNCTION_TABLE_vii[i8 & 511](i1, i7 + i17 | 0);
            i15 = i4;
            i14 = 2457;
            break L3378;
          }
        } while (0);
        _fprintf(HEAP32[_stderr >> 2] | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = i7 + i16 | 0, tempInt) | 0) | 0;
        _fputc(10, HEAP32[_stderr >> 2] | 0) | 0;
        i15 = i4;
        i14 = 2457;
        break;
      }
      i9 = i1 + 620 | 0;
      i8 = i3 - i4 | 0;
      i18 = _png_inflate(i1, (HEAP32[i9 >> 2] | 0) + i4 | 0, i8, 0, 0) | 0;
      i19 = HEAP32[i1 + 588 >> 2] | 0;
      do {
        if ((i19 | 0) != 0) {
          if ((i18 + i4 | 0) >>> 0 < (i19 - 1 | 0) >>> 0) {
            break;
          }
          do {
            if ((i1 | 0) != 0) {
              i20 = HEAP32[i1 + 48 >> 2] | 0;
              if ((i20 | 0) == 0) {
                break;
              }
              FUNCTION_TABLE_vii[i20 & 511](i1, 5266952);
              i21 = i4;
              i14 = 2458;
              break L3378;
            }
          } while (0);
          _fprintf(HEAP32[_stderr >> 2] | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5266952, tempInt) | 0) | 0;
          _fputc(10, HEAP32[_stderr >> 2] | 0) | 0;
          i15 = i4;
          i14 = 2457;
          break L3378;
        }
      } while (0);
      if ((i18 | 0) == 0) {
        i15 = i4;
        i14 = 2457;
        break;
      }
      i19 = i18 + i4 | 0;
      i20 = i19 + 1 | 0;
      i22 = i1;
      do {
        if ((i1 | 0) != 0) {
          i23 = i1 + 88 | 0;
          i24 = HEAP32[i23 >> 2] | 0;
          HEAP32[i23 >> 2] = i24 | 1048576;
          do {
            if ((i20 | 0) == 0) {
              HEAP32[i23 >> 2] = i24;
            } else {
              i25 = HEAP32[i1 + 548 >> 2] | 0;
              if ((i25 | 0) == 0) {
                i26 = _malloc(i20) | 0;
              } else {
                i26 = FUNCTION_TABLE_iii[i25 & 511](i22, i20) | 0;
              }
              if ((i26 | 0) == 0) {
                if ((HEAP32[i23 >> 2] & 1048576 | 0) == 0) {
                  _png_error(i1, 5269956);
                } else {
                  HEAP32[i23 >> 2] = i24;
                  break;
                }
              }
              HEAP32[i23 >> 2] = i24;
              _memcpy(i26, HEAP32[i9 >> 2] | 0, i4);
              i25 = _png_inflate(i1, (HEAP32[i9 >> 2] | 0) + i4 | 0, i8, i26 + i4 | 0, i18) | 0;
              HEAP8[i26 + i19 | 0] = 0;
              if ((i25 | 0) == (i18 | 0)) {
                i25 = HEAP32[i9 >> 2] | 0;
                do {
                  if ((i25 | 0) != 0) {
                    i27 = HEAP32[i1 + 552 >> 2] | 0;
                    if ((i27 | 0) == 0) {
                      _free(i25);
                      break;
                    } else {
                      FUNCTION_TABLE_vii[i27 & 511](i22, i25);
                      break;
                    }
                  }
                } while (0);
                HEAP32[i9 >> 2] = i26;
                i28 = i19;
                HEAP32[i5 >> 2] = i28;
                STACKTOP = i6;
                return;
              } else {
                i25 = HEAP32[i1 + 48 >> 2] | 0;
                if ((i25 | 0) == 0) {
                  i27 = HEAP32[_stderr >> 2] | 0;
                  _fprintf(i27 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5265956, tempInt) | 0) | 0;
                  i27 = HEAP32[_stderr >> 2] | 0;
                  _fputc(10, i27 | 0) | 0;
                } else {
                  FUNCTION_TABLE_vii[i25 & 511](i1, 5265956);
                }
                i25 = HEAP32[i1 + 552 >> 2] | 0;
                if ((i25 | 0) == 0) {
                  _free(i26);
                  i15 = i4;
                  i14 = 2457;
                  break L3378;
                } else {
                  FUNCTION_TABLE_vii[i25 & 511](i22, i26);
                  i15 = i4;
                  i14 = 2457;
                  break L3378;
                }
              }
            }
          } while (0);
          i24 = HEAP32[i1 + 48 >> 2] | 0;
          if ((i24 | 0) == 0) {
            break;
          }
          FUNCTION_TABLE_vii[i24 & 511](i1, 5265076);
          i15 = i4;
          i14 = 2457;
          break L3378;
        }
      } while (0);
      _fprintf(HEAP32[_stderr >> 2] | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5265076, tempInt) | 0) | 0;
      _fputc(10, HEAP32[_stderr >> 2] | 0) | 0;
      i15 = i4;
      i14 = 2457;
      break;
    }
  } while (0);
  do {
    if ((i14 | 0) == 2457) {
      if ((i1 | 0) == 0) {
        i28 = i15;
      } else {
        i21 = i15;
        i14 = 2458;
        break;
      }
      HEAP32[i5 >> 2] = i28;
      STACKTOP = i6;
      return;
    }
  } while (0);
  do {
    if ((i14 | 0) == 2458) {
      i15 = i21 + 1 | 0;
      i4 = i1 + 88 | 0;
      i26 = HEAP32[i4 >> 2] | 0;
      HEAP32[i4 >> 2] = i26 | 1048576;
      if ((i15 | 0) == 0) {
        i29 = i21;
        i30 = i4;
        i31 = i26;
        break;
      } else {
        i10 = i21;
        i11 = i15;
        i12 = i4;
        i13 = i26;
        i14 = 2459;
        break;
      }
    }
  } while (0);
  do {
    if ((i14 | 0) == 2459) {
      i21 = i1;
      i26 = HEAP32[i1 + 548 >> 2] | 0;
      if ((i26 | 0) == 0) {
        i32 = _malloc(i11) | 0;
      } else {
        i32 = FUNCTION_TABLE_iii[i26 & 511](i21, i11) | 0;
      }
      if ((i32 | 0) == 0) {
        if ((HEAP32[i12 >> 2] & 1048576 | 0) != 0) {
          i29 = i10;
          i30 = i12;
          i31 = i13;
          break;
        }
        _png_error(i1, 5269956);
      }
      HEAP32[i12 >> 2] = i13;
      i26 = i1 + 620 | 0;
      if ((i10 | 0) != 0) {
        _memcpy(i32, HEAP32[i26 >> 2] | 0, i10);
      }
      i4 = HEAP32[i26 >> 2] | 0;
      do {
        if ((i4 | 0) != 0) {
          i15 = HEAP32[i1 + 552 >> 2] | 0;
          if ((i15 | 0) == 0) {
            _free(i4);
            break;
          } else {
            FUNCTION_TABLE_vii[i15 & 511](i21, i4);
            break;
          }
        }
      } while (0);
      HEAP32[i26 >> 2] = i32;
      HEAP8[i32 + i10 | 0] = 0;
      i28 = i10;
      HEAP32[i5 >> 2] = i28;
      STACKTOP = i6;
      return;
    }
  } while (0);
  HEAP32[i30 >> 2] = i31;
  i28 = i29;
  HEAP32[i5 >> 2] = i28;
  STACKTOP = i6;
  return;
}
function _png_handle_unknown(i1, i2, i3) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
  i4 = STACKTOP;
  i5 = i1 + 584 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  if ((i6 | 0) == 1) {
    _png_crc_finish(i1, i3) | 0;
    STACKTOP = i4;
    return;
  } else if ((i6 | 0) != 0) {
    i7 = 2480;
  }
  do {
    if ((i7 | 0) == 2480) {
      i8 = i6 - 1 | 0;
      HEAP32[i5 >> 2] = i8;
      if ((i8 | 0) != 1) {
        break;
      }
      do {
        if ((i1 | 0) == 0) {
          i7 = 2484;
        } else {
          i8 = HEAP32[i1 + 48 >> 2] | 0;
          if ((i8 | 0) == 0) {
            i7 = 2484;
            break;
          }
          FUNCTION_TABLE_vii[i8 & 511](i1, 5272916);
          break;
        }
      } while (0);
      if ((i7 | 0) == 2484) {
        i8 = HEAP32[_stderr >> 2] | 0;
        _fprintf(i8 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5272916, tempInt) | 0) | 0;
        i8 = HEAP32[_stderr >> 2] | 0;
        _fputc(10, i8 | 0) | 0;
      }
      _png_crc_finish(i1, i3) | 0;
      STACKTOP = i4;
      return;
    }
  } while (0);
  i5 = i1 + 84 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  i8 = i1 + 260 | 0;
  do {
    if ((i6 & 4 | 0) != 0) {
      if ((_memcmp(i8, 5246008, 4) | 0) == 0) {
        break;
      }
      HEAP32[i5 >> 2] = i6 | 8;
    }
  } while (0);
  L3487 : do {
    if ((HEAP8[i8] & 32) << 24 >> 24 == 0) {
      L3489 : do {
        if (!((i1 | 0) == 0 | (i8 | 0) == 0)) {
          i6 = HEAP32[i1 + 520 >> 2] | 0;
          if ((i6 | 0) < 1) {
            break;
          }
          i5 = i6;
          i9 = (HEAP32[i1 + 524 >> 2] | 0) + ((i6 * 5 & -1) - 5 | 0) | 0;
          while (1) {
            if ((_memcmp(i8, i9, 4) | 0) == 0) {
              break;
            }
            i6 = i5 - 1 | 0;
            if ((i6 | 0) == 0) {
              break L3489;
            } else {
              i5 = i6;
              i9 = i9 - 5 | 0;
            }
          }
          if (HEAP8[i9 + 4 | 0] << 24 >> 24 == 3) {
            break L3487;
          }
        }
      } while (0);
      if ((HEAP32[i1 + 516 >> 2] | 0) != 0) {
        break;
      }
      _png_chunk_error(i1, 5272800);
    }
  } while (0);
  i5 = i1 + 88 | 0;
  do {
    if ((HEAP32[i5 >> 2] & 32768 | 0) == 0) {
      if ((HEAP32[i1 + 516 >> 2] | 0) == 0) {
        i10 = i3;
        break;
      } else {
        i7 = 2500;
        break;
      }
    } else {
      i7 = 2500;
    }
  } while (0);
  if ((i7 | 0) == 2500) {
    i6 = i1 + 592 | 0;
    i11 = i8;
    i12 = i6;
    tempBigInt = HEAPU8[i11] | HEAPU8[i11 + 1 | 0] << 8 | HEAPU8[i11 + 2 | 0] << 16 | HEAPU8[i11 + 3 | 0] << 24 | 0;
    HEAP8[i12] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[i12 + 1 | 0] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[i12 + 2 | 0] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[i12 + 3 | 0] = tempBigInt & 255;
    HEAP8[i1 + 596 | 0] = 0;
    HEAP32[i1 + 604 >> 2] = i3;
    do {
      if ((i3 | 0) == 0) {
        HEAP32[i1 + 600 >> 2] = 0;
      } else {
        if ((i1 | 0) == 0) {
          HEAP32[150] = 0;
          break;
        }
        i12 = HEAP32[i1 + 548 >> 2] | 0;
        if ((i12 | 0) == 0) {
          i13 = _malloc(i3) | 0;
        } else {
          i13 = FUNCTION_TABLE_iii[i12 & 511](i1, i3) | 0;
        }
        do {
          if ((i13 | 0) == 0) {
            if ((HEAP32[i5 >> 2] & 1048576 | 0) == 0) {
              _png_error(i1, 5269956);
            } else {
              HEAP32[i1 + 600 >> 2] = 0;
              i14 = 0;
              break;
            }
          } else {
            HEAP32[i1 + 600 >> 2] = i13;
            i14 = i13;
          }
        } while (0);
        i12 = HEAP32[i1 + 60 >> 2] | 0;
        if ((i12 | 0) == 0) {
          _png_error(i1, 5269084);
        }
        FUNCTION_TABLE_viii[i12 & 511](i1, i14, i3);
        i12 = HEAP32[i5 >> 2] | 0;
        if ((HEAP8[i8] & 32) << 24 >> 24 == 0) {
          if ((i12 & 2048 | 0) != 0) {
            break;
          }
        } else {
          if ((i12 & 768 | 0) == 768) {
            break;
          }
        }
        i12 = i1 + 248 | 0;
        HEAP32[i12 >> 2] = _crc32(HEAP32[i12 >> 2] | 0, i14, i3) | 0;
      }
    } while (0);
    i3 = HEAP32[i1 + 516 >> 2] | 0;
    do {
      if ((i3 | 0) == 0) {
        _png_set_unknown_chunks(i1, i2, i6);
      } else {
        i14 = FUNCTION_TABLE_iii[i3 & 511](i1, i6) | 0;
        if ((i14 | 0) < 0) {
          _png_chunk_error(i1, 5272780);
        }
        if ((i14 | 0) != 0) {
          break;
        }
        do {
          if ((HEAP8[i8] & 32) << 24 >> 24 == 0) {
            if ((i1 | 0) == 0 | (i8 | 0) == 0) {
              _png_chunk_error(i1, 5272800);
            }
            i14 = HEAP32[i1 + 520 >> 2] | 0;
            if ((i14 | 0) < 1) {
              _png_chunk_error(i1, 5272800);
            }
            i5 = i14;
            i13 = (HEAP32[i1 + 524 >> 2] | 0) + ((i14 * 5 & -1) - 5 | 0) | 0;
            while (1) {
              if ((_memcmp(i8, i13, 4) | 0) == 0) {
                break;
              }
              i14 = i5 - 1 | 0;
              if ((i14 | 0) == 0) {
                i7 = 2541;
                break;
              } else {
                i5 = i14;
                i13 = i13 - 5 | 0;
              }
            }
            if ((i7 | 0) == 2541) {
              _png_chunk_error(i1, 5272800);
            }
            if (HEAP8[i13 + 4 | 0] << 24 >> 24 == 3) {
              break;
            }
            _png_chunk_error(i1, 5272800);
          }
        } while (0);
        _png_set_unknown_chunks(i1, i2, i6);
      }
    } while (0);
    i6 = i1 + 600 | 0;
    i2 = HEAP32[i6 >> 2] | 0;
    i7 = i1;
    do {
      if (!((i1 | 0) == 0 | (i2 | 0) == 0)) {
        i8 = HEAP32[i1 + 552 >> 2] | 0;
        if ((i8 | 0) == 0) {
          _free(i2);
          break;
        } else {
          FUNCTION_TABLE_vii[i8 & 511](i7, i2);
          break;
        }
      }
    } while (0);
    HEAP32[i6 >> 2] = 0;
    i10 = 0;
  }
  _png_crc_finish(i1, i10) | 0;
  STACKTOP = i4;
  return;
}
function _png_read_finish_row(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
  i2 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  i3 = i2 | 0;
  i4 = i1 + 204 | 0;
  i5 = (HEAP32[i4 >> 2] | 0) + 1 | 0;
  HEAP32[i4 >> 2] = i5;
  i6 = i1 + 188 | 0;
  if (i5 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
    STACKTOP = i2;
    return;
  }
  do {
    if (HEAP8[i1 + 267 | 0] << 24 >> 24 != 0) {
      HEAP32[i4 >> 2] = 0;
      _memset(HEAP32[i1 + 208 >> 2] | 0, 0, (HEAP32[i1 + 196 >> 2] | 0) + 1 | 0);
      i5 = i1 + 268 | 0;
      i7 = (HEAP8[i5] | 0) + 1 & 255;
      HEAP8[i5] = i7;
      if ((i7 & 255) > 6) {
        break;
      }
      i8 = i1 + 200 | 0;
      i9 = i1 + 184 | 0;
      i10 = (HEAP32[i1 + 180 >> 2] | 0) - 1 | 0;
      i11 = i7;
      i7 = (HEAP32[i1 + 92 >> 2] & 2 | 0) == 0;
      while (1) {
        i12 = i11 & 255;
        i13 = HEAP32[5246044 + (i12 << 2) >> 2] | 0;
        i14 = (((i10 + i13 | 0) - (HEAP32[5246016 + (i12 << 2) >> 2] | 0) | 0) >>> 0) / (i13 >>> 0) >>> 0;
        if (!i7) {
          break;
        }
        i13 = HEAP32[5245768 + (i12 << 2) >> 2] | 0;
        i15 = (((((HEAP32[i9 >> 2] | 0) - 1 | 0) + i13 | 0) - (HEAP32[5245740 + (i12 << 2) >> 2] | 0) | 0) >>> 0) / (i13 >>> 0) >>> 0;
        HEAP32[i6 >> 2] = i15;
        if (!((i15 | 0) == 0 | (i14 | 0) == 0)) {
          break;
        }
        i15 = i11 + 1 & 255;
        HEAP8[i5] = i15;
        if ((i15 & 255) > 6) {
          i16 = 2554;
          break;
        } else {
          i11 = i15;
          i7 = 1;
        }
      }
      if ((i16 | 0) == 2554) {
        HEAP32[i8 >> 2] = i14;
        break;
      }
      HEAP32[i8 >> 2] = i14;
      if ((i11 & 255) >= 7) {
        break;
      }
      STACKTOP = i2;
      return;
    }
  } while (0);
  i14 = i1 + 88 | 0;
  if ((HEAP32[i14 >> 2] & 32 | 0) == 0) {
    i6 = i1 + 96 | 0;
    HEAP32[i1 + 108 >> 2] = i3;
    i3 = i1 + 112 | 0;
    HEAP32[i3 >> 2] = 1;
    i4 = i1 + 100 | 0;
    i7 = i1 + 244 | 0;
    i5 = i1 + 260 | 0;
    i9 = i1 + 156 | 0;
    i10 = i1 + 152 | 0;
    i15 = i6 | 0;
    i13 = (i1 | 0) == 0;
    i12 = i1 + 60 | 0;
    i17 = i1;
    i18 = i1 + 248 | 0;
    L3579 : while (1) {
      if ((HEAP32[i4 >> 2] | 0) == 0) {
        i19 = HEAP32[i7 >> 2] | 0;
        while (1) {
          if ((i19 | 0) != 0) {
            break;
          }
          _png_crc_finish(i1, 0) | 0;
          i20 = _png_read_chunk_header(i1) | 0;
          HEAP32[i7 >> 2] = i20;
          if ((_memcmp(i5, 5246e3, 4) | 0) == 0) {
            i19 = i20;
          } else {
            i16 = 2562;
            break L3579;
          }
        }
        i11 = HEAP32[i9 >> 2] | 0;
        HEAP32[i4 >> 2] = i11;
        i8 = HEAP32[i10 >> 2] | 0;
        HEAP32[i15 >> 2] = i8;
        if (i11 >>> 0 > i19 >>> 0) {
          HEAP32[i4 >> 2] = i19;
          i21 = i19;
        } else {
          i21 = i11;
        }
        do {
          if (!i13) {
            i11 = HEAP32[i12 >> 2] | 0;
            if ((i11 | 0) == 0) {
              i16 = 2567;
              break L3579;
            }
            FUNCTION_TABLE_viii[i11 & 511](i17, i8, i21);
            i11 = HEAP32[i14 >> 2] | 0;
            if ((HEAP8[i5] & 32) << 24 >> 24 == 0) {
              if ((i11 & 2048 | 0) != 0) {
                break;
              }
            } else {
              if ((i11 & 768 | 0) == 768) {
                break;
              }
            }
            HEAP32[i18 >> 2] = _crc32(HEAP32[i18 >> 2] | 0, i8, i21) | 0;
          }
        } while (0);
        HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) - (HEAP32[i4 >> 2] | 0) | 0;
      }
      i8 = _inflate(i6, 1) | 0;
      if ((i8 | 0) == 1) {
        i16 = 2574;
        break;
      } else if ((i8 | 0) != 0) {
        i16 = 2582;
        break;
      }
      if ((HEAP32[i3 >> 2] | 0) == 0) {
        i16 = 2584;
        break;
      }
    }
    if ((i16 | 0) == 2562) {
      _png_error(i1, 5272660);
    } else if ((i16 | 0) == 2567) {
      _png_error(i1, 5269084);
    } else if ((i16 | 0) == 2574) {
      do {
        if ((HEAP32[i3 >> 2] | 0) == 0) {
          i16 = 2578;
        } else {
          if ((HEAP32[i4 >> 2] | 0) == 0) {
            if ((HEAP32[i7 >> 2] | 0) == 0) {
              break;
            }
          }
          if (i13) {
            i16 = 2580;
            break;
          } else {
            i16 = 2578;
            break;
          }
        }
      } while (0);
      do {
        if ((i16 | 0) == 2578) {
          i4 = HEAP32[i1 + 48 >> 2] | 0;
          if ((i4 | 0) == 0) {
            i16 = 2580;
            break;
          }
          FUNCTION_TABLE_vii[i4 & 511](i1, 5272556);
          break;
        }
      } while (0);
      if ((i16 | 0) == 2580) {
        i4 = HEAP32[_stderr >> 2] | 0;
        _fprintf(i4 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5272556, tempInt) | 0) | 0;
        i4 = HEAP32[_stderr >> 2] | 0;
        _fputc(10, i4 | 0) | 0;
      }
      i4 = i1 + 84 | 0;
      HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 8;
    } else if ((i16 | 0) == 2582) {
      i4 = HEAP32[i1 + 120 >> 2] | 0;
      _png_error(i1, (i4 | 0) == 0 ? 5272496 : i4);
    } else if ((i16 | 0) == 2584) {
      do {
        if (i13) {
          i16 = 2587;
        } else {
          i4 = HEAP32[i1 + 48 >> 2] | 0;
          if ((i4 | 0) == 0) {
            i16 = 2587;
            break;
          }
          FUNCTION_TABLE_vii[i4 & 511](i1, 5272556);
          break;
        }
      } while (0);
      if ((i16 | 0) == 2587) {
        i13 = HEAP32[_stderr >> 2] | 0;
        _fprintf(i13 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5272556, tempInt) | 0) | 0;
        i13 = HEAP32[_stderr >> 2] | 0;
        _fputc(10, i13 | 0) | 0;
      }
      i13 = i1 + 84 | 0;
      HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 8;
    }
    HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 32;
    HEAP32[i3 >> 2] = 0;
    i22 = i7;
  } else {
    i22 = i1 + 244 | 0;
  }
  do {
    if ((HEAP32[i22 >> 2] | 0) == 0) {
      if ((HEAP32[i1 + 100 >> 2] | 0) == 0) {
        break;
      }
      if ((i1 | 0) == 0) {
        i16 = 2595;
        break;
      } else {
        i16 = 2593;
        break;
      }
    } else {
      i16 = 2593;
    }
  } while (0);
  do {
    if ((i16 | 0) == 2593) {
      i22 = HEAP32[i1 + 48 >> 2] | 0;
      if ((i22 | 0) == 0) {
        i16 = 2595;
        break;
      }
      FUNCTION_TABLE_vii[i22 & 511](i1, 5272472);
      break;
    }
  } while (0);
  if ((i16 | 0) == 2595) {
    i16 = HEAP32[_stderr >> 2] | 0;
    _fprintf(i16 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5272472, tempInt) | 0) | 0;
    i16 = HEAP32[_stderr >> 2] | 0;
    _fputc(10, i16 | 0) | 0;
  }
  do {
    if ((i1 + 96 | 0) != 0) {
      i16 = i1 + 124 | 0;
      i22 = HEAP32[i16 >> 2] | 0;
      if ((i22 | 0) == 0) {
        break;
      }
      HEAP32[i22 + 40 >> 2] = 0;
      HEAP32[i22 + 44 >> 2] = 0;
      HEAP32[i22 + 48 >> 2] = 0;
      i22 = HEAP32[i16 >> 2] | 0;
      if ((i22 | 0) == 0) {
        break;
      }
      HEAP32[i22 + 28 >> 2] = 0;
      HEAP32[i1 + 116 >> 2] = 0;
      HEAP32[i1 + 104 >> 2] = 0;
      HEAP32[i1 + 120 >> 2] = 0;
      i16 = HEAP32[i22 + 8 >> 2] | 0;
      if ((i16 | 0) != 0) {
        HEAP32[i1 + 144 >> 2] = i16 & 1;
      }
      HEAP32[i22 >> 2] = 0;
      HEAP32[i22 + 4 >> 2] = 0;
      HEAP32[i22 + 12 >> 2] = 0;
      HEAP32[i22 + 20 >> 2] = 32768;
      HEAP32[i22 + 32 >> 2] = 0;
      HEAP32[i22 + 56 >> 2] = 0;
      HEAP32[i22 + 60 >> 2] = 0;
      i16 = i22 + 1328 | 0;
      HEAP32[i22 + 108 >> 2] = i16;
      HEAP32[i22 + 80 >> 2] = i16;
      HEAP32[i22 + 76 >> 2] = i16;
      HEAP32[i22 + 7104 >> 2] = 1;
      HEAP32[i22 + 7108 >> 2] = -1;
    }
  } while (0);
  i22 = i1 + 84 | 0;
  HEAP32[i22 >> 2] = HEAP32[i22 >> 2] | 8;
  STACKTOP = i2;
  return;
}
function _png_read_start_row(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, d13 = 0.0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, d31 = 0.0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, d59 = 0.0, i60 = 0, i61 = 0, d62 = 0.0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0;
  HEAP32[i1 + 100 >> 2] = 0;
  i2 = i1 + 270 | 0;
  i3 = HEAP8[i2] | 0;
  i4 = i3 & 255;
  i5 = i1 + 92 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  do {
    if ((i6 & 256 | 0) == 0) {
      i7 = 2610;
    } else {
      if ((i4 & 2 | 0) != 0) {
        i7 = 2610;
        break;
      }
      i8 = i1 + 84 | 0;
      HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 2048;
      break;
    }
  } while (0);
  do {
    if ((i7 | 0) == 2610) {
      if ((i6 & 16768 | 0) != 16512) {
        break;
      }
      i8 = HEAP16[i1 + 290 >> 1] | 0;
      if (i8 << 16 >> 16 != HEAP16[i1 + 292 >> 1] << 16 >> 16) {
        break;
      }
      if (i8 << 16 >> 16 != HEAP16[i1 + 294 >> 1] << 16 >> 16) {
        break;
      }
      i9 = i1 + 84 | 0;
      HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 2048;
      HEAP16[i1 + 296 >> 1] = i8;
    }
  } while (0);
  L3653 : do {
    if ((i6 & 4352 | 0) == 4352) {
      if ((i4 & 2 | 0) != 0) {
        if (i3 << 24 >> 24 != 3) {
          i8 = i1 + 298 | 0;
          i9 = i1 + 288 | 0;
          HEAP16[i8 >> 1] = HEAP16[i9 >> 1] | 0;
          HEAP16[i8 + 2 >> 1] = HEAP16[i9 + 2 >> 1] | 0;
          HEAP16[i8 + 4 >> 1] = HEAP16[i9 + 4 >> 1] | 0;
          HEAP16[i8 + 6 >> 1] = HEAP16[i9 + 6 >> 1] | 0;
          HEAP16[i8 + 8 >> 1] = HEAP16[i9 + 8 >> 1] | 0;
          i10 = 0;
          break;
        }
        i9 = i1 + 288 | 0;
        i8 = HEAPU8[i9] | 0;
        i11 = HEAP32[i1 + 252 >> 2] | 0;
        HEAP16[i1 + 290 >> 1] = HEAPU8[i11 + (i8 * 3 & -1) | 0] | 0;
        HEAP16[i1 + 292 >> 1] = HEAPU8[i11 + (i8 * 3 & -1) + 1 | 0] | 0;
        HEAP16[i1 + 294 >> 1] = HEAPU8[i11 + (i8 * 3 & -1) + 2 | 0] | 0;
        if ((i6 & 34078720 | 0) != 524288) {
          i8 = i1 + 298 | 0;
          HEAP16[i8 >> 1] = HEAP16[i9 >> 1] | 0;
          HEAP16[i8 + 2 >> 1] = HEAP16[i9 + 2 >> 1] | 0;
          HEAP16[i8 + 4 >> 1] = HEAP16[i9 + 4 >> 1] | 0;
          HEAP16[i8 + 6 >> 1] = HEAP16[i9 + 6 >> 1] | 0;
          HEAP16[i8 + 8 >> 1] = HEAP16[i9 + 8 >> 1] | 0;
          i7 = 2632;
          break;
        }
        i9 = HEAP16[i1 + 258 >> 1] | 0;
        i8 = i9 & 65535;
        if (i9 << 16 >> 16 == 0) {
          i7 = 2631;
          break;
        }
        i9 = i1 + 368 | 0;
        i11 = 0;
        while (1) {
          i12 = (HEAP32[i9 >> 2] | 0) + i11 | 0;
          HEAP8[i12] = HEAP8[i12] ^ -1;
          i12 = i11 + 1 | 0;
          if ((i12 | 0) < (i8 | 0)) {
            i11 = i12;
          } else {
            i7 = 2631;
            break L3653;
          }
        }
      }
      i11 = HEAPU8[i1 + 271 | 0] | 0;
      if ((i11 | 0) == 1) {
        i8 = i1 + 296 | 0;
        i9 = (HEAP16[i8 >> 1] | 0) * 255 & 65535;
        HEAP16[i8 >> 1] = i9;
        HEAP16[i1 + 294 >> 1] = i9;
        HEAP16[i1 + 292 >> 1] = i9;
        HEAP16[i1 + 290 >> 1] = i9;
        if ((i6 & 33554432 | 0) != 0) {
          i7 = 2631;
          break;
        }
        i9 = i1 + 380 | 0;
        i8 = (HEAP16[i9 >> 1] | 0) * 255 & 65535;
        HEAP16[i9 >> 1] = i8;
        HEAP16[i1 + 378 >> 1] = i8;
        HEAP16[i1 + 376 >> 1] = i8;
        HEAP16[i1 + 374 >> 1] = i8;
        i7 = 2631;
        break;
      } else if ((i11 | 0) == 2) {
        i8 = i1 + 296 | 0;
        i9 = (HEAP16[i8 >> 1] | 0) * 85 & 65535;
        HEAP16[i8 >> 1] = i9;
        HEAP16[i1 + 294 >> 1] = i9;
        HEAP16[i1 + 292 >> 1] = i9;
        HEAP16[i1 + 290 >> 1] = i9;
        if ((i6 & 33554432 | 0) != 0) {
          i7 = 2631;
          break;
        }
        i9 = i1 + 380 | 0;
        i8 = (HEAP16[i9 >> 1] | 0) * 85 & 65535;
        HEAP16[i9 >> 1] = i8;
        HEAP16[i1 + 378 >> 1] = i8;
        HEAP16[i1 + 376 >> 1] = i8;
        HEAP16[i1 + 374 >> 1] = i8;
        i7 = 2631;
        break;
      } else if ((i11 | 0) == 4) {
        i11 = i1 + 296 | 0;
        i8 = (HEAP16[i11 >> 1] | 0) * 17 & 65535;
        HEAP16[i11 >> 1] = i8;
        HEAP16[i1 + 294 >> 1] = i8;
        HEAP16[i1 + 292 >> 1] = i8;
        HEAP16[i1 + 290 >> 1] = i8;
        if ((i6 & 33554432 | 0) != 0) {
          i7 = 2631;
          break;
        }
        i8 = i1 + 380 | 0;
        i11 = (HEAP16[i8 >> 1] | 0) * 17 & 65535;
        HEAP16[i8 >> 1] = i11;
        HEAP16[i1 + 378 >> 1] = i11;
        HEAP16[i1 + 376 >> 1] = i11;
        HEAP16[i1 + 374 >> 1] = i11;
        i7 = 2631;
        break;
      } else {
        i11 = HEAP16[i1 + 296 >> 1] | 0;
        HEAP16[i1 + 294 >> 1] = i11;
        HEAP16[i1 + 292 >> 1] = i11;
        HEAP16[i1 + 290 >> 1] = i11;
        i7 = 2631;
        break;
      }
    } else {
      i7 = 2631;
    }
  } while (0);
  do {
    if ((i7 | 0) == 2631) {
      i6 = i1 + 298 | 0;
      i4 = i1 + 288 | 0;
      HEAP16[i6 >> 1] = HEAP16[i4 >> 1] | 0;
      HEAP16[i6 + 2 >> 1] = HEAP16[i4 + 2 >> 1] | 0;
      HEAP16[i6 + 4 >> 1] = HEAP16[i4 + 4 >> 1] | 0;
      HEAP16[i6 + 6 >> 1] = HEAP16[i4 + 6 >> 1] | 0;
      HEAP16[i6 + 8 >> 1] = HEAP16[i4 + 8 >> 1] | 0;
      if (i3 << 24 >> 24 == 3) {
        i7 = 2632;
        break;
      } else {
        i10 = 0;
        break;
      }
    }
  } while (0);
  L3677 : do {
    if ((i7 | 0) == 2632) {
      i3 = HEAP16[i1 + 258 >> 1] | 0;
      if (i3 << 16 >> 16 == 0) {
        i10 = 1;
        break;
      }
      i4 = HEAP32[i1 + 328 >> 2] | 0;
      i6 = HEAP32[i1 + 324 >> 2] | 0;
      do {
        if (!((i4 | 0) == 0 | (i6 | 0) == 0)) {
          d13 = +Math_floor(+(i4 | 0) * +(i6 | 0) / 1.0e5 + .5);
          if (!(d13 <= 2147483647.0 & d13 >= -2147483648.0)) {
            break;
          }
          if ((~~d13 - 95e3 | 0) >>> 0 <= 1e4) {
            i10 = 1;
            break L3677;
          }
        }
      } while (0);
      i6 = HEAP32[i1 + 368 >> 2] | 0;
      i4 = i3 & 65535;
      i11 = 0;
      i8 = 0;
      while (1) {
        i9 = HEAP8[i6 + i8 | 0] | 0;
        if ((i9 << 24 >> 24 | 0) == 0 | (i9 << 24 >> 24 | 0) == (-1 | 0)) {
          i14 = i11;
        } else {
          i14 = 1;
        }
        i9 = i8 + 1 | 0;
        if ((i9 | 0) < (i4 | 0)) {
          i11 = i14;
          i8 = i9;
        } else {
          break;
        }
      }
      if ((i14 | 0) != 0) {
        i10 = 1;
        break;
      }
      HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -8193;
      i10 = 1;
    }
  } while (0);
  i14 = HEAP32[i5 >> 2] | 0;
  L3692 : do {
    if ((i14 & 6299648 | 0) == 0) {
      i7 = 2849;
    } else {
      i8 = i1 + 324 | 0;
      i11 = HEAP32[i8 >> 2] | 0;
      if ((i11 | 0) == 0) {
        i7 = 2849;
        break;
      }
      i4 = i1 + 271 | 0;
      L3695 : do {
        if ((HEAPU8[i4] | 0) < 9) {
          i6 = i1 + 332 | 0;
          i3 = i1 + 328 | 0;
          i9 = HEAP32[i3 >> 2] | 0;
          do {
            if ((i9 | 0) > 0) {
              d13 = +Math_floor(1.0e15 / +(i11 | 0) / +(i9 | 0) + .5);
              if (!(d13 <= 2147483647.0 & d13 >= -2147483648.0)) {
                i15 = 0;
                break;
              }
              i15 = ~~d13;
            } else {
              i15 = 1e5;
            }
          } while (0);
          i9 = i1;
          i12 = (i1 | 0) == 0;
          do {
            if (i12) {
              i16 = 0;
            } else {
              i17 = HEAP32[i1 + 548 >> 2] | 0;
              if ((i17 | 0) == 0) {
                i18 = _malloc(256) | 0;
              } else {
                i18 = FUNCTION_TABLE_iii[i17 & 511](i9, 256) | 0;
              }
              if ((i18 | 0) != 0) {
                i16 = i18;
                break;
              }
              if ((HEAP32[i1 + 88 >> 2] & 1048576 | 0) != 0) {
                i16 = 0;
                break;
              }
              _png_error(i1, 5269956);
            }
          } while (0);
          HEAP32[i6 >> 2] = i16;
          L3710 : do {
            if ((i15 - 95e3 | 0) >>> 0 > 1e4) {
              d13 = +(i15 | 0) * 1.0e-5;
              i17 = 0;
              while (1) {
                if ((i17 | 0) != 0 & i17 >>> 0 < 255) {
                  i19 = ~~+Math_floor(+Math_pow(+(i17 >>> 0 >>> 0) / 255.0, d13) * 255.0 + .5);
                } else {
                  i19 = i17 & 255;
                }
                HEAP8[i16 + i17 | 0] = i19;
                i20 = i17 + 1 | 0;
                if ((i20 | 0) == 256) {
                  break L3710;
                } else {
                  i17 = i20;
                }
              }
            } else {
              i17 = 0;
              while (1) {
                HEAP8[i16 + i17 | 0] = i17 & 255;
                i20 = i17 + 1 | 0;
                if ((i20 | 0) == 256) {
                  break L3710;
                } else {
                  i17 = i20;
                }
              }
            }
          } while (0);
          if ((HEAP32[i5 >> 2] & 6291584 | 0) == 0) {
            break;
          }
          i6 = i1 + 340 | 0;
          d13 = +Math_floor(1.0e10 / +(HEAP32[i8 >> 2] | 0) + .5);
          if (d13 <= 2147483647.0 & d13 >= -2147483648.0) {
            i21 = ~~d13;
          } else {
            i21 = 0;
          }
          do {
            if (i12) {
              i22 = 0;
            } else {
              i17 = HEAP32[i1 + 548 >> 2] | 0;
              if ((i17 | 0) == 0) {
                i23 = _malloc(256) | 0;
              } else {
                i23 = FUNCTION_TABLE_iii[i17 & 511](i9, 256) | 0;
              }
              if ((i23 | 0) != 0) {
                i22 = i23;
                break;
              }
              if ((HEAP32[i1 + 88 >> 2] & 1048576 | 0) != 0) {
                i22 = 0;
                break;
              }
              _png_error(i1, 5269956);
            }
          } while (0);
          HEAP32[i6 >> 2] = i22;
          L3734 : do {
            if ((i21 - 95e3 | 0) >>> 0 > 1e4) {
              d13 = +(i21 | 0) * 1.0e-5;
              i17 = 0;
              while (1) {
                if ((i17 | 0) != 0 & i17 >>> 0 < 255) {
                  i24 = ~~+Math_floor(+Math_pow(+(i17 >>> 0 >>> 0) / 255.0, d13) * 255.0 + .5);
                } else {
                  i24 = i17 & 255;
                }
                HEAP8[i22 + i17 | 0] = i24;
                i20 = i17 + 1 | 0;
                if ((i20 | 0) == 256) {
                  break L3734;
                } else {
                  i17 = i20;
                }
              }
            } else {
              i17 = 0;
              while (1) {
                HEAP8[i22 + i17 | 0] = i17 & 255;
                i20 = i17 + 1 | 0;
                if ((i20 | 0) == 256) {
                  break L3734;
                } else {
                  i17 = i20;
                }
              }
            }
          } while (0);
          i6 = i1 + 336 | 0;
          i17 = HEAP32[i3 >> 2] | 0;
          do {
            if ((i17 | 0) > 0) {
              d13 = +Math_floor(1.0e10 / +(i17 | 0) + .5);
              if (!(d13 <= 2147483647.0 & d13 >= -2147483648.0)) {
                i25 = 0;
                break;
              }
              i25 = ~~d13;
            } else {
              i25 = HEAP32[i8 >> 2] | 0;
            }
          } while (0);
          do {
            if (i12) {
              i26 = 0;
            } else {
              i17 = HEAP32[i1 + 548 >> 2] | 0;
              if ((i17 | 0) == 0) {
                i27 = _malloc(256) | 0;
              } else {
                i27 = FUNCTION_TABLE_iii[i17 & 511](i9, 256) | 0;
              }
              if ((i27 | 0) != 0) {
                i26 = i27;
                break;
              }
              if ((HEAP32[i1 + 88 >> 2] & 1048576 | 0) != 0) {
                i26 = 0;
                break;
              }
              _png_error(i1, 5269956);
            }
          } while (0);
          HEAP32[i6 >> 2] = i26;
          if ((i25 - 95e3 | 0) >>> 0 <= 1e4) {
            i9 = 0;
            while (1) {
              HEAP8[i26 + i9 | 0] = i9 & 255;
              i12 = i9 + 1 | 0;
              if ((i12 | 0) == 256) {
                break L3695;
              } else {
                i9 = i12;
              }
            }
          }
          d13 = +(i25 | 0) * 1.0e-5;
          i9 = 0;
          while (1) {
            if ((i9 | 0) != 0 & i9 >>> 0 < 255) {
              i28 = ~~+Math_floor(+Math_pow(+(i9 >>> 0 >>> 0) / 255.0, d13) * 255.0 + .5);
            } else {
              i28 = i9 & 255;
            }
            HEAP8[i26 + i9 | 0] = i28;
            i6 = i9 + 1 | 0;
            if ((i6 | 0) == 256) {
              break L3695;
            } else {
              i9 = i6;
            }
          }
        } else {
          if ((HEAP8[i2] & 2) << 24 >> 24 == 0) {
            i29 = HEAP8[i1 + 359 | 0] | 0;
          } else {
            i9 = HEAP8[i1 + 356 | 0] | 0;
            i6 = HEAP8[i1 + 357 | 0] | 0;
            i12 = (i6 & 255) > (i9 & 255) ? i6 : i9;
            i9 = HEAP8[i1 + 358 | 0] | 0;
            i29 = (i9 & 255) > (i12 & 255) ? i9 : i12;
          }
          i12 = i29 << 24 >> 24 != 0 & (i29 & 255) < 16 ? 16 - i29 & 255 : 0;
          i9 = (i14 & 1024 | 0) != 0 & (i12 & 255) < 5 ? 5 : i12;
          i12 = (i9 & 255) > 8 ? 8 : i9 & 255;
          HEAP32[i1 + 320 >> 2] = i12;
          i9 = i1 + 344 | 0;
          i6 = i1 + 328 | 0;
          i17 = HEAP32[i6 >> 2] | 0;
          i3 = (i17 | 0) > 0;
          L3774 : do {
            if ((i14 & 1152 | 0) == 0) {
              do {
                if (i3) {
                  d13 = +Math_floor(1.0e15 / +(i11 | 0) / +(i17 | 0) + .5);
                  if (!(d13 <= 2147483647.0 & d13 >= -2147483648.0)) {
                    i30 = 0;
                    break;
                  }
                  i30 = ~~d13;
                } else {
                  i30 = 1e5;
                }
              } while (0);
              _png_build_16bit_table(i1, i9, i12, i30);
            } else {
              do {
                if (i3) {
                  d13 = +Math_floor(+(i17 | 0) * +(i11 | 0) * 1.0e-5 + .5);
                  if (!(d13 <= 2147483647.0 & d13 >= -2147483648.0)) {
                    d31 = 0.0;
                    break;
                  }
                  d31 = +(~~d13 | 0) * 1.0e-5;
                } else {
                  d31 = 1.0;
                }
              } while (0);
              i20 = 8 - i12 | 0;
              i32 = 1 << i20;
              i33 = (1 << 16 - i12) - 1 | 0;
              i34 = i32 << 2;
              i35 = i1;
              i36 = (i1 | 0) == 0;
              i37 = i1 + 548 | 0;
              do {
                if (i36 | (i34 | 0) == 0) {
                  i38 = 0;
                } else {
                  i39 = HEAP32[i37 >> 2] | 0;
                  if ((i39 | 0) == 0) {
                    i40 = _malloc(i34) | 0;
                  } else {
                    i40 = FUNCTION_TABLE_iii[i39 & 511](i35, i34) | 0;
                  }
                  if ((i40 | 0) != 0) {
                    _memset(i40 | 0, 0, i34 | 0);
                    i38 = i40;
                    break;
                  }
                  if ((HEAP32[i1 + 88 >> 2] & 1048576 | 0) != 0) {
                    i38 = 0;
                    break;
                  }
                  _png_error(i1, 5269956);
                }
              } while (0);
              i34 = i38;
              HEAP32[i9 >> 2] = i34;
              i39 = i1 + 88 | 0;
              i41 = 0;
              L3791 : while (1) {
                do {
                  if (i36) {
                    i42 = 0;
                  } else {
                    i43 = HEAP32[i37 >> 2] | 0;
                    if ((i43 | 0) == 0) {
                      i44 = _malloc(512) | 0;
                    } else {
                      i44 = FUNCTION_TABLE_iii[i43 & 511](i35, 512) | 0;
                    }
                    if ((i44 | 0) != 0) {
                      i42 = i44;
                      break;
                    }
                    if ((HEAP32[i39 >> 2] & 1048576 | 0) == 0) {
                      i7 = 2720;
                      break L3791;
                    } else {
                      i42 = 0;
                    }
                  }
                } while (0);
                HEAP32[i34 + (i41 << 2) >> 2] = i42;
                i43 = i41 + 1 | 0;
                if (i43 >>> 0 < i32 >>> 0) {
                  i41 = i43;
                } else {
                  break;
                }
              }
              if ((i7 | 0) == 2720) {
                _png_error(i1, 5269956);
              }
              i41 = 255 >>> (i12 >>> 0);
              i39 = 0;
              i35 = 0;
              while (1) {
                i37 = i35 * 257 & -1;
                i36 = i37 & 65535;
                i43 = (((Math_imul(~~+Math_floor(+Math_pow(+((i37 + 128 | 0) >>> 0 >>> 0) / 65535.0, d31) * 65535.0 + .5) & 65535, i33) + 32768 | 0) >>> 0) / 65535 >>> 0) + 1 | 0;
                L3806 : do {
                  if (i39 >>> 0 < i43 >>> 0) {
                    i37 = i39;
                    while (1) {
                      HEAP16[(HEAP32[i34 + ((i37 & i41) << 2) >> 2] | 0) + (i37 >>> (i20 >>> 0) << 1) >> 1] = i36;
                      i45 = i37 + 1 | 0;
                      if ((i45 | 0) == (i43 | 0)) {
                        i46 = i43;
                        break L3806;
                      } else {
                        i37 = i45;
                      }
                    }
                  } else {
                    i46 = i39;
                  }
                } while (0);
                i43 = i35 + 1 | 0;
                if ((i43 | 0) == 255) {
                  break;
                } else {
                  i39 = i46;
                  i35 = i43;
                }
              }
              i35 = i32 << 8;
              if (i46 >>> 0 < i35 >>> 0) {
                i47 = i46;
              } else {
                break;
              }
              while (1) {
                HEAP16[(HEAP32[i34 + ((i47 & i41) << 2) >> 2] | 0) + (i47 >>> (i20 >>> 0) << 1) >> 1] = -1;
                i39 = i47 + 1 | 0;
                if ((i39 | 0) == (i35 | 0)) {
                  break L3774;
                } else {
                  i47 = i39;
                }
              }
            }
          } while (0);
          if ((HEAP32[i5 >> 2] & 6291584 | 0) == 0) {
            break;
          }
          d13 = +Math_floor(1.0e10 / +(HEAP32[i8 >> 2] | 0) + .5);
          if (d13 <= 2147483647.0 & d13 >= -2147483648.0) {
            i48 = ~~d13;
          } else {
            i48 = 0;
          }
          _png_build_16bit_table(i1, i1 + 352 | 0, i12, i48);
          i9 = i1 + 348 | 0;
          i17 = HEAP32[i6 >> 2] | 0;
          do {
            if ((i17 | 0) > 0) {
              d13 = +Math_floor(1.0e10 / +(i17 | 0) + .5);
              if (!(d13 <= 2147483647.0 & d13 >= -2147483648.0)) {
                i49 = 0;
                break;
              }
              i49 = ~~d13;
            } else {
              i49 = HEAP32[i8 >> 2] | 0;
            }
          } while (0);
          _png_build_16bit_table(i1, i9, i12, i49);
        }
      } while (0);
      i11 = HEAP32[i5 >> 2] | 0;
      if ((i11 & 128 | 0) == 0) {
        if (!i10) {
          break;
        }
        i17 = HEAP32[i1 + 252 >> 2] | 0;
        i6 = HEAP16[i1 + 256 >> 1] | 0;
        i3 = i6 & 65535;
        if (i6 << 16 >> 16 == 0) {
          i50 = i11;
        } else {
          i6 = i1 + 332 | 0;
          i35 = 0;
          while (1) {
            i20 = i17 + (i35 * 3 & -1) | 0;
            HEAP8[i20] = HEAP8[(HEAP32[i6 >> 2] | 0) + (HEAPU8[i20] | 0) | 0] | 0;
            i20 = i17 + (i35 * 3 & -1) + 1 | 0;
            HEAP8[i20] = HEAP8[(HEAP32[i6 >> 2] | 0) + (HEAPU8[i20] | 0) | 0] | 0;
            i20 = i17 + (i35 * 3 & -1) + 2 | 0;
            HEAP8[i20] = HEAP8[(HEAP32[i6 >> 2] | 0) + (HEAPU8[i20] | 0) | 0] | 0;
            i20 = i35 + 1 | 0;
            if ((i20 | 0) < (i3 | 0)) {
              i35 = i20;
            } else {
              break;
            }
          }
          i50 = HEAP32[i5 >> 2] | 0;
        }
        i35 = i50 & -8193;
        HEAP32[i5 >> 2] = i35;
        i51 = i35;
        i7 = 2858;
        break;
      }
      if (i10) {
        i35 = HEAP32[i1 + 252 >> 2] | 0;
        i3 = HEAP16[i1 + 256 >> 1] | 0;
        i6 = i3 & 65535;
        i17 = HEAP8[i1 + 280 | 0] | 0;
        do {
          if (i17 << 24 >> 24 == 2) {
            i20 = HEAPU16[i1 + 290 >> 1] | 0;
            i41 = HEAP32[i1 + 332 >> 2] | 0;
            i34 = HEAPU16[i1 + 292 >> 1] | 0;
            i32 = HEAPU16[i1 + 294 >> 1] | 0;
            i39 = HEAP32[i1 + 340 >> 2] | 0;
            i52 = HEAP8[i41 + i32 | 0] | 0;
            i53 = HEAP8[i41 + i34 | 0] | 0;
            i54 = HEAP8[i41 + i20 | 0] | 0;
            i55 = HEAP8[i39 + i32 | 0] | 0;
            i56 = HEAP8[i39 + i34 | 0] | 0;
            i57 = HEAP8[i39 + i20 | 0] | 0;
          } else {
            i20 = i17 & 255;
            do {
              if ((i20 | 0) == 1) {
                i58 = HEAP32[i1 + 328 >> 2] | 0;
                i7 = 2752;
                break;
              } else if ((i20 | 0) == 2) {
                d13 = +(HEAP32[i8 >> 2] | 0);
                d59 = +Math_floor(1.0e10 / d13 + .5);
                if (d59 <= 2147483647.0 & d59 >= -2147483648.0) {
                  i60 = ~~d59;
                } else {
                  i60 = 0;
                }
                d59 = +Math_floor(1.0e15 / d13 / +(HEAP32[i1 + 328 >> 2] | 0) + .5);
                if (d59 <= 2147483647.0 & d59 >= -2147483648.0) {
                  i61 = i60;
                  d62 = d59;
                  i7 = 2753;
                  break;
                } else {
                  i63 = i60;
                  i7 = 2751;
                  break;
                }
              } else if ((i20 | 0) == 3) {
                d59 = +(HEAP32[i1 + 284 >> 2] | 0);
                d13 = +Math_floor(1.0e10 / d59 + .5);
                if (d13 <= 2147483647.0 & d13 >= -2147483648.0) {
                  i64 = ~~d13;
                } else {
                  i64 = 0;
                }
                d13 = +Math_floor(1.0e15 / d59 / +(HEAP32[i1 + 328 >> 2] | 0) + .5);
                if (d13 <= 2147483647.0 & d13 >= -2147483648.0) {
                  i61 = i64;
                  d62 = d13;
                  i7 = 2753;
                  break;
                } else {
                  i63 = i64;
                  i7 = 2751;
                  break;
                }
              } else {
                i58 = 1e5;
                i7 = 2752;
              }
            } while (0);
            do {
              if ((i7 | 0) == 2751) {
                i65 = i63;
                i66 = HEAP16[i1 + 290 >> 1] | 0;
                i7 = 2754;
                break;
              } else if ((i7 | 0) == 2752) {
                i67 = 1e5;
                i68 = i58;
                i69 = HEAP16[i1 + 290 >> 1] | 0;
                i7 = 2755;
                break;
              } else if ((i7 | 0) == 2753) {
                i20 = ~~d62;
                i12 = HEAP16[i1 + 290 >> 1] | 0;
                if ((i20 - 95e3 | 0) >>> 0 > 1e4) {
                  i65 = i61;
                  i66 = i12;
                  i7 = 2754;
                  break;
                } else {
                  i67 = i20;
                  i68 = i61;
                  i69 = i12;
                  i7 = 2755;
                  break;
                }
              }
            } while (0);
            do {
              if ((i7 | 0) == 2754) {
                i12 = HEAP16[i1 + 292 >> 1] | 0;
                i20 = HEAP16[i1 + 294 >> 1] | 0;
                i70 = i20 & 255;
                i71 = i12 & 255;
                i72 = i66 & 255;
                i73 = i12;
                i74 = i20;
                i75 = i65;
                i76 = i66;
              } else if ((i7 | 0) == 2755) {
                if (i69 << 16 >> 16 != 0 & (i69 & 65535) < 255) {
                  i77 = ~~+Math_floor(+Math_pow(+((i69 & 65535) >>> 0) / 255.0, +(i67 | 0) * 1.0e-5) * 255.0 + .5);
                } else {
                  i77 = i69 & 255;
                }
                i20 = HEAP16[i1 + 292 >> 1] | 0;
                if (i20 << 16 >> 16 != 0 & (i20 & 65535) < 255) {
                  i78 = ~~+Math_floor(+Math_pow(+((i20 & 65535) >>> 0) / 255.0, +(i67 | 0) * 1.0e-5) * 255.0 + .5);
                } else {
                  i78 = i20 & 255;
                }
                i12 = HEAP16[i1 + 294 >> 1] | 0;
                if (i12 << 16 >> 16 != 0 & (i12 & 65535) < 255) {
                  i70 = ~~+Math_floor(+Math_pow(+((i12 & 65535) >>> 0) / 255.0, +(i67 | 0) * 1.0e-5) * 255.0 + .5);
                  i71 = i78;
                  i72 = i77;
                  i73 = i20;
                  i74 = i12;
                  i75 = i68;
                  i76 = i69;
                  break;
                } else {
                  i70 = i12 & 255;
                  i71 = i78;
                  i72 = i77;
                  i73 = i20;
                  i74 = i12;
                  i75 = i68;
                  i76 = i69;
                  break;
                }
              }
            } while (0);
            if (i76 << 16 >> 16 != 0 & (i76 & 65535) < 255) {
              i79 = ~~+Math_floor(+Math_pow(+((i76 & 65535) >>> 0) / 255.0, +(i75 | 0) * 1.0e-5) * 255.0 + .5);
            } else {
              i79 = i76 & 255;
            }
            if (i73 << 16 >> 16 != 0 & (i73 & 65535) < 255) {
              i80 = ~~+Math_floor(+Math_pow(+((i73 & 65535) >>> 0) / 255.0, +(i75 | 0) * 1.0e-5) * 255.0 + .5);
            } else {
              i80 = i73 & 255;
            }
            if (i74 << 16 >> 16 != 0 & (i74 & 65535) < 255) {
              i52 = i70;
              i53 = i71;
              i54 = i72;
              i55 = ~~+Math_floor(+Math_pow(+((i74 & 65535) >>> 0) / 255.0, +(i75 | 0) * 1.0e-5) * 255.0 + .5);
              i56 = i80;
              i57 = i79;
              break;
            } else {
              i52 = i70;
              i53 = i71;
              i54 = i72;
              i55 = i74 & 255;
              i56 = i80;
              i57 = i79;
              break;
            }
          }
        } while (0);
        if (i3 << 16 >> 16 == 0) {
          i81 = i11;
        } else {
          i17 = i1 + 258 | 0;
          i12 = i1 + 368 | 0;
          i20 = i1 + 340 | 0;
          i9 = i57 & 255;
          i39 = i1 + 336 | 0;
          i34 = i56 & 255;
          i32 = i55 & 255;
          i41 = i1 + 332 | 0;
          i33 = 0;
          while (1) {
            do {
              if ((i33 | 0) < (HEAPU16[i17 >> 1] | 0 | 0)) {
                i43 = HEAP8[(HEAP32[i12 >> 2] | 0) + i33 | 0] | 0;
                if (i43 << 24 >> 24 == -1) {
                  i7 = 2780;
                  break;
                }
                i36 = i35 + (i33 * 3 & -1) | 0;
                if (i43 << 24 >> 24 == 0) {
                  HEAP8[i36] = i54;
                  HEAP8[i35 + (i33 * 3 & -1) + 1 | 0] = i53;
                  HEAP8[i35 + (i33 * 3 & -1) + 2 | 0] = i52;
                  break;
                } else {
                  i37 = i43 & 255;
                  i43 = Math_imul(HEAPU8[(HEAP32[i20 >> 2] | 0) + (HEAPU8[i36] | 0) | 0] | 0, i37);
                  i45 = (Math_imul(i37 ^ 255, i9) + 128 | 0) + i43 | 0;
                  HEAP8[i36] = HEAP8[(HEAP32[i39 >> 2] | 0) + (((i45 >>> 8 & 255) + i45 | 0) >>> 8 & 255) | 0] | 0;
                  i45 = i35 + (i33 * 3 & -1) + 1 | 0;
                  i36 = HEAPU8[(HEAP32[i12 >> 2] | 0) + i33 | 0] | 0;
                  i43 = Math_imul(i36, HEAPU8[(HEAP32[i20 >> 2] | 0) + (HEAPU8[i45] | 0) | 0] | 0);
                  i37 = (i43 + 128 | 0) + Math_imul(i36 ^ 255, i34) | 0;
                  HEAP8[i45] = HEAP8[(HEAP32[i39 >> 2] | 0) + (((i37 >>> 8 & 255) + i37 | 0) >>> 8 & 255) | 0] | 0;
                  i37 = i35 + (i33 * 3 & -1) + 2 | 0;
                  i45 = HEAPU8[(HEAP32[i12 >> 2] | 0) + i33 | 0] | 0;
                  i36 = Math_imul(i45, HEAPU8[(HEAP32[i20 >> 2] | 0) + (HEAPU8[i37] | 0) | 0] | 0);
                  i43 = (i36 + 128 | 0) + Math_imul(i45 ^ 255, i32) | 0;
                  HEAP8[i37] = HEAP8[(HEAP32[i39 >> 2] | 0) + (((i43 >>> 8 & 255) + i43 | 0) >>> 8 & 255) | 0] | 0;
                  break;
                }
              } else {
                i7 = 2780;
              }
            } while (0);
            if ((i7 | 0) == 2780) {
              i7 = 0;
              i43 = i35 + (i33 * 3 & -1) | 0;
              HEAP8[i43] = HEAP8[(HEAP32[i41 >> 2] | 0) + (HEAPU8[i43] | 0) | 0] | 0;
              i43 = i35 + (i33 * 3 & -1) + 1 | 0;
              HEAP8[i43] = HEAP8[(HEAP32[i41 >> 2] | 0) + (HEAPU8[i43] | 0) | 0] | 0;
              i43 = i35 + (i33 * 3 & -1) + 2 | 0;
              HEAP8[i43] = HEAP8[(HEAP32[i41 >> 2] | 0) + (HEAPU8[i43] | 0) | 0] | 0;
            }
            i43 = i33 + 1 | 0;
            if ((i43 | 0) < (i6 | 0)) {
              i33 = i43;
            } else {
              break;
            }
          }
          i81 = HEAP32[i5 >> 2] | 0;
        }
        i33 = i81 & -270465 | 262144;
        HEAP32[i5 >> 2] = i33;
        i51 = i33;
        i7 = 2858;
        break;
      }
      i33 = HEAPU8[i1 + 280 | 0] | 0;
      do {
        if ((i33 | 0) == 1) {
          i82 = 1e5;
          i83 = HEAP32[i1 + 328 >> 2] | 0;
        } else if ((i33 | 0) == 2) {
          d13 = +(HEAP32[i8 >> 2] | 0);
          d59 = +Math_floor(1.0e10 / d13 + .5);
          if (d59 <= 2147483647.0 & d59 >= -2147483648.0) {
            i84 = ~~d59;
          } else {
            i84 = 0;
          }
          d59 = +Math_floor(1.0e15 / d13 / +(HEAP32[i1 + 328 >> 2] | 0) + .5);
          if (!(d59 <= 2147483647.0 & d59 >= -2147483648.0)) {
            i82 = 0;
            i83 = i84;
            break;
          }
          i82 = ~~d59;
          i83 = i84;
        } else if ((i33 | 0) == 3) {
          d59 = +(HEAP32[i1 + 284 >> 2] | 0);
          d13 = +Math_floor(1.0e10 / d59 + .5);
          if (d13 <= 2147483647.0 & d13 >= -2147483648.0) {
            i85 = ~~d13;
          } else {
            i85 = 0;
          }
          d13 = +Math_floor(1.0e15 / d59 / +(HEAP32[i1 + 328 >> 2] | 0) + .5);
          if (!(d13 <= 2147483647.0 & d13 >= -2147483648.0)) {
            i82 = 0;
            i83 = i85;
            break;
          }
          i82 = ~~d13;
          i83 = i85;
        } else {
          _png_error(i1, 5263352);
        }
      } while (0);
      i33 = i1 + 296 | 0;
      i8 = HEAP16[i33 >> 1] | 0;
      i6 = HEAP8[i4] << 24 >> 24 == 8;
      do {
        if (i6) {
          if (i8 << 16 >> 16 != 0 & (i8 & 65535) < 255) {
            i41 = ~~+Math_floor(+Math_pow(+((i8 & 65535) >>> 0) / 255.0, +(i83 | 0) * 1.0e-5) * 255.0 + .5) & 255;
            HEAP16[i1 + 306 >> 1] = i41;
            i86 = ~~+Math_floor(+Math_pow(+((i8 & 65535) >>> 0) / 255.0, +(i82 | 0) * 1.0e-5) * 255.0 + .5);
            i87 = i41;
          } else {
            i41 = i8 & 255;
            HEAP16[i1 + 306 >> 1] = i41;
            i86 = i8 & 255;
            i87 = i41;
          }
          i88 = i86 & 255;
          i89 = i87;
        } else {
          if ((i8 << 16 >> 16 | 0) == (-1 | 0) | (i8 << 16 >> 16 | 0) == 0) {
            i90 = i8;
          } else {
            i90 = ~~+Math_floor(+Math_pow(+((i8 & 65535) >>> 0) / 65535.0, +(i83 | 0) * 1.0e-5) * 65535.0 + .5);
          }
          HEAP16[i1 + 306 >> 1] = i90;
          if ((i8 << 16 >> 16 | 0) == (-1 | 0) | (i8 << 16 >> 16 | 0) == 0) {
            i88 = i8;
            i89 = i90;
            break;
          }
          i88 = ~~+Math_floor(+Math_pow(+((i8 & 65535) >>> 0) / 65535.0, +(i82 | 0) * 1.0e-5) * 65535.0 + .5);
          i89 = i90;
        }
      } while (0);
      HEAP16[i33 >> 1] = i88;
      i8 = i1 + 290 | 0;
      i4 = HEAP16[i8 >> 1] | 0;
      i41 = i1 + 292 | 0;
      i35 = HEAP16[i41 >> 1] | 0;
      do {
        if (i4 << 16 >> 16 == i35 << 16 >> 16) {
          i39 = i1 + 294 | 0;
          if (!(i4 << 16 >> 16 == HEAP16[i39 >> 1] << 16 >> 16 & i4 << 16 >> 16 == i88 << 16 >> 16)) {
            break;
          }
          HEAP16[i1 + 304 >> 1] = i89;
          HEAP16[i1 + 302 >> 1] = i89;
          HEAP16[i1 + 300 >> 1] = i89;
          HEAP16[i39 >> 1] = i88;
          HEAP16[i41 >> 1] = i88;
          HEAP16[i8 >> 1] = i88;
          i51 = i11;
          i7 = 2858;
          break L3692;
        }
      } while (0);
      do {
        if (i6) {
          if (i4 << 16 >> 16 != 0 & (i4 & 65535) < 255) {
            HEAP16[i1 + 300 >> 1] = ~~+Math_floor(+Math_pow(+((i4 & 65535) >>> 0) / 255.0, +(i83 | 0) * 1.0e-5) * 255.0 + .5) & 255;
          } else {
            HEAP16[i1 + 300 >> 1] = i4 & 255;
          }
          if (i35 << 16 >> 16 != 0 & (i35 & 65535) < 255) {
            i91 = ~~+Math_floor(+Math_pow(+((i35 & 65535) >>> 0) / 255.0, +(i83 | 0) * 1.0e-5) * 255.0 + .5);
          } else {
            i91 = i35 & 255;
          }
          HEAP16[i1 + 302 >> 1] = i91 & 255;
          i33 = i1 + 294 | 0;
          i39 = HEAP16[i33 >> 1] | 0;
          if (i39 << 16 >> 16 != 0 & (i39 & 65535) < 255) {
            i92 = ~~+Math_floor(+Math_pow(+((i39 & 65535) >>> 0) / 255.0, +(i83 | 0) * 1.0e-5) * 255.0 + .5);
          } else {
            i92 = i39 & 255;
          }
          i93 = i92 & 255;
          i94 = i33;
          i95 = i39;
        } else {
          if ((i4 << 16 >> 16 | 0) == (-1 | 0) | (i4 << 16 >> 16 | 0) == 0) {
            i96 = i4;
          } else {
            i96 = ~~+Math_floor(+Math_pow(+((i4 & 65535) >>> 0) / 65535.0, +(i83 | 0) * 1.0e-5) * 65535.0 + .5);
          }
          HEAP16[i1 + 300 >> 1] = i96;
          if ((i35 << 16 >> 16 | 0) == (-1 | 0)) {
            i97 = -1;
          } else if ((i35 << 16 >> 16 | 0) == 0) {
            i97 = 0;
          } else {
            i97 = ~~+Math_floor(+Math_pow(+((i35 & 65535) >>> 0) / 65535.0, +(i83 | 0) * 1.0e-5) * 65535.0 + .5);
          }
          HEAP16[i1 + 302 >> 1] = i97;
          i39 = i1 + 294 | 0;
          i33 = HEAP16[i39 >> 1] | 0;
          if ((i33 << 16 >> 16 | 0) == (-1 | 0) | (i33 << 16 >> 16 | 0) == 0) {
            i93 = i33;
            i94 = i39;
            i95 = i33;
            break;
          }
          i93 = ~~+Math_floor(+Math_pow(+((i33 & 65535) >>> 0) / 65535.0, +(i83 | 0) * 1.0e-5) * 65535.0 + .5);
          i94 = i39;
          i95 = i33;
        }
      } while (0);
      HEAP16[i1 + 304 >> 1] = i93;
      do {
        if (i6) {
          if (i4 << 16 >> 16 != 0 & (i4 & 65535) < 255) {
            i98 = ~~+Math_floor(+Math_pow(+((i4 & 65535) >>> 0) / 255.0, +(i82 | 0) * 1.0e-5) * 255.0 + .5) & 255;
          } else {
            i98 = i4 & 255;
          }
          HEAP16[i8 >> 1] = i98;
          if (i35 << 16 >> 16 != 0 & (i35 & 65535) < 255) {
            i99 = ~~+Math_floor(+Math_pow(+((i35 & 65535) >>> 0) / 255.0, +(i82 | 0) * 1.0e-5) * 255.0 + .5);
          } else {
            i99 = i35 & 255;
          }
          HEAP16[i41 >> 1] = i99 & 255;
          if (i95 << 16 >> 16 != 0 & (i95 & 65535) < 255) {
            i100 = ~~+Math_floor(+Math_pow(+((i95 & 65535) >>> 0) / 255.0, +(i82 | 0) * 1.0e-5) * 255.0 + .5);
          } else {
            i100 = i95 & 255;
          }
          i101 = i100 & 255;
        } else {
          if ((i4 << 16 >> 16 | 0) == (-1 | 0) | (i4 << 16 >> 16 | 0) == 0) {
            i102 = i4;
          } else {
            i102 = ~~+Math_floor(+Math_pow(+((i4 & 65535) >>> 0) / 65535.0, +(i82 | 0) * 1.0e-5) * 65535.0 + .5);
          }
          HEAP16[i8 >> 1] = i102;
          if ((i35 << 16 >> 16 | 0) == (-1 | 0) | (i35 << 16 >> 16 | 0) == 0) {
            i103 = i35;
          } else {
            i103 = ~~+Math_floor(+Math_pow(+((i35 & 65535) >>> 0) / 65535.0, +(i82 | 0) * 1.0e-5) * 65535.0 + .5);
          }
          HEAP16[i41 >> 1] = i103;
          if ((i95 << 16 >> 16 | 0) == (-1 | 0) | (i95 << 16 >> 16 | 0) == 0) {
            i101 = i95;
            break;
          }
          i101 = ~~+Math_floor(+Math_pow(+((i95 & 65535) >>> 0) / 65535.0, +(i82 | 0) * 1.0e-5) * 65535.0 + .5);
        }
      } while (0);
      HEAP16[i94 >> 1] = i101;
      i51 = i11;
      i7 = 2858;
      break;
    }
  } while (0);
  do {
    if ((i7 | 0) == 2849) {
      if ((i14 & 128 | 0) == 0 | i10 ^ 1) {
        i51 = i14;
        i7 = 2858;
        break;
      }
      i101 = HEAP16[i1 + 258 >> 1] | 0;
      i94 = i101 & 65535;
      i82 = HEAP32[i1 + 252 >> 2] | 0;
      i95 = HEAP16[i1 + 290 >> 1] | 0;
      i103 = i95 & 255;
      i102 = HEAP16[i1 + 292 >> 1] | 0;
      i100 = i102 & 255;
      i99 = HEAP16[i1 + 294 >> 1] | 0;
      i98 = i99 & 255;
      if (i101 << 16 >> 16 == 0) {
        i104 = i14;
      } else {
        i101 = i1 + 368 | 0;
        i93 = i95 & 255;
        i95 = i102 & 255;
        i102 = i99 & 255;
        i99 = 0;
        while (1) {
          i83 = HEAP8[(HEAP32[i101 >> 2] | 0) + i99 | 0] | 0;
          if ((i83 << 24 >> 24 | 0) == 0) {
            HEAP8[i82 + (i99 * 3 & -1) | 0] = i103;
            HEAP8[i82 + (i99 * 3 & -1) + 1 | 0] = i100;
            HEAP8[i82 + (i99 * 3 & -1) + 2 | 0] = i98;
          } else if ((i83 << 24 >> 24 | 0) != (-1 | 0)) {
            i97 = i82 + (i99 * 3 & -1) | 0;
            i96 = i83 & 255;
            i83 = Math_imul(HEAPU8[i97] | 0, i96);
            i92 = (Math_imul(i96 ^ 255, i93) + 128 | 0) + i83 | 0;
            HEAP8[i97] = ((i92 >>> 8 & 255) + i92 | 0) >>> 8 & 255;
            i92 = i82 + (i99 * 3 & -1) + 1 | 0;
            i97 = HEAPU8[(HEAP32[i101 >> 2] | 0) + i99 | 0] | 0;
            i83 = Math_imul(i97, HEAPU8[i92] | 0);
            i96 = (i83 + 128 | 0) + Math_imul(i97 ^ 255, i95) | 0;
            HEAP8[i92] = ((i96 >>> 8 & 255) + i96 | 0) >>> 8 & 255;
            i96 = i82 + (i99 * 3 & -1) + 2 | 0;
            i92 = HEAPU8[(HEAP32[i101 >> 2] | 0) + i99 | 0] | 0;
            i97 = Math_imul(i92, HEAPU8[i96] | 0);
            i83 = (i97 + 128 | 0) + Math_imul(i92 ^ 255, i102) | 0;
            HEAP8[i96] = ((i83 >>> 8 & 255) + i83 | 0) >>> 8 & 255;
          }
          i83 = i99 + 1 | 0;
          if ((i83 | 0) < (i94 | 0)) {
            i99 = i83;
          } else {
            break;
          }
        }
        i104 = HEAP32[i5 >> 2] | 0;
      }
      i99 = i104 & -262273 | 262144;
      HEAP32[i5 >> 2] = i99;
      i51 = i99;
      i7 = 2858;
      break;
    }
  } while (0);
  L3991 : do {
    if ((i7 | 0) == 2858) {
      if ((i51 & 8 | 0) == 0 | i10 ^ 1) {
        break;
      }
      i104 = HEAP16[i1 + 256 >> 1] | 0;
      i14 = 8 - (HEAPU8[i1 + 356 | 0] | 0) | 0;
      i99 = 8 - (HEAPU8[i1 + 357 | 0] | 0) | 0;
      i94 = 8 - (HEAPU8[i1 + 358 | 0] | 0) | 0;
      i102 = (i14 | 0) < 0 ? 0 : i14;
      i14 = (i99 | 0) < 0 ? 0 : i99;
      i99 = (i94 | 0) < 0 ? 0 : i94;
      if (i104 << 16 >> 16 == 0) {
        break;
      }
      i94 = i1 + 252 | 0;
      i101 = 0;
      while (1) {
        i82 = (HEAP32[i94 >> 2] | 0) + (i101 * 3 & -1) | 0;
        HEAP8[i82] = (HEAPU8[i82] | 0) >>> (i102 >>> 0) & 255;
        i82 = (HEAP32[i94 >> 2] | 0) + (i101 * 3 & -1) + 1 | 0;
        HEAP8[i82] = (HEAPU8[i82] | 0) >>> (i14 >>> 0) & 255;
        i82 = (HEAP32[i94 >> 2] | 0) + (i101 * 3 & -1) + 2 | 0;
        HEAP8[i82] = (HEAPU8[i82] | 0) >>> (i99 >>> 0) & 255;
        i82 = i101 + 1 | 0;
        if ((i82 & 65535) << 16 >> 16 == i104 << 16 >> 16) {
          break L3991;
        } else {
          i101 = i82;
        }
      }
    }
  } while (0);
  i10 = i1 + 267 | 0;
  if (HEAP8[i10] << 24 >> 24 == 0) {
    HEAP32[i1 + 188 >> 2] = HEAP32[i1 + 184 >> 2] | 0;
    i51 = HEAP32[i1 + 180 >> 2] | 0;
    HEAP32[i1 + 200 >> 2] = i51;
    i105 = HEAP32[i5 >> 2] | 0;
    i106 = i51;
  } else {
    i51 = HEAP32[i5 >> 2] | 0;
    i101 = HEAP32[i1 + 184 >> 2] | 0;
    if ((i51 & 2 | 0) == 0) {
      HEAP32[i1 + 188 >> 2] = (i101 + 7 | 0) >>> 3;
    } else {
      HEAP32[i1 + 188 >> 2] = i101;
    }
    i101 = HEAP32[i1 + 180 >> 2] | 0;
    i104 = HEAPU8[i1 + 268 | 0] | 0;
    i99 = HEAP32[5246044 + (i104 << 2) >> 2] | 0;
    HEAP32[i1 + 200 >> 2] = ((((i101 - 1 | 0) + i99 | 0) - (HEAP32[5246016 + (i104 << 2) >> 2] | 0) | 0) >>> 0) / (i99 >>> 0) >>> 0;
    i105 = i51;
    i106 = i101;
  }
  i101 = HEAPU8[i1 + 273 | 0] | 0;
  if ((i105 & 4 | 0) == 0) {
    i107 = i101;
  } else {
    i107 = (HEAPU8[i1 + 271 | 0] | 0) < 8 ? 8 : i101;
  }
  i101 = (i105 & 4096 | 0) == 0;
  do {
    if (i101) {
      i108 = i107;
    } else {
      i51 = HEAP8[i2] | 0;
      if ((i51 << 24 >> 24 | 0) == 3) {
        i108 = HEAP16[i1 + 258 >> 1] << 16 >> 16 == 0 ? 24 : 32;
        break;
      } else if ((i51 << 24 >> 24 | 0) == 0) {
        i99 = i107 >>> 0 < 8 ? 8 : i107;
        if (HEAP16[i1 + 258 >> 1] << 16 >> 16 == 0) {
          i108 = i99;
          break;
        }
        i108 = i99 << 1;
        break;
      } else if ((i51 << 24 >> 24 | 0) == 2) {
        if (HEAP16[i1 + 258 >> 1] << 16 >> 16 == 0) {
          i108 = i107;
          break;
        }
        i108 = (i107 << 2 >>> 0) / 3 >>> 0;
        break;
      } else {
        i108 = i107;
        break;
      }
    }
  } while (0);
  do {
    if ((i105 & 512 | 0) == 0) {
      i109 = i108;
      i110 = i105;
    } else {
      if (i101) {
        i107 = i105 & -513;
        HEAP32[i5 >> 2] = i107;
        i109 = i108;
        i110 = i107;
        break;
      } else {
        i109 = i108 << ((HEAPU8[i1 + 271 | 0] | 0) < 16 & 1);
        i110 = i105;
        break;
      }
    }
  } while (0);
  i105 = (i110 & 32768 | 0) == 0;
  do {
    if (i105) {
      i111 = i109;
    } else {
      i108 = HEAP8[i2] | 0;
      if ((i108 << 24 >> 24 | 0) == 0) {
        i111 = (i109 | 0) < 9 ? 16 : 32;
        break;
      } else if ((i108 << 24 >> 24 | 0) == 3) {
        i111 = 32;
        break;
      }
      if (i108 << 24 >> 24 != 2) {
        i111 = i109;
        break;
      }
      i111 = (i109 | 0) < 33 ? 32 : 64;
    }
  } while (0);
  L4031 : do {
    if ((i110 & 16384 | 0) == 0) {
      i112 = i111;
    } else {
      do {
        if (HEAP16[i1 + 258 >> 1] << 16 >> 16 == 0) {
          if (i105) {
            i7 = 2890;
            break;
          } else {
            break;
          }
        } else {
          if ((i110 & 4096 | 0) != 0 | i105 ^ 1) {
            break;
          } else {
            i7 = 2890;
            break;
          }
        }
      } while (0);
      do {
        if ((i7 | 0) == 2890) {
          i109 = HEAP8[i2] | 0;
          if (i109 << 24 >> 24 == 4) {
            break;
          }
          i108 = i109 << 24 >> 24 == 6;
          if ((i111 | 0) < 9) {
            i112 = i108 ? 32 : 24;
            break L4031;
          } else {
            i112 = i108 ? 64 : 48;
            break L4031;
          }
        }
      } while (0);
      i112 = (i111 | 0) < 17 ? 32 : 64;
    }
  } while (0);
  if ((i110 & 1048576 | 0) == 0) {
    i113 = i112;
  } else {
    i110 = Math_imul(HEAPU8[i1 + 81 | 0] | 0, HEAPU8[i1 + 80 | 0] | 0);
    i113 = (i110 | 0) > (i112 | 0) ? i110 : i112;
  }
  i112 = i106 + 7 & -8;
  if ((i113 | 0) > 7) {
    i114 = Math_imul(i112, i113 >>> 3);
  } else {
    i114 = Math_imul(i112, i113) >>> 3;
  }
  i112 = ((i113 + 7 >> 3) + 49 | 0) + i114 | 0;
  i114 = i1 + 612 | 0;
  if (i112 >>> 0 > (HEAP32[i114 >> 2] | 0) >>> 0) {
    i113 = i1 + 556 | 0;
    i106 = HEAP32[i113 >> 2] | 0;
    i110 = i1;
    i111 = (i1 | 0) == 0;
    do {
      if (!(i111 | (i106 | 0) == 0)) {
        i2 = HEAP32[i1 + 552 >> 2] | 0;
        if ((i2 | 0) == 0) {
          _free(i106);
          break;
        } else {
          FUNCTION_TABLE_vii[i2 & 511](i110, i106);
          break;
        }
      }
    } while (0);
    i106 = i111 | (i112 | 0) == 0;
    do {
      if (HEAP8[i10] << 24 >> 24 == 0) {
        if (i106) {
          i115 = 0;
          break;
        }
        i111 = HEAP32[i1 + 548 >> 2] | 0;
        if ((i111 | 0) == 0) {
          i116 = _malloc(i112) | 0;
        } else {
          i116 = FUNCTION_TABLE_iii[i111 & 511](i110, i112) | 0;
        }
        if ((i116 | 0) != 0) {
          i115 = i116;
          break;
        }
        if ((HEAP32[i1 + 88 >> 2] & 1048576 | 0) != 0) {
          i115 = 0;
          break;
        }
        _png_error(i1, 5269956);
      } else {
        if (i106) {
          i115 = 0;
          break;
        }
        i111 = HEAP32[i1 + 548 >> 2] | 0;
        if ((i111 | 0) == 0) {
          i117 = _malloc(i112) | 0;
        } else {
          i117 = FUNCTION_TABLE_iii[i111 & 511](i110, i112) | 0;
        }
        if ((i117 | 0) != 0) {
          _memset(i117 | 0, 0, i112 | 0);
          i115 = i117;
          break;
        }
        if ((HEAP32[i1 + 88 >> 2] & 1048576 | 0) != 0) {
          i115 = 0;
          break;
        }
        _png_error(i1, 5269956);
      }
    } while (0);
    HEAP32[i113 >> 2] = i115;
    HEAP32[i1 + 212 >> 2] = i115 + 32 | 0;
    HEAP32[i114 >> 2] = i112;
  }
  i112 = i1 + 196 | 0;
  i114 = HEAP32[i112 >> 2] | 0;
  if ((i114 | 0) == -1) {
    _png_error(i1, 5272328);
  }
  i115 = i1 + 616 | 0;
  i113 = i1 + 208 | 0;
  i117 = HEAP32[i113 >> 2] | 0;
  if ((i114 + 1 | 0) >>> 0 <= (HEAP32[i115 >> 2] | 0) >>> 0) {
    i118 = i114;
    i119 = i117;
    i120 = i118 + 1 | 0;
    _memset(i119 | 0, 0, i120 | 0);
    i121 = i1 + 88 | 0;
    i122 = HEAP32[i121 >> 2] | 0;
    i123 = i122 | 64;
    HEAP32[i121 >> 2] = i123;
    return;
  }
  i114 = i1;
  i110 = (i1 | 0) == 0;
  do {
    if (!(i110 | (i117 | 0) == 0)) {
      i106 = HEAP32[i1 + 552 >> 2] | 0;
      if ((i106 | 0) == 0) {
        _free(i117);
        break;
      } else {
        FUNCTION_TABLE_vii[i106 & 511](i114, i117);
        break;
      }
    }
  } while (0);
  i117 = (HEAP32[i112 >> 2] | 0) + 1 | 0;
  do {
    if (i110 | (i117 | 0) == 0) {
      i124 = 0;
    } else {
      i106 = HEAP32[i1 + 548 >> 2] | 0;
      if ((i106 | 0) == 0) {
        i125 = _malloc(i117) | 0;
      } else {
        i125 = FUNCTION_TABLE_iii[i106 & 511](i114, i117) | 0;
      }
      if ((i125 | 0) != 0) {
        i124 = i125;
        break;
      }
      if ((HEAP32[i1 + 88 >> 2] & 1048576 | 0) != 0) {
        i124 = 0;
        break;
      }
      _png_error(i1, 5269956);
    }
  } while (0);
  HEAP32[i113 >> 2] = i124;
  i113 = HEAP32[i112 >> 2] | 0;
  HEAP32[i115 >> 2] = i113 + 1 | 0;
  i118 = i113;
  i119 = i124;
  i120 = i118 + 1 | 0;
  _memset(i119 | 0, 0, i120 | 0);
  i121 = i1 + 88 | 0;
  i122 = HEAP32[i121 >> 2] | 0;
  i123 = i122 | 64;
  HEAP32[i121 >> 2] = i123;
  return;
}
function _WebPAllocateDecBuffer(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0;
  if ((i4 | 0) == 0 | (i1 | 0) < 1 | (i2 | 0) < 1) {
    i5 = 2;
    return i5 | 0;
  }
  do {
    if ((i3 | 0) == 0) {
      i6 = i1;
      i7 = i2;
    } else {
      do {
        if ((HEAP32[i3 + 8 >> 2] | 0) == 0) {
          i8 = i1;
          i9 = i2;
        } else {
          i10 = HEAP32[i3 + 20 >> 2] | 0;
          i11 = HEAP32[i3 + 24 >> 2] | 0;
          i12 = HEAP32[i3 + 12 >> 2] | 0;
          i13 = HEAP32[i3 + 16 >> 2] | 0;
          if ((i13 | i12 | 0) < 0 | (i10 | 0) < 1 | (i11 | 0) < 1) {
            i5 = 2;
            return i5 | 0;
          }
          if (((i12 & -2) + i10 | 0) > (i1 | 0)) {
            i5 = 2;
            return i5 | 0;
          }
          if (((i13 & -2) + i11 | 0) > (i2 | 0)) {
            i5 = 2;
          } else {
            i8 = i10;
            i9 = i11;
            break;
          }
          return i5 | 0;
        }
      } while (0);
      if ((HEAP32[i3 + 28 >> 2] | 0) == 0) {
        i6 = i8;
        i7 = i9;
        break;
      }
      i11 = HEAP32[i3 + 32 >> 2] | 0;
      if ((i11 | 0) < 1) {
        i5 = 2;
        return i5 | 0;
      }
      i10 = HEAP32[i3 + 36 >> 2] | 0;
      if ((i10 | 0) < 1) {
        i5 = 2;
      } else {
        i6 = i11;
        i7 = i10;
        break;
      }
      return i5 | 0;
    }
  } while (0);
  i3 = i4 + 4 | 0;
  HEAP32[i3 >> 2] = i6;
  i9 = i4 + 8 | 0;
  HEAP32[i9 >> 2] = i7;
  i8 = i4 | 0;
  i2 = HEAP32[i8 >> 2] | 0;
  if (!((i7 | 0) > 0 & (i6 | 0) > 0 & i2 >>> 0 < 13)) {
    i5 = 2;
    return i5 | 0;
  }
  do {
    if ((HEAP32[i4 + 12 >> 2] | 0) == 0) {
      i1 = i4 + 80 | 0;
      if ((HEAP32[i1 >> 2] | 0) != 0) {
        break;
      }
      i10 = Math_imul(HEAP32[5247248 + (i2 << 2) >> 2] | 0, i6);
      i11 = i10;
      i13 = (i10 | 0) < 0 ? -1 : 0;
      i12 = i7;
      i14 = (i7 | 0) < 0 ? -1 : 0;
      i15 = ~~((+(i11 >>> 0) + +(i13 | 0) * 4294967296.0) * (+(i12 >>> 0) + +(i14 | 0) * 4294967296.0)) >>> 0;
      i16 = Math_min(Math_floor((+(i11 >>> 0) + +(i13 | 0) * 4294967296.0) * (+(i12 >>> 0) + +(i14 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
      i13 = i2 >>> 0 < 11;
      do {
        if (i13) {
          i17 = 0;
          i18 = 0;
          i19 = 0;
          i20 = 0;
          i21 = 0;
          i22 = 0;
        } else {
          i11 = (i6 + 1 | 0) / 2 & -1;
          i23 = i11;
          i24 = (i11 | 0) < 0 ? -1 : 0;
          i25 = (i7 + 1 | 0) / 2 & -1;
          i26 = i25;
          i27 = (i25 | 0) < 0 ? -1 : 0;
          i25 = ~~((+(i26 >>> 0) + +(i27 | 0) * 4294967296.0) * (+(i23 >>> 0) + +(i24 | 0) * 4294967296.0)) >>> 0;
          i28 = Math_min(Math_floor((+(i26 >>> 0) + +(i27 | 0) * 4294967296.0) * (+(i23 >>> 0) + +(i24 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
          if ((i2 | 0) != 12) {
            i17 = i11;
            i18 = 0;
            i19 = i28;
            i20 = i25;
            i21 = 0;
            i22 = 0;
            break;
          }
          i24 = i6;
          i23 = (i6 | 0) < 0 ? -1 : 0;
          i17 = i11;
          i18 = i6;
          i19 = i28;
          i20 = i25;
          i21 = Math_min(Math_floor((+(i24 >>> 0) + +(i23 | 0) * 4294967296.0) * (+(i12 >>> 0) + +(i14 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
          i22 = ~~((+(i24 >>> 0) + +(i23 | 0) * 4294967296.0) * (+(i12 >>> 0) + +(i14 | 0) * 4294967296.0)) >>> 0;
        }
      } while (0);
      i14 = i20 << 1 | 0 >>> 31;
      i12 = i19 << 1 | i20 >>> 31;
      i23 = ~~(+(i22 >>> 0) + +(i21 | 0) * 4294967296.0 + (+(i15 >>> 0) + +(i16 | 0) * 4294967296.0)) >>> 0;
      i24 = Math_min(Math_floor((+(i22 >>> 0) + +(i21 | 0) * 4294967296.0 + (+(i15 >>> 0) + +(i16 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
      i25 = ~~(+(i23 >>> 0) + +(i24 | 0) * 4294967296.0 + (+(i14 >>> 0) + +(i12 | 0) * 4294967296.0)) >>> 0;
      i28 = Math_min(Math_floor((+(i23 >>> 0) + +(i24 | 0) * 4294967296.0 + (+(i14 >>> 0) + +(i12 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
      do {
        if (!((i25 | 0) == 0 & (i28 | 0) == 0)) {
          i12 = 0;
          i24 = 256;
          i23 = ~~Math_floor((+(i12 >>> 0) + +(i24 >>> 0) * 4294967296.0) / (+(i25 >>> 0) + +(i28 >>> 0) * 4294967296.0)) >>> 0;
          if (((i23 | 0) != 0 | (Math_min(Math_floor(Math_floor((+(i12 >>> 0) + +(i24 >>> 0) * 4294967296.0) / (+(i25 >>> 0) + +(i28 >>> 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0 | 0) != 0) & ((i25 | 0) == (i25 & -1 | 0) & (i28 | 0) == (i28 & 0 | 0))) {
            break;
          } else {
            i5 = 1;
          }
          return i5 | 0;
        }
      } while (0);
      i28 = _malloc(i25) | 0;
      if ((i28 | 0) == 0) {
        i5 = 1;
        return i5 | 0;
      }
      HEAP32[i1 >> 2] = i28;
      HEAP32[i4 + 16 >> 2] = i28;
      if (i13) {
        HEAP32[i4 + 20 >> 2] = i10;
        HEAP32[i4 + 24 >> 2] = i15;
        break;
      }
      HEAP32[i4 + 32 >> 2] = i10;
      i16 = i15;
      HEAP32[i4 + 48 >> 2] = i16;
      HEAP32[i4 + 20 >> 2] = i28 + i16 | 0;
      HEAP32[i4 + 36 >> 2] = i17;
      i24 = i20;
      HEAP32[i4 + 52 >> 2] = i24;
      HEAP32[i4 + 24 >> 2] = i28 + (i24 + i16 | 0) | 0;
      HEAP32[i4 + 40 >> 2] = i17;
      HEAP32[i4 + 56 >> 2] = i24;
      if ((i2 | 0) == 12) {
        HEAP32[i4 + 28 >> 2] = i28 + (i14 + i16 | 0) | 0;
      }
      HEAP32[i4 + 60 >> 2] = i22;
      HEAP32[i4 + 44 >> 2] = i18;
    }
  } while (0);
  i18 = HEAP32[i8 >> 2] | 0;
  i8 = HEAP32[i3 >> 2] | 0;
  i3 = HEAP32[i9 >> 2] | 0;
  do {
    if (i18 >>> 0 < 13) {
      i9 = i4 + 16 | 0;
      if (i18 >>> 0 < 11) {
        i22 = HEAP32[i4 + 20 >> 2] | 0;
        i2 = i22;
        i17 = (i22 | 0) < 0 ? -1 : 0;
        i20 = i3;
        i21 = (i3 | 0) < 0 ? -1 : 0;
        i19 = Math_min(Math_floor((+(i2 >>> 0) + +(i17 | 0) * 4294967296.0) * (+(i20 >>> 0) + +(i21 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
        i6 = 0;
        i7 = i19 >>> 0 <= i6 >>> 0 & (i19 >>> 0 < i6 >>> 0 | ~~((+(i2 >>> 0) + +(i17 | 0) * 4294967296.0) * (+(i20 >>> 0) + +(i21 | 0) * 4294967296.0)) >>> 0 >>> 0 <= (HEAP32[i4 + 24 >> 2] | 0) >>> 0);
        i21 = i7 & (i22 | 0) >= (Math_imul(HEAP32[5247248 + (i18 << 2) >> 2] | 0, i8) | 0);
        i29 = i21 & (HEAP32[i9 >> 2] | 0) != 0 & 1;
        break;
      }
      i21 = HEAP32[i4 + 32 >> 2] | 0;
      i22 = i21;
      i7 = (i21 | 0) < 0 ? -1 : 0;
      i20 = i3;
      i17 = (i3 | 0) < 0 ? -1 : 0;
      i2 = Math_min(Math_floor((+(i22 >>> 0) + +(i7 | 0) * 4294967296.0) * (+(i20 >>> 0) + +(i17 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
      i6 = HEAP32[i4 + 36 >> 2] | 0;
      i19 = i6;
      i16 = (i6 | 0) < 0 ? -1 : 0;
      i28 = (i3 + 1 | 0) / 2 & -1;
      i24 = i28;
      i12 = (i28 | 0) < 0 ? -1 : 0;
      i28 = Math_min(Math_floor((+(i24 >>> 0) + +(i12 | 0) * 4294967296.0) * (+(i19 >>> 0) + +(i16 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
      i23 = HEAP32[i4 + 40 >> 2] | 0;
      i11 = i23;
      i27 = (i23 | 0) < 0 ? -1 : 0;
      i26 = Math_min(Math_floor((+(i11 >>> 0) + +(i27 | 0) * 4294967296.0) * (+(i24 >>> 0) + +(i12 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
      i30 = HEAP32[i4 + 44 >> 2] | 0;
      i31 = 0;
      i32 = 0;
      i33 = 0;
      i34 = (i8 + 1 | 0) / 2 & -1;
      i35 = i2 >>> 0 <= i31 >>> 0 & (i2 >>> 0 < i31 >>> 0 | ~~((+(i22 >>> 0) + +(i7 | 0) * 4294967296.0) * (+(i20 >>> 0) + +(i17 | 0) * 4294967296.0)) >>> 0 >>> 0 <= (HEAP32[i4 + 48 >> 2] | 0) >>> 0) & (i28 >>> 0 <= i32 >>> 0 & (i28 >>> 0 < i32 >>> 0 | ~~((+(i24 >>> 0) + +(i12 | 0) * 4294967296.0) * (+(i19 >>> 0) + +(i16 | 0) * 4294967296.0)) >>> 0 >>> 0 <= (HEAP32[i4 + 52 >> 2] | 0) >>> 0)) & (i26 >>> 0 <= i33 >>> 0 & (i26 >>> 0 < i33 >>> 0 | ~~((+(i11 >>> 0) + +(i27 | 0) * 4294967296.0) * (+(i24 >>> 0) + +(i12 | 0) * 4294967296.0)) >>> 0 >>> 0 <= (HEAP32[i4 + 56 >> 2] | 0) >>> 0)) & (i21 | 0) >= (i8 | 0) & (i6 | 0) >= (i34 | 0) & (i23 | 0) >= (i34 | 0) & (HEAP32[i9 >> 2] | 0) != 0 & (HEAP32[i4 + 20 >> 2] | 0) != 0 & (HEAP32[i4 + 24 >> 2] | 0) != 0;
      if ((i18 | 0) != 12) {
        i29 = i35 & 1;
        break;
      }
      i9 = i30;
      i34 = (i30 | 0) < 0 ? -1 : 0;
      i23 = Math_min(Math_floor((+(i9 >>> 0) + +(i34 | 0) * 4294967296.0) * (+(i20 >>> 0) + +(i17 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
      i6 = 0;
      i29 = i35 & (i30 | 0) >= (i8 | 0) & (i23 >>> 0 <= i6 >>> 0 & (i23 >>> 0 < i6 >>> 0 | ~~((+(i9 >>> 0) + +(i34 | 0) * 4294967296.0) * (+(i20 >>> 0) + +(i17 | 0) * 4294967296.0)) >>> 0 >>> 0 <= (HEAP32[i4 + 60 >> 2] | 0) >>> 0)) & (HEAP32[i4 + 28 >> 2] | 0) != 0 & 1;
    } else {
      i29 = 0;
    }
  } while (0);
  i5 = (i29 | 0) != 0 ? 0 : 2;
  return i5 | 0;
}
function _CustomPut(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
  i2 = HEAP32[i1 + 40 >> 2] | 0;
  i3 = i2;
  if ((HEAP32[i1 + 12 >> 2] | 0) < 1) {
    i4 = 0;
    return i4 | 0;
  }
  if ((HEAP32[i1 + 16 >> 2] | 0) < 1) {
    i4 = 0;
    return i4 | 0;
  }
  i5 = FUNCTION_TABLE_iii[HEAP32[i2 + 332 >> 2] & 511](i1, i3) | 0;
  i6 = HEAP32[i2 + 336 >> 2] | 0;
  if ((i6 | 0) != 0) {
    FUNCTION_TABLE_iii[i6 & 511](i1, i3) | 0;
  }
  i3 = i2 + 16 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + i5 | 0;
  i4 = 1;
  return i4 | 0;
}
function _png_set_text_2(i1, i2, i3) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
  i4 = STACKTOP;
  if ((i1 | 0) == 0 | (i2 | 0) == 0) {
    i5 = 0;
    STACKTOP = i4;
    return i5 | 0;
  }
  i6 = i2 + 48 | 0;
  i7 = HEAP32[i6 >> 2] | 0;
  i8 = i2 + 52 | 0;
  i9 = HEAP32[i8 >> 2] | 0;
  i10 = i2 + 56 | 0;
  L4171 : do {
    if ((i7 + 1 | 0) > (i9 | 0)) {
      i11 = HEAP32[i10 >> 2] | 0;
      if ((i11 | 0) == 0) {
        HEAP32[i8 >> 2] = 9;
        HEAP32[i6 >> 2] = 0;
        i12 = i1;
        i13 = i1 + 88 | 0;
        i14 = HEAP32[i13 >> 2] | 0;
        HEAP32[i13 >> 2] = i14 | 1048576;
        i15 = i1 + 548 | 0;
        i16 = HEAP32[i15 >> 2] | 0;
        if ((i16 | 0) == 0) {
          i17 = _malloc(252) | 0;
        } else {
          i17 = FUNCTION_TABLE_iii[i16 & 511](i12, 252) | 0;
        }
        if ((i17 | 0) != 0) {
          HEAP32[i13 >> 2] = i14;
          HEAP32[i10 >> 2] = i17;
          i16 = i2 + 188 | 0;
          HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | 16384;
          i18 = i10;
          i19 = i12;
          i20 = i13;
          i21 = i15;
          break;
        }
        if ((HEAP32[i13 >> 2] & 1048576 | 0) == 0) {
          _png_error(i1, 5269956);
        }
        HEAP32[i13 >> 2] = i14;
        HEAP32[i10 >> 2] = 0;
        i5 = 1;
        STACKTOP = i4;
        return i5 | 0;
      }
      i14 = i7 + 9 | 0;
      HEAP32[i8 >> 2] = i14;
      i13 = i14 * 28 & -1;
      i14 = i1;
      i15 = i1 + 88 | 0;
      i12 = HEAP32[i15 >> 2] | 0;
      HEAP32[i15 >> 2] = i12 | 1048576;
      do {
        if ((i13 | 0) != 0) {
          i16 = i1 + 548 | 0;
          i22 = HEAP32[i16 >> 2] | 0;
          if ((i22 | 0) == 0) {
            i23 = _malloc(i13) | 0;
          } else {
            i23 = FUNCTION_TABLE_iii[i22 & 511](i14, i13) | 0;
          }
          if ((i23 | 0) == 0) {
            if ((HEAP32[i15 >> 2] & 1048576 | 0) != 0) {
              break;
            }
            _png_error(i1, 5269956);
          }
          HEAP32[i15 >> 2] = i12;
          HEAP32[i10 >> 2] = i23;
          i22 = i11;
          _memcpy(i23, i22, i9 * 28 & -1);
          i24 = HEAP32[i1 + 552 >> 2] | 0;
          if ((i24 | 0) == 0) {
            _free(i22);
            i18 = i10;
            i19 = i14;
            i20 = i15;
            i21 = i16;
            break L4171;
          } else {
            FUNCTION_TABLE_vii[i24 & 511](i14, i22);
            i18 = i10;
            i19 = i14;
            i20 = i15;
            i21 = i16;
            break L4171;
          }
        }
      } while (0);
      HEAP32[i15 >> 2] = i12;
      HEAP32[i10 >> 2] = 0;
      i13 = i11;
      i16 = HEAP32[i1 + 552 >> 2] | 0;
      if ((i16 | 0) == 0) {
        _free(i13);
        i5 = 1;
        STACKTOP = i4;
        return i5 | 0;
      } else {
        FUNCTION_TABLE_vii[i16 & 511](i14, i13);
        i5 = 1;
        STACKTOP = i4;
        return i5 | 0;
      }
    } else {
      i18 = i10;
      i19 = i1;
      i20 = i1 + 88 | 0;
      i21 = i1 + 548 | 0;
    }
  } while (0);
  i10 = HEAP32[i6 >> 2] | 0;
  i9 = HEAP32[i18 >> 2] | 0;
  i18 = i9 + (i10 * 28 & -1) | 0;
  i23 = i3 + 4 | 0;
  i8 = HEAP32[i23 >> 2] | 0;
  if ((i8 | 0) == 0) {
    i5 = 0;
    STACKTOP = i4;
    return i5 | 0;
  }
  i7 = i3 | 0;
  i2 = HEAP32[i7 >> 2] | 0;
  if ((i2 + 1 | 0) >>> 0 > 3) {
    i17 = HEAP32[i1 + 48 >> 2] | 0;
    if ((i17 | 0) == 0) {
      i13 = HEAP32[_stderr >> 2] | 0;
      _fprintf(i13 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5269132, tempInt) | 0) | 0;
      i13 = HEAP32[_stderr >> 2] | 0;
      _fputc(10, i13 | 0) | 0;
      i5 = 0;
      STACKTOP = i4;
      return i5 | 0;
    } else {
      FUNCTION_TABLE_vii[i17 & 511](i1, 5269132);
      i5 = 0;
      STACKTOP = i4;
      return i5 | 0;
    }
  }
  i17 = _strlen(i8) | 0;
  do {
    if ((i2 | 0) < 1) {
      i25 = 0;
      i26 = 0;
    } else {
      i8 = HEAP32[i3 + 20 >> 2] | 0;
      if ((i8 | 0) == 0) {
        i27 = 0;
      } else {
        i27 = _strlen(i8) | 0;
      }
      i8 = HEAP32[i3 + 24 >> 2] | 0;
      if ((i8 | 0) == 0) {
        i25 = 0;
        i26 = i27;
        break;
      }
      i25 = _strlen(i8) | 0;
      i26 = i27;
    }
  } while (0);
  i27 = i3 + 8 | 0;
  i8 = HEAP32[i27 >> 2] | 0;
  do {
    if ((i8 | 0) == 0) {
      i28 = 3026;
    } else {
      if (HEAP8[i8] << 24 >> 24 == 0) {
        i28 = 3026;
        break;
      }
      i13 = _strlen(i8) | 0;
      HEAP32[i18 >> 2] = i2;
      i29 = i13;
      break;
    }
  } while (0);
  do {
    if ((i28 | 0) == 3026) {
      i8 = i18 | 0;
      if ((i2 | 0) > 0) {
        HEAP32[i8 >> 2] = 1;
        i29 = 0;
        break;
      } else {
        HEAP32[i8 >> 2] = -1;
        i29 = 0;
        break;
      }
    }
  } while (0);
  i2 = (((i17 + 4 | 0) + i26 | 0) + i25 | 0) + i29 | 0;
  i28 = HEAP32[i20 >> 2] | 0;
  HEAP32[i20 >> 2] = i28 | 1048576;
  do {
    if ((i2 | 0) != 0) {
      i8 = HEAP32[i21 >> 2] | 0;
      if ((i8 | 0) == 0) {
        i30 = _malloc(i2) | 0;
      } else {
        i30 = FUNCTION_TABLE_iii[i8 & 511](i19, i2) | 0;
      }
      if ((i30 | 0) == 0) {
        if ((HEAP32[i20 >> 2] & 1048576 | 0) != 0) {
          break;
        }
        _png_error(i1, 5269956);
      }
      HEAP32[i20 >> 2] = i28;
      i8 = i9 + (i10 * 28 & -1) + 4 | 0;
      HEAP32[i8 >> 2] = i30;
      _memcpy(i30, HEAP32[i23 >> 2] | 0, i17);
      HEAP8[(HEAP32[i8 >> 2] | 0) + i17 | 0] = 0;
      if ((HEAP32[i7 >> 2] | 0) > 0) {
        i13 = (HEAP32[i8 >> 2] | 0) + (i17 + 1 | 0) | 0;
        i16 = i9 + (i10 * 28 & -1) + 20 | 0;
        HEAP32[i16 >> 2] = i13;
        _memcpy(i13, HEAP32[i3 + 20 >> 2] | 0, i26);
        HEAP8[(HEAP32[i16 >> 2] | 0) + i26 | 0] = 0;
        i13 = (HEAP32[i16 >> 2] | 0) + (i26 + 1 | 0) | 0;
        i16 = i9 + (i10 * 28 & -1) + 24 | 0;
        HEAP32[i16 >> 2] = i13;
        _memcpy(i13, HEAP32[i3 + 24 >> 2] | 0, i25);
        HEAP8[(HEAP32[i16 >> 2] | 0) + i25 | 0] = 0;
        i13 = (HEAP32[i16 >> 2] | 0) + (i25 + 1 | 0) | 0;
        HEAP32[i9 + (i10 * 28 & -1) + 8 >> 2] = i13;
        i31 = i13;
      } else {
        HEAP32[i9 + (i10 * 28 & -1) + 20 >> 2] = 0;
        HEAP32[i9 + (i10 * 28 & -1) + 24 >> 2] = 0;
        i13 = (HEAP32[i8 >> 2] | 0) + (i17 + 1 | 0) | 0;
        HEAP32[i9 + (i10 * 28 & -1) + 8 >> 2] = i13;
        i31 = i13;
      }
      if ((i29 | 0) == 0) {
        i32 = i31;
      } else {
        _memcpy(i31, HEAP32[i27 >> 2] | 0, i29);
        i32 = HEAP32[i9 + (i10 * 28 & -1) + 8 >> 2] | 0;
      }
      HEAP8[i32 + i29 | 0] = 0;
      i13 = i9 + (i10 * 28 & -1) + 12 | 0;
      if ((HEAP32[i18 >> 2] | 0) > 0) {
        HEAP32[i13 >> 2] = 0;
        HEAP32[i9 + (i10 * 28 & -1) + 16 >> 2] = i29;
      } else {
        HEAP32[i13 >> 2] = i29;
        HEAP32[i9 + (i10 * 28 & -1) + 16 >> 2] = 0;
      }
      HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1 | 0;
      i5 = 0;
      STACKTOP = i4;
      return i5 | 0;
    }
  } while (0);
  HEAP32[i20 >> 2] = i28;
  HEAP32[i9 + (i10 * 28 & -1) + 4 >> 2] = 0;
  i5 = 1;
  STACKTOP = i4;
  return i5 | 0;
}
function _png_set_unknown_chunks(i1, i2, i3) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
  i4 = STACKTOP;
  if ((i1 | 0) == 0 | (i2 | 0) == 0) {
    STACKTOP = i4;
    return;
  }
  i5 = i2 + 196 | 0;
  i6 = ((HEAP32[i5 >> 2] | 0) * 20 & -1) + 20 | 0;
  i7 = i1;
  i8 = i1 + 88 | 0;
  i9 = HEAP32[i8 >> 2] | 0;
  HEAP32[i8 >> 2] = i9 | 1048576;
  do {
    if ((i6 | 0) != 0) {
      i10 = i1 + 548 | 0;
      i11 = HEAP32[i10 >> 2] | 0;
      if ((i11 | 0) == 0) {
        i12 = _malloc(i6) | 0;
      } else {
        i12 = FUNCTION_TABLE_iii[i11 & 511](i7, i6) | 0;
      }
      if ((i12 | 0) == 0) {
        if ((HEAP32[i8 >> 2] & 1048576 | 0) != 0) {
          break;
        }
        _png_error(i1, 5269956);
      }
      HEAP32[i8 >> 2] = i9;
      i11 = i12;
      i13 = i2 + 192 | 0;
      _memcpy(i12, HEAP32[i13 >> 2] | 0, (HEAP32[i5 >> 2] | 0) * 20 & -1);
      i14 = HEAP32[i13 >> 2] | 0;
      i15 = i14 | 0;
      do {
        if ((i14 | 0) != 0) {
          i16 = HEAP32[i1 + 552 >> 2] | 0;
          if ((i16 | 0) == 0) {
            _free(i15);
            break;
          } else {
            FUNCTION_TABLE_vii[i16 & 511](i7, i15);
            break;
          }
        }
      } while (0);
      HEAP32[i13 >> 2] = 0;
      i15 = i1 + 48 | 0;
      i14 = HEAP32[i5 >> 2] | 0;
      i16 = i11 + (i14 * 20 & -1) | 0;
      i17 = i3 | 0;
      HEAP8[i16] = HEAP8[i17] | 0;
      HEAP8[i16 + 1 | 0] = HEAP8[i17 + 1 | 0] | 0;
      HEAP8[i16 + 2 | 0] = HEAP8[i17 + 2 | 0] | 0;
      HEAP8[i16 + 3 | 0] = HEAP8[i17 + 3 | 0] | 0;
      HEAP8[i16 + 4 | 0] = HEAP8[i17 + 4 | 0] | 0;
      HEAP8[i11 + (i14 * 20 & -1) + 4 | 0] = 0;
      i17 = i3 + 12 | 0;
      i16 = i11 + (i14 * 20 & -1) + 12 | 0;
      HEAP32[i16 >> 2] = HEAP32[i17 >> 2] | 0;
      HEAP8[i11 + (i14 * 20 & -1) + 16 | 0] = HEAP32[i1 + 84 >> 2] & 255;
      i18 = HEAP32[i17 >> 2] | 0;
      do {
        if ((i18 | 0) == 0) {
          HEAP32[i11 + (i14 * 20 & -1) + 8 >> 2] = 0;
        } else {
          i19 = HEAP32[i8 >> 2] | 0;
          HEAP32[i8 >> 2] = i19 | 1048576;
          i20 = HEAP32[i10 >> 2] | 0;
          if ((i20 | 0) == 0) {
            i21 = _malloc(i18) | 0;
          } else {
            i21 = FUNCTION_TABLE_iii[i20 & 511](i7, i18) | 0;
          }
          if ((i21 | 0) != 0) {
            HEAP32[i8 >> 2] = i19;
            HEAP32[i11 + (i14 * 20 & -1) + 8 >> 2] = i21;
            _memcpy(i21, HEAP32[i3 + 8 >> 2] | 0, HEAP32[i17 >> 2] | 0);
            break;
          }
          if ((HEAP32[i8 >> 2] & 1048576 | 0) == 0) {
            _png_error(i1, 5269956);
          }
          HEAP32[i8 >> 2] = i19;
          HEAP32[i11 + (i14 * 20 & -1) + 8 >> 2] = 0;
          i19 = HEAP32[i15 >> 2] | 0;
          if ((i19 | 0) == 0) {
            i20 = HEAP32[_stderr >> 2] | 0;
            _fprintf(i20 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5268600, tempInt) | 0) | 0;
            i20 = HEAP32[_stderr >> 2] | 0;
            _fputc(10, i20 | 0) | 0;
          } else {
            FUNCTION_TABLE_vii[i19 & 511](i1, 5268600);
          }
          HEAP32[i16 >> 2] = 0;
        }
      } while (0);
      HEAP32[i13 >> 2] = i11;
      HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1 | 0;
      i16 = i2 + 188 | 0;
      HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | 512;
      STACKTOP = i4;
      return;
    }
  } while (0);
  HEAP32[i8 >> 2] = i9;
  i9 = HEAP32[i1 + 48 >> 2] | 0;
  if ((i9 | 0) == 0) {
    i8 = HEAP32[_stderr >> 2] | 0;
    _fprintf(i8 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5268600, tempInt) | 0) | 0;
    i8 = HEAP32[_stderr >> 2] | 0;
    _fputc(10, i8 | 0) | 0;
    STACKTOP = i4;
    return;
  } else {
    FUNCTION_TABLE_vii[i9 & 511](i1, 5268600);
    STACKTOP = i4;
    return;
  }
}
function _CustomSetup(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0;
  i2 = HEAP32[i1 + 40 >> 2] | 0;
  i3 = i2;
  i4 = HEAP32[HEAP32[i3 >> 2] >> 2] | 0;
  i5 = i4 >>> 0 < 11;
  if ((i4 | 0) == 12 | (i4 | 0) == 5 | (i4 | 0) == 4 | (i4 | 0) == 3 | (i4 | 0) == 1) {
    i6 = 1;
  } else {
    i6 = (i4 - 7 | 0) >>> 0 < 4;
  }
  i7 = i2 + 328 | 0;
  i8 = i7;
  i9 = i2 + 332 | 0;
  i10 = i2 + 336 | 0;
  i11 = i2 + 340 | 0;
  HEAP32[i7 >> 2] = 0;
  HEAP32[i7 + 4 >> 2] = 0;
  HEAP32[i7 + 8 >> 2] = 0;
  HEAP32[i7 + 12 >> 2] = 0;
  if ((_WebPIoInitFromOptions(HEAP32[i2 + 20 >> 2] | 0, i1, i6 ? 11 : 12) | 0) == 0) {
    i12 = 0;
    return i12 | 0;
  }
  do {
    if ((HEAP32[i1 + 92 >> 2] | 0) == 0) {
      do {
        if (i5) {
          HEAP32[i9 >> 2] = 316;
          if ((HEAP32[i1 + 56 >> 2] | 0) == 0) {
            break;
          }
          i7 = i1 + 12 | 0;
          i13 = HEAP32[i7 >> 2] | 0;
          i14 = i13 + 1 >> 1;
          i15 = _malloc((i14 << 1) + i13 | 0) | 0;
          HEAP32[i8 >> 2] = i15;
          if ((i15 | 0) == 0) {
            i12 = 0;
            return i12 | 0;
          } else {
            HEAP32[i2 + 4 >> 2] = i15;
            i13 = HEAP32[i7 >> 2] | 0;
            HEAP32[i2 + 8 >> 2] = i15 + i13 | 0;
            HEAP32[i2 + 12 >> 2] = i15 + (i13 + i14 | 0) | 0;
            HEAP32[i9 >> 2] = 180;
            HEAP32[1319113] = 70;
            HEAP32[1319114] = 384;
            HEAP32[1319115] = 136;
            HEAP32[1319116] = 314;
            HEAP32[1319117] = 6;
            HEAP32[1319118] = 24;
            HEAP32[1319119] = 18;
            break;
          }
        } else {
          HEAP32[i9 >> 2] = 266;
        }
      } while (0);
      if (i6) {
        if ((i4 - 7 | 0) >>> 0 < 4) {
          HEAP32[1319120] = 384;
          HEAP32[1319121] = 314;
          HEAP32[1319122] = 6;
          HEAP32[1319123] = 24;
        }
        if ((i4 | 0) == 10 | (i4 | 0) == 5) {
          i16 = 92;
        } else {
          i16 = i5 ? 352 : 184;
        }
        HEAP32[i10 >> 2] = i16;
      }
      if (i5) {
        break;
      } else {
        i12 = 1;
      }
      return i12 | 0;
    } else {
      i14 = HEAP32[i3 >> 2] | 0;
      i13 = HEAP32[i14 >> 2] | 0;
      do {
        if (i5) {
          if ((i13 | 0) == 12 | (i13 | 0) == 5 | (i13 | 0) == 4 | (i13 | 0) == 3 | (i13 | 0) == 1) {
            i17 = 1;
          } else {
            i17 = (i13 - 7 | 0) >>> 0 < 4;
          }
          i15 = HEAP32[i1 + 96 >> 2] | 0;
          i7 = HEAP32[i1 + 100 >> 2] | 0;
          i18 = i1 + 12 | 0;
          i19 = (HEAP32[i18 >> 2] | 0) + 1 >> 1;
          i20 = i1 + 16 | 0;
          i21 = (HEAP32[i20 >> 2] | 0) + 1 >> 1;
          i22 = i15 << 1;
          i23 = i15 * 6 & -1;
          i24 = i15 * 3 & -1;
          if (i17) {
            i25 = i24 + i15 | 0;
            i26 = i23 + i22 | 0;
          } else {
            i25 = i24;
            i26 = i23;
          }
          i27 = (i26 << 2) + i25 | 0;
          i28 = _malloc(i27) | 0;
          if ((i28 | 0) == 0) {
            HEAP32[i8 >> 2] = 0;
            i12 = 0;
            return i12 | 0;
          }
          if ((HEAP32[i28 - 4 >> 2] & 3 | 0) != 0) {
            _memset(i28 | 0, 0, i27 | 0);
          }
          HEAP32[i8 >> 2] = i28;
          i27 = i28;
          i28 = i27 + (i26 << 2) | 0;
          i29 = HEAP32[i18 >> 2] | 0;
          i30 = HEAP32[i20 >> 2] | 0;
          i31 = (i29 | 0) < (i15 | 0);
          HEAP32[i2 + 24 >> 2] = i31 & 1;
          HEAP32[i2 + 68 >> 2] = i29;
          HEAP32[i2 + 72 >> 2] = i30;
          HEAP32[i2 + 76 >> 2] = i15;
          HEAP32[i2 + 80 >> 2] = i7;
          HEAP32[i2 + 84 >> 2] = i28;
          HEAP32[i2 + 88 >> 2] = 0;
          HEAP32[i2 + 28 >> 2] = 1;
          i32 = i15 - 1 | 0;
          HEAP32[i2 + 60 >> 2] = i31 ? i32 : i29 - i15 | 0;
          HEAP32[i2 + 64 >> 2] = i31 ? i29 - 1 | 0 : i15;
          HEAP32[i2 + 48 >> 2] = i30;
          HEAP32[i2 + 52 >> 2] = i30;
          HEAP32[i2 + 56 >> 2] = i7;
          i33 = 1073741824 / (i15 | 0) & -1;
          HEAP32[i2 + 36 >> 2] = i33;
          i34 = 1073741824 / (i7 | 0) & -1;
          HEAP32[i2 + 32 >> 2] = i34;
          i35 = i7;
          i36 = i35 << 30 | 0 >>> 2;
          i37 = ((i7 | 0) < 0 ? -1 : 0) << 30 | i35 >>> 2;
          i35 = Math_imul(i31 ? i15 : i29, i30);
          i30 = i35;
          i29 = (i35 | 0) < 0 ? -1 : 0;
          i35 = ~~(tempBigIntR = (+(i36 >>> 0) + +(i37 | 0) * 4294967296.0) / (+(i30 >>> 0) + +(i29 | 0) * 4294967296.0), +tempBigIntR >= 0.0 ? Math_floor(tempBigIntR) : Math_ceil(tempBigIntR)) >>> 0;
          i31 = Math_min(Math_floor((tempBigIntR = (+(i36 >>> 0) + +(i37 | 0) * 4294967296.0) / (+(i30 >>> 0) + +(i29 | 0) * 4294967296.0), +tempBigIntR >= 0.0 ? Math_floor(tempBigIntR) : Math_ceil(tempBigIntR)) / 4294967296.0), 4294967295.0) >>> 0;
          i29 = i2 + 40 | 0;
          HEAP32[i29 >> 2] = i35;
          HEAP32[i29 + 4 >> 2] = i31;
          HEAP32[i2 + 92 >> 2] = i27;
          HEAP32[i2 + 96 >> 2] = i27 + (i15 << 2) | 0;
          i31 = HEAP32[i18 >> 2] | 0;
          i29 = HEAP32[i20 >> 2] | 0;
          i35 = i7 << 1;
          i30 = (i19 | 0) < (i15 | 0);
          i38 = i30 & 1;
          HEAP32[i2 + 100 >> 2] = i38;
          HEAP32[i2 + 144 >> 2] = i19;
          HEAP32[i2 + 148 >> 2] = i21;
          HEAP32[i2 + 152 >> 2] = i15;
          HEAP32[i2 + 156 >> 2] = i7;
          HEAP32[i2 + 160 >> 2] = i28 + i15 | 0;
          HEAP32[i2 + 164 >> 2] = 0;
          HEAP32[i2 + 104 >> 2] = 1;
          i39 = i22 - 1 | 0;
          HEAP32[i2 + 136 >> 2] = i30 ? i39 : i31 - i22 | 0;
          HEAP32[i2 + 140 >> 2] = i30 ? i31 - 1 | 0 : i22;
          HEAP32[i2 + 124 >> 2] = i29;
          HEAP32[i2 + 128 >> 2] = i29;
          HEAP32[i2 + 132 >> 2] = i35;
          i29 = 1073741824 / (i22 | 0) & -1;
          HEAP32[i2 + 112 >> 2] = i29;
          i40 = 1073741824 / (i35 | 0) & -1;
          HEAP32[i2 + 108 >> 2] = i40;
          i41 = Math_imul(i30 ? i22 : i31, i21);
          i31 = i41;
          i42 = (i41 | 0) < 0 ? -1 : 0;
          i41 = ~~(tempBigIntR = (+(i36 >>> 0) + +(i37 | 0) * 4294967296.0) / (+(i31 >>> 0) + +(i42 | 0) * 4294967296.0), +tempBigIntR >= 0.0 ? Math_floor(tempBigIntR) : Math_ceil(tempBigIntR)) >>> 0;
          i43 = Math_min(Math_floor((tempBigIntR = (+(i36 >>> 0) + +(i37 | 0) * 4294967296.0) / (+(i31 >>> 0) + +(i42 | 0) * 4294967296.0), +tempBigIntR >= 0.0 ? Math_floor(tempBigIntR) : Math_ceil(tempBigIntR)) / 4294967296.0), 4294967295.0) >>> 0;
          i42 = i2 + 116 | 0;
          HEAP32[i42 >> 2] = i41;
          HEAP32[i42 + 4 >> 2] = i43;
          HEAP32[i2 + 168 >> 2] = i27 + (i22 << 2) | 0;
          HEAP32[i2 + 172 >> 2] = i27 + (i22 + i15 << 2) | 0;
          i43 = HEAP32[i18 >> 2] | 0;
          i42 = HEAP32[i20 >> 2] | 0;
          i41 = i15 << 2;
          HEAP32[i2 + 176 >> 2] = i38;
          HEAP32[i2 + 220 >> 2] = i19;
          HEAP32[i2 + 224 >> 2] = i21;
          HEAP32[i2 + 228 >> 2] = i15;
          HEAP32[i2 + 232 >> 2] = i7;
          HEAP32[i2 + 236 >> 2] = i28 + i22 | 0;
          HEAP32[i2 + 240 >> 2] = 0;
          HEAP32[i2 + 180 >> 2] = 1;
          HEAP32[i2 + 212 >> 2] = i30 ? i39 : i43 - i22 | 0;
          HEAP32[i2 + 216 >> 2] = i30 ? i43 - 1 | 0 : i22;
          HEAP32[i2 + 200 >> 2] = i42;
          HEAP32[i2 + 204 >> 2] = i42;
          HEAP32[i2 + 208 >> 2] = i35;
          HEAP32[i2 + 188 >> 2] = i29;
          HEAP32[i2 + 184 >> 2] = i40;
          i40 = Math_imul(i30 ? i22 : i43, i21);
          i21 = i40;
          i43 = (i40 | 0) < 0 ? -1 : 0;
          i40 = ~~(tempBigIntR = (+(i36 >>> 0) + +(i37 | 0) * 4294967296.0) / (+(i21 >>> 0) + +(i43 | 0) * 4294967296.0), +tempBigIntR >= 0.0 ? Math_floor(tempBigIntR) : Math_ceil(tempBigIntR)) >>> 0;
          i22 = Math_min(Math_floor((tempBigIntR = (+(i36 >>> 0) + +(i37 | 0) * 4294967296.0) / (+(i21 >>> 0) + +(i43 | 0) * 4294967296.0), +tempBigIntR >= 0.0 ? Math_floor(tempBigIntR) : Math_ceil(tempBigIntR)) / 4294967296.0), 4294967295.0) >>> 0;
          i43 = i2 + 192 | 0;
          HEAP32[i43 >> 2] = i40;
          HEAP32[i43 + 4 >> 2] = i22;
          HEAP32[i2 + 244 >> 2] = i27 + (i41 << 2) | 0;
          HEAP32[i2 + 248 >> 2] = i27 + (i41 + i15 << 2) | 0;
          HEAP32[i9 >> 2] = 192;
          if (!i17) {
            break;
          }
          i41 = HEAP32[i18 >> 2] | 0;
          i18 = HEAP32[i20 >> 2] | 0;
          i20 = (i41 | 0) < (i15 | 0);
          HEAP32[i2 + 252 >> 2] = i20 & 1;
          HEAP32[i2 + 296 >> 2] = i41;
          HEAP32[i2 + 300 >> 2] = i18;
          HEAP32[i2 + 304 >> 2] = i15;
          HEAP32[i2 + 308 >> 2] = i7;
          HEAP32[i2 + 312 >> 2] = i28 + i24 | 0;
          HEAP32[i2 + 316 >> 2] = 0;
          HEAP32[i2 + 256 >> 2] = 1;
          HEAP32[i2 + 288 >> 2] = i20 ? i32 : i41 - i15 | 0;
          HEAP32[i2 + 292 >> 2] = i20 ? i41 - 1 | 0 : i15;
          HEAP32[i2 + 276 >> 2] = i18;
          HEAP32[i2 + 280 >> 2] = i18;
          HEAP32[i2 + 284 >> 2] = i7;
          HEAP32[i2 + 264 >> 2] = i33;
          HEAP32[i2 + 260 >> 2] = i34;
          i34 = Math_imul(i20 ? i15 : i41, i18);
          i18 = i34;
          i41 = (i34 | 0) < 0 ? -1 : 0;
          i34 = ~~(tempBigIntR = (+(i36 >>> 0) + +(i37 | 0) * 4294967296.0) / (+(i18 >>> 0) + +(i41 | 0) * 4294967296.0), +tempBigIntR >= 0.0 ? Math_floor(tempBigIntR) : Math_ceil(tempBigIntR)) >>> 0;
          i20 = Math_min(Math_floor((tempBigIntR = (+(i36 >>> 0) + +(i37 | 0) * 4294967296.0) / (+(i18 >>> 0) + +(i41 | 0) * 4294967296.0), +tempBigIntR >= 0.0 ? Math_floor(tempBigIntR) : Math_ceil(tempBigIntR)) / 4294967296.0), 4294967295.0) >>> 0;
          i41 = i2 + 268 | 0;
          HEAP32[i41 >> 2] = i34;
          HEAP32[i41 + 4 >> 2] = i20;
          HEAP32[i2 + 320 >> 2] = i27 + (i23 << 2) | 0;
          HEAP32[i2 + 324 >> 2] = i27 + (i23 + i15 << 2) | 0;
          HEAP32[i10 >> 2] = 370;
          i15 = HEAP32[HEAP32[i3 >> 2] >> 2] | 0;
          if ((i15 | 0) == 5 | (i15 | 0) == 10) {
            HEAP32[i11 >> 2] = 2;
            break;
          } else {
            HEAP32[i11 >> 2] = 298;
            break;
          }
        } else {
          if ((i13 | 0) == 12 | (i13 | 0) == 5 | (i13 | 0) == 4 | (i13 | 0) == 3 | (i13 | 0) == 1) {
            i44 = 1;
          } else {
            i44 = (i13 - 7 | 0) >>> 0 < 4;
          }
          i15 = HEAP32[i1 + 96 >> 2] | 0;
          i23 = HEAP32[i1 + 100 >> 2] | 0;
          i27 = i15 + 1 >> 1;
          i20 = i23 + 1 >> 1;
          i41 = i1 + 12 | 0;
          i34 = (HEAP32[i41 >> 2] | 0) + 1 >> 1;
          i18 = i1 + 16 | 0;
          i37 = (HEAP32[i18 >> 2] | 0) + 1 >> 1;
          i36 = i15 << 1;
          i33 = (i27 << 2) + i36 | 0;
          i7 = i33 + (i44 ? i36 : 0) << 2;
          i32 = _malloc(i7) | 0;
          if ((i32 | 0) == 0) {
            HEAP32[i8 >> 2] = 0;
            i12 = 0;
            return i12 | 0;
          }
          if ((HEAP32[i32 - 4 >> 2] & 3 | 0) != 0) {
            _memset(i32 | 0, 0, i7 | 0);
          }
          HEAP32[i8 >> 2] = i32;
          i7 = i32;
          i32 = HEAP32[i41 >> 2] | 0;
          i24 = HEAP32[i18 >> 2] | 0;
          i28 = HEAP32[i14 + 16 >> 2] | 0;
          i22 = HEAP32[i14 + 32 >> 2] | 0;
          i43 = (i32 | 0) < (i15 | 0);
          HEAP32[i2 + 24 >> 2] = i43 & 1;
          HEAP32[i2 + 68 >> 2] = i32;
          HEAP32[i2 + 72 >> 2] = i24;
          HEAP32[i2 + 76 >> 2] = i15;
          HEAP32[i2 + 80 >> 2] = i23;
          HEAP32[i2 + 84 >> 2] = i28;
          HEAP32[i2 + 88 >> 2] = i22;
          HEAP32[i2 + 28 >> 2] = 1;
          i22 = i15 - 1 | 0;
          HEAP32[i2 + 60 >> 2] = i43 ? i22 : i32 - i15 | 0;
          HEAP32[i2 + 64 >> 2] = i43 ? i32 - 1 | 0 : i15;
          HEAP32[i2 + 48 >> 2] = i24;
          HEAP32[i2 + 52 >> 2] = i24;
          HEAP32[i2 + 56 >> 2] = i23;
          i28 = 1073741824 / (i15 | 0) & -1;
          HEAP32[i2 + 36 >> 2] = i28;
          i40 = 1073741824 / (i23 | 0) & -1;
          HEAP32[i2 + 32 >> 2] = i40;
          i21 = i23;
          i30 = i21 << 30 | 0 >>> 2;
          i29 = ((i23 | 0) < 0 ? -1 : 0) << 30 | i21 >>> 2;
          i21 = Math_imul(i43 ? i15 : i32, i24);
          i24 = i21;
          i32 = (i21 | 0) < 0 ? -1 : 0;
          i21 = ~~(tempBigIntR = (+(i30 >>> 0) + +(i29 | 0) * 4294967296.0) / (+(i24 >>> 0) + +(i32 | 0) * 4294967296.0), +tempBigIntR >= 0.0 ? Math_floor(tempBigIntR) : Math_ceil(tempBigIntR)) >>> 0;
          i43 = Math_min(Math_floor((tempBigIntR = (+(i30 >>> 0) + +(i29 | 0) * 4294967296.0) / (+(i24 >>> 0) + +(i32 | 0) * 4294967296.0), +tempBigIntR >= 0.0 ? Math_floor(tempBigIntR) : Math_ceil(tempBigIntR)) / 4294967296.0), 4294967295.0) >>> 0;
          i32 = i2 + 40 | 0;
          HEAP32[i32 >> 2] = i21;
          HEAP32[i32 + 4 >> 2] = i43;
          HEAP32[i2 + 92 >> 2] = i7;
          HEAP32[i2 + 96 >> 2] = i7 + (i15 << 2) | 0;
          i43 = HEAP32[i14 + 20 >> 2] | 0;
          i32 = HEAP32[i14 + 36 >> 2] | 0;
          i21 = (i34 | 0) < (i27 | 0);
          i24 = i21 & 1;
          HEAP32[i2 + 100 >> 2] = i24;
          HEAP32[i2 + 144 >> 2] = i34;
          HEAP32[i2 + 148 >> 2] = i37;
          HEAP32[i2 + 152 >> 2] = i27;
          HEAP32[i2 + 156 >> 2] = i20;
          HEAP32[i2 + 160 >> 2] = i43;
          HEAP32[i2 + 164 >> 2] = i32;
          HEAP32[i2 + 104 >> 2] = 1;
          i32 = i21 ? i27 - 1 | 0 : i34 - i27 | 0;
          HEAP32[i2 + 136 >> 2] = i32;
          i43 = i21 ? i34 - 1 | 0 : i27;
          HEAP32[i2 + 140 >> 2] = i43;
          HEAP32[i2 + 124 >> 2] = i37;
          HEAP32[i2 + 128 >> 2] = i37;
          HEAP32[i2 + 132 >> 2] = i20;
          i35 = 1073741824 / (i27 | 0) & -1;
          HEAP32[i2 + 112 >> 2] = i35;
          i42 = 1073741824 / (i20 | 0) & -1;
          HEAP32[i2 + 108 >> 2] = i42;
          i39 = i20;
          i19 = i39 << 30 | 0 >>> 2;
          i38 = ((i20 | 0) < 0 ? -1 : 0) << 30 | i39 >>> 2;
          i39 = Math_imul(i21 ? i27 : i34, i37);
          i21 = i39;
          i31 = (i39 | 0) < 0 ? -1 : 0;
          i39 = ~~(tempBigIntR = (+(i19 >>> 0) + +(i38 | 0) * 4294967296.0) / (+(i21 >>> 0) + +(i31 | 0) * 4294967296.0), +tempBigIntR >= 0.0 ? Math_floor(tempBigIntR) : Math_ceil(tempBigIntR)) >>> 0;
          i45 = Math_min(Math_floor((tempBigIntR = (+(i19 >>> 0) + +(i38 | 0) * 4294967296.0) / (+(i21 >>> 0) + +(i31 | 0) * 4294967296.0), +tempBigIntR >= 0.0 ? Math_floor(tempBigIntR) : Math_ceil(tempBigIntR)) / 4294967296.0), 4294967295.0) >>> 0;
          i31 = i2 + 116 | 0;
          HEAP32[i31 >> 2] = i39;
          HEAP32[i31 + 4 >> 2] = i45;
          HEAP32[i2 + 168 >> 2] = i7 + (i36 << 2) | 0;
          HEAP32[i2 + 172 >> 2] = i7 + (i27 + i36 << 2) | 0;
          i31 = HEAP32[i14 + 24 >> 2] | 0;
          i21 = HEAP32[i14 + 40 >> 2] | 0;
          i38 = (i27 << 1) + i36 | 0;
          HEAP32[i2 + 176 >> 2] = i24;
          HEAP32[i2 + 220 >> 2] = i34;
          HEAP32[i2 + 224 >> 2] = i37;
          HEAP32[i2 + 228 >> 2] = i27;
          HEAP32[i2 + 232 >> 2] = i20;
          HEAP32[i2 + 236 >> 2] = i31;
          HEAP32[i2 + 240 >> 2] = i21;
          HEAP32[i2 + 180 >> 2] = 1;
          HEAP32[i2 + 212 >> 2] = i32;
          HEAP32[i2 + 216 >> 2] = i43;
          HEAP32[i2 + 200 >> 2] = i37;
          HEAP32[i2 + 204 >> 2] = i37;
          HEAP32[i2 + 208 >> 2] = i20;
          HEAP32[i2 + 188 >> 2] = i35;
          HEAP32[i2 + 184 >> 2] = i42;
          i42 = i2 + 192 | 0;
          HEAP32[i42 >> 2] = i39;
          HEAP32[i42 + 4 >> 2] = i45;
          HEAP32[i2 + 244 >> 2] = i7 + (i38 << 2) | 0;
          HEAP32[i2 + 248 >> 2] = i7 + (i38 + i27 << 2) | 0;
          HEAP32[i9 >> 2] = 178;
          if (!i44) {
            break;
          }
          i27 = HEAP32[i41 >> 2] | 0;
          i41 = HEAP32[i18 >> 2] | 0;
          i18 = HEAP32[i14 + 28 >> 2] | 0;
          i38 = HEAP32[i14 + 44 >> 2] | 0;
          i45 = (i27 | 0) < (i15 | 0);
          HEAP32[i2 + 252 >> 2] = i45 & 1;
          HEAP32[i2 + 296 >> 2] = i27;
          HEAP32[i2 + 300 >> 2] = i41;
          HEAP32[i2 + 304 >> 2] = i15;
          HEAP32[i2 + 308 >> 2] = i23;
          HEAP32[i2 + 312 >> 2] = i18;
          HEAP32[i2 + 316 >> 2] = i38;
          HEAP32[i2 + 256 >> 2] = 1;
          HEAP32[i2 + 288 >> 2] = i45 ? i22 : i27 - i15 | 0;
          HEAP32[i2 + 292 >> 2] = i45 ? i27 - 1 | 0 : i15;
          HEAP32[i2 + 276 >> 2] = i41;
          HEAP32[i2 + 280 >> 2] = i41;
          HEAP32[i2 + 284 >> 2] = i23;
          HEAP32[i2 + 264 >> 2] = i28;
          HEAP32[i2 + 260 >> 2] = i40;
          i40 = Math_imul(i45 ? i15 : i27, i41);
          i41 = i40;
          i27 = (i40 | 0) < 0 ? -1 : 0;
          i40 = ~~(tempBigIntR = (+(i30 >>> 0) + +(i29 | 0) * 4294967296.0) / (+(i41 >>> 0) + +(i27 | 0) * 4294967296.0), +tempBigIntR >= 0.0 ? Math_floor(tempBigIntR) : Math_ceil(tempBigIntR)) >>> 0;
          i45 = Math_min(Math_floor((tempBigIntR = (+(i30 >>> 0) + +(i29 | 0) * 4294967296.0) / (+(i41 >>> 0) + +(i27 | 0) * 4294967296.0), +tempBigIntR >= 0.0 ? Math_floor(tempBigIntR) : Math_ceil(tempBigIntR)) / 4294967296.0), 4294967295.0) >>> 0;
          i27 = i2 + 268 | 0;
          HEAP32[i27 >> 2] = i40;
          HEAP32[i27 + 4 >> 2] = i45;
          HEAP32[i2 + 320 >> 2] = i7 + (i33 << 2) | 0;
          HEAP32[i2 + 324 >> 2] = i7 + (i33 + i15 << 2) | 0;
          HEAP32[i10 >> 2] = 186;
        }
      } while (0);
      if (i5) {
        break;
      } else {
        i12 = 1;
      }
      return i12 | 0;
    }
  } while (0);
  if (HEAP8[5252552] | 0) {
    i12 = 1;
    return i12 | 0;
  } else {
    i46 = 0;
  }
  while (1) {
    i5 = i46 - 128 | 0;
    HEAP16[5276572 + (i46 << 1) >> 1] = ((i5 * 89858 & -1) + 32768 | 0) >>> 16 & 65535;
    HEAP32[5278108 + (i46 << 2) >> 2] = (i5 * -22014 & -1) + 32768 | 0;
    HEAP32[5277084 + (i46 << 2) >> 2] = i5 * -45773 & -1;
    HEAP16[5279132 + (i46 << 1) >> 1] = ((i5 * 113618 & -1) + 32768 | 0) >>> 16 & 65535;
    i5 = i46 + 1 | 0;
    if ((i5 | 0) == 256) {
      i47 = -227;
      break;
    } else {
      i46 = i5;
    }
  }
  while (1) {
    i46 = (i47 * 76283 & -1) - 1187760 >> 16;
    if ((i46 | 0) < 0) {
      i48 = 0;
    } else {
      i48 = (i46 | 0) > 255 ? -1 : i46 & 255;
    }
    i5 = i47 + 227 | 0;
    HEAP8[i5 + 5280356 | 0] = i48;
    i10 = i46 + 8 >> 4;
    if ((i10 | 0) < 0) {
      i49 = 0;
    } else {
      i49 = (i10 | 0) > 15 ? 15 : i10 & 255;
    }
    HEAP8[i5 + 5279644 | 0] = i49;
    i5 = i47 + 1 | 0;
    if ((i5 | 0) == 482) {
      break;
    } else {
      i47 = i5;
    }
  }
  HEAP8[5252552] = 1;
  i12 = 1;
  return i12 | 0;
}
function _CustomTeardown(i1) {
  i1 = i1 | 0;
  var i2 = 0;
  i2 = (HEAP32[i1 + 40 >> 2] | 0) + 328 | 0;
  _free(HEAP32[i2 >> 2] | 0);
  HEAP32[i2 >> 2] = 0;
  return;
}
function _EmitAlphaRGBA4444(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
  i3 = HEAP32[i1 + 104 >> 2] | 0;
  if ((i3 | 0) == 0) {
    return 0;
  }
  i4 = HEAP32[i1 + 12 >> 2] | 0;
  i5 = HEAP32[i2 >> 2] | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = HEAP32[i1 + 8 >> 2] | 0;
  i7 = HEAP32[i1 + 16 >> 2] | 0;
  do {
    if ((HEAP32[i1 + 56 >> 2] | 0) == 0) {
      i8 = i6;
      i9 = i7;
      i10 = i3;
    } else {
      if ((i6 | 0) == 0) {
        i11 = 0;
        i12 = i7 - 1 | 0;
        i13 = i3;
      } else {
        i11 = i6 - 1 | 0;
        i12 = i7;
        i13 = i3 + (-(HEAP32[i1 >> 2] | 0) | 0) | 0;
      }
      i14 = HEAP32[i1 + 84 >> 2] | 0;
      i15 = (i6 + i14 | 0) + i7 | 0;
      if ((i15 | 0) != (HEAP32[i1 + 88 >> 2] | 0)) {
        i8 = i11;
        i9 = i12;
        i10 = i13;
        break;
      }
      i8 = i11;
      i9 = i15 - (i14 + i11 | 0) | 0;
      i10 = i13;
    }
  } while (0);
  i13 = HEAP32[i5 + 16 >> 2] | 0;
  i11 = i5 + 20 | 0;
  i5 = HEAP32[i11 >> 2] | 0;
  i12 = Math_imul(i5, i8);
  i8 = i13 + i12 | 0;
  if ((i9 | 0) <= 0) {
    return 0;
  }
  i7 = (i4 | 0) > 0;
  i6 = i1 | 0;
  i1 = i10;
  i10 = 15;
  i3 = 0;
  i14 = i13 + (i12 + 1 | 0) | 0;
  i12 = i5;
  while (1) {
    if (i7) {
      i5 = i10;
      i13 = 0;
      while (1) {
        i15 = (HEAPU8[i1 + i13 | 0] | 0) >>> 4;
        i16 = i14 + (i13 << 1) | 0;
        HEAP8[i16] = (HEAP8[i16] & 240 | i15) & 255;
        i17 = i15 & i5;
        i15 = i13 + 1 | 0;
        if ((i15 | 0) == (i4 | 0)) {
          break;
        } else {
          i5 = i17;
          i13 = i15;
        }
      }
      i18 = i17;
      i19 = HEAP32[i11 >> 2] | 0;
    } else {
      i18 = i10;
      i19 = i12;
    }
    i13 = i3 + 1 | 0;
    if ((i13 | 0) == (i9 | 0)) {
      break;
    } else {
      i1 = i1 + (HEAP32[i6 >> 2] | 0) | 0;
      i10 = i18;
      i3 = i13;
      i14 = i14 + i19 | 0;
      i12 = i19;
    }
  }
  if ((i18 | 0) == 15) {
    return 0;
  }
  if ((i2 - 7 | 0) >>> 0 < 4) {
    i20 = i8;
    i21 = i9;
  } else {
    return 0;
  }
  while (1) {
    i9 = i21 - 1 | 0;
    L4411 : do {
      if (i7) {
        i8 = 0;
        while (1) {
          i2 = i8 << 1;
          i18 = i20 + (i2 | 1) | 0;
          i12 = HEAP8[i18] | 0;
          i14 = i12 & 15;
          i3 = (i14 & 255) * 4369 & -1;
          i10 = i20 + i2 | 0;
          i2 = HEAP8[i10] | 0;
          i6 = Math_imul((i2 & -16 | (i2 & 255) >>> 4) & 255, i3) >>> 16 & 255;
          i1 = Math_imul((i2 & 15 | i2 << 4) & 255, i3) >>> 20;
          i2 = Math_imul((i12 & -16 | (i12 & 255) >>> 4) & 255, i3) >>> 16 & 255;
          HEAP8[i10] = i6 & -16 | i1 & 15;
          HEAP8[i18] = i2 & -16 | i14;
          i14 = i8 + 1 | 0;
          if ((i14 | 0) == (i4 | 0)) {
            break L4411;
          } else {
            i8 = i14;
          }
        }
      }
    } while (0);
    if ((i9 | 0) > 0) {
      i20 = i20 + i19 | 0;
      i21 = i9;
    } else {
      break;
    }
  }
  return 0;
}
function _EmitAlphaRGB(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
  i3 = HEAP32[i1 + 104 >> 2] | 0;
  if ((i3 | 0) == 0) {
    return 0;
  }
  i4 = HEAP32[i1 + 12 >> 2] | 0;
  i5 = HEAP32[i2 >> 2] | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = (i2 | 0) == 4 | (i2 | 0) == 9;
  i7 = HEAP32[i1 + 8 >> 2] | 0;
  i8 = HEAP32[i1 + 16 >> 2] | 0;
  do {
    if ((HEAP32[i1 + 56 >> 2] | 0) == 0) {
      i9 = i7;
      i10 = i8;
      i11 = i3;
    } else {
      if ((i7 | 0) == 0) {
        i12 = 0;
        i13 = i8 - 1 | 0;
        i14 = i3;
      } else {
        i12 = i7 - 1 | 0;
        i13 = i8;
        i14 = i3 + (-(HEAP32[i1 >> 2] | 0) | 0) | 0;
      }
      i15 = HEAP32[i1 + 84 >> 2] | 0;
      i16 = (i7 + i15 | 0) + i8 | 0;
      if ((i16 | 0) != (HEAP32[i1 + 88 >> 2] | 0)) {
        i9 = i12;
        i10 = i13;
        i11 = i14;
        break;
      }
      i9 = i12;
      i10 = i16 - (i15 + i12 | 0) | 0;
      i11 = i14;
    }
  } while (0);
  i14 = HEAP32[i5 + 16 >> 2] | 0;
  i12 = i5 + 20 | 0;
  i5 = HEAP32[i12 >> 2] | 0;
  i13 = Math_imul(i5, i9);
  i9 = i14 + i13 | 0;
  if ((i10 | 0) <= 0) {
    return 0;
  }
  i8 = i6 ? 0 : 3;
  i7 = (i4 | 0) > 0;
  i3 = i1 | 0;
  i1 = i11;
  i11 = 255;
  i15 = 0;
  i16 = i14 + (i13 + i8 | 0) | 0;
  i13 = i5;
  while (1) {
    if (i7) {
      i5 = i11;
      i14 = 0;
      while (1) {
        i17 = HEAP8[i1 + i14 | 0] | 0;
        HEAP8[i16 + (i14 << 2) | 0] = i17;
        i18 = i17 & 255 & i5;
        i17 = i14 + 1 | 0;
        if ((i17 | 0) == (i4 | 0)) {
          break;
        } else {
          i5 = i18;
          i14 = i17;
        }
      }
      i19 = i18;
      i20 = HEAP32[i12 >> 2] | 0;
    } else {
      i19 = i11;
      i20 = i13;
    }
    i14 = i15 + 1 | 0;
    if ((i14 | 0) == (i10 | 0)) {
      break;
    } else {
      i1 = i1 + (HEAP32[i3 >> 2] | 0) | 0;
      i11 = i19;
      i15 = i14;
      i16 = i16 + i20 | 0;
      i13 = i20;
    }
  }
  if ((i19 | 0) == 255) {
    return 0;
  }
  if ((i2 - 7 | 0) >>> 0 >= 4) {
    return 0;
  }
  i2 = i6 & 1;
  i6 = i9;
  i9 = i10;
  while (1) {
    i10 = i9 - 1 | 0;
    L4447 : do {
      if (i7) {
        i19 = 0;
        while (1) {
          i13 = i19 << 2;
          i16 = HEAP8[i6 + (i13 | i8) | 0] | 0;
          if (i16 << 24 >> 24 != -1) {
            i15 = (i16 & 255) * 32897 & -1;
            i16 = i13 | i2;
            i11 = i6 + i16 | 0;
            HEAP8[i11] = Math_imul(HEAPU8[i11] | 0, i15) >>> 23 & 255;
            i11 = i6 + ((i13 | 1) + i2 | 0) | 0;
            HEAP8[i11] = Math_imul(HEAPU8[i11] | 0, i15) >>> 23 & 255;
            i11 = i6 + (i16 | 2) | 0;
            HEAP8[i11] = Math_imul(HEAPU8[i11] | 0, i15) >>> 23 & 255;
          }
          i15 = i19 + 1 | 0;
          if ((i15 | 0) == (i4 | 0)) {
            break L4447;
          } else {
            i19 = i15;
          }
        }
      }
    } while (0);
    if ((i10 | 0) > 0) {
      i6 = i6 + i20 | 0;
      i9 = i10;
    } else {
      break;
    }
  }
  return 0;
}
function _EmitSampledRGB(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0;
  i3 = HEAP32[i2 >> 2] | 0;
  i2 = HEAP32[i3 + 16 >> 2] | 0;
  i4 = i3 + 20 | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  i6 = i2 + Math_imul(i5, HEAP32[i1 + 8 >> 2] | 0) | 0;
  i2 = HEAP32[i1 + 20 >> 2] | 0;
  i7 = HEAP32[i1 + 24 >> 2] | 0;
  i8 = HEAP32[i1 + 28 >> 2] | 0;
  i9 = HEAP32[5276520 + (HEAP32[i3 >> 2] << 2) >> 2] | 0;
  i3 = HEAP32[i1 + 12 >> 2] | 0;
  i10 = i1 + 16 | 0;
  i11 = (HEAP32[i10 >> 2] | 0) - 1 | 0;
  L4456 : do {
    if ((i11 | 0) > 0) {
      i12 = i1 + 32 | 0;
      i13 = i1 + 36 | 0;
      i14 = i8;
      i15 = i7;
      i16 = i2;
      i17 = i6;
      i18 = 0;
      i19 = HEAP32[i12 >> 2] | 0;
      i20 = i5;
      while (1) {
        FUNCTION_TABLE_viiiiiii[i9 & 511](i16, i16 + i19 | 0, i15, i14, i17, i17 + i20 | 0, i3);
        i21 = HEAP32[i12 >> 2] | 0;
        i22 = i16 + (i21 << 1) | 0;
        i23 = HEAP32[i13 >> 2] | 0;
        i24 = i15 + i23 | 0;
        i25 = i14 + i23 | 0;
        i23 = HEAP32[i4 >> 2] | 0;
        i26 = i17 + (i23 << 1) | 0;
        i27 = i18 + 2 | 0;
        if ((i27 | 0) < (i11 | 0)) {
          i14 = i25;
          i15 = i24;
          i16 = i22;
          i17 = i26;
          i18 = i27;
          i19 = i21;
          i20 = i23;
        } else {
          i28 = i25;
          i29 = i24;
          i30 = i22;
          i31 = i26;
          i32 = i27;
          break L4456;
        }
      }
    } else {
      i28 = i8;
      i29 = i7;
      i30 = i2;
      i31 = i6;
      i32 = 0;
    }
  } while (0);
  if ((i32 | 0) != (i11 | 0)) {
    i33 = HEAP32[i10 >> 2] | 0;
    return i33 | 0;
  }
  FUNCTION_TABLE_viiiiiii[i9 & 511](i30, i30, i29, i28, i31, i31, i3);
  i33 = HEAP32[i10 >> 2] | 0;
  return i33 | 0;
}
function _EmitFancyRGB(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0;
  i3 = HEAP32[i1 + 16 >> 2] | 0;
  i4 = HEAP32[i2 >> 2] | 0;
  i5 = HEAP32[i4 + 16 >> 2] | 0;
  i6 = HEAP32[i1 + 8 >> 2] | 0;
  i7 = i4 + 20 | 0;
  i8 = HEAP32[i7 >> 2] | 0;
  i9 = Math_imul(i8, i6);
  i10 = i5 + i9 | 0;
  i11 = HEAP32[5276452 + (HEAP32[i4 >> 2] << 2) >> 2] | 0;
  i4 = HEAP32[i1 + 20 >> 2] | 0;
  i12 = HEAP32[i1 + 24 >> 2] | 0;
  i13 = HEAP32[i1 + 28 >> 2] | 0;
  i14 = i2 + 8 | 0;
  i15 = i2 + 12 | 0;
  i16 = i6 + i3 | 0;
  i17 = HEAP32[i1 + 12 >> 2] | 0;
  i18 = (i17 + 1 | 0) / 2 & -1;
  if ((i6 | 0) == 0) {
    FUNCTION_TABLE_viiiiiiiii[i11 & 511](0, i4, i12, i13, i12, i13, 0, i10, i17);
    i19 = i3;
    i20 = 2;
  } else {
    FUNCTION_TABLE_viiiiiiiii[i11 & 511](HEAP32[i2 + 4 >> 2] | 0, i4, HEAP32[i14 >> 2] | 0, HEAP32[i15 >> 2] | 0, i12, i13, i5 + (i9 - i8 | 0) | 0, i10, i17);
    i19 = i3 + 1 | 0;
    i20 = i6 + 2 | 0;
  }
  L4470 : do {
    if ((i20 | 0) < (i16 | 0)) {
      i6 = i1 + 36 | 0;
      i3 = i1 + 32 | 0;
      i8 = i12;
      i9 = i13;
      i5 = i4;
      i21 = i10;
      i22 = i20;
      while (1) {
        i23 = HEAP32[i6 >> 2] | 0;
        i24 = i8 + i23 | 0;
        i25 = i9 + i23 | 0;
        i23 = HEAP32[i7 >> 2] | 0;
        i26 = i21 + (i23 << 1) | 0;
        i27 = HEAP32[i3 >> 2] | 0;
        i28 = i5 + (i27 << 1) | 0;
        FUNCTION_TABLE_viiiiiiiii[i11 & 511](i5 + i27 | 0, i28, i8, i9, i24, i25, i21 + i23 | 0, i26, i17);
        i23 = i22 + 2 | 0;
        if ((i23 | 0) < (i16 | 0)) {
          i8 = i24;
          i9 = i25;
          i5 = i28;
          i21 = i26;
          i22 = i23;
        } else {
          i29 = i24;
          i30 = i25;
          i31 = i28;
          i32 = i26;
          i33 = i3;
          break L4470;
        }
      }
    } else {
      i29 = i12;
      i30 = i13;
      i31 = i4;
      i32 = i10;
      i33 = i1 + 32 | 0;
    }
  } while (0);
  i10 = i31 + (HEAP32[i33 >> 2] | 0) | 0;
  if (((HEAP32[i1 + 84 >> 2] | 0) + i16 | 0) < (HEAP32[i1 + 88 >> 2] | 0)) {
    _memcpy(HEAP32[i2 + 4 >> 2] | 0, i10, i17);
    _memcpy(HEAP32[i14 >> 2] | 0, i29, i18);
    _memcpy(HEAP32[i15 >> 2] | 0, i30, i18);
    i34 = i19 - 1 | 0;
    return i34 | 0;
  }
  if ((i16 & 1 | 0) != 0) {
    i34 = i19;
    return i34 | 0;
  }
  FUNCTION_TABLE_viiiiiiiii[i11 & 511](i10, 0, i29, i30, i29, i30, i32 + (HEAP32[i7 >> 2] | 0) | 0, 0, i17);
  i34 = i19;
  return i34 | 0;
}
function _EmitYUV(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
  i3 = HEAP32[i2 >> 2] | 0;
  i2 = HEAP32[i3 + 16 >> 2] | 0;
  i4 = HEAP32[i1 + 8 >> 2] | 0;
  i5 = i3 + 32 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  i7 = Math_imul(i6, i4);
  i8 = HEAP32[i3 + 20 >> 2] | 0;
  i9 = i4 >> 1;
  i4 = i3 + 36 | 0;
  i10 = Math_imul(HEAP32[i4 >> 2] | 0, i9);
  i11 = HEAP32[i3 + 24 >> 2] | 0;
  i12 = i3 + 40 | 0;
  i3 = Math_imul(HEAP32[i12 >> 2] | 0, i9);
  i9 = HEAP32[i1 + 12 >> 2] | 0;
  i13 = i1 + 16 | 0;
  i14 = HEAP32[i13 >> 2] | 0;
  i15 = (i9 + 1 | 0) / 2 & -1;
  i16 = (i14 + 1 | 0) / 2 & -1;
  if ((i14 | 0) <= 0) {
    i17 = HEAP32[i13 >> 2] | 0;
    return i17 | 0;
  }
  i18 = i1 + 20 | 0;
  i19 = i1 + 32 | 0;
  i20 = 0;
  i21 = i6;
  while (1) {
    i6 = i2 + (Math_imul(i21, i20) + i7 | 0) | 0;
    i22 = HEAP32[i18 >> 2] | 0;
    _memcpy(i6, i22 + Math_imul(HEAP32[i19 >> 2] | 0, i20) | 0, i9);
    i22 = i20 + 1 | 0;
    if ((i22 | 0) == (i14 | 0)) {
      break;
    }
    i20 = i22;
    i21 = HEAP32[i5 >> 2] | 0;
  }
  i5 = i1 + 24 | 0;
  i21 = i1 + 36 | 0;
  i20 = i1 + 28 | 0;
  i1 = 0;
  while (1) {
    i14 = i8 + (Math_imul(HEAP32[i4 >> 2] | 0, i1) + i10 | 0) | 0;
    i9 = HEAP32[i5 >> 2] | 0;
    _memcpy(i14, i9 + Math_imul(HEAP32[i21 >> 2] | 0, i1) | 0, i15);
    i9 = i11 + (Math_imul(HEAP32[i12 >> 2] | 0, i1) + i3 | 0) | 0;
    i14 = HEAP32[i20 >> 2] | 0;
    _memcpy(i9, i14 + Math_imul(HEAP32[i21 >> 2] | 0, i1) | 0, i15);
    i14 = i1 + 1 | 0;
    if ((i14 | 0) < (i16 | 0)) {
      i1 = i14;
    } else {
      break;
    }
  }
  i17 = HEAP32[i13 >> 2] | 0;
  return i17 | 0;
}
function _EmitAlphaYUV(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
  i3 = HEAP32[i1 + 104 >> 2] | 0;
  i4 = HEAP32[i2 >> 2] | 0;
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  i5 = HEAP32[i1 + 16 >> 2] | 0;
  i6 = HEAP32[i4 + 28 >> 2] | 0;
  i7 = i4 + 44 | 0;
  i4 = i6 + Math_imul(HEAP32[i7 >> 2] | 0, HEAP32[i1 + 8 >> 2] | 0) | 0;
  if ((i3 | 0) == 0) {
    if ((i6 | 0) != 0 & (i5 | 0) > 0) {
      i8 = i4;
      i9 = 0;
    } else {
      return 0;
    }
    while (1) {
      _memset(i8 | 0, -1 | 0, i2 | 0);
      i6 = i9 + 1 | 0;
      if ((i6 | 0) == (i5 | 0)) {
        break;
      } else {
        i8 = i8 + (HEAP32[i7 >> 2] | 0) | 0;
        i9 = i6;
      }
    }
    return 0;
  }
  if ((i5 | 0) <= 0) {
    return 0;
  }
  i9 = i1 | 0;
  i1 = i3;
  i3 = i4;
  i4 = 0;
  while (1) {
    _memcpy(i3, i1, i2);
    i8 = i4 + 1 | 0;
    if ((i8 | 0) == (i5 | 0)) {
      break;
    } else {
      i1 = i1 + (HEAP32[i9 >> 2] | 0) | 0;
      i3 = i3 + (HEAP32[i7 >> 2] | 0) | 0;
      i4 = i8;
    }
  }
  return 0;
}
function _EmitRescaledYUV(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
  i3 = HEAP32[i1 + 16 >> 2] | 0;
  i4 = i3 + 1 >> 1;
  i5 = HEAP32[i1 + 32 >> 2] | 0;
  i6 = i2 + 24 | 0;
  L4511 : do {
    if ((i3 | 0) > 0) {
      i7 = i2 + 48 | 0;
      i8 = i2 + 28 | 0;
      i9 = i2 + 56 | 0;
      i10 = i3;
      i11 = 0;
      i12 = HEAP32[i1 + 20 >> 2] | 0;
      while (1) {
        i13 = i12;
        i14 = 0;
        i15 = HEAP32[i7 >> 2] | 0;
        while (1) {
          if ((i15 | 0) <= 0) {
            i16 = i14;
            break;
          }
          if ((HEAP32[i8 >> 2] | 0) > 0) {
            i17 = 0;
            while (1) {
              _WebPRescalerImportRow(i6, i13, i17);
              i18 = i17 + 1 | 0;
              if ((i18 | 0) < (HEAP32[i8 >> 2] | 0)) {
                i17 = i18;
              } else {
                break;
              }
            }
            i19 = HEAP32[i7 >> 2] | 0;
          } else {
            i19 = i15;
          }
          i17 = i14 + 1 | 0;
          i18 = i19 - (HEAP32[i9 >> 2] | 0) | 0;
          HEAP32[i7 >> 2] = i18;
          if ((i17 | 0) < (i10 | 0)) {
            i13 = i13 + i5 | 0;
            i14 = i17;
            i15 = i18;
          } else {
            i16 = i17;
            break;
          }
        }
        i15 = i12 + Math_imul(i16, i5) | 0;
        i14 = i10 - i16 | 0;
        i13 = (_WebPRescalerExport(i6) | 0) + i11 | 0;
        if ((i14 | 0) > 0) {
          i10 = i14;
          i11 = i13;
          i12 = i15;
        } else {
          i20 = i13;
          break L4511;
        }
      }
    } else {
      i20 = 0;
    }
  } while (0);
  i6 = i1 + 36 | 0;
  i16 = HEAP32[i6 >> 2] | 0;
  i5 = i2 + 100 | 0;
  if ((i4 | 0) <= 0) {
    return i20 | 0;
  }
  i19 = i2 + 124 | 0;
  i3 = i2 + 104 | 0;
  i12 = i2 + 132 | 0;
  i11 = i4;
  i10 = HEAP32[i1 + 24 >> 2] | 0;
  while (1) {
    i7 = i10;
    i9 = 0;
    i8 = HEAP32[i19 >> 2] | 0;
    while (1) {
      if ((i8 | 0) <= 0) {
        i21 = i9;
        break;
      }
      if ((HEAP32[i3 >> 2] | 0) > 0) {
        i13 = 0;
        while (1) {
          _WebPRescalerImportRow(i5, i7, i13);
          i15 = i13 + 1 | 0;
          if ((i15 | 0) < (HEAP32[i3 >> 2] | 0)) {
            i13 = i15;
          } else {
            break;
          }
        }
        i22 = HEAP32[i19 >> 2] | 0;
      } else {
        i22 = i8;
      }
      i13 = i9 + 1 | 0;
      i15 = i22 - (HEAP32[i12 >> 2] | 0) | 0;
      HEAP32[i19 >> 2] = i15;
      if ((i13 | 0) < (i11 | 0)) {
        i7 = i7 + i16 | 0;
        i9 = i13;
        i8 = i15;
      } else {
        i21 = i13;
        break;
      }
    }
    i8 = i10 + Math_imul(i21, i16) | 0;
    i9 = i11 - i21 | 0;
    _WebPRescalerExport(i5) | 0;
    if ((i9 | 0) > 0) {
      i11 = i9;
      i10 = i8;
    } else {
      break;
    }
  }
  i10 = HEAP32[i6 >> 2] | 0;
  i6 = i2 + 176 | 0;
  i11 = i2 + 200 | 0;
  i5 = i2 + 180 | 0;
  i21 = i2 + 208 | 0;
  i2 = i4;
  i4 = HEAP32[i1 + 28 >> 2] | 0;
  while (1) {
    i1 = i4;
    i16 = 0;
    i19 = HEAP32[i11 >> 2] | 0;
    while (1) {
      if ((i19 | 0) <= 0) {
        i23 = i16;
        break;
      }
      if ((HEAP32[i5 >> 2] | 0) > 0) {
        i12 = 0;
        while (1) {
          _WebPRescalerImportRow(i6, i1, i12);
          i22 = i12 + 1 | 0;
          if ((i22 | 0) < (HEAP32[i5 >> 2] | 0)) {
            i12 = i22;
          } else {
            break;
          }
        }
        i24 = HEAP32[i11 >> 2] | 0;
      } else {
        i24 = i19;
      }
      i12 = i16 + 1 | 0;
      i22 = i24 - (HEAP32[i21 >> 2] | 0) | 0;
      HEAP32[i11 >> 2] = i22;
      if ((i12 | 0) < (i2 | 0)) {
        i1 = i1 + i10 | 0;
        i16 = i12;
        i19 = i22;
      } else {
        i23 = i12;
        break;
      }
    }
    i19 = i4 + Math_imul(i23, i10) | 0;
    i16 = i2 - i23 | 0;
    _WebPRescalerExport(i6) | 0;
    if ((i16 | 0) > 0) {
      i2 = i16;
      i4 = i19;
    } else {
      break;
    }
  }
  return i20 | 0;
}
function _EmitRescaledAlphaYUV(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
  i3 = HEAP32[i1 + 104 >> 2] | 0;
  if ((i3 | 0) == 0) {
    return 0;
  }
  i4 = HEAP32[i1 >> 2] | 0;
  i5 = HEAP32[i1 + 16 >> 2] | 0;
  i1 = i2 + 252 | 0;
  if ((i5 | 0) <= 0) {
    return 0;
  }
  i6 = i2 + 276 | 0;
  i7 = i2 + 256 | 0;
  i8 = i2 + 284 | 0;
  i2 = i5;
  i5 = i3;
  while (1) {
    i3 = i5;
    i9 = 0;
    i10 = HEAP32[i6 >> 2] | 0;
    while (1) {
      if ((i10 | 0) <= 0) {
        i11 = i9;
        break;
      }
      if ((HEAP32[i7 >> 2] | 0) > 0) {
        i12 = 0;
        while (1) {
          _WebPRescalerImportRow(i1, i3, i12);
          i13 = i12 + 1 | 0;
          if ((i13 | 0) < (HEAP32[i7 >> 2] | 0)) {
            i12 = i13;
          } else {
            break;
          }
        }
        i14 = HEAP32[i6 >> 2] | 0;
      } else {
        i14 = i10;
      }
      i12 = i9 + 1 | 0;
      i13 = i14 - (HEAP32[i8 >> 2] | 0) | 0;
      HEAP32[i6 >> 2] = i13;
      if ((i12 | 0) < (i2 | 0)) {
        i3 = i3 + i4 | 0;
        i9 = i12;
        i10 = i13;
      } else {
        i11 = i12;
        break;
      }
    }
    i10 = i5 + Math_imul(i11, i4) | 0;
    i9 = i2 - i11 | 0;
    _WebPRescalerExport(i1) | 0;
    if ((i9 | 0) > 0) {
      i2 = i9;
      i5 = i10;
    } else {
      break;
    }
  }
  return 0;
}
function _ExportAlphaRGBA4444(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0;
  i3 = HEAP32[i1 >> 2] | 0;
  i4 = HEAP32[i3 + 16 >> 2] | 0;
  i5 = i3 + 20 | 0;
  i6 = Math_imul((HEAP32[i1 + 16 >> 2] | 0) + i2 | 0, HEAP32[i5 >> 2] | 0);
  i2 = i4 + i6 | 0;
  i7 = i1 + 304 | 0;
  i8 = HEAP32[i7 >> 2] | 0;
  i9 = (HEAP32[i3 >> 2] | 0) - 7 | 0;
  i3 = i1 + 276 | 0;
  i10 = HEAP32[i3 >> 2] | 0;
  if ((i10 | 0) >= 1) {
    i11 = 0;
    return i11 | 0;
  }
  i12 = i1 + 312 | 0;
  i13 = i1 + 320 | 0;
  i14 = i1 + 324 | 0;
  i15 = i1 + 256 | 0;
  i16 = i1 + 260 | 0;
  i17 = i1 + 268 | 0;
  i18 = i1 + 280 | 0;
  i19 = i1 + 316 | 0;
  i1 = (i8 | 0) > 0;
  i20 = 0;
  i21 = 15;
  i22 = i4 + (i6 + 1 | 0) | 0;
  i6 = i10;
  while (1) {
    if ((i6 | 0) < 1) {
      i10 = HEAP32[i12 >> 2] | 0;
      i4 = HEAP32[i13 >> 2] | 0;
      i23 = HEAP32[i14 >> 2] | 0;
      i24 = Math_imul(HEAP32[i15 >> 2] | 0, HEAP32[i7 >> 2] | 0);
      if ((i24 | 0) > 0) {
        i25 = Math_imul(HEAP32[i16 >> 2] | 0, -i6 | 0);
        i26 = i25;
        i27 = (i25 | 0) < 0 ? -1 : 0;
        i25 = 0;
        while (1) {
          i28 = HEAP32[i23 + (i25 << 2) >> 2] | 0;
          i29 = i28;
          i30 = (i28 | 0) < 0 ? -1 : 0;
          i28 = ~~((+(i29 >>> 0) + +(i30 | 0) * 4294967296.0) * (+(i26 >>> 0) + +(i27 | 0) * 4294967296.0)) >>> 0;
          i31 = Math_min(Math_floor((+(i29 >>> 0) + +(i30 | 0) * 4294967296.0) * (+(i26 >>> 0) + +(i27 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
          i30 = 536870912;
          i29 = 0;
          i32 = Math_min(Math_floor((+(i28 >>> 0) + +(i31 | 0) * 4294967296.0 + (+(i30 >>> 0) + +(i29 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
          i33 = ~~(+(i28 >>> 0) + +(i31 | 0) * 4294967296.0 + (+(i30 >>> 0) + +(i29 | 0) * 4294967296.0)) >>> 0 >>> 30 | i32 << 2;
          i32 = i4 + (i25 << 2) | 0;
          i29 = (HEAP32[i32 >> 2] | 0) - i33 | 0;
          i30 = i29;
          i31 = (i29 | 0) < 0 ? -1 : 0;
          i29 = HEAP32[i17 >> 2] | 0;
          i28 = HEAP32[i17 + 4 >> 2] | 0;
          i34 = ~~((+(i30 >>> 0) + +(i31 | 0) * 4294967296.0) * (+(i29 >>> 0) + +(i28 | 0) * 4294967296.0)) >>> 0;
          i35 = Math_min(Math_floor((+(i30 >>> 0) + +(i31 | 0) * 4294967296.0) * (+(i29 >>> 0) + +(i28 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
          i28 = 536870912;
          i29 = 0;
          i31 = Math_min(Math_floor((+(i34 >>> 0) + +(i35 | 0) * 4294967296.0 + (+(i28 >>> 0) + +(i29 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
          i30 = ~~(+(i34 >>> 0) + +(i35 | 0) * 4294967296.0 + (+(i28 >>> 0) + +(i29 | 0) * 4294967296.0)) >>> 0 >>> 30 | i31 << 2;
          if (i30 >>> 0 > 255) {
            i36 = (i30 >> 31 & -255) + 255 | 0;
          } else {
            i36 = i30;
          }
          HEAP8[i10 + i25 | 0] = i36 & 255;
          HEAP32[i32 >> 2] = i33;
          i33 = i25 + 1 | 0;
          if ((i33 | 0) == (i24 | 0)) {
            break;
          } else {
            i25 = i33;
          }
        }
        i37 = HEAP32[i3 >> 2] | 0;
        i38 = HEAP32[i12 >> 2] | 0;
      } else {
        i37 = i6;
        i38 = i10;
      }
      i25 = (HEAP32[i18 >> 2] | 0) + i37 | 0;
      HEAP32[i3 >> 2] = i25;
      HEAP32[i12 >> 2] = i38 + (HEAP32[i19 >> 2] | 0) | 0;
      i39 = i25;
    } else {
      i39 = i6;
    }
    if (i1) {
      i25 = i21;
      i24 = 0;
      while (1) {
        i4 = (HEAPU8[(HEAP32[i12 >> 2] | 0) + i24 | 0] | 0) >>> 4;
        i27 = i22 + (i24 << 1) | 0;
        HEAP8[i27] = (HEAP8[i27] & 240 | i4) & 255;
        i40 = i4 & i25;
        i4 = i24 + 1 | 0;
        if ((i4 | 0) == (i8 | 0)) {
          break;
        } else {
          i25 = i40;
          i24 = i4;
        }
      }
      i41 = i40;
      i42 = HEAP32[i3 >> 2] | 0;
    } else {
      i41 = i21;
      i42 = i39;
    }
    i43 = HEAP32[i5 >> 2] | 0;
    i44 = i20 + 1 | 0;
    if ((i42 | 0) < 1) {
      i20 = i44;
      i21 = i41;
      i22 = i22 + i43 | 0;
      i6 = i42;
    } else {
      break;
    }
  }
  if ((((i41 | 0) == 15 | i9 >>> 0 > 3) ^ 1) & (i44 | 0) > 0) {
    i45 = i2;
    i46 = i44;
  } else {
    i11 = i44;
    return i11 | 0;
  }
  while (1) {
    i2 = i46 - 1 | 0;
    L4599 : do {
      if (i1) {
        i9 = 0;
        while (1) {
          i41 = i9 << 1;
          i42 = i45 + (i41 | 1) | 0;
          i6 = HEAP8[i42] | 0;
          i22 = i6 & 15;
          i21 = (i22 & 255) * 4369 & -1;
          i20 = i45 + i41 | 0;
          i41 = HEAP8[i20] | 0;
          i5 = Math_imul((i41 & -16 | (i41 & 255) >>> 4) & 255, i21) >>> 16 & 255;
          i39 = Math_imul((i41 & 15 | i41 << 4) & 255, i21) >>> 20;
          i41 = Math_imul((i6 & -16 | (i6 & 255) >>> 4) & 255, i21) >>> 16 & 255;
          HEAP8[i20] = i5 & -16 | i39 & 15;
          HEAP8[i42] = i41 & -16 | i22;
          i22 = i9 + 1 | 0;
          if ((i22 | 0) == (i8 | 0)) {
            break L4599;
          } else {
            i9 = i22;
          }
        }
      }
    } while (0);
    if ((i2 | 0) > 0) {
      i45 = i45 + i43 | 0;
      i46 = i2;
    } else {
      i11 = i44;
      break;
    }
  }
  return i11 | 0;
}
function _EmitRescaledRGB(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0;
  i3 = HEAP32[i1 + 16 >> 2] | 0;
  i4 = i3 + 1 >> 1;
  if ((i3 | 0) <= 0) {
    i5 = 0;
    return i5 | 0;
  }
  i6 = i2 + 24 | 0;
  i7 = i1 + 32 | 0;
  i8 = i2 + 48 | 0;
  i9 = i1 + 20 | 0;
  i10 = i2 + 28 | 0;
  i11 = i2 + 56 | 0;
  i12 = i2 + 100 | 0;
  i13 = i1 + 36 | 0;
  i14 = i2 + 124 | 0;
  i15 = i1 + 24 | 0;
  i16 = i2 + 104 | 0;
  i17 = i2 + 132 | 0;
  i18 = i2 + 176 | 0;
  i19 = i2 + 200 | 0;
  i20 = i1 + 28 | 0;
  i1 = i2 + 180 | 0;
  i21 = i2 + 208 | 0;
  i22 = i2 | 0;
  i23 = i2 + 16 | 0;
  i24 = i2 + 84 | 0;
  i25 = i2 + 92 | 0;
  i26 = i2 + 96 | 0;
  i27 = i2 + 76 | 0;
  i28 = i2 + 32 | 0;
  i29 = i2 + 40 | 0;
  i30 = i2 + 52 | 0;
  i31 = i2 + 88 | 0;
  i32 = i2 + 160 | 0;
  i33 = i2 + 168 | 0;
  i34 = i2 + 172 | 0;
  i35 = i2 + 152 | 0;
  i36 = i2 + 108 | 0;
  i37 = i2 + 116 | 0;
  i38 = i2 + 128 | 0;
  i39 = i2 + 164 | 0;
  i40 = i2 + 236 | 0;
  i41 = i2 + 244 | 0;
  i42 = i2 + 248 | 0;
  i43 = i2 + 228 | 0;
  i44 = i2 + 184 | 0;
  i45 = i2 + 192 | 0;
  i46 = i2 + 204 | 0;
  i47 = i2 + 240 | 0;
  i2 = 0;
  i48 = 0;
  i49 = 0;
  while (1) {
    i50 = i3 - i49 | 0;
    i51 = HEAP32[i7 >> 2] | 0;
    L4610 : do {
      if ((i50 | 0) > 0) {
        i52 = Math_imul(i51, i49);
        i53 = (HEAP32[i9 >> 2] | 0) + i52 | 0;
        i52 = 0;
        i54 = HEAP32[i8 >> 2] | 0;
        while (1) {
          if ((i54 | 0) <= 0) {
            i55 = i52;
            break L4610;
          }
          if ((HEAP32[i10 >> 2] | 0) > 0) {
            i56 = 0;
            while (1) {
              _WebPRescalerImportRow(i6, i53, i56);
              i57 = i56 + 1 | 0;
              if ((i57 | 0) < (HEAP32[i10 >> 2] | 0)) {
                i56 = i57;
              } else {
                break;
              }
            }
            i58 = HEAP32[i8 >> 2] | 0;
          } else {
            i58 = i54;
          }
          i56 = i52 + 1 | 0;
          i57 = i58 - (HEAP32[i11 >> 2] | 0) | 0;
          HEAP32[i8 >> 2] = i57;
          if ((i56 | 0) < (i50 | 0)) {
            i53 = i53 + i51 | 0;
            i52 = i56;
            i54 = i57;
          } else {
            i55 = i56;
            break L4610;
          }
        }
      } else {
        i55 = 0;
      }
    } while (0);
    i51 = i4 - i48 | 0;
    i50 = HEAP32[i13 >> 2] | 0;
    L4621 : do {
      if ((i51 | 0) > 0) {
        i54 = Math_imul(i50, i48);
        i52 = (HEAP32[i15 >> 2] | 0) + i54 | 0;
        i54 = 0;
        i53 = HEAP32[i14 >> 2] | 0;
        while (1) {
          if ((i53 | 0) <= 0) {
            i59 = i54;
            break;
          }
          if ((HEAP32[i16 >> 2] | 0) > 0) {
            i56 = 0;
            while (1) {
              _WebPRescalerImportRow(i12, i52, i56);
              i57 = i56 + 1 | 0;
              if ((i57 | 0) < (HEAP32[i16 >> 2] | 0)) {
                i56 = i57;
              } else {
                break;
              }
            }
            i60 = HEAP32[i14 >> 2] | 0;
          } else {
            i60 = i53;
          }
          i56 = i54 + 1 | 0;
          i57 = i60 - (HEAP32[i17 >> 2] | 0) | 0;
          HEAP32[i14 >> 2] = i57;
          if ((i56 | 0) < (i51 | 0)) {
            i52 = i52 + i50 | 0;
            i54 = i56;
            i53 = i57;
          } else {
            i59 = i56;
            break;
          }
        }
        i53 = HEAP32[i13 >> 2] | 0;
        i54 = Math_imul(i53, i48);
        i52 = (HEAP32[i20 >> 2] | 0) + i54 | 0;
        i54 = 0;
        i56 = HEAP32[i19 >> 2] | 0;
        while (1) {
          if ((i56 | 0) <= 0) {
            i61 = i59;
            break L4621;
          }
          if ((HEAP32[i1 >> 2] | 0) > 0) {
            i57 = 0;
            while (1) {
              _WebPRescalerImportRow(i18, i52, i57);
              i62 = i57 + 1 | 0;
              if ((i62 | 0) < (HEAP32[i1 >> 2] | 0)) {
                i57 = i62;
              } else {
                break;
              }
            }
            i63 = HEAP32[i19 >> 2] | 0;
          } else {
            i63 = i56;
          }
          i57 = i54 + 1 | 0;
          i62 = i63 - (HEAP32[i21 >> 2] | 0) | 0;
          HEAP32[i19 >> 2] = i62;
          if ((i57 | 0) < (i51 | 0)) {
            i52 = i52 + i53 | 0;
            i54 = i57;
            i56 = i62;
          } else {
            i61 = i59;
            break L4621;
          }
        }
      } else {
        i61 = 0;
      }
    } while (0);
    i51 = i55 + i49 | 0;
    i50 = i61 + i48 | 0;
    i56 = HEAP32[i22 >> 2] | 0;
    i54 = HEAP32[5276400 + (HEAP32[i56 >> 2] << 2) >> 2] | 0;
    i53 = i56 + 20 | 0;
    i52 = HEAP32[i8 >> 2] | 0;
    L4641 : do {
      if ((i52 | 0) < 1) {
        i62 = Math_imul((HEAP32[i23 >> 2] | 0) + i2 | 0, HEAP32[i53 >> 2] | 0);
        i57 = (HEAP32[i56 + 16 >> 2] | 0) + i62 | 0;
        i62 = 0;
        i64 = i52;
        while (1) {
          i65 = HEAP32[i14 >> 2] | 0;
          if ((i65 | 0) >= 1) {
            i66 = i62;
            break L4641;
          }
          if ((i64 | 0) < 1) {
            i67 = HEAP32[i24 >> 2] | 0;
            i68 = HEAP32[i25 >> 2] | 0;
            i69 = HEAP32[i26 >> 2] | 0;
            i70 = Math_imul(HEAP32[i10 >> 2] | 0, HEAP32[i27 >> 2] | 0);
            if ((i70 | 0) > 0) {
              i71 = Math_imul(HEAP32[i28 >> 2] | 0, -i64 | 0);
              i72 = i71;
              i73 = (i71 | 0) < 0 ? -1 : 0;
              i71 = 0;
              while (1) {
                i74 = HEAP32[i69 + (i71 << 2) >> 2] | 0;
                i75 = i74;
                i76 = (i74 | 0) < 0 ? -1 : 0;
                i74 = ~~((+(i75 >>> 0) + +(i76 | 0) * 4294967296.0) * (+(i72 >>> 0) + +(i73 | 0) * 4294967296.0)) >>> 0;
                i77 = Math_min(Math_floor((+(i75 >>> 0) + +(i76 | 0) * 4294967296.0) * (+(i72 >>> 0) + +(i73 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
                i76 = 536870912;
                i75 = 0;
                i78 = Math_min(Math_floor((+(i74 >>> 0) + +(i77 | 0) * 4294967296.0 + (+(i76 >>> 0) + +(i75 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
                i79 = ~~(+(i74 >>> 0) + +(i77 | 0) * 4294967296.0 + (+(i76 >>> 0) + +(i75 | 0) * 4294967296.0)) >>> 0 >>> 30 | i78 << 2;
                i78 = i68 + (i71 << 2) | 0;
                i75 = (HEAP32[i78 >> 2] | 0) - i79 | 0;
                i76 = i75;
                i77 = (i75 | 0) < 0 ? -1 : 0;
                i80 = i29 | 0;
                i75 = HEAP32[i80 >> 2] | 0;
                i81 = i29 + 4 | 0;
                i74 = HEAP32[i81 >> 2] | 0;
                i82 = ~~((+(i76 >>> 0) + +(i77 | 0) * 4294967296.0) * (+(i75 >>> 0) + +(i74 | 0) * 4294967296.0)) >>> 0;
                i83 = Math_min(Math_floor((+(i76 >>> 0) + +(i77 | 0) * 4294967296.0) * (+(i75 >>> 0) + +(i74 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
                i74 = 536870912;
                i75 = 0;
                i77 = Math_min(Math_floor((+(i82 >>> 0) + +(i83 | 0) * 4294967296.0 + (+(i74 >>> 0) + +(i75 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
                i76 = ~~(+(i82 >>> 0) + +(i83 | 0) * 4294967296.0 + (+(i74 >>> 0) + +(i75 | 0) * 4294967296.0)) >>> 0 >>> 30 | i77 << 2;
                if (i76 >>> 0 > 255) {
                  i84 = (i76 >> 31 & -255) + 255 | 0;
                } else {
                  i84 = i76;
                }
                HEAP8[i67 + i71 | 0] = i84 & 255;
                HEAP32[i78 >> 2] = i79;
                i79 = i71 + 1 | 0;
                if ((i79 | 0) == (i70 | 0)) {
                  break;
                } else {
                  i71 = i79;
                }
              }
              i85 = HEAP32[i8 >> 2] | 0;
              i86 = HEAP32[i24 >> 2] | 0;
              i87 = HEAP32[i14 >> 2] | 0;
            } else {
              i85 = i64;
              i86 = i67;
              i87 = i65;
            }
            HEAP32[i8 >> 2] = (HEAP32[i30 >> 2] | 0) + i85 | 0;
            HEAP32[i24 >> 2] = i86 + (HEAP32[i31 >> 2] | 0) | 0;
            i88 = i87;
          } else {
            i88 = i65;
          }
          if ((i88 | 0) < 1) {
            i71 = HEAP32[i32 >> 2] | 0;
            i70 = HEAP32[i33 >> 2] | 0;
            i68 = HEAP32[i34 >> 2] | 0;
            i73 = Math_imul(HEAP32[i16 >> 2] | 0, HEAP32[i35 >> 2] | 0);
            if ((i73 | 0) > 0) {
              i72 = Math_imul(HEAP32[i36 >> 2] | 0, -i88 | 0);
              i69 = i72;
              i79 = (i72 | 0) < 0 ? -1 : 0;
              i72 = 0;
              while (1) {
                i78 = HEAP32[i68 + (i72 << 2) >> 2] | 0;
                i76 = i78;
                i77 = (i78 | 0) < 0 ? -1 : 0;
                i78 = ~~((+(i76 >>> 0) + +(i77 | 0) * 4294967296.0) * (+(i69 >>> 0) + +(i79 | 0) * 4294967296.0)) >>> 0;
                i75 = Math_min(Math_floor((+(i76 >>> 0) + +(i77 | 0) * 4294967296.0) * (+(i69 >>> 0) + +(i79 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
                i77 = 536870912;
                i76 = 0;
                i74 = Math_min(Math_floor((+(i78 >>> 0) + +(i75 | 0) * 4294967296.0 + (+(i77 >>> 0) + +(i76 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
                i83 = ~~(+(i78 >>> 0) + +(i75 | 0) * 4294967296.0 + (+(i77 >>> 0) + +(i76 | 0) * 4294967296.0)) >>> 0 >>> 30 | i74 << 2;
                i74 = i70 + (i72 << 2) | 0;
                i76 = (HEAP32[i74 >> 2] | 0) - i83 | 0;
                i77 = i76;
                i75 = (i76 | 0) < 0 ? -1 : 0;
                i80 = i37 | 0;
                i76 = HEAP32[i80 >> 2] | 0;
                i81 = i37 + 4 | 0;
                i78 = HEAP32[i81 >> 2] | 0;
                i82 = ~~((+(i77 >>> 0) + +(i75 | 0) * 4294967296.0) * (+(i76 >>> 0) + +(i78 | 0) * 4294967296.0)) >>> 0;
                i89 = Math_min(Math_floor((+(i77 >>> 0) + +(i75 | 0) * 4294967296.0) * (+(i76 >>> 0) + +(i78 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
                i78 = 536870912;
                i76 = 0;
                i75 = Math_min(Math_floor((+(i82 >>> 0) + +(i89 | 0) * 4294967296.0 + (+(i78 >>> 0) + +(i76 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
                i77 = ~~(+(i82 >>> 0) + +(i89 | 0) * 4294967296.0 + (+(i78 >>> 0) + +(i76 | 0) * 4294967296.0)) >>> 0 >>> 30 | i75 << 2;
                if (i77 >>> 0 > 255) {
                  i90 = (i77 >> 31 & -255) + 255 | 0;
                } else {
                  i90 = i77;
                }
                HEAP8[i71 + i72 | 0] = i90 & 255;
                HEAP32[i74 >> 2] = i83;
                i83 = i72 + 1 | 0;
                if ((i83 | 0) == (i73 | 0)) {
                  break;
                } else {
                  i72 = i83;
                }
              }
              i91 = HEAP32[i14 >> 2] | 0;
              i92 = HEAP32[i32 >> 2] | 0;
            } else {
              i91 = i88;
              i92 = i71;
            }
            HEAP32[i14 >> 2] = (HEAP32[i38 >> 2] | 0) + i91 | 0;
            HEAP32[i32 >> 2] = i92 + (HEAP32[i39 >> 2] | 0) | 0;
          }
          i72 = HEAP32[i19 >> 2] | 0;
          i73 = HEAP32[i40 >> 2] | 0;
          if ((i72 | 0) < 1) {
            i70 = HEAP32[i41 >> 2] | 0;
            i79 = HEAP32[i42 >> 2] | 0;
            i69 = Math_imul(HEAP32[i1 >> 2] | 0, HEAP32[i43 >> 2] | 0);
            if ((i69 | 0) > 0) {
              i68 = Math_imul(HEAP32[i44 >> 2] | 0, -i72 | 0);
              i65 = i68;
              i67 = (i68 | 0) < 0 ? -1 : 0;
              i68 = 0;
              while (1) {
                i83 = HEAP32[i79 + (i68 << 2) >> 2] | 0;
                i74 = i83;
                i77 = (i83 | 0) < 0 ? -1 : 0;
                i83 = ~~((+(i74 >>> 0) + +(i77 | 0) * 4294967296.0) * (+(i65 >>> 0) + +(i67 | 0) * 4294967296.0)) >>> 0;
                i75 = Math_min(Math_floor((+(i74 >>> 0) + +(i77 | 0) * 4294967296.0) * (+(i65 >>> 0) + +(i67 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
                i77 = 536870912;
                i74 = 0;
                i76 = Math_min(Math_floor((+(i83 >>> 0) + +(i75 | 0) * 4294967296.0 + (+(i77 >>> 0) + +(i74 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
                i78 = ~~(+(i83 >>> 0) + +(i75 | 0) * 4294967296.0 + (+(i77 >>> 0) + +(i74 | 0) * 4294967296.0)) >>> 0 >>> 30 | i76 << 2;
                i76 = i70 + (i68 << 2) | 0;
                i74 = (HEAP32[i76 >> 2] | 0) - i78 | 0;
                i77 = i74;
                i75 = (i74 | 0) < 0 ? -1 : 0;
                i80 = i45 | 0;
                i74 = HEAP32[i80 >> 2] | 0;
                i81 = i45 + 4 | 0;
                i83 = HEAP32[i81 >> 2] | 0;
                i89 = ~~((+(i77 >>> 0) + +(i75 | 0) * 4294967296.0) * (+(i74 >>> 0) + +(i83 | 0) * 4294967296.0)) >>> 0;
                i82 = Math_min(Math_floor((+(i77 >>> 0) + +(i75 | 0) * 4294967296.0) * (+(i74 >>> 0) + +(i83 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
                i83 = 536870912;
                i74 = 0;
                i75 = Math_min(Math_floor((+(i89 >>> 0) + +(i82 | 0) * 4294967296.0 + (+(i83 >>> 0) + +(i74 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
                i77 = ~~(+(i89 >>> 0) + +(i82 | 0) * 4294967296.0 + (+(i83 >>> 0) + +(i74 | 0) * 4294967296.0)) >>> 0 >>> 30 | i75 << 2;
                if (i77 >>> 0 > 255) {
                  i93 = (i77 >> 31 & -255) + 255 | 0;
                } else {
                  i93 = i77;
                }
                HEAP8[i73 + i68 | 0] = i93 & 255;
                HEAP32[i76 >> 2] = i78;
                i78 = i68 + 1 | 0;
                if ((i78 | 0) == (i69 | 0)) {
                  break;
                } else {
                  i68 = i78;
                }
              }
              i94 = HEAP32[i19 >> 2] | 0;
              i95 = HEAP32[i40 >> 2] | 0;
            } else {
              i94 = i72;
              i95 = i73;
            }
            HEAP32[i19 >> 2] = (HEAP32[i46 >> 2] | 0) + i94 | 0;
            i68 = i95 + (HEAP32[i47 >> 2] | 0) | 0;
            HEAP32[i40 >> 2] = i68;
            i96 = i68;
          } else {
            i96 = i73;
          }
          FUNCTION_TABLE_viiiii[i54 & 511](HEAP32[i24 >> 2] | 0, HEAP32[i32 >> 2] | 0, i96, i57, HEAP32[i27 >> 2] | 0);
          i68 = i62 + 1 | 0;
          i69 = HEAP32[i8 >> 2] | 0;
          if ((i69 | 0) >= 1) {
            i66 = i68;
            break L4641;
          }
          i57 = i57 + (HEAP32[i53 >> 2] | 0) | 0;
          i62 = i68;
          i64 = i69;
        }
      } else {
        i66 = 0;
      }
    } while (0);
    i53 = i66 + i2 | 0;
    if ((i51 | 0) < (i3 | 0)) {
      i2 = i53;
      i48 = i50;
      i49 = i51;
    } else {
      i5 = i53;
      break;
    }
  }
  return i5 | 0;
}
function _EmitRescaledAlphaRGB(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
  i3 = i1 + 104 | 0;
  if ((HEAP32[i3 >> 2] | 0) == 0) {
    return 0;
  }
  i4 = i2 + 252 | 0;
  i5 = i1 + 16 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  if ((i6 | 0) <= 0) {
    return 0;
  }
  i7 = i1 | 0;
  i1 = i2 + 276 | 0;
  i8 = i2 + 256 | 0;
  i9 = i2 + 284 | 0;
  i10 = i2 + 340 | 0;
  i11 = 0;
  i12 = 0;
  i13 = i6;
  while (1) {
    i6 = i13 - i11 | 0;
    i14 = HEAP32[i7 >> 2] | 0;
    L4694 : do {
      if ((i6 | 0) > 0) {
        i15 = Math_imul(i14, i11);
        i16 = (HEAP32[i3 >> 2] | 0) + i15 | 0;
        i15 = 0;
        i17 = HEAP32[i1 >> 2] | 0;
        while (1) {
          if ((i17 | 0) <= 0) {
            i18 = i15;
            break L4694;
          }
          if ((HEAP32[i8 >> 2] | 0) > 0) {
            i19 = 0;
            while (1) {
              _WebPRescalerImportRow(i4, i16, i19);
              i20 = i19 + 1 | 0;
              if ((i20 | 0) < (HEAP32[i8 >> 2] | 0)) {
                i19 = i20;
              } else {
                break;
              }
            }
            i21 = HEAP32[i1 >> 2] | 0;
          } else {
            i21 = i17;
          }
          i19 = i15 + 1 | 0;
          i20 = i21 - (HEAP32[i9 >> 2] | 0) | 0;
          HEAP32[i1 >> 2] = i20;
          if ((i19 | 0) < (i6 | 0)) {
            i16 = i16 + i14 | 0;
            i15 = i19;
            i17 = i20;
          } else {
            i18 = i19;
            break L4694;
          }
        }
      } else {
        i18 = 0;
      }
    } while (0);
    i14 = i18 + i11 | 0;
    i6 = (FUNCTION_TABLE_iii[HEAP32[i10 >> 2] & 511](i2, i12) | 0) + i12 | 0;
    i17 = HEAP32[i5 >> 2] | 0;
    if ((i14 | 0) < (i17 | 0)) {
      i11 = i14;
      i12 = i6;
      i13 = i17;
    } else {
      break;
    }
  }
  return 0;
}
function _ExportAlpha(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0;
  i3 = HEAP32[i1 >> 2] | 0;
  i4 = HEAP32[i3 + 16 >> 2] | 0;
  i5 = i3 + 20 | 0;
  i6 = Math_imul((HEAP32[i1 + 16 >> 2] | 0) + i2 | 0, HEAP32[i5 >> 2] | 0);
  i2 = i4 + i6 | 0;
  i7 = HEAP32[i3 >> 2] | 0;
  i3 = (i7 | 0) == 4 | (i7 | 0) == 9;
  i8 = i7 - 7 | 0;
  i7 = i1 + 304 | 0;
  i9 = HEAP32[i7 >> 2] | 0;
  i10 = i1 + 276 | 0;
  i11 = HEAP32[i10 >> 2] | 0;
  if ((i11 | 0) >= 1) {
    i12 = 0;
    return i12 | 0;
  }
  i13 = i3 ? 0 : 3;
  i14 = i1 + 312 | 0;
  i15 = i1 + 320 | 0;
  i16 = i1 + 324 | 0;
  i17 = i1 + 256 | 0;
  i18 = i1 + 260 | 0;
  i19 = i1 + 268 | 0;
  i20 = i1 + 280 | 0;
  i21 = i1 + 316 | 0;
  i1 = (i9 | 0) > 0;
  i22 = 255;
  i23 = 0;
  i24 = i4 + (i13 + i6 | 0) | 0;
  i6 = i11;
  while (1) {
    if ((i6 | 0) < 1) {
      i11 = HEAP32[i14 >> 2] | 0;
      i4 = HEAP32[i15 >> 2] | 0;
      i25 = HEAP32[i16 >> 2] | 0;
      i26 = Math_imul(HEAP32[i17 >> 2] | 0, HEAP32[i7 >> 2] | 0);
      if ((i26 | 0) > 0) {
        i27 = Math_imul(HEAP32[i18 >> 2] | 0, -i6 | 0);
        i28 = i27;
        i29 = (i27 | 0) < 0 ? -1 : 0;
        i27 = 0;
        while (1) {
          i30 = HEAP32[i25 + (i27 << 2) >> 2] | 0;
          i31 = i30;
          i32 = (i30 | 0) < 0 ? -1 : 0;
          i30 = ~~((+(i31 >>> 0) + +(i32 | 0) * 4294967296.0) * (+(i28 >>> 0) + +(i29 | 0) * 4294967296.0)) >>> 0;
          i33 = Math_min(Math_floor((+(i31 >>> 0) + +(i32 | 0) * 4294967296.0) * (+(i28 >>> 0) + +(i29 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
          i32 = 536870912;
          i31 = 0;
          i34 = Math_min(Math_floor((+(i30 >>> 0) + +(i33 | 0) * 4294967296.0 + (+(i32 >>> 0) + +(i31 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
          i35 = ~~(+(i30 >>> 0) + +(i33 | 0) * 4294967296.0 + (+(i32 >>> 0) + +(i31 | 0) * 4294967296.0)) >>> 0 >>> 30 | i34 << 2;
          i34 = i4 + (i27 << 2) | 0;
          i31 = (HEAP32[i34 >> 2] | 0) - i35 | 0;
          i32 = i31;
          i33 = (i31 | 0) < 0 ? -1 : 0;
          i31 = HEAP32[i19 >> 2] | 0;
          i30 = HEAP32[i19 + 4 >> 2] | 0;
          i36 = ~~((+(i32 >>> 0) + +(i33 | 0) * 4294967296.0) * (+(i31 >>> 0) + +(i30 | 0) * 4294967296.0)) >>> 0;
          i37 = Math_min(Math_floor((+(i32 >>> 0) + +(i33 | 0) * 4294967296.0) * (+(i31 >>> 0) + +(i30 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
          i30 = 536870912;
          i31 = 0;
          i33 = Math_min(Math_floor((+(i36 >>> 0) + +(i37 | 0) * 4294967296.0 + (+(i30 >>> 0) + +(i31 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
          i32 = ~~(+(i36 >>> 0) + +(i37 | 0) * 4294967296.0 + (+(i30 >>> 0) + +(i31 | 0) * 4294967296.0)) >>> 0 >>> 30 | i33 << 2;
          if (i32 >>> 0 > 255) {
            i38 = (i32 >> 31 & -255) + 255 | 0;
          } else {
            i38 = i32;
          }
          HEAP8[i11 + i27 | 0] = i38 & 255;
          HEAP32[i34 >> 2] = i35;
          i35 = i27 + 1 | 0;
          if ((i35 | 0) == (i26 | 0)) {
            break;
          } else {
            i27 = i35;
          }
        }
        i39 = HEAP32[i10 >> 2] | 0;
        i40 = HEAP32[i14 >> 2] | 0;
      } else {
        i39 = i6;
        i40 = i11;
      }
      i27 = (HEAP32[i20 >> 2] | 0) + i39 | 0;
      HEAP32[i10 >> 2] = i27;
      HEAP32[i14 >> 2] = i40 + (HEAP32[i21 >> 2] | 0) | 0;
      i41 = i27;
    } else {
      i41 = i6;
    }
    if (i1) {
      i27 = i22;
      i26 = 0;
      while (1) {
        i4 = HEAP8[(HEAP32[i14 >> 2] | 0) + i26 | 0] | 0;
        HEAP8[i24 + (i26 << 2) | 0] = i4;
        i42 = i4 & 255 & i27;
        i4 = i26 + 1 | 0;
        if ((i4 | 0) == (i9 | 0)) {
          break;
        } else {
          i27 = i42;
          i26 = i4;
        }
      }
      i43 = i42;
      i44 = HEAP32[i10 >> 2] | 0;
    } else {
      i43 = i22;
      i44 = i41;
    }
    i45 = HEAP32[i5 >> 2] | 0;
    i46 = i23 + 1 | 0;
    if ((i44 | 0) < 1) {
      i22 = i43;
      i23 = i46;
      i24 = i24 + i45 | 0;
      i6 = i44;
    } else {
      break;
    }
  }
  if (!((((i43 | 0) == 255 | i8 >>> 0 > 3) ^ 1) & (i46 | 0) > 0)) {
    i12 = i46;
    return i12 | 0;
  }
  i8 = i3 & 1;
  i3 = i2;
  i2 = i46;
  while (1) {
    i43 = i2 - 1 | 0;
    L4735 : do {
      if (i1) {
        i44 = 0;
        while (1) {
          i6 = i44 << 2;
          i24 = HEAP8[i3 + (i6 | i13) | 0] | 0;
          if (i24 << 24 >> 24 != -1) {
            i23 = (i24 & 255) * 32897 & -1;
            i24 = i6 | i8;
            i22 = i3 + i24 | 0;
            HEAP8[i22] = Math_imul(HEAPU8[i22] | 0, i23) >>> 23 & 255;
            i22 = i3 + ((i6 | 1) + i8 | 0) | 0;
            HEAP8[i22] = Math_imul(HEAPU8[i22] | 0, i23) >>> 23 & 255;
            i22 = i3 + (i24 | 2) | 0;
            HEAP8[i22] = Math_imul(HEAPU8[i22] | 0, i23) >>> 23 & 255;
          }
          i23 = i44 + 1 | 0;
          if ((i23 | 0) == (i9 | 0)) {
            break L4735;
          } else {
            i44 = i23;
          }
        }
      }
    } while (0);
    if ((i43 | 0) > 0) {
      i3 = i3 + i45 | 0;
      i2 = i43;
    } else {
      i12 = i46;
      break;
    }
  }
  return i12 | 0;
}
function _ParseHeadersInternal(i1, i2, i3, i4, i5, i6) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0;
  i7 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  i8 = i7 | 0;
  if ((i1 | 0) == 0 | i2 >>> 0 < 12) {
    i9 = 7;
    STACKTOP = i7;
    return i9 | 0;
  }
  do {
    if ((_memcmp(i1, 5267432, 4) | 0) == 0) {
      if ((_memcmp(i1 + 8 | 0, 5266532, 4) | 0) != 0) {
        i9 = 3;
        STACKTOP = i7;
        return i9 | 0;
      }
      i10 = (HEAPU8[i1 + 5 | 0] | 0) << 8 | (HEAPU8[i1 + 4 | 0] | 0) | (HEAPU8[i1 + 6 | 0] | 0) << 16 | (HEAPU8[i1 + 7 | 0] | 0) << 24;
      if ((i10 - 12 | 0) >>> 0 > 4294967274) {
        i9 = 3;
        STACKTOP = i7;
        return i9 | 0;
      }
      i11 = i2 - 12 | 0;
      if (i11 >>> 0 < 8) {
        i9 = 7;
      } else {
        i12 = i1 + 12 | 0;
        i13 = i11;
        i14 = i10;
        i15 = (i10 | 0) != 0;
        break;
      }
      STACKTOP = i7;
      return i9 | 0;
    } else {
      i12 = i1;
      i13 = i2;
      i14 = 0;
      i15 = 0;
    }
  } while (0);
  do {
    if ((_memcmp(i12, 5268320, 4) | 0) == 0) {
      if (((HEAPU8[i12 + 5 | 0] | 0) << 8 | (HEAPU8[i12 + 4 | 0] | 0) | (HEAPU8[i12 + 6 | 0] | 0) << 16 | (HEAPU8[i12 + 7 | 0] | 0) << 24 | 0) != 10) {
        i9 = 3;
        STACKTOP = i7;
        return i9 | 0;
      }
      if (i13 >>> 0 < 18) {
        i9 = 7;
        STACKTOP = i7;
        return i9 | 0;
      }
      i10 = HEAPU8[i12 + 8 | 0] | 0;
      i11 = ((HEAPU8[i12 + 13 | 0] | 0) << 8 | (HEAPU8[i12 + 12 | 0] | 0) | (HEAPU8[i12 + 14 | 0] | 0) << 16) + 1 | 0;
      i16 = ((HEAPU8[i12 + 16 | 0] | 0) << 8 | (HEAPU8[i12 + 15 | 0] | 0) | (HEAPU8[i12 + 17 | 0] | 0) << 16) + 1 | 0;
      i17 = i11;
      i18 = (i11 | 0) < 0 ? -1 : 0;
      i19 = i16;
      i20 = (i16 | 0) < 0 ? -1 : 0;
      i21 = Math_min(Math_floor((+(i19 >>> 0) + +(i20 | 0) * 4294967296.0) * (+(i17 >>> 0) + +(i18 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
      i22 = 0;
      if (i21 >>> 0 > i22 >>> 0 | i21 >>> 0 == i22 >>> 0 & ~~((+(i19 >>> 0) + +(i20 | 0) * 4294967296.0) * (+(i17 >>> 0) + +(i18 | 0) * 4294967296.0)) >>> 0 >>> 0 > -1 >>> 0) {
        i9 = 3;
        STACKTOP = i7;
        return i9 | 0;
      }
      if ((i3 | 0) != 0) {
        HEAP32[i3 >> 2] = i11;
      }
      if ((i4 | 0) != 0) {
        HEAP32[i4 >> 2] = i16;
      }
      if (i15) {
        i23 = i12 + 18 | 0;
        i24 = i13 - 18 | 0;
        i25 = 1;
        i26 = i10 >>> 4 & 1;
        i27 = 0;
        break;
      } else {
        i9 = 3;
      }
      STACKTOP = i7;
      return i9 | 0;
    } else {
      i23 = i12;
      i24 = i13;
      i25 = 0;
      i26 = 0;
      i27 = 1;
    }
  } while (0);
  i13 = (i5 | 0) != 0;
  if (i13) {
    HEAP32[i5 >> 2] = i26;
  }
  i26 = (i6 | 0) == 0;
  if ((i25 | 0) != 0 & i26) {
    i9 = 0;
    STACKTOP = i7;
    return i9 | 0;
  }
  if (i24 >>> 0 < 4) {
    i9 = 7;
    STACKTOP = i7;
    return i9 | 0;
  }
  do {
    if (i15) {
      if (i27) {
        i28 = 0;
        i29 = 0;
        i30 = i24;
        i31 = i23;
        break;
      } else {
        i32 = 3423;
        break;
      }
    } else {
      if (!i27) {
        i28 = 0;
        i29 = 0;
        i30 = i24;
        i31 = i23;
        break;
      }
      if ((_memcmp(i23, 5265e3, 4) | 0) == 0) {
        i32 = 3423;
        break;
      } else {
        i28 = 0;
        i29 = 0;
        i30 = i24;
        i31 = i23;
        break;
      }
    }
  } while (0);
  L4789 : do {
    if ((i32 | 0) == 3423) {
      if (i24 >>> 0 < 8) {
        i9 = 7;
        STACKTOP = i7;
        return i9 | 0;
      } else {
        i33 = i24;
        i34 = 22;
        i35 = i23;
        i36 = 0;
        i37 = 0;
      }
      while (1) {
        i27 = (HEAPU8[i35 + 5 | 0] | 0) << 8 | (HEAPU8[i35 + 4 | 0] | 0) | (HEAPU8[i35 + 6 | 0] | 0) << 16 | (HEAPU8[i35 + 7 | 0] | 0) << 24;
        if (i27 >>> 0 > 4294967286) {
          i9 = 3;
          i32 = 3472;
          break;
        }
        i25 = i27 + 9 & -2;
        i12 = i25 + i34 | 0;
        if (i15 & i12 >>> 0 > i14 >>> 0) {
          i9 = 3;
          i32 = 3497;
          break;
        }
        if (i33 >>> 0 < i25 >>> 0) {
          i9 = 7;
          i32 = 3482;
          break;
        }
        if ((_memcmp(i35, 5265e3, 4) | 0) == 0) {
          i38 = i35 + 8 | 0;
          i39 = i27;
        } else {
          if ((_memcmp(i35, 5271128, 4) | 0) == 0) {
            i28 = i36;
            i29 = i37;
            i30 = i33;
            i31 = i35;
            break L4789;
          }
          if ((_memcmp(i35, 5269404, 4) | 0) == 0) {
            i28 = i36;
            i29 = i37;
            i30 = i33;
            i31 = i35;
            break L4789;
          } else {
            i38 = i36;
            i39 = i37;
          }
        }
        i27 = i33 - i25 | 0;
        if (i27 >>> 0 < 8) {
          i9 = 7;
          i32 = 3483;
          break;
        } else {
          i33 = i27;
          i34 = i12;
          i35 = i35 + i25 | 0;
          i36 = i38;
          i37 = i39;
        }
      }
      if ((i32 | 0) == 3472) {
        STACKTOP = i7;
        return i9 | 0;
      } else if ((i32 | 0) == 3497) {
        STACKTOP = i7;
        return i9 | 0;
      } else if ((i32 | 0) == 3482) {
        STACKTOP = i7;
        return i9 | 0;
      } else if ((i32 | 0) == 3483) {
        STACKTOP = i7;
        return i9 | 0;
      }
    }
  } while (0);
  i32 = (_memcmp(i31, 5269404, 4) | 0) == 0;
  i39 = i32 & 1;
  if (i30 >>> 0 < 8) {
    i9 = 7;
    STACKTOP = i7;
    return i9 | 0;
  }
  do {
    if ((_memcmp(i31, 5271128, 4) | 0) == 0 | i32) {
      i37 = (HEAPU8[i31 + 5 | 0] | 0) << 8 | (HEAPU8[i31 + 4 | 0] | 0) | (HEAPU8[i31 + 6 | 0] | 0) << 16 | (HEAPU8[i31 + 7 | 0] | 0) << 24;
      if (i14 >>> 0 > 11 & i37 >>> 0 > (i14 - 12 | 0) >>> 0) {
        i9 = 3;
        STACKTOP = i7;
        return i9 | 0;
      } else {
        i40 = i37;
        i41 = i39;
        i42 = i30 - 8 | 0;
        i43 = i31 + 8 | 0;
        break;
      }
    } else {
      i40 = i30;
      i41 = HEAP8[i31] << 24 >> 24 == 47 & 1;
      i42 = i30;
      i43 = i31;
    }
  } while (0);
  if (i40 >>> 0 > 4294967286) {
    i9 = 3;
    STACKTOP = i7;
    return i9 | 0;
  }
  do {
    if ((i41 | 0) == 0) {
      if (i42 >>> 0 < 10) {
        i9 = 7;
        STACKTOP = i7;
        return i9 | 0;
      }
      if (!(i42 >>> 0 > 9 & (i43 | 0) != 0 & (i42 - 3 | 0) >>> 0 > 2)) {
        i9 = 3;
        STACKTOP = i7;
        return i9 | 0;
      }
      if (HEAP8[i43 + 3 | 0] << 24 >> 24 != -99) {
        i9 = 3;
        STACKTOP = i7;
        return i9 | 0;
      }
      if (HEAP8[i43 + 4 | 0] << 24 >> 24 != 1) {
        i9 = 3;
        STACKTOP = i7;
        return i9 | 0;
      }
      if (HEAP8[i43 + 5 | 0] << 24 >> 24 != 42) {
        i9 = 3;
        STACKTOP = i7;
        return i9 | 0;
      }
      i31 = HEAPU8[i43] | 0;
      i30 = (HEAPU8[i43 + 9 | 0] | 0) << 8 & 16128 | (HEAPU8[i43 + 8 | 0] | 0);
      if ((i31 & 1 | 0) != 0 | (i31 & 8) >>> 0 > 6 | (i31 & 16 | 0) == 0) {
        i9 = 3;
        STACKTOP = i7;
        return i9 | 0;
      }
      if (((HEAPU8[i43 + 1 | 0] | 0) << 8 | i31 | (HEAPU8[i43 + 2 | 0] | 0) << 16) >>> 5 >>> 0 >= i40 >>> 0) {
        i9 = 3;
        STACKTOP = i7;
        return i9 | 0;
      }
      if ((i3 | 0) != 0) {
        HEAP32[i3 >> 2] = (HEAPU8[i43 + 7 | 0] | 0) << 8 & 16128 | (HEAPU8[i43 + 6 | 0] | 0);
      }
      if ((i4 | 0) == 0) {
        break;
      }
      HEAP32[i4 >> 2] = i30;
    } else {
      if (i42 >>> 0 < 5) {
        i9 = 7;
        STACKTOP = i7;
        return i9 | 0;
      }
      if ((i43 | 0) == 0) {
        i9 = 3;
        STACKTOP = i7;
        return i9 | 0;
      }
      HEAP32[i8 + 8 >> 2] = i43;
      HEAP32[i8 + 12 >> 2] = i42;
      i30 = i8 | 0;
      HEAP32[i30 >> 2] = 0;
      HEAP32[i30 + 4 >> 2] = 0;
      i31 = i8 + 16 | 0;
      i39 = i31;
      HEAP32[i39 >> 2] = 0;
      HEAP32[i39 + 4 >> 2] = 0;
      HEAP32[i39 + 8 >> 2] = 0;
      HEAP32[i39 + 12 >> 2] = 0;
      i39 = HEAPU8[i43] | 0;
      i32 = 0;
      HEAP32[i30 >> 2] = i39;
      HEAP32[i30 + 4 >> 2] = i32;
      HEAP32[i31 >> 2] = 1;
      i37 = HEAPU8[i43 + 1 | 0] | 0;
      i38 = i37 << 8 | 0 >>> 24 | i39;
      i39 = 0 << 8 | i37 >>> 24 | i32;
      HEAP32[i30 >> 2] = i38;
      HEAP32[i30 + 4 >> 2] = i39;
      HEAP32[i31 >> 2] = 2;
      i32 = HEAPU8[i43 + 2 | 0] | 0;
      i37 = i32 << 16 | 0 >>> 16 | i38;
      i38 = 0 << 16 | i32 >>> 16 | i39;
      HEAP32[i30 >> 2] = i37;
      HEAP32[i30 + 4 >> 2] = i38;
      HEAP32[i31 >> 2] = 3;
      i39 = HEAPU8[i43 + 3 | 0] | 0;
      i32 = i39 << 24 | 0 >>> 8 | i37;
      i37 = 0 << 24 | i39 >>> 8 | i38;
      HEAP32[i30 >> 2] = i32;
      HEAP32[i30 + 4 >> 2] = i37;
      HEAP32[i31 >> 2] = 4;
      i38 = 0 | i32;
      i32 = HEAPU8[i43 + 4 | 0] | 0 | i37;
      HEAP32[i30 >> 2] = i38;
      HEAP32[i30 + 4 >> 2] = i32;
      HEAP32[i31 >> 2] = 5;
      do {
        if (i42 >>> 0 > 5) {
          i37 = 0 << 8 | 0 >>> 24 | i38;
          i39 = (HEAPU8[i43 + 5 | 0] | 0) << 8 | 0 >>> 24 | i32;
          i36 = i30 | 0;
          HEAP32[i36 >> 2] = i37;
          i35 = i30 + 4 | 0;
          HEAP32[i35 >> 2] = i39;
          HEAP32[i31 >> 2] = 6;
          if (i42 >>> 0 <= 6) {
            break;
          }
          i34 = 0 << 16 | 0 >>> 16 | i37;
          i37 = (HEAPU8[i43 + 6 | 0] | 0) << 16 | 0 >>> 16 | i39;
          i36 = i30 | 0;
          HEAP32[i36 >> 2] = i34;
          i35 = i30 + 4 | 0;
          HEAP32[i35 >> 2] = i37;
          HEAP32[i31 >> 2] = 7;
          if (i42 >>> 0 <= 7) {
            break;
          }
          i39 = (HEAPU8[i43 + 7 | 0] | 0) << 24 | 0 >>> 8 | i37;
          i36 = i30 | 0;
          HEAP32[i36 >> 2] = 0 << 24 | 0 >>> 8 | i34;
          i35 = i30 + 4 | 0;
          HEAP32[i35 >> 2] = i39;
          HEAP32[i31 >> 2] = 8;
        }
      } while (0);
      if ((_VP8LReadBits(i8, 8) & 255) << 24 >> 24 != 47) {
        i9 = 3;
        STACKTOP = i7;
        return i9 | 0;
      }
      i31 = _VP8LReadBits(i8, 14) | 0;
      i30 = (_VP8LReadBits(i8, 14) | 0) + 1 | 0;
      i32 = _VP8LReadBits(i8, 1) | 0;
      _VP8LReadBits(i8, 3) | 0;
      if ((i3 | 0) != 0) {
        HEAP32[i3 >> 2] = i31 + 1 | 0;
      }
      if ((i4 | 0) != 0) {
        HEAP32[i4 >> 2] = i30;
      }
      if ((i5 | 0) == 0) {
        break;
      }
      HEAP32[i5 >> 2] = i32;
    }
  } while (0);
  if (i13) {
    HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | (i28 | 0) != 0 & 1;
  }
  if (i26) {
    i9 = 0;
    STACKTOP = i7;
    return i9 | 0;
  }
  HEAP32[i6 >> 2] = i1;
  HEAP32[i6 + 4 >> 2] = i2;
  HEAP32[i6 + 12 >> 2] = i28;
  HEAP32[i6 + 16 >> 2] = i29;
  HEAP32[i6 + 20 >> 2] = i40;
  HEAP32[i6 + 24 >> 2] = i14;
  HEAP32[i6 + 28 >> 2] = i41;
  HEAP32[i6 + 8 >> 2] = i43 - i1 | 0;
  i9 = 0;
  STACKTOP = i7;
  return i9 | 0;
}



function _DecodeInto(i1, i2, i3) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, i150 = 0, i151 = 0, i152 = 0, i153 = 0, i154 = 0, i155 = 0, i156 = 0, i157 = 0, i158 = 0, i159 = 0, i160 = 0, i161 = 0, i162 = 0, i163 = 0, i164 = 0, i165 = 0, i166 = 0, i167 = 0, i168 = 0, i169 = 0, i170 = 0, i171 = 0, i172 = 0, i173 = 0, i174 = 0, i175 = 0, i176 = 0, i177 = 0, i178 = 0, i179 = 0, i180 = 0, i181 = 0, i182 = 0, i183 = 0, i184 = 0, i185 = 0, i186 = 0, i187 = 0, i188 = 0, i189 = 0, i190 = 0, i191 = 0, i192 = 0, i193 = 0, i194 = 0, i195 = 0, i196 = 0, i197 = 0, i198 = 0, i199 = 0, i200 = 0, i201 = 0, i202 = 0, i203 = 0, i204 = 0, i205 = 0, i206 = 0, i207 = 0, i208 = 0, i209 = 0, i210 = 0, i211 = 0, i212 = 0, i213 = 0, i214 = 0, i215 = 0, i216 = 0, i217 = 0, i218 = 0, i219 = 0, i220 = 0, i221 = 0, i222 = 0, i223 = 0, i224 = 0, i225 = 0, i226 = 0, i227 = 0, i228 = 0, i229 = 0, i230 = 0, i231 = 0, i232 = 0, i233 = 0, i234 = 0, i235 = 0, i236 = 0, i237 = 0, i238 = 0, i239 = 0, i240 = 0, i241 = 0, i242 = 0, i243 = 0, i244 = 0, i245 = 0, i246 = 0, i247 = 0, i248 = 0, i249 = 0, i250 = 0, i251 = 0, i252 = 0, i253 = 0, i254 = 0, i255 = 0, i256 = 0, i257 = 0, i258 = 0, i259 = 0, i260 = 0, i261 = 0, i262 = 0, i263 = 0, i264 = 0, i265 = 0, i266 = 0, i267 = 0, i268 = 0, i269 = 0, i270 = 0, i271 = 0, i272 = 0, i273 = 0, i274 = 0, i275 = 0, i276 = 0, i277 = 0, i278 = 0, i279 = 0, i280 = 0, i281 = 0, i282 = 0, i283 = 0;
  i4 = STACKTOP;
  STACKTOP = STACKTOP + 180 | 0;
  i5 = i4 | 0;
  i6 = i4 + 4 | 0;
  i7 = i4 + 8 | 0;
  i8 = i4 + 40 | 0;
  i9 = i4 + 148 | 0;
  i10 = i9 | 0;
  HEAP32[i10 >> 2] = i1;
  i11 = i9 + 4 | 0;
  HEAP32[i11 >> 2] = i2;
  i12 = _ParseHeadersInternal(i1, i2, 0, 0, 0, i9) | 0;
  if ((i12 | 0) != 0) {
    i13 = i12;
    STACKTOP = i4;
    return i13 | 0;
  }
  i12 = i8;
  HEAP32[i12 >> 2] = 0;
  HEAP32[i12 + 4 >> 2] = 0;
  HEAP32[i12 + 8 >> 2] = 0;
  HEAP32[i12 + 12 >> 2] = 0;
  HEAP32[i12 + 16 >> 2] = 0;
  HEAP32[i12 + 20 >> 2] = 0;
  HEAP32[i12 + 24 >> 2] = 0;
  HEAP32[i12 + 28 >> 2] = 0;
  HEAP32[i12 + 32 >> 2] = 0;
  HEAP32[i12 + 36 >> 2] = 0;
  HEAP32[i12 + 40 >> 2] = 0;
  HEAP32[i12 + 44 >> 2] = 0;
  HEAP32[i12 + 48 >> 2] = 0;
  HEAP32[i12 + 52 >> 2] = 0;
  HEAP32[i12 + 56 >> 2] = 0;
  HEAP32[i12 + 60 >> 2] = 0;
  HEAP32[i12 + 64 >> 2] = 0;
  HEAP32[i12 + 68 >> 2] = 0;
  HEAP32[i12 + 72 >> 2] = 0;
  HEAP32[i12 + 76 >> 2] = 0;
  HEAP32[i12 + 80 >> 2] = 0;
  HEAP32[i12 + 84 >> 2] = 0;
  HEAP32[i12 + 88 >> 2] = 0;
  HEAP32[i12 + 92 >> 2] = 0;
  HEAP32[i12 + 96 >> 2] = 0;
  HEAP32[i12 + 100 >> 2] = 0;
  HEAP32[i12 + 104 >> 2] = 0;
  i2 = HEAP32[i9 + 8 >> 2] | 0;
  i1 = i8 + 64 | 0;
  HEAP32[i1 >> 2] = (HEAP32[i10 >> 2] | 0) + i2 | 0;
  i10 = i8 + 60 | 0;
  HEAP32[i10 >> 2] = (HEAP32[i11 >> 2] | 0) - i2 | 0;
  HEAP32[i8 + 44 >> 2] = 8;
  i2 = i8 + 48 | 0;
  HEAP32[i2 >> 2] = 66;
  i11 = i8 + 52 | 0;
  HEAP32[i11 >> 2] = 108;
  HEAP32[i8 + 40 >> 2] = i3;
  if ((HEAP32[i9 + 28 >> 2] | 0) == 0) {
    i14 = _malloc(1828) | 0;
    if ((i14 | 0) == 0) {
      i13 = 1;
      STACKTOP = i4;
      return i13 | 0;
    }
    if ((HEAP32[i14 - 4 >> 2] & 3 | 0) != 0) {
      _memset(i14 | 0, 0, 1828);
    }
    i15 = i14;
    HEAP32[i15 >> 2] = 0;
    i16 = i14 + 8 | 0;
    HEAP32[i16 >> 2] = 5271088;
    i17 = i14 + 120 | 0;
    i18 = i14 + 4 | 0;
    HEAP32[i18 >> 2] = 0;
    i19 = i14 + 300 | 0;
    HEAP32[i17 >> 2] = 0;
    HEAP32[i17 + 4 >> 2] = 0;
    HEAP32[i17 + 8 >> 2] = 0;
    HEAP32[i17 + 12 >> 2] = 0;
    HEAP32[i17 + 16 >> 2] = 0;
    HEAP32[i19 >> 2] = 1;
    i20 = i14;
    i21 = i14 + 140 | 0;
    HEAP32[i21 >> 2] = 0;
    i22 = i14 + 1804 | 0;
    HEAP32[i22 >> 2] = HEAP32[i9 + 12 >> 2] | 0;
    HEAP32[i14 + 1808 >> 2] = HEAP32[i9 + 16 >> 2] | 0;
    do {
      if ((_VP8GetHeaders(i20, i8) | 0) == 0) {
        i23 = HEAP32[i15 >> 2] | 0;
      } else {
        i9 = _WebPAllocateDecBuffer(HEAP32[i8 >> 2] | 0, HEAP32[i8 + 4 >> 2] | 0, HEAP32[i3 + 20 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0;
        if ((i9 | 0) != 0) {
          i23 = i9;
          break;
        }
        do {
          if ((HEAP32[i18 >> 2] | 0) == 0) {
            if ((_VP8GetHeaders(i20, i8) | 0) == 0) {
              break;
            } else {
              i24 = 11;
              break;
            }
          } else {
            i24 = 11;
          }
        } while (0);
        if ((i24 | 0) == 11) {
          i9 = HEAP32[i2 >> 2] | 0;
          do {
            if ((i9 | 0) == 0) {
              i24 = 15;
            } else {
              if ((FUNCTION_TABLE_ii[i9 & 511](i8) | 0) != 0) {
                i24 = 15;
                break;
              }
              i25 = HEAP32[i15 >> 2] | 0;
              if ((i25 | 0) == 0) {
                HEAP32[i15 >> 2] = 6;
                HEAP32[i16 >> 2] = 5264312;
                HEAP32[i18 >> 2] = 0;
                i26 = 6;
              } else {
                i26 = i25;
              }
              i27 = (i26 | 0) == 0 & 1;
              break;
            }
          } while (0);
          if ((i24 | 0) == 15) {
            i9 = i14 + 1764 | 0;
            do {
              if ((HEAP32[i8 + 68 >> 2] | 0) == 0) {
                i25 = HEAP32[i9 >> 2] | 0;
                i28 = HEAPU8[i25 + 5247300 | 0] | 0;
                if ((i25 | 0) != 2) {
                  i29 = i25;
                  i30 = i28;
                  i24 = 19;
                  break;
                }
                HEAP32[i14 + 284 >> 2] = 0;
                HEAP32[i14 + 288 >> 2] = 0;
                i31 = 2;
                i32 = i28;
                break;
              } else {
                HEAP32[i9 >> 2] = 0;
                i29 = 0;
                i30 = 0;
                i24 = 19;
                break;
              }
            } while (0);
            do {
              if ((i24 | 0) == 19) {
                i28 = (HEAP32[i8 + 76 >> 2] | 0) - i30 >> 4;
                i25 = i14 + 284 | 0;
                HEAP32[i25 >> 2] = i28;
                i33 = (HEAP32[i8 + 84 >> 2] | 0) - i30 >> 4;
                i34 = i14 + 288 | 0;
                HEAP32[i34 >> 2] = i33;
                if ((i28 | 0) < 0) {
                  HEAP32[i25 >> 2] = 0;
                }
                if ((i33 | 0) >= 0) {
                  i31 = i29;
                  i32 = i30;
                  break;
                }
                HEAP32[i34 >> 2] = 0;
                i31 = i29;
                i32 = i30;
              }
            } while (0);
            i34 = i32 + 15 | 0;
            i33 = i34 + (HEAP32[i8 + 88 >> 2] | 0) >> 4;
            i25 = i14 + 296 | 0;
            HEAP32[i25 >> 2] = i33;
            i28 = i34 + (HEAP32[i8 + 80 >> 2] | 0) >> 4;
            i34 = i14 + 292 | 0;
            HEAP32[i34 >> 2] = i28;
            i35 = i14 + 276 | 0;
            i36 = HEAP32[i35 >> 2] | 0;
            if ((i28 | 0) > (i36 | 0)) {
              HEAP32[i34 >> 2] = i36;
            }
            i36 = i14 + 280 | 0;
            i34 = HEAP32[i36 >> 2] | 0;
            if ((i33 | 0) > (i34 | 0)) {
              HEAP32[i25 >> 2] = i34;
            }
            L45 : do {
              if ((i31 | 0) > 0) {
                i34 = i14 + 100 | 0;
                i33 = i14 + 56 | 0;
                i28 = i14 + 64 | 0;
                i37 = i14 + 60 | 0;
                i38 = i14 + 68 | 0;
                i39 = i14 + 84 | 0;
                i40 = i14 + 108 | 0;
                i41 = 0;
                while (1) {
                  do {
                    if ((HEAP32[i34 >> 2] | 0) == 0) {
                      i42 = HEAP32[i33 >> 2] | 0;
                    } else {
                      i43 = HEAP8[i41 + (i20 + 116) | 0] << 24 >> 24;
                      if ((HEAP32[i40 >> 2] | 0) != 0) {
                        i42 = i43;
                        break;
                      }
                      i42 = (HEAP32[i33 >> 2] | 0) + i43 | 0;
                    }
                  } while (0);
                  i43 = (HEAP32[i28 >> 2] | 0) == 0;
                  if (i43) {
                    i44 = i42;
                  } else {
                    i44 = (HEAP32[i38 >> 2] | 0) + i42 | 0;
                  }
                  if ((i44 | 0) < 0) {
                    i45 = 0;
                  } else {
                    i45 = (i44 | 0) > 63 ? 63 : i44;
                  }
                  i46 = i20 + 1772 + (i41 << 3) | 0;
                  i47 = HEAP32[i46 >> 2] & -64 | i45 & 63;
                  HEAP32[i46 >> 2] = i47;
                  i48 = HEAP32[i37 >> 2] | 0;
                  if ((i48 | 0) > 0) {
                    i49 = i45 >> ((i48 | 0) > 4 ? 2 : 1);
                    i50 = 9 - i48 | 0;
                    i51 = (i49 | 0) > (i50 | 0) ? i50 : i49;
                  } else {
                    i51 = i45;
                  }
                  HEAP32[i46 >> 2] = ((i51 | 0) < 1 ? 64 : i51 << 6 & 4032) | i47 & -8129;
                  if (i43) {
                    i52 = i42;
                  } else {
                    i52 = ((HEAP32[i38 >> 2] | 0) + i42 | 0) + (HEAP32[i39 >> 2] | 0) | 0;
                  }
                  if ((i52 | 0) < 0) {
                    i53 = 0;
                  } else {
                    i53 = (i52 | 0) > 63 ? 63 : i52;
                  }
                  i43 = i20 + 1772 + (i41 << 3) + 4 | 0;
                  i47 = HEAP32[i43 >> 2] & -64 | i53 & 63;
                  HEAP32[i43 >> 2] = i47;
                  i46 = HEAP32[i37 >> 2] | 0;
                  if ((i46 | 0) > 0) {
                    i49 = i53 >> ((i46 | 0) > 4 ? 2 : 1);
                    i50 = 9 - i46 | 0;
                    i54 = (i49 | 0) > (i50 | 0) ? i50 : i49;
                  } else {
                    i54 = i53;
                  }
                  HEAP32[i43 >> 2] = ((i54 | 0) < 1 ? 64 : i54 << 6 & 4032) | i47 & -8129;
                  i47 = i41 + 1 | 0;
                  if ((i47 | 0) == 4) {
                    break L45;
                  } else {
                    i41 = i47;
                  }
                }
              }
            } while (0);
            i41 = i14 + 144 | 0;
            HEAP32[i41 >> 2] = 0;
            i37 = HEAP32[i21 >> 2] | 0;
            if ((i37 | 0) == 0) {
              HEAP32[i14 + 148 >> 2] = 1;
              i55 = 1;
              i56 = HEAP32[i9 >> 2] | 0;
            } else {
              HEAP32[i14 + 136 >> 2] = 0;
              i39 = i17;
              if ((HEAP32[i39 >> 2] | 0) == 0) {
                HEAP32[i39 >> 2] = 1;
              }
              HEAP32[i14 + 128 >> 2] = i14;
              HEAP32[i14 + 132 >> 2] = i14 + 168 | 0;
              HEAP32[i14 + 124 >> 2] = 52;
              i39 = HEAP32[i9 >> 2] | 0;
              i38 = (i39 | 0) > 0 ? 3 : 2;
              HEAP32[i14 + 148 >> 2] = i38;
              i55 = i38;
              i56 = i39;
            }
            i39 = HEAP32[i35 >> 2] | 0;
            i38 = i39 << 2;
            i28 = i39 << 5;
            i33 = i38 + 4 | 0;
            if ((i56 | 0) > 0) {
              i57 = Math_imul((i37 | 0) != 0 ? 2 : 1, i38);
            } else {
              i57 = 0;
            }
            i37 = i55 << 4;
            i40 = Math_imul((((HEAPU8[i56 + 5247300 | 0] | 0) + i37 | 0) * 3 & -1) >>> 1, i28);
            if ((HEAP32[i22 >> 2] | 0) == 0) {
              i58 = 0;
              i59 = 0;
            } else {
              i34 = HEAPU16[i14 + 44 >> 1] | 0;
              i47 = 0;
              i43 = HEAPU16[i14 + 46 >> 1] | 0;
              i49 = 0;
              i58 = Math_min(Math_floor((+(i43 >>> 0) + +(i49 | 0) * 4294967296.0) * (+(i34 >>> 0) + +(i47 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
              i59 = ~~((+(i43 >>> 0) + +(i49 | 0) * 4294967296.0) * (+(i34 >>> 0) + +(i47 | 0) * 4294967296.0)) >>> 0;
            }
            i47 = i38;
            i34 = 0;
            i49 = i28;
            i28 = 0;
            i43 = i33;
            i50 = 0;
            i46 = i57;
            i48 = 0;
            i60 = i40;
            i61 = 0;
            i62 = 1631;
            i63 = 0;
            i64 = ~~(+(i49 >>> 0) + +(i28 | 0) * 4294967296.0 + (+(i62 >>> 0) + +(i63 | 0) * 4294967296.0)) >>> 0;
            i65 = Math_min(Math_floor((+(i49 >>> 0) + +(i28 | 0) * 4294967296.0 + (+(i62 >>> 0) + +(i63 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
            i63 = ~~(+(i64 >>> 0) + +(i65 | 0) * 4294967296.0 + (+(i47 >>> 0) + +(i34 | 0) * 4294967296.0)) >>> 0;
            i62 = Math_min(Math_floor((+(i64 >>> 0) + +(i65 | 0) * 4294967296.0 + (+(i47 >>> 0) + +(i34 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
            i34 = ~~(+(i63 >>> 0) + +(i62 | 0) * 4294967296.0 + (+(i43 >>> 0) + +(i50 | 0) * 4294967296.0)) >>> 0;
            i47 = Math_min(Math_floor((+(i63 >>> 0) + +(i62 | 0) * 4294967296.0 + (+(i43 >>> 0) + +(i50 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
            i50 = ~~(+(i34 >>> 0) + +(i47 | 0) * 4294967296.0 + (+(i46 >>> 0) + +(i48 | 0) * 4294967296.0)) >>> 0;
            i43 = Math_min(Math_floor((+(i34 >>> 0) + +(i47 | 0) * 4294967296.0 + (+(i46 >>> 0) + +(i48 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
            i48 = ~~(+(i50 >>> 0) + +(i43 | 0) * 4294967296.0 + (+(i60 >>> 0) + +(i61 | 0) * 4294967296.0)) >>> 0;
            i46 = Math_min(Math_floor((+(i50 >>> 0) + +(i43 | 0) * 4294967296.0 + (+(i60 >>> 0) + +(i61 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
            i61 = ~~(+(i48 >>> 0) + +(i46 | 0) * 4294967296.0 + (+(i59 >>> 0) + +(i58 | 0) * 4294967296.0)) >>> 0;
            i60 = Math_min(Math_floor((+(i48 >>> 0) + +(i46 | 0) * 4294967296.0 + (+(i59 >>> 0) + +(i58 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
            i46 = i61;
            L86 : do {
              if ((i61 | 0) == (i61 & -1 | 0) & (i60 | 0) == (i60 & 0 | 0)) {
                i48 = i14 + 1724 | 0;
                i43 = 0;
                i50 = i14 + 1720 | 0;
                i47 = HEAP32[i50 >> 2] | 0;
                L88 : do {
                  if (i60 >>> 0 > i43 >>> 0 | i60 >>> 0 == i43 >>> 0 & i61 >>> 0 > (HEAP32[i48 >> 2] | 0) >>> 0) {
                    _free(i47);
                    HEAP32[i48 >> 2] = 0;
                    do {
                      if ((i61 | 0) == 0 & (i60 | 0) == 0) {
                        i24 = 61;
                      } else {
                        i34 = 0;
                        i62 = 256;
                        i63 = ~~Math_floor((+(i34 >>> 0) + +(i62 >>> 0) * 4294967296.0) / (+(i61 >>> 0) + +(i60 >>> 0) * 4294967296.0)) >>> 0;
                        if (!((i63 | 0) == 0 & (Math_min(Math_floor(Math_floor((+(i34 >>> 0) + +(i62 >>> 0) * 4294967296.0) / (+(i61 >>> 0) + +(i60 >>> 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0 | 0) == 0)) {
                          i24 = 61;
                          break;
                        }
                        HEAP32[i50 >> 2] = 0;
                        break;
                      }
                    } while (0);
                    do {
                      if ((i24 | 0) == 61) {
                        i62 = _malloc(i46) | 0;
                        HEAP32[i50 >> 2] = i62;
                        if ((i62 | 0) == 0) {
                          break;
                        }
                        HEAP32[i48 >> 2] = i46;
                        i66 = i62;
                        break L88;
                      }
                    } while (0);
                    if ((HEAP32[i15 >> 2] | 0) != 0) {
                      i67 = 0;
                      break L86;
                    }
                    HEAP32[i15 >> 2] = 1;
                    HEAP32[i16 >> 2] = 5270944;
                    HEAP32[i18 >> 2] = 0;
                    i67 = 0;
                    break L86;
                  } else {
                    i66 = i47;
                  }
                } while (0);
                i47 = i14 + 1664 | 0;
                HEAP32[i47 >> 2] = i66;
                i48 = i14 + 1672 | 0;
                HEAP32[i48 >> 2] = i66 + i38 | 0;
                i50 = i39 << 4;
                i43 = i38 + i50 | 0;
                i62 = i14 + 1676 | 0;
                HEAP32[i62 >> 2] = i66 + i43 | 0;
                i34 = i39 << 3;
                i63 = i43 + i34 | 0;
                i43 = i14 + 1680 | 0;
                HEAP32[i43 >> 2] = i66 + i63 | 0;
                i65 = i63 + i34 | 0;
                i63 = i14 + 1684 | 0;
                HEAP32[i63 >> 2] = i66 + (i65 + 4 | 0) | 0;
                i64 = i65 + i33 | 0;
                if ((i57 | 0) == 0) {
                  i68 = 0;
                } else {
                  i68 = i66 + i64 | 0;
                }
                i28 = i14 + 1688 | 0;
                HEAP32[i28 >> 2] = i68;
                i49 = i14 + 152 | 0;
                HEAP32[i49 >> 2] = 0;
                i69 = i14 + 164 | 0;
                HEAP32[i69 >> 2] = i68;
                if ((HEAP32[i21 >> 2] | 0) != 0) {
                  HEAP32[i69 >> 2] = i68 + (i39 << 2) | 0;
                }
                i70 = i66 + ((i64 + 31 | 0) + i57 | 0) & -32;
                i64 = i14 + 1692 | 0;
                HEAP32[i64 >> 2] = i70;
                i71 = i14 + 1696 | 0;
                HEAP32[i71 >> 2] = i70 + 832 | 0;
                i72 = i14 + 1712 | 0;
                HEAP32[i72 >> 2] = i50;
                i73 = i14 + 1716 | 0;
                HEAP32[i73 >> 2] = i34;
                i74 = HEAPU8[5247300 + (HEAP32[i9 >> 2] | 0) | 0] | 0;
                i75 = Math_imul(i74, i50);
                i76 = i74 >>> 1;
                i74 = Math_imul(i76, i34);
                i77 = i75 + 1600 | 0;
                i75 = i14 + 1700 | 0;
                HEAP32[i75 >> 2] = i70 + i77 | 0;
                i78 = (i77 + Math_imul(i50, i37) | 0) + i74 | 0;
                i74 = i14 + 1704 | 0;
                HEAP32[i74 >> 2] = i70 + i78 | 0;
                i50 = i14 + 1708 | 0;
                HEAP32[i50 >> 2] = i70 + (i78 + Math_imul(i76 + (i55 << 3) | 0, i34) | 0) | 0;
                HEAP32[i41 >> 2] = 0;
                HEAP32[i14 + 1812 >> 2] = (i59 | 0) != 0 | (i58 | 0) != 0 ? i70 + (i40 + 1600 | 0) | 0 : 0;
                _memset(i66 + i65 | 0, 0, i33 | 0);
                _memset(HEAP32[i47 >> 2] | 0, 0, i38 | 0);
                HEAP32[i8 + 8 >> 2] = 0;
                HEAP32[i8 + 20 >> 2] = HEAP32[i75 >> 2] | 0;
                HEAP32[i8 + 24 >> 2] = HEAP32[i74 >> 2] | 0;
                HEAP32[i8 + 28 >> 2] = HEAP32[i50 >> 2] | 0;
                HEAP32[i8 + 32 >> 2] = HEAP32[i72 >> 2] | 0;
                HEAP32[i8 + 36 >> 2] = HEAP32[i73 >> 2] | 0;
                HEAP32[i8 + 104 >> 2] = 0;
                if ((HEAP32[1310784] | 0) == 0) {
                  i65 = -255;
                  while (1) {
                    i70 = (i65 | 0) < 0 ? -i65 | 0 : i65;
                    i34 = i65 + 255 | 0;
                    HEAP8[i34 + 5262404 | 0] = i70 & 255;
                    HEAP8[i34 + 5261892 | 0] = i70 >>> 1 & 127;
                    i70 = i65 + 1 | 0;
                    if ((i70 | 0) == 256) {
                      i79 = -1020;
                      break;
                    } else {
                      i65 = i70;
                    }
                  }
                  while (1) {
                    if ((i79 | 0) < -128) {
                      i80 = -128;
                    } else {
                      i80 = (i79 | 0) > 127 ? 127 : i79 & 255;
                    }
                    HEAP8[5243696 + (i79 + 1020 | 0) | 0] = i80;
                    i65 = i79 + 1 | 0;
                    if ((i65 | 0) == 1021) {
                      i81 = -112;
                      break;
                    } else {
                      i79 = i65;
                    }
                  }
                  while (1) {
                    if ((i81 | 0) < -16) {
                      i82 = -16;
                    } else {
                      i82 = (i81 | 0) > 15 ? 15 : i81 & 255;
                    }
                    HEAP8[5243468 + (i81 + 112 | 0) | 0] = i82;
                    i65 = i81 + 1 | 0;
                    if ((i65 | 0) == 113) {
                      i83 = -255;
                      break;
                    } else {
                      i81 = i65;
                    }
                  }
                  while (1) {
                    if ((i83 | 0) < 0) {
                      i84 = 0;
                    } else {
                      i84 = (i83 | 0) > 255 ? -1 : i83 & 255;
                    }
                    HEAP8[5260868 + (i83 + 255 | 0) | 0] = i84;
                    i65 = i83 + 1 | 0;
                    if ((i65 | 0) == 511) {
                      break;
                    } else {
                      i83 = i65;
                    }
                  }
                  HEAP32[1310784] = 1;
                }
                i65 = i14 + 1732 | 0;
                HEAP32[i65 >> 2] = 0;
                L125 : do {
                  if ((HEAP32[i25 >> 2] | 0) > 0) {
                    i70 = i14 + 1668 | 0;
                    i34 = i70;
                    i76 = i14 + 288 | 0;
                    i78 = i14 + 1768 | 0;
                    i77 = i14 + 1728 | 0;
                    i85 = i14 + 156 | 0;
                    i86 = i14 + 160 | 0;
                    i87 = i14 + 136 | 0;
                    i88 = i14 + 168 | 0;
                    i89 = i14 + 124 | 0;
                    i90 = i14 + 148 | 0;
                    i91 = i14 + 128 | 0;
                    i92 = i14 + 132 | 0;
                    i93 = i14 + 104 | 0;
                    i94 = i14 + 1656 | 0;
                    i95 = i14 + 24 | 0;
                    i96 = i14 + 32 | 0;
                    i97 = i14 + 12 | 0;
                    i98 = i14 + 16 | 0;
                    i99 = i14 + 28 | 0;
                    i100 = i14 + 20 | 0;
                    i101 = i14 + 1736 | 0;
                    i102 = i14 + 1737 | 0;
                    i103 = i14 + 1753 | 0;
                    i104 = i5;
                    i105 = i7;
                    i106 = i14 + 1754 | 0;
                    i107 = i14 + 863 | 0;
                    i108 = i7 | 0;
                    i109 = i14 + 599 | 0;
                    i110 = i7 + 24 | 0;
                    i111 = i7 + 8 | 0;
                    i112 = i7 + 16 | 0;
                    i113 = i7 + 2 | 0;
                    i114 = i7 + 26 | 0;
                    i115 = i7 + 10 | 0;
                    i116 = i7 + 18 | 0;
                    i117 = i7 + 4 | 0;
                    i118 = i7 + 28 | 0;
                    i119 = i7 + 12 | 0;
                    i120 = i7 + 20 | 0;
                    i121 = i7 + 6 | 0;
                    i122 = i7 + 30 | 0;
                    i123 = i7 + 14 | 0;
                    i124 = i7 + 22 | 0;
                    i125 = i5 | 0;
                    i126 = i6 | 0;
                    i127 = i6;
                    i128 = i5;
                    i129 = i128 + 1 | 0;
                    i130 = i128 + 2 | 0;
                    i131 = i128 + 3 | 0;
                    i132 = i14 + 1127 | 0;
                    i133 = i14 + 1760 | 0;
                    i134 = i14 + 1756 | 0;
                    i135 = i14 + 1391 | 0;
                    i136 = i14 + 1660 | 0;
                    i137 = i14 + 596 | 0;
                    i138 = i14 + 597 | 0;
                    i139 = i14 + 598 | 0;
                    i140 = 0;
                    L127 : while (1) {
                      i141 = (HEAP32[i19 >> 2] | 0) - 1 & i140;
                      i142 = i20 + 304 + (i141 * 24 & -1) | 0;
                      i143 = (HEAP32[i63 >> 2] | 0) - 4 | 0;
                      HEAP32[i143 >> 2] = HEAP32[i143 >> 2] & -33554432;
                      tempBigInt = 0;
                      HEAP8[i34] = tempBigInt & 255;
                      tempBigInt = tempBigInt >> 8;
                      HEAP8[i34 + 1 | 0] = tempBigInt & 255;
                      tempBigInt = tempBigInt >> 8;
                      HEAP8[i34 + 2 | 0] = tempBigInt & 255;
                      tempBigInt = tempBigInt >> 8;
                      HEAP8[i34 + 3 | 0] = tempBigInt & 255;
                      do {
                        if ((HEAP32[i9 >> 2] | 0) > 0) {
                          i143 = HEAP32[i65 >> 2] | 0;
                          if ((i143 | 0) < (HEAP32[i76 >> 2] | 0)) {
                            i144 = 0;
                            break;
                          }
                          i144 = (i143 | 0) <= (HEAP32[i25 >> 2] | 0);
                        } else {
                          i144 = 0;
                        }
                      } while (0);
                      HEAP32[i78 >> 2] = i144 & 1;
                      HEAP32[i77 >> 2] = 0;
                      L133 : do {
                        if ((HEAP32[i35 >> 2] | 0) > 0) {
                          i143 = i20 + 304 + (i141 * 24 & -1) + 8 | 0;
                          i145 = 0;
                          while (1) {
                            i146 = HEAP32[i63 >> 2] | 0;
                            i147 = i146 - 4 | 0;
                            i148 = i146 + (i145 << 2) | 0;
                            if ((HEAP32[i93 >> 2] | 0) != 0) {
                              i146 = HEAP32[i95 >> 2] | 0;
                              i149 = Math_imul(i146 >>> 8, HEAPU8[i137] | 0) | 255;
                              i150 = HEAP32[i96 >> 2] | 0;
                              do {
                                if ((i150 | 0) > 0) {
                                  i151 = HEAP32[i97 >> 2] | 0;
                                  i152 = i151 + 1 | 0;
                                  i153 = HEAP32[i98 >> 2] | 0;
                                  if (i152 >>> 0 <= i153 >>> 0) {
                                    i154 = HEAP8[i151] | 0;
                                    HEAP32[i97 >> 2] = i152;
                                    HEAP32[i99 >> 2] = (i154 & 255) << i150 | HEAP32[i99 >> 2];
                                    i154 = i150 - 8 | 0;
                                    HEAP32[i96 >> 2] = i154;
                                    i155 = i154;
                                    break;
                                  }
                                  if (i151 >>> 0 < i153 >>> 0) {
                                    HEAP32[i97 >> 2] = i152;
                                    HEAP32[i99 >> 2] = (HEAPU8[i151] | 0) << i150 | HEAP32[i99 >> 2];
                                    i151 = i150 - 8 | 0;
                                    HEAP32[i96 >> 2] = i151;
                                    i155 = i151;
                                    break;
                                  } else {
                                    HEAP32[i100 >> 2] = 1;
                                    i155 = i150;
                                    break;
                                  }
                                } else {
                                  i155 = i150;
                                }
                              } while (0);
                              i150 = HEAP32[i99 >> 2] | 0;
                              if (i150 >>> 0 > i149 >>> 0) {
                                i151 = i149 + 1 | 0;
                                i152 = i146 - i151 | 0;
                                HEAP32[i95 >> 2] = i152;
                                i153 = i150 - i151 | 0;
                                HEAP32[i99 >> 2] = i153;
                                i156 = 1;
                                i157 = i152;
                                i158 = i153;
                              } else {
                                HEAP32[i95 >> 2] = i149;
                                i156 = 0;
                                i157 = i149;
                                i158 = i150;
                              }
                              if (i157 >>> 0 < 32512) {
                                i150 = i157 >>> 8;
                                i153 = HEAPU8[i150 + 5246928 | 0] | 0;
                                i152 = HEAP32[5246416 + (i150 << 2) >> 2] | 0;
                                HEAP32[i95 >> 2] = i152;
                                i150 = i158 << i153;
                                HEAP32[i99 >> 2] = i150;
                                i151 = i153 + i155 | 0;
                                HEAP32[i96 >> 2] = i151;
                                i159 = i152;
                                i160 = i151;
                                i161 = i150;
                              } else {
                                i159 = i157;
                                i160 = i155;
                                i161 = i158;
                              }
                              do {
                                if ((i156 | 0) == 0) {
                                  i150 = Math_imul(i159 >>> 8, HEAPU8[i138] | 0) | 255;
                                  do {
                                    if ((i160 | 0) > 0) {
                                      i151 = HEAP32[i97 >> 2] | 0;
                                      i152 = i151 + 1 | 0;
                                      i153 = HEAP32[i98 >> 2] | 0;
                                      if (i152 >>> 0 <= i153 >>> 0) {
                                        i154 = HEAP8[i151] | 0;
                                        HEAP32[i97 >> 2] = i152;
                                        i162 = (i154 & 255) << i160 | i161;
                                        HEAP32[i99 >> 2] = i162;
                                        i154 = i160 - 8 | 0;
                                        HEAP32[i96 >> 2] = i154;
                                        i163 = i154;
                                        i164 = i162;
                                        break;
                                      }
                                      if (i151 >>> 0 < i153 >>> 0) {
                                        HEAP32[i97 >> 2] = i152;
                                        i152 = (HEAPU8[i151] | 0) << i160 | i161;
                                        HEAP32[i99 >> 2] = i152;
                                        i151 = i160 - 8 | 0;
                                        HEAP32[i96 >> 2] = i151;
                                        i163 = i151;
                                        i164 = i152;
                                        break;
                                      } else {
                                        HEAP32[i100 >> 2] = 1;
                                        i163 = i160;
                                        i164 = i161;
                                        break;
                                      }
                                    } else {
                                      i163 = i160;
                                      i164 = i161;
                                    }
                                  } while (0);
                                  if (i164 >>> 0 > i150 >>> 0) {
                                    i152 = i150 + 1 | 0;
                                    i151 = i159 - i152 | 0;
                                    HEAP32[i95 >> 2] = i151;
                                    i153 = i164 - i152 | 0;
                                    HEAP32[i99 >> 2] = i153;
                                    i165 = 1;
                                    i166 = i151;
                                    i167 = i153;
                                  } else {
                                    HEAP32[i95 >> 2] = i150;
                                    i165 = 0;
                                    i166 = i150;
                                    i167 = i164;
                                  }
                                  if (i166 >>> 0 >= 32512) {
                                    i168 = i165;
                                    break;
                                  }
                                  i153 = i166 >>> 8;
                                  i151 = HEAPU8[i153 + 5246928 | 0] | 0;
                                  HEAP32[i95 >> 2] = HEAP32[5246416 + (i153 << 2) >> 2] | 0;
                                  HEAP32[i99 >> 2] = i167 << i151;
                                  HEAP32[i96 >> 2] = i151 + i163 | 0;
                                  i168 = i165;
                                } else {
                                  i151 = Math_imul(i159 >>> 8, HEAPU8[i139] | 0) | 255;
                                  do {
                                    if ((i160 | 0) > 0) {
                                      i153 = HEAP32[i97 >> 2] | 0;
                                      i152 = i153 + 1 | 0;
                                      i162 = HEAP32[i98 >> 2] | 0;
                                      if (i152 >>> 0 <= i162 >>> 0) {
                                        i154 = HEAP8[i153] | 0;
                                        HEAP32[i97 >> 2] = i152;
                                        i169 = (i154 & 255) << i160 | i161;
                                        HEAP32[i99 >> 2] = i169;
                                        i154 = i160 - 8 | 0;
                                        HEAP32[i96 >> 2] = i154;
                                        i170 = i154;
                                        i171 = i169;
                                        break;
                                      }
                                      if (i153 >>> 0 < i162 >>> 0) {
                                        HEAP32[i97 >> 2] = i152;
                                        i152 = (HEAPU8[i153] | 0) << i160 | i161;
                                        HEAP32[i99 >> 2] = i152;
                                        i153 = i160 - 8 | 0;
                                        HEAP32[i96 >> 2] = i153;
                                        i170 = i153;
                                        i171 = i152;
                                        break;
                                      } else {
                                        HEAP32[i100 >> 2] = 1;
                                        i170 = i160;
                                        i171 = i161;
                                        break;
                                      }
                                    } else {
                                      i170 = i160;
                                      i171 = i161;
                                    }
                                  } while (0);
                                  if (i171 >>> 0 > i151 >>> 0) {
                                    i150 = i151 + 1 | 0;
                                    i152 = i159 - i150 | 0;
                                    HEAP32[i95 >> 2] = i152;
                                    i153 = i171 - i150 | 0;
                                    HEAP32[i99 >> 2] = i153;
                                    i172 = 3;
                                    i173 = i152;
                                    i174 = i153;
                                  } else {
                                    HEAP32[i95 >> 2] = i151;
                                    i172 = 2;
                                    i173 = i151;
                                    i174 = i171;
                                  }
                                  if (i173 >>> 0 >= 32512) {
                                    i168 = i172;
                                    break;
                                  }
                                  i153 = i173 >>> 8;
                                  i152 = HEAPU8[i153 + 5246928 | 0] | 0;
                                  HEAP32[i95 >> 2] = HEAP32[5246416 + (i153 << 2) >> 2] | 0;
                                  HEAP32[i99 >> 2] = i174 << i152;
                                  HEAP32[i96 >> 2] = i152 + i170 | 0;
                                  i168 = i172;
                                }
                              } while (0);
                              HEAP8[i106] = i168 & 255;
                            }
                            do {
                              if ((HEAP32[i94 >> 2] | 0) == 0) {
                                i175 = 0;
                              } else {
                                i149 = HEAP32[i95 >> 2] | 0;
                                i146 = Math_imul(i149 >>> 8, HEAPU8[i136] | 0) | 255;
                                i152 = HEAP32[i96 >> 2] | 0;
                                do {
                                  if ((i152 | 0) > 0) {
                                    i153 = HEAP32[i97 >> 2] | 0;
                                    i150 = i153 + 1 | 0;
                                    i162 = HEAP32[i98 >> 2] | 0;
                                    if (i150 >>> 0 <= i162 >>> 0) {
                                      i169 = HEAP8[i153] | 0;
                                      HEAP32[i97 >> 2] = i150;
                                      HEAP32[i99 >> 2] = (i169 & 255) << i152 | HEAP32[i99 >> 2];
                                      i169 = i152 - 8 | 0;
                                      HEAP32[i96 >> 2] = i169;
                                      i176 = i169;
                                      break;
                                    }
                                    if (i153 >>> 0 < i162 >>> 0) {
                                      HEAP32[i97 >> 2] = i150;
                                      HEAP32[i99 >> 2] = (HEAPU8[i153] | 0) << i152 | HEAP32[i99 >> 2];
                                      i153 = i152 - 8 | 0;
                                      HEAP32[i96 >> 2] = i153;
                                      i176 = i153;
                                      break;
                                    } else {
                                      HEAP32[i100 >> 2] = 1;
                                      i176 = i152;
                                      break;
                                    }
                                  } else {
                                    i176 = i152;
                                  }
                                } while (0);
                                i152 = HEAP32[i99 >> 2] | 0;
                                if (i152 >>> 0 > i146 >>> 0) {
                                  i151 = i146 + 1 | 0;
                                  i153 = i149 - i151 | 0;
                                  HEAP32[i95 >> 2] = i153;
                                  i150 = i152 - i151 | 0;
                                  HEAP32[i99 >> 2] = i150;
                                  i177 = 33554432;
                                  i178 = i153;
                                  i179 = i150;
                                } else {
                                  HEAP32[i95 >> 2] = i146;
                                  i177 = 0;
                                  i178 = i146;
                                  i179 = i152;
                                }
                                if (i178 >>> 0 >= 32512) {
                                  i175 = i177;
                                  break;
                                }
                                i152 = i178 >>> 8;
                                i150 = HEAPU8[i152 + 5246928 | 0] | 0;
                                HEAP32[i95 >> 2] = HEAP32[5246416 + (i152 << 2) >> 2] | 0;
                                HEAP32[i99 >> 2] = i179 << i150;
                                HEAP32[i96 >> 2] = i150 + i176 | 0;
                                i175 = i177;
                              }
                            } while (0);
                            i150 = i148;
                            HEAP32[i150 >> 2] = HEAP32[i150 >> 2] & -33554433 | i175;
                            i152 = HEAP32[i47 >> 2] | 0;
                            i153 = HEAP32[i77 >> 2] << 2;
                            i151 = i152 + i153 | 0;
                            i162 = HEAP32[i95 >> 2] | 0;
                            i169 = (i162 >>> 8) * 145 & -1 | 255;
                            i154 = HEAP32[i96 >> 2] | 0;
                            do {
                              if ((i154 | 0) > 0) {
                                i180 = HEAP32[i97 >> 2] | 0;
                                i181 = i180 + 1 | 0;
                                i182 = HEAP32[i98 >> 2] | 0;
                                if (i181 >>> 0 <= i182 >>> 0) {
                                  i183 = HEAP8[i180] | 0;
                                  HEAP32[i97 >> 2] = i181;
                                  HEAP32[i99 >> 2] = (i183 & 255) << i154 | HEAP32[i99 >> 2];
                                  i183 = i154 - 8 | 0;
                                  HEAP32[i96 >> 2] = i183;
                                  i184 = i183;
                                  break;
                                }
                                if (i180 >>> 0 < i182 >>> 0) {
                                  HEAP32[i97 >> 2] = i181;
                                  HEAP32[i99 >> 2] = (HEAPU8[i180] | 0) << i154 | HEAP32[i99 >> 2];
                                  i180 = i154 - 8 | 0;
                                  HEAP32[i96 >> 2] = i180;
                                  i184 = i180;
                                  break;
                                } else {
                                  HEAP32[i100 >> 2] = 1;
                                  i184 = i154;
                                  break;
                                }
                              } else {
                                i184 = i154;
                              }
                            } while (0);
                            i154 = HEAP32[i99 >> 2] | 0;
                            if (i154 >>> 0 > i169 >>> 0) {
                              i148 = i169 + 1 | 0;
                              i180 = i162 - i148 | 0;
                              HEAP32[i95 >> 2] = i180;
                              i181 = i154 - i148 | 0;
                              HEAP32[i99 >> 2] = i181;
                              i185 = 1;
                              i186 = i180;
                              i187 = i181;
                            } else {
                              HEAP32[i95 >> 2] = i169;
                              i185 = 0;
                              i186 = i169;
                              i187 = i154;
                            }
                            if (i186 >>> 0 < 32512) {
                              i154 = i186 >>> 8;
                              i181 = HEAPU8[i154 + 5246928 | 0] | 0;
                              i180 = HEAP32[5246416 + (i154 << 2) >> 2] | 0;
                              HEAP32[i95 >> 2] = i180;
                              i154 = i187 << i181;
                              HEAP32[i99 >> 2] = i154;
                              i148 = i181 + i184 | 0;
                              HEAP32[i96 >> 2] = i148;
                              i188 = i180;
                              i189 = i148;
                              i190 = i154;
                            } else {
                              i188 = i186;
                              i189 = i184;
                              i190 = i187;
                            }
                            HEAP8[i101] = (i185 ^ 1) & 255;
                            L221 : do {
                              if ((i185 | 0) == 0) {
                                i154 = 0;
                                i148 = i102;
                                while (1) {
                                  i180 = i154 + (i20 + 1668) | 0;
                                  i181 = HEAPU8[i180] | 0;
                                  i182 = 0;
                                  i183 = i148;
                                  while (1) {
                                    i191 = i152 + (i182 + i153 | 0) | 0;
                                    i192 = HEAPU8[i191] | 0;
                                    i193 = 0;
                                    i194 = HEAP32[i95 >> 2] | 0;
                                    i195 = HEAP32[i96 >> 2] | 0;
                                    while (1) {
                                      i196 = i193 << 1;
                                      i197 = Math_imul(i194 >>> 8, HEAPU8[5247692 + (i192 * 90 & -1) + (i181 * 9 & -1) + i193 | 0] | 0) | 255;
                                      do {
                                        if ((i195 | 0) > 0) {
                                          i198 = HEAP32[i97 >> 2] | 0;
                                          i199 = i198 + 1 | 0;
                                          i200 = HEAP32[i98 >> 2] | 0;
                                          if (i199 >>> 0 <= i200 >>> 0) {
                                            i201 = HEAP8[i198] | 0;
                                            HEAP32[i97 >> 2] = i199;
                                            HEAP32[i99 >> 2] = (i201 & 255) << i195 | HEAP32[i99 >> 2];
                                            i201 = i195 - 8 | 0;
                                            HEAP32[i96 >> 2] = i201;
                                            i202 = i201;
                                            break;
                                          }
                                          if (i198 >>> 0 < i200 >>> 0) {
                                            HEAP32[i97 >> 2] = i199;
                                            HEAP32[i99 >> 2] = (HEAPU8[i198] | 0) << i195 | HEAP32[i99 >> 2];
                                            i198 = i195 - 8 | 0;
                                            HEAP32[i96 >> 2] = i198;
                                            i202 = i198;
                                            break;
                                          } else {
                                            HEAP32[i100 >> 2] = 1;
                                            i202 = i195;
                                            break;
                                          }
                                        } else {
                                          i202 = i195;
                                        }
                                      } while (0);
                                      i198 = HEAP32[i99 >> 2] | 0;
                                      if (i198 >>> 0 > i197 >>> 0) {
                                        i199 = i197 + 1 | 0;
                                        i200 = i194 - i199 | 0;
                                        HEAP32[i95 >> 2] = i200;
                                        i201 = i198 - i199 | 0;
                                        HEAP32[i99 >> 2] = i201;
                                        i203 = 1;
                                        i204 = i200;
                                        i205 = i201;
                                      } else {
                                        HEAP32[i95 >> 2] = i197;
                                        i203 = 0;
                                        i204 = i197;
                                        i205 = i198;
                                      }
                                      if (i204 >>> 0 < 32512) {
                                        i198 = i204 >>> 8;
                                        i201 = HEAPU8[i198 + 5246928 | 0] | 0;
                                        i200 = HEAP32[5246416 + (i198 << 2) >> 2] | 0;
                                        HEAP32[i95 >> 2] = i200;
                                        HEAP32[i99 >> 2] = i205 << i201;
                                        i198 = i201 + i202 | 0;
                                        HEAP32[i96 >> 2] = i198;
                                        i206 = i200;
                                        i207 = i198;
                                      } else {
                                        i206 = i204;
                                        i207 = i202;
                                      }
                                      i198 = i203 | i196;
                                      i208 = HEAP8[i198 + 5246396 | 0] << 24 >> 24;
                                      if ((41706 >>> (i198 >>> 0) & 1 | 0) == 0) {
                                        break;
                                      } else {
                                        i193 = i208;
                                        i194 = i206;
                                        i195 = i207;
                                      }
                                    }
                                    i195 = -i208 | 0;
                                    i209 = i195 & 255;
                                    HEAP8[i191] = i209;
                                    HEAP8[i183] = i209;
                                    i194 = i182 + 1 | 0;
                                    if ((i194 | 0) == 4) {
                                      break;
                                    }
                                    i181 = i195;
                                    i182 = i194;
                                    i183 = i183 + 1 | 0;
                                  }
                                  HEAP8[i180] = i209;
                                  i183 = i154 + 1 | 0;
                                  if ((i183 | 0) == 4) {
                                    break L221;
                                  } else {
                                    i154 = i183;
                                    i148 = i148 + 4 | 0;
                                  }
                                }
                              } else {
                                i148 = (i188 >>> 8) * 156 & -1 | 255;
                                do {
                                  if ((i189 | 0) > 0) {
                                    i154 = HEAP32[i97 >> 2] | 0;
                                    i146 = i154 + 1 | 0;
                                    i149 = HEAP32[i98 >> 2] | 0;
                                    if (i146 >>> 0 <= i149 >>> 0) {
                                      i183 = HEAP8[i154] | 0;
                                      HEAP32[i97 >> 2] = i146;
                                      i182 = (i183 & 255) << i189 | i190;
                                      HEAP32[i99 >> 2] = i182;
                                      i183 = i189 - 8 | 0;
                                      HEAP32[i96 >> 2] = i183;
                                      i210 = i183;
                                      i211 = i182;
                                      break;
                                    }
                                    if (i154 >>> 0 < i149 >>> 0) {
                                      HEAP32[i97 >> 2] = i146;
                                      i146 = (HEAPU8[i154] | 0) << i189 | i190;
                                      HEAP32[i99 >> 2] = i146;
                                      i154 = i189 - 8 | 0;
                                      HEAP32[i96 >> 2] = i154;
                                      i210 = i154;
                                      i211 = i146;
                                      break;
                                    } else {
                                      HEAP32[i100 >> 2] = 1;
                                      i210 = i189;
                                      i211 = i190;
                                      break;
                                    }
                                  } else {
                                    i210 = i189;
                                    i211 = i190;
                                  }
                                } while (0);
                                if (i211 >>> 0 > i148 >>> 0) {
                                  i146 = i148 + 1 | 0;
                                  i154 = i188 - i146 | 0;
                                  HEAP32[i95 >> 2] = i154;
                                  i149 = i211 - i146 | 0;
                                  HEAP32[i99 >> 2] = i149;
                                  i212 = 1;
                                  i213 = i154;
                                  i214 = i149;
                                } else {
                                  HEAP32[i95 >> 2] = i148;
                                  i212 = 0;
                                  i213 = i148;
                                  i214 = i211;
                                }
                                if (i213 >>> 0 < 32512) {
                                  i149 = i213 >>> 8;
                                  i154 = HEAPU8[i149 + 5246928 | 0] | 0;
                                  i146 = HEAP32[5246416 + (i149 << 2) >> 2] | 0;
                                  HEAP32[i95 >> 2] = i146;
                                  i149 = i214 << i154;
                                  HEAP32[i99 >> 2] = i149;
                                  i182 = i154 + i210 | 0;
                                  HEAP32[i96 >> 2] = i182;
                                  i215 = i146;
                                  i216 = i182;
                                  i217 = i149;
                                } else {
                                  i215 = i213;
                                  i216 = i210;
                                  i217 = i214;
                                }
                                i149 = i215 >>> 8;
                                if ((i212 | 0) == 0) {
                                  i182 = i149 * 163 & -1 | 255;
                                  do {
                                    if ((i216 | 0) > 0) {
                                      i146 = HEAP32[i97 >> 2] | 0;
                                      i154 = i146 + 1 | 0;
                                      i183 = HEAP32[i98 >> 2] | 0;
                                      if (i154 >>> 0 <= i183 >>> 0) {
                                        i181 = HEAP8[i146] | 0;
                                        HEAP32[i97 >> 2] = i154;
                                        i194 = (i181 & 255) << i216 | i217;
                                        HEAP32[i99 >> 2] = i194;
                                        i181 = i216 - 8 | 0;
                                        HEAP32[i96 >> 2] = i181;
                                        i218 = i181;
                                        i219 = i194;
                                        break;
                                      }
                                      if (i146 >>> 0 < i183 >>> 0) {
                                        HEAP32[i97 >> 2] = i154;
                                        i154 = (HEAPU8[i146] | 0) << i216 | i217;
                                        HEAP32[i99 >> 2] = i154;
                                        i146 = i216 - 8 | 0;
                                        HEAP32[i96 >> 2] = i146;
                                        i218 = i146;
                                        i219 = i154;
                                        break;
                                      } else {
                                        HEAP32[i100 >> 2] = 1;
                                        i218 = i216;
                                        i219 = i217;
                                        break;
                                      }
                                    } else {
                                      i218 = i216;
                                      i219 = i217;
                                    }
                                  } while (0);
                                  if (i219 >>> 0 > i182 >>> 0) {
                                    i148 = i182 + 1 | 0;
                                    i154 = i215 - i148 | 0;
                                    HEAP32[i95 >> 2] = i154;
                                    i146 = i219 - i148 | 0;
                                    HEAP32[i99 >> 2] = i146;
                                    i220 = 1;
                                    i221 = i154;
                                    i222 = i146;
                                  } else {
                                    HEAP32[i95 >> 2] = i182;
                                    i220 = 0;
                                    i221 = i182;
                                    i222 = i219;
                                  }
                                  if (i221 >>> 0 < 32512) {
                                    i146 = i221 >>> 8;
                                    i154 = HEAPU8[i146 + 5246928 | 0] | 0;
                                    HEAP32[i95 >> 2] = HEAP32[5246416 + (i146 << 2) >> 2] | 0;
                                    HEAP32[i99 >> 2] = i222 << i154;
                                    HEAP32[i96 >> 2] = i154 + i218 | 0;
                                  }
                                  i223 = (i220 | 0) != 0 ? 2 : 0;
                                } else {
                                  i154 = i149 << 7 | 255;
                                  do {
                                    if ((i216 | 0) > 0) {
                                      i146 = HEAP32[i97 >> 2] | 0;
                                      i148 = i146 + 1 | 0;
                                      i183 = HEAP32[i98 >> 2] | 0;
                                      if (i148 >>> 0 <= i183 >>> 0) {
                                        i194 = HEAP8[i146] | 0;
                                        HEAP32[i97 >> 2] = i148;
                                        i181 = (i194 & 255) << i216 | i217;
                                        HEAP32[i99 >> 2] = i181;
                                        i194 = i216 - 8 | 0;
                                        HEAP32[i96 >> 2] = i194;
                                        i224 = i194;
                                        i225 = i181;
                                        break;
                                      }
                                      if (i146 >>> 0 < i183 >>> 0) {
                                        HEAP32[i97 >> 2] = i148;
                                        i148 = (HEAPU8[i146] | 0) << i216 | i217;
                                        HEAP32[i99 >> 2] = i148;
                                        i146 = i216 - 8 | 0;
                                        HEAP32[i96 >> 2] = i146;
                                        i224 = i146;
                                        i225 = i148;
                                        break;
                                      } else {
                                        HEAP32[i100 >> 2] = 1;
                                        i224 = i216;
                                        i225 = i217;
                                        break;
                                      }
                                    } else {
                                      i224 = i216;
                                      i225 = i217;
                                    }
                                  } while (0);
                                  if (i225 >>> 0 > i154 >>> 0) {
                                    i149 = i154 + 1 | 0;
                                    i182 = i215 - i149 | 0;
                                    HEAP32[i95 >> 2] = i182;
                                    i148 = i225 - i149 | 0;
                                    HEAP32[i99 >> 2] = i148;
                                    i226 = 1;
                                    i227 = i182;
                                    i228 = i148;
                                  } else {
                                    HEAP32[i95 >> 2] = i154;
                                    i226 = 0;
                                    i227 = i154;
                                    i228 = i225;
                                  }
                                  if (i227 >>> 0 < 32512) {
                                    i148 = i227 >>> 8;
                                    i182 = HEAPU8[i148 + 5246928 | 0] | 0;
                                    HEAP32[i95 >> 2] = HEAP32[5246416 + (i148 << 2) >> 2] | 0;
                                    HEAP32[i99 >> 2] = i228 << i182;
                                    HEAP32[i96 >> 2] = i182 + i224 | 0;
                                  }
                                  i223 = (i226 | 0) != 0 ? 1 : 3;
                                }
                                HEAP8[i102] = i223;
                                _memset(i151 | 0, i223 | 0, 4);
                                _memset(i70 | 0, i223 | 0, 4);
                              }
                            } while (0);
                            i151 = HEAP32[i95 >> 2] | 0;
                            i153 = (i151 >>> 8) * 142 & -1 | 255;
                            i152 = HEAP32[i96 >> 2] | 0;
                            do {
                              if ((i152 | 0) > 0) {
                                i169 = HEAP32[i97 >> 2] | 0;
                                i162 = i169 + 1 | 0;
                                i182 = HEAP32[i98 >> 2] | 0;
                                if (i162 >>> 0 <= i182 >>> 0) {
                                  i148 = HEAP8[i169] | 0;
                                  HEAP32[i97 >> 2] = i162;
                                  HEAP32[i99 >> 2] = (i148 & 255) << i152 | HEAP32[i99 >> 2];
                                  i148 = i152 - 8 | 0;
                                  HEAP32[i96 >> 2] = i148;
                                  i229 = i148;
                                  break;
                                }
                                if (i169 >>> 0 < i182 >>> 0) {
                                  HEAP32[i97 >> 2] = i162;
                                  HEAP32[i99 >> 2] = (HEAPU8[i169] | 0) << i152 | HEAP32[i99 >> 2];
                                  i169 = i152 - 8 | 0;
                                  HEAP32[i96 >> 2] = i169;
                                  i229 = i169;
                                  break;
                                } else {
                                  HEAP32[i100 >> 2] = 1;
                                  i229 = i152;
                                  break;
                                }
                              } else {
                                i229 = i152;
                              }
                            } while (0);
                            i152 = HEAP32[i99 >> 2] | 0;
                            if (i152 >>> 0 > i153 >>> 0) {
                              i169 = i153 + 1 | 0;
                              i162 = i151 - i169 | 0;
                              HEAP32[i95 >> 2] = i162;
                              i182 = i152 - i169 | 0;
                              HEAP32[i99 >> 2] = i182;
                              i230 = 1;
                              i231 = i162;
                              i232 = i182;
                            } else {
                              HEAP32[i95 >> 2] = i153;
                              i230 = 0;
                              i231 = i153;
                              i232 = i152;
                            }
                            if (i231 >>> 0 < 32512) {
                              i152 = i231 >>> 8;
                              i182 = HEAPU8[i152 + 5246928 | 0] | 0;
                              i162 = HEAP32[5246416 + (i152 << 2) >> 2] | 0;
                              HEAP32[i95 >> 2] = i162;
                              i152 = i232 << i182;
                              HEAP32[i99 >> 2] = i152;
                              i169 = i182 + i229 | 0;
                              HEAP32[i96 >> 2] = i169;
                              i233 = i162;
                              i234 = i169;
                              i235 = i152;
                            } else {
                              i233 = i231;
                              i234 = i229;
                              i235 = i232;
                            }
                            do {
                              if ((i230 | 0) == 0) {
                                i236 = 0;
                              } else {
                                i152 = (i233 >>> 8) * 114 & -1 | 255;
                                do {
                                  if ((i234 | 0) > 0) {
                                    i169 = HEAP32[i97 >> 2] | 0;
                                    i162 = i169 + 1 | 0;
                                    i182 = HEAP32[i98 >> 2] | 0;
                                    if (i162 >>> 0 <= i182 >>> 0) {
                                      i148 = HEAP8[i169] | 0;
                                      HEAP32[i97 >> 2] = i162;
                                      i149 = (i148 & 255) << i234 | i235;
                                      HEAP32[i99 >> 2] = i149;
                                      i148 = i234 - 8 | 0;
                                      HEAP32[i96 >> 2] = i148;
                                      i237 = i148;
                                      i238 = i149;
                                      break;
                                    }
                                    if (i169 >>> 0 < i182 >>> 0) {
                                      HEAP32[i97 >> 2] = i162;
                                      i162 = (HEAPU8[i169] | 0) << i234 | i235;
                                      HEAP32[i99 >> 2] = i162;
                                      i169 = i234 - 8 | 0;
                                      HEAP32[i96 >> 2] = i169;
                                      i237 = i169;
                                      i238 = i162;
                                      break;
                                    } else {
                                      HEAP32[i100 >> 2] = 1;
                                      i237 = i234;
                                      i238 = i235;
                                      break;
                                    }
                                  } else {
                                    i237 = i234;
                                    i238 = i235;
                                  }
                                } while (0);
                                if (i238 >>> 0 > i152 >>> 0) {
                                  i154 = i152 + 1 | 0;
                                  i162 = i233 - i154 | 0;
                                  HEAP32[i95 >> 2] = i162;
                                  i169 = i238 - i154 | 0;
                                  HEAP32[i99 >> 2] = i169;
                                  i239 = 1;
                                  i240 = i162;
                                  i241 = i169;
                                } else {
                                  HEAP32[i95 >> 2] = i152;
                                  i239 = 0;
                                  i240 = i152;
                                  i241 = i238;
                                }
                                if (i240 >>> 0 < 32512) {
                                  i169 = i240 >>> 8;
                                  i162 = HEAPU8[i169 + 5246928 | 0] | 0;
                                  i154 = HEAP32[5246416 + (i169 << 2) >> 2] | 0;
                                  HEAP32[i95 >> 2] = i154;
                                  i169 = i241 << i162;
                                  HEAP32[i99 >> 2] = i169;
                                  i182 = i162 + i237 | 0;
                                  HEAP32[i96 >> 2] = i182;
                                  i242 = i154;
                                  i243 = i182;
                                  i244 = i169;
                                } else {
                                  i242 = i240;
                                  i243 = i237;
                                  i244 = i241;
                                }
                                if ((i239 | 0) == 0) {
                                  i236 = 2;
                                  break;
                                }
                                i169 = (i242 >>> 8) * 183 & -1 | 255;
                                do {
                                  if ((i243 | 0) > 0) {
                                    i182 = HEAP32[i97 >> 2] | 0;
                                    i154 = i182 + 1 | 0;
                                    i162 = HEAP32[i98 >> 2] | 0;
                                    if (i154 >>> 0 <= i162 >>> 0) {
                                      i149 = HEAP8[i182] | 0;
                                      HEAP32[i97 >> 2] = i154;
                                      i148 = (i149 & 255) << i243 | i244;
                                      HEAP32[i99 >> 2] = i148;
                                      i149 = i243 - 8 | 0;
                                      HEAP32[i96 >> 2] = i149;
                                      i245 = i149;
                                      i246 = i148;
                                      break;
                                    }
                                    if (i182 >>> 0 < i162 >>> 0) {
                                      HEAP32[i97 >> 2] = i154;
                                      i154 = (HEAPU8[i182] | 0) << i243 | i244;
                                      HEAP32[i99 >> 2] = i154;
                                      i182 = i243 - 8 | 0;
                                      HEAP32[i96 >> 2] = i182;
                                      i245 = i182;
                                      i246 = i154;
                                      break;
                                    } else {
                                      HEAP32[i100 >> 2] = 1;
                                      i245 = i243;
                                      i246 = i244;
                                      break;
                                    }
                                  } else {
                                    i245 = i243;
                                    i246 = i244;
                                  }
                                } while (0);
                                if (i246 >>> 0 > i169 >>> 0) {
                                  i152 = i169 + 1 | 0;
                                  i154 = i242 - i152 | 0;
                                  HEAP32[i95 >> 2] = i154;
                                  i182 = i246 - i152 | 0;
                                  HEAP32[i99 >> 2] = i182;
                                  i247 = 1;
                                  i248 = i154;
                                  i249 = i182;
                                } else {
                                  HEAP32[i95 >> 2] = i169;
                                  i247 = 0;
                                  i248 = i169;
                                  i249 = i246;
                                }
                                if (i248 >>> 0 < 32512) {
                                  i182 = i248 >>> 8;
                                  i154 = HEAPU8[i182 + 5246928 | 0] | 0;
                                  HEAP32[i95 >> 2] = HEAP32[5246416 + (i182 << 2) >> 2] | 0;
                                  HEAP32[i99 >> 2] = i249 << i154;
                                  HEAP32[i96 >> 2] = i154 + i245 | 0;
                                }
                                i236 = (i247 | 0) != 0 ? 1 : 3;
                              }
                            } while (0);
                            HEAP8[i103] = i236;
                            if ((HEAP32[i100 >> 2] | 0) != 0) {
                              i24 = 258;
                              break L127;
                            }
                            i153 = HEAP32[i150 >> 2] | 0;
                            if ((i153 & 33554432 | 0) == 0) {
                              i151 = HEAPU8[i106] | 0;
                              i154 = HEAP32[i71 >> 2] | 0;
                              i182 = (HEAP32[i63 >> 2] | 0) - 4 | 0;
                              _memset(i154 | 0, 0, 768);
                              if (HEAP8[i101] << 24 >> 24 == 0) {
                                _memset(i105 | 0, 0, 32);
                                i152 = i182;
                                i162 = ((_GetCoeffs(i142, i107, ((HEAP32[i152 >> 2] | 0) >>> 24 & 1) + ((HEAP32[i150 >> 2] | 0) >>> 24 & 1) | 0, i20 + 500 + (i151 * 24 & -1) + 8 | 0, 0, i108) | 0) > 0 & 1) << 24;
                                HEAP32[i152 >> 2] = i162 | HEAP32[i152 >> 2] & -16777217;
                                HEAP32[i150 >> 2] = HEAP32[i150 >> 2] & -16777217 | i162;
                                i162 = HEAP16[i108 >> 1] << 16 >> 16;
                                i148 = HEAP16[i110 >> 1] << 16 >> 16;
                                i149 = i148 + i162 | 0;
                                i146 = HEAP16[i111 >> 1] << 16 >> 16;
                                i183 = HEAP16[i112 >> 1] << 16 >> 16;
                                i181 = i183 + i146 | 0;
                                i194 = i146 - i183 | 0;
                                i183 = i162 - i148 | 0;
                                i148 = HEAP16[i113 >> 1] << 16 >> 16;
                                i162 = HEAP16[i114 >> 1] << 16 >> 16;
                                i146 = i162 + i148 | 0;
                                i195 = HEAP16[i115 >> 1] << 16 >> 16;
                                i193 = HEAP16[i116 >> 1] << 16 >> 16;
                                i192 = i193 + i195 | 0;
                                i198 = i195 - i193 | 0;
                                i193 = i148 - i162 | 0;
                                i162 = i192 + i146 | 0;
                                i148 = i146 - i192 | 0;
                                i192 = i198 + i193 | 0;
                                i146 = i193 - i198 | 0;
                                i198 = HEAP16[i117 >> 1] << 16 >> 16;
                                i193 = HEAP16[i118 >> 1] << 16 >> 16;
                                i195 = i193 + i198 | 0;
                                i200 = HEAP16[i119 >> 1] << 16 >> 16;
                                i201 = HEAP16[i120 >> 1] << 16 >> 16;
                                i199 = i201 + i200 | 0;
                                i250 = i200 - i201 | 0;
                                i201 = i198 - i193 | 0;
                                i193 = i199 + i195 | 0;
                                i198 = i195 - i199 | 0;
                                i199 = i250 + i201 | 0;
                                i195 = i201 - i250 | 0;
                                i250 = HEAP16[i121 >> 1] << 16 >> 16;
                                i201 = HEAP16[i122 >> 1] << 16 >> 16;
                                i200 = i201 + i250 | 0;
                                i251 = HEAP16[i123 >> 1] << 16 >> 16;
                                i252 = HEAP16[i124 >> 1] << 16 >> 16;
                                i253 = i252 + i251 | 0;
                                i254 = i251 - i252 | 0;
                                i252 = i250 - i201 | 0;
                                i201 = i253 + i200 | 0;
                                i250 = i200 - i253 | 0;
                                i253 = i254 + i252 | 0;
                                i200 = i252 - i254 | 0;
                                i254 = (i181 + i149 | 0) + 3 | 0;
                                i252 = i254 + i201 | 0;
                                i251 = i193 + i162 | 0;
                                i255 = i162 - i193 | 0;
                                i193 = i254 - i201 | 0;
                                HEAP16[i154 >> 1] = (i251 + i252 | 0) >>> 3 & 65535;
                                HEAP16[i154 + 32 >> 1] = (i255 + i193 | 0) >>> 3 & 65535;
                                HEAP16[i154 + 64 >> 1] = (i252 - i251 | 0) >>> 3 & 65535;
                                HEAP16[i154 + 96 >> 1] = (i193 - i255 | 0) >>> 3 & 65535;
                                i255 = (i194 + i183 | 0) + 3 | 0;
                                i193 = i255 + i253 | 0;
                                i251 = i199 + i192 | 0;
                                i252 = i192 - i199 | 0;
                                i199 = i255 - i253 | 0;
                                HEAP16[i154 + 128 >> 1] = (i251 + i193 | 0) >>> 3 & 65535;
                                HEAP16[i154 + 160 >> 1] = (i252 + i199 | 0) >>> 3 & 65535;
                                HEAP16[i154 + 192 >> 1] = (i193 - i251 | 0) >>> 3 & 65535;
                                HEAP16[i154 + 224 >> 1] = (i199 - i252 | 0) >>> 3 & 65535;
                                i252 = (i149 - i181 | 0) + 3 | 0;
                                i181 = i252 + i250 | 0;
                                i149 = i198 + i148 | 0;
                                i199 = i148 - i198 | 0;
                                i198 = i252 - i250 | 0;
                                HEAP16[i154 + 256 >> 1] = (i149 + i181 | 0) >>> 3 & 65535;
                                HEAP16[i154 + 288 >> 1] = (i199 + i198 | 0) >>> 3 & 65535;
                                HEAP16[i154 + 320 >> 1] = (i181 - i149 | 0) >>> 3 & 65535;
                                HEAP16[i154 + 352 >> 1] = (i198 - i199 | 0) >>> 3 & 65535;
                                i199 = (i183 - i194 | 0) + 3 | 0;
                                i194 = i199 + i200 | 0;
                                i183 = i195 + i146 | 0;
                                i198 = i146 - i195 | 0;
                                i195 = i199 - i200 | 0;
                                HEAP16[i154 + 384 >> 1] = (i183 + i194 | 0) >>> 3 & 65535;
                                HEAP16[i154 + 416 >> 1] = (i198 + i195 | 0) >>> 3 & 65535;
                                HEAP16[i154 + 448 >> 1] = (i194 - i183 | 0) >>> 3 & 65535;
                                HEAP16[i154 + 480 >> 1] = (i195 - i198 | 0) >>> 3 & 65535;
                                i256 = 1;
                                i257 = i109;
                                i258 = i152;
                              } else {
                                i256 = 0;
                                i257 = i135;
                                i258 = i182;
                              }
                              i182 = i257;
                              i152 = HEAP32[5247056 + ((HEAP32[i150 >> 2] & 15) << 2) >> 2] | 0;
                              HEAP32[i125 >> 2] = i152;
                              HEAP32[i126 >> 2] = HEAP32[5247056 + ((HEAP32[i258 >> 2] & 15) << 2) >> 2] | 0;
                              i198 = i20 + 500 + (i151 * 24 & -1) | 0;
                              i195 = 0;
                              i183 = 0;
                              i194 = 0;
                              i200 = i154;
                              i199 = i152 & 255;
                              while (1) {
                                i152 = i127 + i194 | 0;
                                i146 = _GetCoeffs(i142, i182, (HEAPU8[i152] | 0) + (i199 & 255) | 0, i198, i256, i200) | 0;
                                i149 = (i146 | 0) > 0;
                                HEAP8[i104] = i149 & 1;
                                i181 = HEAP16[i200 >> 1] << 16 >> 16 != 0;
                                i250 = i200 + 32 | 0;
                                i252 = _GetCoeffs(i142, i182, (HEAPU8[i129] | 0) + (i149 & 1) | 0, i198, i256, i250) | 0;
                                i149 = (i252 | 0) > 0;
                                HEAP8[i129] = i149 & 1;
                                i148 = HEAP16[i250 >> 1] << 16 >> 16 != 0;
                                i250 = i200 + 64 | 0;
                                i251 = _GetCoeffs(i142, i182, (HEAPU8[i130] | 0) + (i149 & 1) | 0, i198, i256, i250) | 0;
                                i149 = (i251 | 0) > 0;
                                HEAP8[i130] = i149 & 1;
                                i193 = HEAP16[i250 >> 1] << 16 >> 16 != 0;
                                i250 = i200 + 96 | 0;
                                i253 = _GetCoeffs(i142, i182, (HEAPU8[i131] | 0) + (i149 & 1) | 0, i198, i256, i250) | 0;
                                i149 = (i253 | 0) > 0 & 1;
                                HEAP8[i131] = i149;
                                i255 = HEAP16[i250 >> 1] << 16 >> 16 != 0;
                                HEAP8[i152] = i149;
                                i149 = 24 - (i194 << 2) | 0;
                                i259 = (Math_imul((i148 & 1) << 8 | i181 & 1 | (i193 & 1) << 16 | (i255 & 1) << 24, 16909320) & -16777216) >>> (i149 >>> 0) | i183;
                                i260 = (Math_imul(((i252 | 0) > 1 & 1) << 8 | (i146 | 0) > 1 & 1 | ((i251 | 0) > 1 & 1) << 16 | ((i253 | 0) > 1 & 1) << 24, 16909320) & -16777216) >>> (i149 >>> 0) | i195;
                                i149 = i194 + 1 | 0;
                                if ((i149 | 0) == 4) {
                                  break;
                                }
                                i195 = i260;
                                i183 = i259;
                                i194 = i149;
                                i200 = i200 + 128 | 0;
                                i199 = HEAP8[i104] | 0;
                              }
                              i199 = HEAP32[i125 >> 2] | 0;
                              i200 = HEAP32[i126 >> 2] | 0;
                              i194 = HEAP32[5247056 + (((HEAP32[i150 >> 2] | 0) >>> 4 & 1048575) << 2) >> 2] | 0;
                              HEAP32[i125 >> 2] = i194;
                              HEAP32[i126 >> 2] = HEAP32[5247056 + (((HEAP32[i258 >> 2] | 0) >>> 4 & 1048575) << 2) >> 2] | 0;
                              i183 = i20 + 500 + (i151 * 24 & -1) + 16 | 0;
                              i195 = i260;
                              i198 = i259;
                              i182 = 0;
                              i149 = i154 + 512 | 0;
                              i253 = i194 & 255;
                              while (1) {
                                i194 = i128 + i182 | 0;
                                i251 = i127 + i182 | 0;
                                i146 = _GetCoeffs(i142, i132, (HEAPU8[i251] | 0) + (i253 & 255) | 0, i183, 0, i149) | 0;
                                i252 = (i146 | 0) > 0;
                                HEAP8[i194] = i252 & 1;
                                i255 = HEAP16[i149 >> 1] << 16 >> 16 != 0;
                                i193 = i149 + 32 | 0;
                                i181 = i182 | 1;
                                i148 = i128 + i181 | 0;
                                i152 = _GetCoeffs(i142, i132, (HEAPU8[i148] | 0) + (i252 & 1) | 0, i183, 0, i193) | 0;
                                i252 = (i152 | 0) > 0 & 1;
                                HEAP8[i148] = i252;
                                i250 = HEAP16[i193 >> 1] << 16 >> 16 != 0;
                                i193 = i149 + 64 | 0;
                                HEAP8[i251] = i252;
                                i252 = i127 + i181 | 0;
                                i181 = _GetCoeffs(i142, i132, (HEAPU8[i194] | 0) + (HEAPU8[i252] | 0) | 0, i183, 0, i193) | 0;
                                i251 = (i181 | 0) > 0;
                                HEAP8[i194] = i251 & 1;
                                i194 = HEAP16[i193 >> 1] << 16 >> 16 != 0;
                                i193 = i149 + 96 | 0;
                                i192 = _GetCoeffs(i142, i132, (HEAPU8[i148] | 0) + (i251 & 1) | 0, i183, 0, i193) | 0;
                                i251 = (i192 | 0) > 0 & 1;
                                HEAP8[i148] = i251;
                                i148 = HEAP16[i193 >> 1] << 16 >> 16 != 0;
                                HEAP8[i252] = i251;
                                i251 = 8 - (i182 << 1) | 0;
                                i261 = (Math_imul((i250 & 1) << 8 | i255 & 1 | (i194 & 1) << 16 | (i148 & 1) << 24, 16909320) & -16777216) >>> (i251 >>> 0) | i198;
                                i262 = (Math_imul(((i152 | 0) > 1 & 1) << 8 | (i146 | 0) > 1 & 1 | ((i181 | 0) > 1 & 1) << 16 | ((i192 | 0) > 1 & 1) << 24, 16909320) & -16777216) >>> (i251 >>> 0) | i195;
                                i251 = i182 + 2 | 0;
                                if ((i251 | 0) >= 4) {
                                  break;
                                }
                                i195 = i262;
                                i198 = i261;
                                i182 = i251;
                                i149 = i149 + 128 | 0;
                                i253 = HEAP8[i128 + i251 | 0] | 0;
                              }
                              i253 = Math_imul(i199, 16909320);
                              i149 = Math_imul(i200, 16909320) >>> 24;
                              i182 = Math_imul(HEAP32[i125 >> 2] | 0, 16909320) >>> 20 & 4080 | i253 >>> 24;
                              i253 = Math_imul(HEAP32[i126 >> 2] | 0, 16909320) >>> 20 & 4080 | i149;
                              HEAP32[i150 >> 2] = i182 | HEAP32[i150 >> 2] & -16777216;
                              HEAP32[i258 >> 2] = i253 | HEAP32[i258 >> 2] & -16777216;
                              HEAP32[i133 >> 2] = i262;
                              i253 = i261 | i262;
                              HEAP32[i134 >> 2] = i253;
                              HEAP32[i150 >> 2] = HEAP32[i150 >> 2] & -33554433 | ((i253 | 0) == 0 & 1) << 25;
                            } else {
                              HEAP32[i150 >> 2] = i153 & -16777216;
                              i253 = i147;
                              HEAP32[i253 >> 2] = HEAP32[i253 >> 2] & -16777216;
                              if (HEAP8[i101] << 24 >> 24 == 0) {
                                HEAP32[i150 >> 2] = HEAP32[i150 >> 2] & -16777217;
                                HEAP32[i253 >> 2] = HEAP32[i253 >> 2] & -16777217;
                              }
                              HEAP32[i134 >> 2] = 0;
                              HEAP32[i133 >> 2] = 0;
                            }
                            if ((HEAP32[i9 >> 2] | 0) > 0) {
                              i253 = (HEAP32[i28 >> 2] | 0) + (HEAP32[i77 >> 2] << 2) | 0;
                              i182 = HEAP32[i20 + 1772 + ((HEAPU8[i106] | 0) << 3) + ((HEAPU8[i101] | 0) << 2) >> 2] | 0;
                              HEAP32[i253 >> 2] = i182;
                              if ((HEAP32[i150 >> 2] & 33554432 | 0) == 0) {
                                i263 = 1;
                              } else {
                                i263 = HEAP8[i101] << 24 >> 24 != 0;
                              }
                              HEAP32[i253 >> 2] = i182 & -4097 | (i263 & 1) << 12;
                            }
                            if ((HEAP32[i143 >> 2] | 0) != 0) {
                              i24 = 258;
                              break L127;
                            }
                            i182 = HEAP32[i64 >> 2] | 0;
                            i253 = i182 + 40 | 0;
                            i149 = i182 + 584 | 0;
                            i198 = i182 + 600 | 0;
                            L380 : do {
                              if ((HEAP32[i77 >> 2] | 0) > 0) {
                                i195 = -1;
                                while (1) {
                                  i183 = i195 << 5;
                                  HEAP32[i182 + (i183 + 36 | 0) >> 2] = HEAP32[i182 + ((i183 | 12) + 40 | 0) >> 2] | 0;
                                  i183 = i195 + 1 | 0;
                                  if ((i183 | 0) == 16) {
                                    i264 = -1;
                                    break;
                                  } else {
                                    i195 = i183;
                                  }
                                }
                                while (1) {
                                  i195 = i264 << 5;
                                  i169 = i195 | 4;
                                  HEAP32[i182 + (i195 + 580 | 0) >> 2] = HEAP32[i182 + (i169 + 584 | 0) >> 2] | 0;
                                  HEAP32[i182 + (i195 + 596 | 0) >> 2] = HEAP32[i182 + (i169 + 600 | 0) >> 2] | 0;
                                  i169 = i264 + 1 | 0;
                                  if ((i169 | 0) == 8) {
                                    break L380;
                                  } else {
                                    i264 = i169;
                                  }
                                }
                              } else {
                                HEAP8[i182 + 39 | 0] = -127;
                                HEAP8[i182 + 71 | 0] = -127;
                                HEAP8[i182 + 103 | 0] = -127;
                                HEAP8[i182 + 135 | 0] = -127;
                                HEAP8[i182 + 167 | 0] = -127;
                                HEAP8[i182 + 199 | 0] = -127;
                                HEAP8[i182 + 231 | 0] = -127;
                                HEAP8[i182 + 263 | 0] = -127;
                                HEAP8[i182 + 295 | 0] = -127;
                                HEAP8[i182 + 327 | 0] = -127;
                                HEAP8[i182 + 359 | 0] = -127;
                                HEAP8[i182 + 391 | 0] = -127;
                                HEAP8[i182 + 423 | 0] = -127;
                                HEAP8[i182 + 455 | 0] = -127;
                                HEAP8[i182 + 487 | 0] = -127;
                                HEAP8[i182 + 519 | 0] = -127;
                                HEAP8[i182 + 583 | 0] = -127;
                                HEAP8[i182 + 599 | 0] = -127;
                                HEAP8[i182 + 615 | 0] = -127;
                                HEAP8[i182 + 631 | 0] = -127;
                                HEAP8[i182 + 647 | 0] = -127;
                                HEAP8[i182 + 663 | 0] = -127;
                                HEAP8[i182 + 679 | 0] = -127;
                                HEAP8[i182 + 695 | 0] = -127;
                                HEAP8[i182 + 711 | 0] = -127;
                                HEAP8[i182 + 727 | 0] = -127;
                                HEAP8[i182 + 743 | 0] = -127;
                                HEAP8[i182 + 759 | 0] = -127;
                                HEAP8[i182 + 775 | 0] = -127;
                                HEAP8[i182 + 791 | 0] = -127;
                                HEAP8[i182 + 807 | 0] = -127;
                                HEAP8[i182 + 823 | 0] = -127;
                                if ((HEAP32[i65 >> 2] | 0) <= 0) {
                                  break;
                                }
                                HEAP8[i182 + 567 | 0] = -127;
                                HEAP8[i182 + 551 | 0] = -127;
                                HEAP8[i182 + 7 | 0] = -127;
                              }
                            } while (0);
                            i150 = HEAP32[i48 >> 2] | 0;
                            i147 = HEAP32[i77 >> 2] | 0;
                            i153 = i147 << 4;
                            i200 = i150 + i153 | 0;
                            i199 = i147 << 3;
                            i169 = (HEAP32[i62 >> 2] | 0) + i199 | 0;
                            i195 = (HEAP32[i43 >> 2] | 0) + i199 | 0;
                            i199 = HEAP32[i71 >> 2] | 0;
                            do {
                              if ((HEAP32[i65 >> 2] | 0) > 0) {
                                i183 = i182 + 8 | 0;
                                HEAP8[i183] = HEAP8[i200] | 0;
                                HEAP8[i183 + 1 | 0] = HEAP8[i200 + 1 | 0] | 0;
                                HEAP8[i183 + 2 | 0] = HEAP8[i200 + 2 | 0] | 0;
                                HEAP8[i183 + 3 | 0] = HEAP8[i200 + 3 | 0] | 0;
                                HEAP8[i183 + 4 | 0] = HEAP8[i200 + 4 | 0] | 0;
                                HEAP8[i183 + 5 | 0] = HEAP8[i200 + 5 | 0] | 0;
                                HEAP8[i183 + 6 | 0] = HEAP8[i200 + 6 | 0] | 0;
                                HEAP8[i183 + 7 | 0] = HEAP8[i200 + 7 | 0] | 0;
                                HEAP8[i183 + 8 | 0] = HEAP8[i200 + 8 | 0] | 0;
                                HEAP8[i183 + 9 | 0] = HEAP8[i200 + 9 | 0] | 0;
                                HEAP8[i183 + 10 | 0] = HEAP8[i200 + 10 | 0] | 0;
                                HEAP8[i183 + 11 | 0] = HEAP8[i200 + 11 | 0] | 0;
                                HEAP8[i183 + 12 | 0] = HEAP8[i200 + 12 | 0] | 0;
                                HEAP8[i183 + 13 | 0] = HEAP8[i200 + 13 | 0] | 0;
                                HEAP8[i183 + 14 | 0] = HEAP8[i200 + 14 | 0] | 0;
                                HEAP8[i183 + 15 | 0] = HEAP8[i200 + 15 | 0] | 0;
                                i183 = i169;
                                i154 = i182 + 552 | 0;
                                i265 = i183 | 0;
                                i266 = i183 + 4 | 0;
                                i183 = HEAPU8[i266] | HEAPU8[i266 + 1 | 0] << 8 | HEAPU8[i266 + 2 | 0] << 16 | HEAPU8[i266 + 3 | 0] << 24 | 0;
                                i267 = i154 | 0;
                                tempBigInt = HEAPU8[i265] | HEAPU8[i265 + 1 | 0] << 8 | HEAPU8[i265 + 2 | 0] << 16 | HEAPU8[i265 + 3 | 0] << 24 | 0;
                                HEAP8[i267] = tempBigInt & 255;
                                tempBigInt = tempBigInt >> 8;
                                HEAP8[i267 + 1 | 0] = tempBigInt & 255;
                                tempBigInt = tempBigInt >> 8;
                                HEAP8[i267 + 2 | 0] = tempBigInt & 255;
                                tempBigInt = tempBigInt >> 8;
                                HEAP8[i267 + 3 | 0] = tempBigInt & 255;
                                i268 = i154 + 4 | 0;
                                tempBigInt = i183;
                                HEAP8[i268] = tempBigInt & 255;
                                tempBigInt = tempBigInt >> 8;
                                HEAP8[i268 + 1 | 0] = tempBigInt & 255;
                                tempBigInt = tempBigInt >> 8;
                                HEAP8[i268 + 2 | 0] = tempBigInt & 255;
                                tempBigInt = tempBigInt >> 8;
                                HEAP8[i268 + 3 | 0] = tempBigInt & 255;
                                i183 = i195;
                                i154 = i182 + 568 | 0;
                                i269 = i183 | 0;
                                i270 = i183 + 4 | 0;
                                i183 = HEAPU8[i270] | HEAPU8[i270 + 1 | 0] << 8 | HEAPU8[i270 + 2 | 0] << 16 | HEAPU8[i270 + 3 | 0] << 24 | 0;
                                i271 = i154 | 0;
                                tempBigInt = HEAPU8[i269] | HEAPU8[i269 + 1 | 0] << 8 | HEAPU8[i269 + 2 | 0] << 16 | HEAPU8[i269 + 3 | 0] << 24 | 0;
                                HEAP8[i271] = tempBigInt & 255;
                                tempBigInt = tempBigInt >> 8;
                                HEAP8[i271 + 1 | 0] = tempBigInt & 255;
                                tempBigInt = tempBigInt >> 8;
                                HEAP8[i271 + 2 | 0] = tempBigInt & 255;
                                tempBigInt = tempBigInt >> 8;
                                HEAP8[i271 + 3 | 0] = tempBigInt & 255;
                                i272 = i154 + 4 | 0;
                                tempBigInt = i183;
                                HEAP8[i272] = tempBigInt & 255;
                                tempBigInt = tempBigInt >> 8;
                                HEAP8[i272 + 1 | 0] = tempBigInt & 255;
                                tempBigInt = tempBigInt >> 8;
                                HEAP8[i272 + 2 | 0] = tempBigInt & 255;
                                tempBigInt = tempBigInt >> 8;
                                HEAP8[i272 + 3 | 0] = tempBigInt & 255;
                              } else {
                                if ((i147 | 0) != 0) {
                                  break;
                                }
                                _memset(i182 + 7 | 0, 127, 21);
                                i183 = i182 + 551 | 0;
                                HEAP8[i183] = 127;
                                HEAP8[i183 + 1 | 0] = 127;
                                HEAP8[i183 + 2 | 0] = 127;
                                HEAP8[i183 + 3 | 0] = 127;
                                HEAP8[i183 + 4 | 0] = 127;
                                HEAP8[i183 + 5 | 0] = 127;
                                HEAP8[i183 + 6 | 0] = 127;
                                HEAP8[i183 + 7 | 0] = 127;
                                HEAP8[i183 + 8 | 0] = 127;
                                i183 = i182 + 567 | 0;
                                HEAP8[i183] = 127;
                                HEAP8[i183 + 1 | 0] = 127;
                                HEAP8[i183 + 2 | 0] = 127;
                                HEAP8[i183 + 3 | 0] = 127;
                                HEAP8[i183 + 4 | 0] = 127;
                                HEAP8[i183 + 5 | 0] = 127;
                                HEAP8[i183 + 6 | 0] = 127;
                                HEAP8[i183 + 7 | 0] = 127;
                                HEAP8[i183 + 8 | 0] = 127;
                              }
                            } while (0);
                            L393 : do {
                              if (HEAP8[i101] << 24 >> 24 == 0) {
                                i147 = HEAP8[i102] | 0;
                                i183 = i147 & 255;
                                do {
                                  if (i147 << 24 >> 24 == 0) {
                                    i154 = (HEAP32[i65 >> 2] | 0) == 0;
                                    if ((HEAP32[i77 >> 2] | 0) == 0) {
                                      i273 = i154 ? 6 : 5;
                                      break;
                                    } else {
                                      i273 = i154 ? 4 : 0;
                                      break;
                                    }
                                  } else {
                                    i273 = i183;
                                  }
                                } while (0);
                                FUNCTION_TABLE_vi[HEAP32[5281108 + (i273 << 2) >> 2] & 511](i253);
                                if ((HEAP32[i134 >> 2] | 0) == 0) {
                                  break;
                                } else {
                                  i274 = 0;
                                }
                                while (1) {
                                  i183 = i182 + ((HEAP32[5247120 + (i274 << 2) >> 2] | 0) + 40 | 0) | 0;
                                  i147 = 1 << i274;
                                  do {
                                    if ((HEAP32[i133 >> 2] & i147 | 0) == 0) {
                                      if ((HEAP32[i134 >> 2] & i147 | 0) == 0) {
                                        break;
                                      }
                                      _TransformDC(HEAP16[i199 + (i274 << 4 << 1) >> 1] | 0, i183);
                                    } else {
                                      _TransformOne(i199 + (i274 << 4 << 1) | 0, i183);
                                    }
                                  } while (0);
                                  i183 = i274 + 1 | 0;
                                  if ((i183 | 0) == 16) {
                                    break L393;
                                  } else {
                                    i274 = i183;
                                  }
                                }
                              } else {
                                i183 = i182 + 24 | 0;
                                do {
                                  if ((HEAP32[i65 >> 2] | 0) > 0) {
                                    if ((HEAP32[i77 >> 2] | 0) < ((HEAP32[i35 >> 2] | 0) - 1 | 0)) {
                                      i147 = i150 + (i153 + 16 | 0) | 0;
                                      i180 = HEAPU8[i147] | HEAPU8[i147 + 1 | 0] << 8 | HEAPU8[i147 + 2 | 0] << 16 | HEAPU8[i147 + 3 | 0] << 24 | 0;
                                      tempBigInt = i180;
                                      HEAP8[i183] = tempBigInt & 255;
                                      tempBigInt = tempBigInt >> 8;
                                      HEAP8[i183 + 1 | 0] = tempBigInt & 255;
                                      tempBigInt = tempBigInt >> 8;
                                      HEAP8[i183 + 2 | 0] = tempBigInt & 255;
                                      tempBigInt = tempBigInt >> 8;
                                      HEAP8[i183 + 3 | 0] = tempBigInt & 255;
                                      i275 = i180;
                                      break;
                                    } else {
                                      i180 = Math_imul(HEAPU8[i150 + (i153 | 15) | 0] | 0, 16843009);
                                      HEAP32[i183 >> 2] = i180;
                                      i275 = i180;
                                      break;
                                    }
                                  } else {
                                    i275 = HEAP32[i183 >> 2] | 0;
                                  }
                                } while (0);
                                HEAP32[i182 + 408 >> 2] = i275;
                                HEAP32[i182 + 280 >> 2] = i275;
                                HEAP32[i182 + 152 >> 2] = i275;
                                i183 = 0;
                                while (1) {
                                  i180 = i182 + ((HEAP32[5247120 + (i183 << 2) >> 2] | 0) + 40 | 0) | 0;
                                  FUNCTION_TABLE_vi[HEAP32[5281068 + ((HEAPU8[i183 + (i20 + 1737) | 0] | 0) << 2) >> 2] & 511](i180);
                                  i147 = 1 << i183;
                                  do {
                                    if ((HEAP32[i133 >> 2] & i147 | 0) == 0) {
                                      if ((HEAP32[i134 >> 2] & i147 | 0) == 0) {
                                        break;
                                      }
                                      _TransformDC(HEAP16[i199 + (i183 << 4 << 1) >> 1] | 0, i180);
                                    } else {
                                      _TransformOne(i199 + (i183 << 4 << 1) | 0, i180);
                                    }
                                  } while (0);
                                  i180 = i183 + 1 | 0;
                                  if ((i180 | 0) == 16) {
                                    break L393;
                                  } else {
                                    i183 = i180;
                                  }
                                }
                              }
                            } while (0);
                            i199 = HEAP8[i103] | 0;
                            i153 = i199 & 255;
                            do {
                              if (i199 << 24 >> 24 == 0) {
                                i150 = (HEAP32[i65 >> 2] | 0) == 0;
                                if ((HEAP32[i77 >> 2] | 0) == 0) {
                                  i276 = i150 ? 6 : 5;
                                  break;
                                } else {
                                  i276 = i150 ? 4 : 0;
                                  break;
                                }
                              } else {
                                i276 = i153;
                              }
                            } while (0);
                            i153 = HEAP32[5281136 + (i276 << 2) >> 2] | 0;
                            FUNCTION_TABLE_vi[i153 & 511](i149);
                            FUNCTION_TABLE_vi[i153 & 511](i198);
                            do {
                              if ((HEAP32[i134 >> 2] & 983040 | 0) != 0) {
                                i153 = HEAP32[i71 >> 2] | 0;
                                i199 = i153 + 512 | 0;
                                if ((HEAP32[i133 >> 2] & 983040 | 0) == 0) {
                                  _TransformDCUV(i199, i149);
                                  break;
                                } else {
                                  _TransformOne(i199, i149);
                                  _TransformOne(i153 + 544 | 0, i182 + 588 | 0);
                                  _TransformOne(i153 + 576 | 0, i182 + 712 | 0);
                                  _TransformOne(i153 + 608 | 0, i182 + 716 | 0);
                                  break;
                                }
                              }
                            } while (0);
                            do {
                              if ((HEAP32[i134 >> 2] & 15728640 | 0) != 0) {
                                i149 = HEAP32[i71 >> 2] | 0;
                                i153 = i149 + 640 | 0;
                                if ((HEAP32[i133 >> 2] & 15728640 | 0) == 0) {
                                  _TransformDCUV(i153, i198);
                                  break;
                                } else {
                                  _TransformOne(i153, i198);
                                  _TransformOne(i149 + 672 | 0, i182 + 604 | 0);
                                  _TransformOne(i149 + 704 | 0, i182 + 728 | 0);
                                  _TransformOne(i149 + 736 | 0, i182 + 732 | 0);
                                  break;
                                }
                              }
                            } while (0);
                            if ((HEAP32[i65 >> 2] | 0) < ((HEAP32[i36 >> 2] | 0) - 1 | 0)) {
                              i198 = i182 + 520 | 0;
                              HEAP8[i200] = HEAP8[i198] | 0;
                              HEAP8[i200 + 1 | 0] = HEAP8[i198 + 1 | 0] | 0;
                              HEAP8[i200 + 2 | 0] = HEAP8[i198 + 2 | 0] | 0;
                              HEAP8[i200 + 3 | 0] = HEAP8[i198 + 3 | 0] | 0;
                              HEAP8[i200 + 4 | 0] = HEAP8[i198 + 4 | 0] | 0;
                              HEAP8[i200 + 5 | 0] = HEAP8[i198 + 5 | 0] | 0;
                              HEAP8[i200 + 6 | 0] = HEAP8[i198 + 6 | 0] | 0;
                              HEAP8[i200 + 7 | 0] = HEAP8[i198 + 7 | 0] | 0;
                              HEAP8[i200 + 8 | 0] = HEAP8[i198 + 8 | 0] | 0;
                              HEAP8[i200 + 9 | 0] = HEAP8[i198 + 9 | 0] | 0;
                              HEAP8[i200 + 10 | 0] = HEAP8[i198 + 10 | 0] | 0;
                              HEAP8[i200 + 11 | 0] = HEAP8[i198 + 11 | 0] | 0;
                              HEAP8[i200 + 12 | 0] = HEAP8[i198 + 12 | 0] | 0;
                              HEAP8[i200 + 13 | 0] = HEAP8[i198 + 13 | 0] | 0;
                              HEAP8[i200 + 14 | 0] = HEAP8[i198 + 14 | 0] | 0;
                              HEAP8[i200 + 15 | 0] = HEAP8[i198 + 15 | 0] | 0;
                              i198 = i182 + 808 | 0;
                              i149 = i169;
                              i265 = i198 | 0;
                              i266 = i198 + 4 | 0;
                              i198 = HEAPU8[i266] | HEAPU8[i266 + 1 | 0] << 8 | HEAPU8[i266 + 2 | 0] << 16 | HEAPU8[i266 + 3 | 0] << 24 | 0;
                              i267 = i149 | 0;
                              tempBigInt = HEAPU8[i265] | HEAPU8[i265 + 1 | 0] << 8 | HEAPU8[i265 + 2 | 0] << 16 | HEAPU8[i265 + 3 | 0] << 24 | 0;
                              HEAP8[i267] = tempBigInt & 255;
                              tempBigInt = tempBigInt >> 8;
                              HEAP8[i267 + 1 | 0] = tempBigInt & 255;
                              tempBigInt = tempBigInt >> 8;
                              HEAP8[i267 + 2 | 0] = tempBigInt & 255;
                              tempBigInt = tempBigInt >> 8;
                              HEAP8[i267 + 3 | 0] = tempBigInt & 255;
                              i268 = i149 + 4 | 0;
                              tempBigInt = i198;
                              HEAP8[i268] = tempBigInt & 255;
                              tempBigInt = tempBigInt >> 8;
                              HEAP8[i268 + 1 | 0] = tempBigInt & 255;
                              tempBigInt = tempBigInt >> 8;
                              HEAP8[i268 + 2 | 0] = tempBigInt & 255;
                              tempBigInt = tempBigInt >> 8;
                              HEAP8[i268 + 3 | 0] = tempBigInt & 255;
                              i198 = i182 + 824 | 0;
                              i149 = i195;
                              i269 = i198 | 0;
                              i270 = i198 + 4 | 0;
                              i198 = HEAPU8[i270] | HEAPU8[i270 + 1 | 0] << 8 | HEAPU8[i270 + 2 | 0] << 16 | HEAPU8[i270 + 3 | 0] << 24 | 0;
                              i271 = i149 | 0;
                              tempBigInt = HEAPU8[i269] | HEAPU8[i269 + 1 | 0] << 8 | HEAPU8[i269 + 2 | 0] << 16 | HEAPU8[i269 + 3 | 0] << 24 | 0;
                              HEAP8[i271] = tempBigInt & 255;
                              tempBigInt = tempBigInt >> 8;
                              HEAP8[i271 + 1 | 0] = tempBigInt & 255;
                              tempBigInt = tempBigInt >> 8;
                              HEAP8[i271 + 2 | 0] = tempBigInt & 255;
                              tempBigInt = tempBigInt >> 8;
                              HEAP8[i271 + 3 | 0] = tempBigInt & 255;
                              i272 = i149 + 4 | 0;
                              tempBigInt = i198;
                              HEAP8[i272] = tempBigInt & 255;
                              tempBigInt = tempBigInt >> 8;
                              HEAP8[i272 + 1 | 0] = tempBigInt & 255;
                              tempBigInt = tempBigInt >> 8;
                              HEAP8[i272 + 2 | 0] = tempBigInt & 255;
                              tempBigInt = tempBigInt >> 8;
                              HEAP8[i272 + 3 | 0] = tempBigInt & 255;
                            }
                            i198 = HEAP32[i41 >> 2] | 0;
                            i149 = HEAP32[i72 >> 2] | 0;
                            i153 = Math_imul(i149, i198);
                            i199 = HEAP32[i73 >> 2] | 0;
                            i150 = HEAP32[i75 >> 2] | 0;
                            i253 = HEAP32[i77 >> 2] | 0;
                            i183 = HEAP32[i74 >> 2] | 0;
                            i180 = i253 << 3;
                            i147 = HEAP32[i50 >> 2] | 0;
                            i154 = i253 + i153 << 4;
                            i153 = 0;
                            i253 = i149;
                            while (1) {
                              i149 = i150 + (i154 + Math_imul(i253, i153) | 0) | 0;
                              i151 = i182 + ((i153 << 5) + 40 | 0) | 0;
                              HEAP8[i149] = HEAP8[i151] | 0;
                              HEAP8[i149 + 1 | 0] = HEAP8[i151 + 1 | 0] | 0;
                              HEAP8[i149 + 2 | 0] = HEAP8[i151 + 2 | 0] | 0;
                              HEAP8[i149 + 3 | 0] = HEAP8[i151 + 3 | 0] | 0;
                              HEAP8[i149 + 4 | 0] = HEAP8[i151 + 4 | 0] | 0;
                              HEAP8[i149 + 5 | 0] = HEAP8[i151 + 5 | 0] | 0;
                              HEAP8[i149 + 6 | 0] = HEAP8[i151 + 6 | 0] | 0;
                              HEAP8[i149 + 7 | 0] = HEAP8[i151 + 7 | 0] | 0;
                              HEAP8[i149 + 8 | 0] = HEAP8[i151 + 8 | 0] | 0;
                              HEAP8[i149 + 9 | 0] = HEAP8[i151 + 9 | 0] | 0;
                              HEAP8[i149 + 10 | 0] = HEAP8[i151 + 10 | 0] | 0;
                              HEAP8[i149 + 11 | 0] = HEAP8[i151 + 11 | 0] | 0;
                              HEAP8[i149 + 12 | 0] = HEAP8[i151 + 12 | 0] | 0;
                              HEAP8[i149 + 13 | 0] = HEAP8[i151 + 13 | 0] | 0;
                              HEAP8[i149 + 14 | 0] = HEAP8[i151 + 14 | 0] | 0;
                              HEAP8[i149 + 15 | 0] = HEAP8[i151 + 15 | 0] | 0;
                              i151 = i153 + 1 | 0;
                              if ((i151 | 0) == 16) {
                                break;
                              }
                              i153 = i151;
                              i253 = HEAP32[i72 >> 2] | 0;
                            }
                            i253 = i180 + Math_imul(i198 << 3, i199) | 0;
                            i153 = 0;
                            while (1) {
                              i154 = i153 << 5;
                              i150 = i182 + (i154 + 584 | 0) | 0;
                              i195 = i183 + (Math_imul(HEAP32[i73 >> 2] | 0, i153) + i253 | 0) | 0;
                              i169 = i150 | 0;
                              i200 = i150 + 4 | 0;
                              i150 = HEAPU8[i200] | HEAPU8[i200 + 1 | 0] << 8 | HEAPU8[i200 + 2 | 0] << 16 | HEAPU8[i200 + 3 | 0] << 24 | 0;
                              i200 = i195 | 0;
                              tempBigInt = HEAPU8[i169] | HEAPU8[i169 + 1 | 0] << 8 | HEAPU8[i169 + 2 | 0] << 16 | HEAPU8[i169 + 3 | 0] << 24 | 0;
                              HEAP8[i200] = tempBigInt & 255;
                              tempBigInt = tempBigInt >> 8;
                              HEAP8[i200 + 1 | 0] = tempBigInt & 255;
                              tempBigInt = tempBigInt >> 8;
                              HEAP8[i200 + 2 | 0] = tempBigInt & 255;
                              tempBigInt = tempBigInt >> 8;
                              HEAP8[i200 + 3 | 0] = tempBigInt & 255;
                              i200 = i195 + 4 | 0;
                              tempBigInt = i150;
                              HEAP8[i200] = tempBigInt & 255;
                              tempBigInt = tempBigInt >> 8;
                              HEAP8[i200 + 1 | 0] = tempBigInt & 255;
                              tempBigInt = tempBigInt >> 8;
                              HEAP8[i200 + 2 | 0] = tempBigInt & 255;
                              tempBigInt = tempBigInt >> 8;
                              HEAP8[i200 + 3 | 0] = tempBigInt & 255;
                              i200 = i182 + (i154 + 600 | 0) | 0;
                              i154 = i147 + (Math_imul(HEAP32[i73 >> 2] | 0, i153) + i253 | 0) | 0;
                              i150 = i200 | 0;
                              i195 = i200 + 4 | 0;
                              i200 = HEAPU8[i195] | HEAPU8[i195 + 1 | 0] << 8 | HEAPU8[i195 + 2 | 0] << 16 | HEAPU8[i195 + 3 | 0] << 24 | 0;
                              i195 = i154 | 0;
                              tempBigInt = HEAPU8[i150] | HEAPU8[i150 + 1 | 0] << 8 | HEAPU8[i150 + 2 | 0] << 16 | HEAPU8[i150 + 3 | 0] << 24 | 0;
                              HEAP8[i195] = tempBigInt & 255;
                              tempBigInt = tempBigInt >> 8;
                              HEAP8[i195 + 1 | 0] = tempBigInt & 255;
                              tempBigInt = tempBigInt >> 8;
                              HEAP8[i195 + 2 | 0] = tempBigInt & 255;
                              tempBigInt = tempBigInt >> 8;
                              HEAP8[i195 + 3 | 0] = tempBigInt & 255;
                              i195 = i154 + 4 | 0;
                              tempBigInt = i200;
                              HEAP8[i195] = tempBigInt & 255;
                              tempBigInt = tempBigInt >> 8;
                              HEAP8[i195 + 1 | 0] = tempBigInt & 255;
                              tempBigInt = tempBigInt >> 8;
                              HEAP8[i195 + 2 | 0] = tempBigInt & 255;
                              tempBigInt = tempBigInt >> 8;
                              HEAP8[i195 + 3 | 0] = tempBigInt & 255;
                              i195 = i153 + 1 | 0;
                              if ((i195 | 0) == 8) {
                                break;
                              } else {
                                i153 = i195;
                              }
                            }
                            i153 = (HEAP32[i77 >> 2] | 0) + 1 | 0;
                            HEAP32[i77 >> 2] = i153;
                            if ((i153 | 0) < (HEAP32[i35 >> 2] | 0)) {
                              i145 = i153;
                            } else {
                              break L133;
                            }
                          }
                        }
                      } while (0);
                      do {
                        if ((HEAP32[i21 >> 2] | 0) == 0) {
                          HEAP32[i85 >> 2] = HEAP32[i65 >> 2] | 0;
                          HEAP32[i86 >> 2] = HEAP32[i78 >> 2] | 0;
                          i277 = _FinishRow(i20, i8) | 0;
                        } else {
                          i142 = (HEAP32[i87 >> 2] | 0) == 0;
                          i141 = i142 & 1;
                          if (!i142) {
                            i24 = 321;
                            break L127;
                          }
                          HEAP32[i88 >> 2] = HEAP32[i12 >> 2] | 0;
                          HEAP32[i88 + 4 >> 2] = HEAP32[i12 + 4 >> 2] | 0;
                          HEAP32[i88 + 8 >> 2] = HEAP32[i12 + 8 >> 2] | 0;
                          HEAP32[i88 + 12 >> 2] = HEAP32[i12 + 12 >> 2] | 0;
                          HEAP32[i88 + 16 >> 2] = HEAP32[i12 + 16 >> 2] | 0;
                          HEAP32[i88 + 20 >> 2] = HEAP32[i12 + 20 >> 2] | 0;
                          HEAP32[i88 + 24 >> 2] = HEAP32[i12 + 24 >> 2] | 0;
                          HEAP32[i88 + 28 >> 2] = HEAP32[i12 + 28 >> 2] | 0;
                          HEAP32[i88 + 32 >> 2] = HEAP32[i12 + 32 >> 2] | 0;
                          HEAP32[i88 + 36 >> 2] = HEAP32[i12 + 36 >> 2] | 0;
                          HEAP32[i88 + 40 >> 2] = HEAP32[i12 + 40 >> 2] | 0;
                          HEAP32[i88 + 44 >> 2] = HEAP32[i12 + 44 >> 2] | 0;
                          HEAP32[i88 + 48 >> 2] = HEAP32[i12 + 48 >> 2] | 0;
                          HEAP32[i88 + 52 >> 2] = HEAP32[i12 + 52 >> 2] | 0;
                          HEAP32[i88 + 56 >> 2] = HEAP32[i12 + 56 >> 2] | 0;
                          HEAP32[i88 + 60 >> 2] = HEAP32[i12 + 60 >> 2] | 0;
                          HEAP32[i88 + 64 >> 2] = HEAP32[i12 + 64 >> 2] | 0;
                          HEAP32[i88 + 68 >> 2] = HEAP32[i12 + 68 >> 2] | 0;
                          HEAP32[i88 + 72 >> 2] = HEAP32[i12 + 72 >> 2] | 0;
                          HEAP32[i88 + 76 >> 2] = HEAP32[i12 + 76 >> 2] | 0;
                          HEAP32[i88 + 80 >> 2] = HEAP32[i12 + 80 >> 2] | 0;
                          HEAP32[i88 + 84 >> 2] = HEAP32[i12 + 84 >> 2] | 0;
                          HEAP32[i88 + 88 >> 2] = HEAP32[i12 + 88 >> 2] | 0;
                          HEAP32[i88 + 92 >> 2] = HEAP32[i12 + 92 >> 2] | 0;
                          HEAP32[i88 + 96 >> 2] = HEAP32[i12 + 96 >> 2] | 0;
                          HEAP32[i88 + 100 >> 2] = HEAP32[i12 + 100 >> 2] | 0;
                          HEAP32[i88 + 104 >> 2] = HEAP32[i12 + 104 >> 2] | 0;
                          i142 = HEAP32[i41 >> 2] | 0;
                          HEAP32[i49 >> 2] = i142;
                          HEAP32[i85 >> 2] = HEAP32[i65 >> 2] | 0;
                          i145 = HEAP32[i78 >> 2] | 0;
                          HEAP32[i86 >> 2] = i145;
                          if ((i145 | 0) != 0) {
                            i145 = HEAP32[i69 >> 2] | 0;
                            HEAP32[i69 >> 2] = HEAP32[i28 >> 2] | 0;
                            HEAP32[i28 >> 2] = i145;
                          }
                          i145 = HEAP32[i89 >> 2] | 0;
                          if ((i145 | 0) == 0) {
                            i278 = i142;
                          } else {
                            i142 = (FUNCTION_TABLE_iii[i145 & 511](HEAP32[i91 >> 2] | 0, HEAP32[i92 >> 2] | 0) | 0) == 0 & 1;
                            HEAP32[i87 >> 2] = i142 | HEAP32[i87 >> 2];
                            i278 = HEAP32[i41 >> 2] | 0;
                          }
                          i142 = i278 + 1 | 0;
                          HEAP32[i41 >> 2] = i142;
                          if ((i142 | 0) != (HEAP32[i90 >> 2] | 0)) {
                            i277 = i141;
                            break;
                          }
                          HEAP32[i41 >> 2] = 0;
                          i277 = i141;
                        }
                      } while (0);
                      if ((i277 | 0) == 0) {
                        i24 = 321;
                        break;
                      }
                      i141 = (HEAP32[i65 >> 2] | 0) + 1 | 0;
                      HEAP32[i65 >> 2] = i141;
                      if ((i141 | 0) < (HEAP32[i25 >> 2] | 0)) {
                        i140 = i141;
                      } else {
                        break L125;
                      }
                    }
                    if ((i24 | 0) == 258) {
                      if ((HEAP32[i15 >> 2] | 0) != 0) {
                        i67 = 0;
                        break L86;
                      }
                      HEAP32[i15 >> 2] = 7;
                      HEAP32[i16 >> 2] = 5271408;
                      HEAP32[i18 >> 2] = 0;
                      i67 = 0;
                      break L86;
                    } else if ((i24 | 0) == 321) {
                      if ((HEAP32[i15 >> 2] | 0) != 0) {
                        i67 = 0;
                        break L86;
                      }
                      HEAP32[i15 >> 2] = 6;
                      HEAP32[i16 >> 2] = 5271072;
                      HEAP32[i18 >> 2] = 0;
                      i67 = 0;
                      break L86;
                    }
                  }
                } while (0);
                if ((HEAP32[i21 >> 2] | 0) != 0) {
                  if ((HEAP32[i14 + 136 >> 2] | 0) != 0) {
                    i67 = 0;
                    break;
                  }
                }
                i67 = 1;
              } else {
                i67 = 0;
              }
            } while (0);
            if ((HEAP32[i21 >> 2] | 0) == 0) {
              i279 = 1;
            } else {
              i279 = (HEAP32[i14 + 136 >> 2] | 0) == 0 & 1;
            }
            i25 = HEAP32[i11 >> 2] | 0;
            if ((i25 | 0) != 0) {
              FUNCTION_TABLE_vi[i25 & 511](i8);
            }
            i27 = i279 & i67;
          }
          if ((i27 | 0) != 0) {
            HEAP32[i18 >> 2] = 0;
            i23 = 0;
            break;
          }
          do {
            if ((HEAP32[i21 >> 2] | 0) != 0) {
              i25 = i17;
              if ((HEAP32[i25 >> 2] | 0) == 0) {
                break;
              }
              HEAP32[i25 >> 2] = 0;
            }
          } while (0);
          i25 = i14 + 1720 | 0;
          i41 = HEAP32[i25 >> 2] | 0;
          if ((i41 | 0) != 0) {
            _free(i41);
          }
          HEAP32[i25 >> 2] = 0;
          HEAP32[i14 + 1724 >> 2] = 0;
          i25 = i14 + 12 | 0;
          HEAP32[i25 >> 2] = 0;
          HEAP32[i25 + 4 >> 2] = 0;
          HEAP32[i25 + 8 >> 2] = 0;
          HEAP32[i25 + 12 >> 2] = 0;
          HEAP32[i25 + 16 >> 2] = 0;
          HEAP32[i25 + 20 >> 2] = 0;
          HEAP32[i18 >> 2] = 0;
        }
        i23 = HEAP32[i15 >> 2] | 0;
      }
    } while (0);
    do {
      if ((HEAP32[i21 >> 2] | 0) != 0) {
        i15 = i17;
        if ((HEAP32[i15 >> 2] | 0) == 0) {
          break;
        }
        HEAP32[i15 >> 2] = 0;
      }
    } while (0);
    i17 = i14 + 1720 | 0;
    i21 = HEAP32[i17 >> 2] | 0;
    if ((i21 | 0) != 0) {
      _free(i21);
    }
    HEAP32[i17 >> 2] = 0;
    HEAP32[i14 + 1724 >> 2] = 0;
    i17 = i14 + 12 | 0;
    HEAP32[i17 >> 2] = 0;
    HEAP32[i17 + 4 >> 2] = 0;
    HEAP32[i17 + 8 >> 2] = 0;
    HEAP32[i17 + 12 >> 2] = 0;
    HEAP32[i17 + 16 >> 2] = 0;
    HEAP32[i17 + 20 >> 2] = 0;
    HEAP32[i18 >> 2] = 0;
    _free(i14);
    i280 = i23;
  } else {
    i23 = _malloc(208) | 0;
    if ((i23 | 0) == 0) {
      i13 = 1;
      STACKTOP = i4;
      return i13 | 0;
    }
    if ((HEAP32[i23 - 4 >> 2] & 3 | 0) == 0) {
      i14 = i23;
      HEAP32[i14 >> 2] = 0;
      HEAP32[i23 + 4 >> 2] = 2;
      HEAP32[i23 + 8 >> 2] = 2;
      i281 = i14;
    } else {
      _memset(i23 | 0, 0, 208);
      i14 = i23;
      HEAP32[i14 >> 2] = 0;
      HEAP32[i23 + 4 >> 2] = 2;
      HEAP32[i23 + 8 >> 2] = 2;
      i281 = i14;
    }
    i14 = i23;
    i18 = i23 + 12 | 0;
    HEAP32[i18 >> 2] = i8;
    i17 = i23;
    HEAP32[i17 >> 2] = 0;
    i21 = i23 + 28 | 0;
    i15 = i21;
    i27 = HEAP32[i1 >> 2] | 0;
    i1 = HEAP32[i10 >> 2] | 0;
    HEAP32[i23 + 36 >> 2] = i27;
    HEAP32[i23 + 40 >> 2] = i1;
    i10 = i21;
    i271 = i10 | 0;
    HEAP32[i271 >> 2] = 0;
    i272 = i10 + 4 | 0;
    HEAP32[i272 >> 2] = 0;
    i272 = i23 + 44 | 0;
    i271 = i272;
    HEAP32[i272 >> 2] = 0;
    HEAP32[i272 + 4 >> 2] = 0;
    HEAP32[i272 + 8 >> 2] = 0;
    HEAP32[i272 + 12 >> 2] = 0;
    do {
      if ((i1 | 0) != 0) {
        i272 = HEAPU8[i27] | 0;
        i21 = 0;
        HEAP32[i10 >> 2] = i272;
        HEAP32[i10 + 4 >> 2] = i21;
        HEAP32[i271 >> 2] = 1;
        if (i1 >>> 0 <= 1) {
          break;
        }
        i67 = HEAPU8[i27 + 1 | 0] | 0;
        i279 = i67 << 8 | 0 >>> 24 | i272;
        i272 = 0 << 8 | i67 >>> 24 | i21;
        i21 = i10 | 0;
        HEAP32[i21 >> 2] = i279;
        i67 = i10 + 4 | 0;
        HEAP32[i67 >> 2] = i272;
        HEAP32[i271 >> 2] = 2;
        if (i1 >>> 0 <= 2) {
          break;
        }
        i11 = HEAPU8[i27 + 2 | 0] | 0;
        i16 = i11 << 16 | 0 >>> 16 | i279;
        i279 = 0 << 16 | i11 >>> 16 | i272;
        i21 = i10 | 0;
        HEAP32[i21 >> 2] = i16;
        i67 = i10 + 4 | 0;
        HEAP32[i67 >> 2] = i279;
        HEAP32[i271 >> 2] = 3;
        if (i1 >>> 0 <= 3) {
          break;
        }
        i272 = HEAPU8[i27 + 3 | 0] | 0;
        i11 = i272 << 24 | 0 >>> 8 | i16;
        i16 = 0 << 24 | i272 >>> 8 | i279;
        i21 = i10 | 0;
        HEAP32[i21 >> 2] = i11;
        i67 = i10 + 4 | 0;
        HEAP32[i67 >> 2] = i16;
        HEAP32[i271 >> 2] = 4;
        if (i1 >>> 0 <= 4) {
          break;
        }
        i279 = 0 | i11;
        i11 = HEAPU8[i27 + 4 | 0] | 0 | i16;
        i21 = i10 | 0;
        HEAP32[i21 >> 2] = i279;
        i67 = i10 + 4 | 0;
        HEAP32[i67 >> 2] = i11;
        HEAP32[i271 >> 2] = 5;
        if (i1 >>> 0 <= 5) {
          break;
        }
        i16 = 0 << 8 | 0 >>> 24 | i279;
        i279 = (HEAPU8[i27 + 5 | 0] | 0) << 8 | 0 >>> 24 | i11;
        i21 = i10 | 0;
        HEAP32[i21 >> 2] = i16;
        i67 = i10 + 4 | 0;
        HEAP32[i67 >> 2] = i279;
        HEAP32[i271 >> 2] = 6;
        if (i1 >>> 0 <= 6) {
          break;
        }
        i11 = 0 << 16 | 0 >>> 16 | i16;
        i16 = (HEAPU8[i27 + 6 | 0] | 0) << 16 | 0 >>> 16 | i279;
        i21 = i10 | 0;
        HEAP32[i21 >> 2] = i11;
        i67 = i10 + 4 | 0;
        HEAP32[i67 >> 2] = i16;
        HEAP32[i271 >> 2] = 7;
        if (i1 >>> 0 <= 7) {
          break;
        }
        i279 = (HEAPU8[i27 + 7 | 0] | 0) << 24 | 0 >>> 8 | i16;
        i21 = i10 | 0;
        HEAP32[i21 >> 2] = 0 << 24 | 0 >>> 8 | i11;
        i67 = i10 + 4 | 0;
        HEAP32[i67 >> 2] = i279;
        HEAP32[i271 >> 2] = 8;
      }
    } while (0);
    L520 : do {
      if ((_VP8LReadBits(i15, 8) & 255) << 24 >> 24 == 47) {
        i271 = (_VP8LReadBits(i15, 14) | 0) + 1 | 0;
        i10 = (_VP8LReadBits(i15, 14) | 0) + 1 | 0;
        _VP8LReadBits(i15, 1) | 0;
        _VP8LReadBits(i15, 3) | 0;
        HEAP32[i23 + 8 >> 2] = 2;
        i27 = i8 | 0;
        HEAP32[i27 >> 2] = i271;
        i1 = i8 + 4 | 0;
        HEAP32[i1 >> 2] = i10;
        i279 = i23 + 4 | 0;
        HEAP32[i279 >> 2] = 1;
        if ((_DecodeImageStream(i271, i10, 1, i14, 0) | 0) == 0) {
          i24 = 363;
          break;
        }
        i10 = _WebPAllocateDecBuffer(HEAP32[i27 >> 2] | 0, HEAP32[i1 >> 2] | 0, HEAP32[i3 + 20 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0;
        if ((i10 | 0) != 0) {
          i282 = i10;
          break;
        }
        i10 = HEAP32[i18 >> 2] | 0;
        i1 = HEAP32[i10 + 40 >> 2] | 0;
        HEAP32[i23 + 16 >> 2] = HEAP32[i1 >> 2] | 0;
        L525 : do {
          if ((_WebPIoInitFromOptions(HEAP32[i1 + 20 >> 2] | 0, i10, 3) | 0) == 0) {
            HEAP32[i17 >> 2] = 2;
          } else {
            i27 = HEAP32[i10 >> 2] | 0;
            i271 = i23 + 60 | 0;
            i67 = HEAP32[i271 >> 2] | 0;
            i11 = i67;
            i21 = (i67 | 0) < 0 ? -1 : 0;
            i67 = i23 + 64 | 0;
            i16 = HEAP32[i67 >> 2] | 0;
            i272 = i16;
            i277 = (i16 | 0) < 0 ? -1 : 0;
            i16 = ~~((+(i272 >>> 0) + +(i277 | 0) * 4294967296.0) * (+(i11 >>> 0) + +(i21 | 0) * 4294967296.0)) >>> 0;
            i278 = Math_min(Math_floor((+(i272 >>> 0) + +(i277 | 0) * 4294967296.0) * (+(i11 >>> 0) + +(i21 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
            i21 = i27;
            i11 = (i27 | 0) < 0 ? -1 : 0;
            i277 = 17;
            i272 = 0;
            i12 = ~~((+(i21 >>> 0) + +(i11 | 0) * 4294967296.0) * (+(i277 >>> 0) + +(i272 | 0) * 4294967296.0)) >>> 0;
            i20 = Math_min(Math_floor((+(i21 >>> 0) + +(i11 | 0) * 4294967296.0) * (+(i277 >>> 0) + +(i272 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
            i272 = ~~(+(i16 >>> 0) + +(i278 | 0) * 4294967296.0 + (+(i12 >>> 0) + +(i20 | 0) * 4294967296.0)) >>> 0;
            i277 = Math_min(Math_floor((+(i16 >>> 0) + +(i278 | 0) * 4294967296.0 + (+(i12 >>> 0) + +(i20 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
            i20 = i272 << 2 | 0 >>> 30;
            i12 = i277 << 2 | i272 >>> 30;
            do {
              if ((i272 | 0) == 0 & (i277 | 0) == 0) {
                i24 = 371;
              } else {
                i278 = 0;
                i11 = 256;
                i21 = ~~Math_floor((+(i278 >>> 0) + +(i11 >>> 0) * 4294967296.0) / (+(i272 >>> 0) + +(i277 >>> 0) * 4294967296.0)) >>> 0;
                i269 = Math_min(Math_floor(Math_floor((+(i278 >>> 0) + +(i11 >>> 0) * 4294967296.0) / (+(i272 >>> 0) + +(i277 >>> 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
                i11 = 0;
                if (!(i269 >>> 0 < i11 >>> 0 | i269 >>> 0 == i11 >>> 0 & i21 >>> 0 < 4 >>> 0)) {
                  if ((i20 | 0) == (i20 & -4 | 0) & (i12 | 0) == (i12 & 0 | 0)) {
                    i24 = 371;
                    break;
                  }
                }
                HEAP32[i23 + 20 >> 2] = 0;
                break;
              }
            } while (0);
            do {
              if ((i24 | 0) == 371) {
                i12 = _malloc(i20) | 0;
                i277 = i12;
                i272 = i23 + 20 | 0;
                HEAP32[i272 >> 2] = i277;
                if ((i12 | 0) == 0) {
                  break;
                }
                HEAP32[i23 + 24 >> 2] = i277 + (i16 + i27 << 2) | 0;
                L536 : do {
                  if ((HEAP32[i10 + 92 >> 2] | 0) == 0) {
                    i283 = i277;
                  } else {
                    i12 = HEAP32[i10 + 12 >> 2] | 0;
                    i21 = HEAP32[i10 + 96 >> 2] | 0;
                    i11 = HEAP32[i10 + 16 >> 2] | 0;
                    i269 = HEAP32[i10 + 100 >> 2] | 0;
                    i278 = i21;
                    i270 = (i21 | 0) < 0 ? -1 : 0;
                    i268 = i278 << 5 | 0 >>> 27;
                    i267 = i270 << 5 | i278 >>> 27;
                    i265 = 76;
                    i266 = 0;
                    i276 = ~~(+(i268 >>> 0) + +(i267 | 0) * 4294967296.0 + (+(i265 >>> 0) + +(i266 | 0) * 4294967296.0)) >>> 0;
                    i275 = Math_min(Math_floor((+(i268 >>> 0) + +(i267 | 0) * 4294967296.0 + (+(i265 >>> 0) + +(i266 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
                    i266 = i278 << 4 | 0 >>> 28;
                    i265 = i270 << 4 | i278 >>> 28;
                    i278 = ~~(+(i276 >>> 0) + +(i275 | 0) * 4294967296.0 + (+(i266 >>> 0) + +(i265 | 0) * 4294967296.0)) >>> 0;
                    i270 = Math_min(Math_floor((+(i276 >>> 0) + +(i275 | 0) * 4294967296.0 + (+(i266 >>> 0) + +(i265 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
                    i265 = 0;
                    i266 = 256;
                    i275 = ~~Math_floor((+(i265 >>> 0) + +(i266 >>> 0) * 4294967296.0) / (+(i278 >>> 0) + +(i270 >>> 0) * 4294967296.0)) >>> 0;
                    do {
                      if (((i275 | 0) != 0 | (Math_min(Math_floor(Math_floor((+(i265 >>> 0) + +(i266 >>> 0) * 4294967296.0) / (+(i278 >>> 0) + +(i270 >>> 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0 | 0) != 0) & ((i278 | 0) == (i278 & -4 | 0) & (i270 | 0) == (i270 & 0 | 0))) {
                        i276 = i278;
                        i267 = _malloc(i276) | 0;
                        if ((i267 | 0) == 0) {
                          break;
                        }
                        if ((HEAP32[i267 - 4 >> 2] & 3 | 0) != 0) {
                          _memset(i267 | 0, 0, i276 | 0);
                        }
                        HEAP32[i23 + 200 >> 2] = i267;
                        HEAP32[i23 + 204 >> 2] = i267;
                        i276 = i267 + 76 | 0;
                        i274 = (i12 | 0) < (i21 | 0);
                        HEAP32[i267 >> 2] = i274 & 1;
                        HEAP32[i267 + 44 >> 2] = i12;
                        HEAP32[i267 + 48 >> 2] = i11;
                        HEAP32[i267 + 52 >> 2] = i21;
                        HEAP32[i267 + 56 >> 2] = i269;
                        HEAP32[i267 + 60 >> 2] = i267 + (i268 + 76 | 0) | 0;
                        HEAP32[i267 + 64 >> 2] = 0;
                        HEAP32[i267 + 4 >> 2] = 4;
                        HEAP32[i267 + 36 >> 2] = i274 ? i21 - 1 | 0 : i12 - i21 | 0;
                        HEAP32[i267 + 40 >> 2] = i274 ? i12 - 1 | 0 : i21;
                        HEAP32[i267 + 24 >> 2] = i11;
                        HEAP32[i267 + 28 >> 2] = i11;
                        HEAP32[i267 + 32 >> 2] = i269;
                        HEAP32[i267 + 12 >> 2] = 1073741824 / (i21 | 0) & -1;
                        HEAP32[i267 + 8 >> 2] = 1073741824 / (i269 | 0) & -1;
                        i273 = i269;
                        i264 = i273 << 30 | 0 >>> 2;
                        i263 = ((i269 | 0) < 0 ? -1 : 0) << 30 | i273 >>> 2;
                        i273 = Math_imul(i274 ? i21 : i12, i11);
                        i274 = i273;
                        i262 = (i273 | 0) < 0 ? -1 : 0;
                        i273 = ~~(tempBigIntR = (+(i264 >>> 0) + +(i263 | 0) * 4294967296.0) / (+(i274 >>> 0) + +(i262 | 0) * 4294967296.0), +tempBigIntR >= 0.0 ? Math_floor(tempBigIntR) : Math_ceil(tempBigIntR)) >>> 0;
                        i261 = Math_min(Math_floor((tempBigIntR = (+(i264 >>> 0) + +(i263 | 0) * 4294967296.0) / (+(i274 >>> 0) + +(i262 | 0) * 4294967296.0), +tempBigIntR >= 0.0 ? Math_floor(tempBigIntR) : Math_ceil(tempBigIntR)) / 4294967296.0), 4294967295.0) >>> 0;
                        i262 = i267 + 16 | 0;
                        HEAP32[i262 >> 2] = i273;
                        HEAP32[i262 + 4 >> 2] = i261;
                        HEAP32[i267 + 68 >> 2] = i276;
                        HEAP32[i267 + 72 >> 2] = i276 + (i21 << 2 << 2) | 0;
                        i283 = HEAP32[i272 >> 2] | 0;
                        break L536;
                      }
                    } while (0);
                    HEAP32[i17 >> 2] = 1;
                    break L525;
                  }
                } while (0);
                HEAP32[i279 >> 2] = 0;
                if ((_DecodeImageData(i14, i283, HEAP32[i271 >> 2] | 0, HEAP32[i67 >> 2] | 0, 222) | 0) == 0) {
                  break L525;
                }
                HEAP32[i1 + 16 >> 2] = HEAP32[i23 + 72 >> 2] | 0;
                _VP8LClear(i14);
                i282 = 0;
                break L520;
              }
            } while (0);
            HEAP32[i23 + 24 >> 2] = 0;
            HEAP32[i17 >> 2] = 1;
          }
        } while (0);
        _VP8LClear(i14);
        i282 = HEAP32[i281 >> 2] | 0;
        break;
      } else {
        HEAP32[i17 >> 2] = 3;
        i24 = 363;
        break;
      }
    } while (0);
    if ((i24 | 0) == 363) {
      _VP8LClear(i14);
      i282 = HEAP32[i281 >> 2] | 0;
    }
    _VP8LClear(i14);
    _free(i23);
    i280 = i282;
  }
  if ((i280 | 0) == 0) {
    i13 = 0;
    STACKTOP = i4;
    return i13 | 0;
  }
  i282 = HEAP32[i3 >> 2] | 0;
  if ((i282 | 0) == 0) {
    i13 = i280;
    STACKTOP = i4;
    return i13 | 0;
  }
  i3 = i282 + 80 | 0;
  if ((HEAP32[i282 + 12 >> 2] | 0) == 0) {
    _free(HEAP32[i3 >> 2] | 0);
  }
  HEAP32[i3 >> 2] = 0;
  i13 = i280;
  STACKTOP = i4;
  return i13 | 0;
}
function _WebPIoInitFromOptions(i1, i2, i3) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
  i4 = HEAP32[i2 >> 2] | 0;
  i5 = HEAP32[i2 + 4 >> 2] | 0;
  i6 = (i1 | 0) != 0;
  do {
    if (i6) {
      i7 = (HEAP32[i1 + 8 >> 2] | 0) > 0;
      HEAP32[i2 + 72 >> 2] = i7 & 1;
      if (!i7) {
        i8 = i5;
        i9 = i4;
        i10 = 0;
        i11 = 0;
        break;
      }
      i7 = HEAP32[i1 + 20 >> 2] | 0;
      i12 = HEAP32[i1 + 24 >> 2] | 0;
      i13 = HEAP32[i1 + 12 >> 2] | 0;
      i14 = HEAP32[i1 + 16 >> 2] | 0;
      if (i3 >>> 0 < 11) {
        i15 = i14;
        i16 = i13;
      } else {
        i15 = i14 & -2;
        i16 = i13 & -2;
      }
      if ((i15 | i16 | 0) < 0 | (i7 | 0) < 1 | (i12 | 0) < 1) {
        i17 = 0;
        return i17 | 0;
      }
      if ((i16 + i7 | 0) > (i4 | 0)) {
        i17 = 0;
        return i17 | 0;
      }
      if ((i15 + i12 | 0) > (i5 | 0)) {
        i17 = 0;
      } else {
        i8 = i12;
        i9 = i7;
        i10 = i15;
        i11 = i16;
        break;
      }
      return i17 | 0;
    } else {
      HEAP32[i2 + 72 >> 2] = 0;
      i8 = i5;
      i9 = i4;
      i10 = 0;
      i11 = 0;
    }
  } while (0);
  HEAP32[i2 + 76 >> 2] = i11;
  HEAP32[i2 + 84 >> 2] = i10;
  HEAP32[i2 + 80 >> 2] = i9 + i11 | 0;
  HEAP32[i2 + 88 >> 2] = i8 + i10 | 0;
  HEAP32[i2 + 12 >> 2] = i9;
  HEAP32[i2 + 16 >> 2] = i8;
  if (i6) {
    i6 = (HEAP32[i1 + 28 >> 2] | 0) > 0;
    i8 = i2 + 92 | 0;
    HEAP32[i8 >> 2] = i6 & 1;
    do {
      if (i6) {
        i9 = HEAP32[i1 + 32 >> 2] | 0;
        if ((i9 | 0) < 1) {
          i17 = 0;
          return i17 | 0;
        }
        i10 = i1 + 36 | 0;
        if ((HEAP32[i10 >> 2] | 0) < 1) {
          i17 = 0;
          return i17 | 0;
        } else {
          HEAP32[i2 + 96 >> 2] = i9;
          HEAP32[i2 + 100 >> 2] = HEAP32[i10 >> 2] | 0;
          break;
        }
      }
    } while (0);
    i6 = i2 + 68 | 0;
    HEAP32[i6 >> 2] = (HEAP32[i1 >> 2] | 0) != 0 & 1;
    i18 = (HEAP32[i1 + 4 >> 2] | 0) == 0;
    i19 = i8;
    i20 = i6;
  } else {
    i6 = i2 + 92 | 0;
    HEAP32[i6 >> 2] = 0;
    i8 = i2 + 68 | 0;
    HEAP32[i8 >> 2] = 0;
    i18 = 1;
    i19 = i6;
    i20 = i8;
  }
  i8 = i2 + 56 | 0;
  HEAP32[i8 >> 2] = i18 & 1;
  if ((HEAP32[i19 >> 2] | 0) == 0) {
    i17 = 1;
    return i17 | 0;
  }
  if ((HEAP32[i2 + 96 >> 2] | 0) < ((i4 * 3 & -1 | 0) / 4 & -1 | 0)) {
    i21 = (HEAP32[i2 + 100 >> 2] | 0) < ((i5 * 3 & -1 | 0) / 4 & -1 | 0);
  } else {
    i21 = 0;
  }
  HEAP32[i20 >> 2] = i21 & 1;
  HEAP32[i8 >> 2] = 0;
  i17 = 1;
  return i17 | 0;
}
function _VP8GetHeaders(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0;
  i3 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  i4 = i3 | 0;
  if ((i1 | 0) == 0) {
    i5 = 0;
    STACKTOP = i3;
    return i5 | 0;
  }
  i6 = i1 | 0;
  HEAP32[i6 >> 2] = 0;
  i7 = i1 + 8 | 0;
  HEAP32[i7 >> 2] = 5271088;
  if ((i2 | 0) == 0) {
    HEAP32[i6 >> 2] = 2;
    HEAP32[i7 >> 2] = 5269320;
    HEAP32[i1 + 4 >> 2] = 0;
    i5 = 0;
    STACKTOP = i3;
    return i5 | 0;
  }
  i8 = HEAP32[i2 + 64 >> 2] | 0;
  i9 = i4 | 0;
  HEAP32[i9 >> 2] = i8;
  i10 = HEAP32[i2 + 60 >> 2] | 0;
  i11 = i4 + 4 | 0;
  HEAP32[i11 >> 2] = i10;
  i12 = _ParseHeadersInternal(i8, i10, 0, 0, 0, i4) | 0;
  if ((i12 | 0) != 0) {
    if ((HEAP32[i6 >> 2] | 0) != 0) {
      i5 = 0;
      STACKTOP = i3;
      return i5 | 0;
    }
    HEAP32[i6 >> 2] = i12;
    HEAP32[i7 >> 2] = 5268288;
    HEAP32[i1 + 4 >> 2] = 0;
    i5 = 0;
    STACKTOP = i3;
    return i5 | 0;
  }
  if ((HEAP32[i4 + 28 >> 2] | 0) != 0) {
    if ((HEAP32[i6 >> 2] | 0) != 0) {
      i5 = 0;
      STACKTOP = i3;
      return i5 | 0;
    }
    HEAP32[i6 >> 2] = 3;
    HEAP32[i7 >> 2] = 5267392;
    HEAP32[i1 + 4 >> 2] = 0;
    i5 = 0;
    STACKTOP = i3;
    return i5 | 0;
  }
  i12 = i1 + 1804 | 0;
  if ((HEAP32[i12 >> 2] | 0) == 0) {
    HEAP32[i12 >> 2] = HEAP32[i4 + 12 >> 2] | 0;
    HEAP32[i1 + 1808 >> 2] = HEAP32[i4 + 16 >> 2] | 0;
  }
  i12 = HEAP32[i9 >> 2] | 0;
  i9 = HEAP32[i4 + 8 >> 2] | 0;
  i4 = (HEAP32[i11 >> 2] | 0) - i9 | 0;
  if (i4 >>> 0 < 4) {
    if ((HEAP32[i6 >> 2] | 0) != 0) {
      i5 = 0;
      STACKTOP = i3;
      return i5 | 0;
    }
    HEAP32[i6 >> 2] = 7;
    HEAP32[i7 >> 2] = 5266512;
    HEAP32[i1 + 4 >> 2] = 0;
    i5 = 0;
    STACKTOP = i3;
    return i5 | 0;
  }
  i11 = HEAP8[i12 + i9 | 0] | 0;
  i10 = (HEAPU8[i12 + (i9 + 1 | 0) | 0] | 0) << 8 | i11 & 255 | (HEAPU8[i12 + (i9 + 2 | 0) | 0] | 0) << 16;
  i8 = i11 & 1;
  i13 = i1 + 36 | 0;
  HEAP8[i13] = i8 ^ 1;
  i14 = (i11 & 255) >>> 1 & 7;
  HEAP8[i1 + 37 | 0] = i14;
  i15 = (i11 & 255) >>> 4 & 1;
  HEAP8[i1 + 38 | 0] = i15;
  i11 = i10 >>> 5;
  i10 = i1 + 40 | 0;
  HEAP32[i10 >> 2] = i11;
  if ((i14 & 255) > 3) {
    if ((HEAP32[i6 >> 2] | 0) != 0) {
      i5 = 0;
      STACKTOP = i3;
      return i5 | 0;
    }
    HEAP32[i6 >> 2] = 3;
    HEAP32[i7 >> 2] = 5265608;
    HEAP32[i1 + 4 >> 2] = 0;
    i5 = 0;
    STACKTOP = i3;
    return i5 | 0;
  }
  if (i15 << 24 >> 24 == 0) {
    if ((HEAP32[i6 >> 2] | 0) != 0) {
      i5 = 0;
      STACKTOP = i3;
      return i5 | 0;
    }
    HEAP32[i6 >> 2] = 4;
    HEAP32[i7 >> 2] = 5264668;
    HEAP32[i1 + 4 >> 2] = 0;
    i5 = 0;
    STACKTOP = i3;
    return i5 | 0;
  }
  i15 = i12 + (i9 + 3 | 0) | 0;
  i14 = i4 - 3 | 0;
  L645 : do {
    if (i8 << 24 >> 24 == 0) {
      if (i14 >>> 0 < 7) {
        if ((HEAP32[i6 >> 2] | 0) != 0) {
          i5 = 0;
          STACKTOP = i3;
          return i5 | 0;
        }
        HEAP32[i6 >> 2] = 7;
        HEAP32[i7 >> 2] = 5263868;
        HEAP32[i1 + 4 >> 2] = 0;
        i5 = 0;
        STACKTOP = i3;
        return i5 | 0;
      }
      do {
        if (HEAP8[i15] << 24 >> 24 == -99) {
          if (HEAP8[i12 + (i9 + 4 | 0) | 0] << 24 >> 24 != 1) {
            break;
          }
          if (HEAP8[i12 + (i9 + 5 | 0) | 0] << 24 >> 24 != 42) {
            break;
          }
          i16 = i12 + (i9 + 7 | 0) | 0;
          i17 = (HEAPU8[i16] | 0) << 8 & 16128 | (HEAPU8[i12 + (i9 + 6 | 0) | 0] | 0);
          HEAP16[i1 + 44 >> 1] = i17;
          HEAP8[i1 + 48 | 0] = (HEAPU8[i16] | 0) >>> 6;
          i16 = i12 + (i9 + 9 | 0) | 0;
          i18 = (HEAPU8[i16] | 0) << 8 & 16128 | (HEAPU8[i12 + (i9 + 8 | 0) | 0] | 0);
          i19 = i1 + 46 | 0;
          HEAP16[i19 >> 1] = i18;
          HEAP8[i1 + 49 | 0] = (HEAPU8[i16] | 0) >>> 6;
          i16 = i17 & 65535;
          HEAP32[i1 + 276 >> 2] = (i16 + 15 | 0) >>> 4;
          HEAP32[i1 + 280 >> 2] = ((i18 & 65535) + 15 | 0) >>> 4;
          HEAP32[i2 >> 2] = i16;
          i18 = HEAPU16[i19 >> 1] | 0;
          HEAP32[i2 + 4 >> 2] = i18;
          HEAP32[i2 + 92 >> 2] = 0;
          HEAP32[i2 + 72 >> 2] = 0;
          HEAP32[i2 + 84 >> 2] = 0;
          HEAP32[i2 + 76 >> 2] = 0;
          HEAP32[i2 + 80 >> 2] = i16;
          HEAP32[i2 + 88 >> 2] = i18;
          HEAP32[i2 + 12 >> 2] = i16;
          HEAP32[i2 + 16 >> 2] = i18;
          i18 = i1 + 596 | 0;
          HEAP8[i18] = 255;
          HEAP8[i18 + 1 | 0] = 255;
          HEAP8[i18 + 2 | 0] = 255;
          _memcpy(i1 + 599 | 0, 5282220, 1056);
          HEAP32[i1 + 100 >> 2] = 0;
          HEAP32[i1 + 104 >> 2] = 0;
          HEAP32[i1 + 108 >> 2] = 1;
          i18 = i1 + 112 | 0;
          tempBigInt = 0;
          HEAP8[i18] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[i18 + 1 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[i18 + 2 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[i18 + 3 | 0] = tempBigInt & 255;
          i18 = i1 + 116 | 0;
          tempBigInt = 0;
          HEAP8[i18] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[i18 + 1 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[i18 + 2 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[i18 + 3 | 0] = tempBigInt & 255;
          HEAP8[i1 + 1754 | 0] = 0;
          i20 = i12 + (i9 + 10 | 0) | 0;
          i21 = i4 - 10 | 0;
          i22 = HEAP32[i10 >> 2] | 0;
          break L645;
        }
      } while (0);
      if ((HEAP32[i6 >> 2] | 0) != 0) {
        i5 = 0;
        STACKTOP = i3;
        return i5 | 0;
      }
      HEAP32[i6 >> 2] = 3;
      HEAP32[i7 >> 2] = 5263036;
      HEAP32[i1 + 4 >> 2] = 0;
      i5 = 0;
      STACKTOP = i3;
      return i5 | 0;
    } else {
      i20 = i15;
      i21 = i14;
      i22 = i11;
    }
  } while (0);
  if (i22 >>> 0 > i21 >>> 0) {
    if ((HEAP32[i6 >> 2] | 0) != 0) {
      i5 = 0;
      STACKTOP = i3;
      return i5 | 0;
    }
    HEAP32[i6 >> 2] = 7;
    HEAP32[i7 >> 2] = 5274972;
    HEAP32[i1 + 4 >> 2] = 0;
    i5 = 0;
    STACKTOP = i3;
    return i5 | 0;
  }
  i11 = i1 + 12 | 0;
  i14 = i20 + i22 | 0;
  i15 = i1 + 24 | 0;
  HEAP32[i15 >> 2] = 65279;
  i10 = i11 | 0;
  HEAP32[i10 >> 2] = i20;
  i4 = i1 + 16 | 0;
  HEAP32[i4 >> 2] = i14;
  i9 = i1 + 28 | 0;
  HEAP32[i9 >> 2] = 0;
  i12 = i1 + 32 | 0;
  HEAP32[i12 >> 2] = 8;
  i2 = i1 + 20 | 0;
  HEAP32[i2 >> 2] = 0;
  i8 = i21 - i22 | 0;
  if (HEAP8[i13] << 24 >> 24 != 0) {
    HEAP8[i1 + 50 | 0] = _VP8GetValue(i11, 1) & 255;
    HEAP8[i1 + 51 | 0] = _VP8GetValue(i11, 1) & 255;
  }
  i18 = _VP8GetValue(i11, 1) | 0;
  i16 = i1 + 100 | 0;
  HEAP32[i16 >> 2] = i18;
  do {
    if ((i18 | 0) == 0) {
      HEAP32[i1 + 104 >> 2] = 0;
    } else {
      i19 = i1 + 104 | 0;
      HEAP32[i19 >> 2] = _VP8GetValue(i11, 1) | 0;
      if ((_VP8GetValue(i11, 1) | 0) != 0) {
        HEAP32[i1 + 108 >> 2] = _VP8GetValue(i11, 1) | 0;
        if ((_VP8GetValue(i11, 1) | 0) == 0) {
          i23 = 0;
        } else {
          i17 = _VP8GetValue(i11, 7) | 0;
          i23 = ((_VP8GetValue(i11, 1) | 0) != 0 ? -i17 | 0 : i17) & 255;
        }
        HEAP8[i1 + 112 | 0] = i23;
        if ((_VP8GetValue(i11, 1) | 0) == 0) {
          i24 = 0;
        } else {
          i17 = _VP8GetValue(i11, 7) | 0;
          i24 = ((_VP8GetValue(i11, 1) | 0) != 0 ? -i17 | 0 : i17) & 255;
        }
        HEAP8[i1 + 113 | 0] = i24;
        if ((_VP8GetValue(i11, 1) | 0) == 0) {
          i25 = 0;
        } else {
          i17 = _VP8GetValue(i11, 7) | 0;
          i25 = ((_VP8GetValue(i11, 1) | 0) != 0 ? -i17 | 0 : i17) & 255;
        }
        HEAP8[i1 + 114 | 0] = i25;
        if ((_VP8GetValue(i11, 1) | 0) == 0) {
          i26 = 0;
        } else {
          i17 = _VP8GetValue(i11, 7) | 0;
          i26 = ((_VP8GetValue(i11, 1) | 0) != 0 ? -i17 | 0 : i17) & 255;
        }
        HEAP8[i1 + 115 | 0] = i26;
        if ((_VP8GetValue(i11, 1) | 0) == 0) {
          i27 = 0;
        } else {
          i17 = _VP8GetValue(i11, 6) | 0;
          i27 = ((_VP8GetValue(i11, 1) | 0) != 0 ? -i17 | 0 : i17) & 255;
        }
        HEAP8[i1 + 116 | 0] = i27;
        if ((_VP8GetValue(i11, 1) | 0) == 0) {
          i28 = 0;
        } else {
          i17 = _VP8GetValue(i11, 6) | 0;
          i28 = ((_VP8GetValue(i11, 1) | 0) != 0 ? -i17 | 0 : i17) & 255;
        }
        HEAP8[i1 + 117 | 0] = i28;
        if ((_VP8GetValue(i11, 1) | 0) == 0) {
          i29 = 0;
        } else {
          i17 = _VP8GetValue(i11, 6) | 0;
          i29 = ((_VP8GetValue(i11, 1) | 0) != 0 ? -i17 | 0 : i17) & 255;
        }
        HEAP8[i1 + 118 | 0] = i29;
        if ((_VP8GetValue(i11, 1) | 0) == 0) {
          i30 = 0;
        } else {
          i17 = _VP8GetValue(i11, 6) | 0;
          i30 = ((_VP8GetValue(i11, 1) | 0) != 0 ? -i17 | 0 : i17) & 255;
        }
        HEAP8[i1 + 119 | 0] = i30;
      }
      if ((HEAP32[i19 >> 2] | 0) == 0) {
        break;
      }
      if ((_VP8GetValue(i11, 1) | 0) == 0) {
        i31 = -1;
      } else {
        i31 = _VP8GetValue(i11, 8) & 255;
      }
      HEAP8[i1 + 596 | 0] = i31;
      if ((_VP8GetValue(i11, 1) | 0) == 0) {
        i32 = -1;
      } else {
        i32 = _VP8GetValue(i11, 8) & 255;
      }
      HEAP8[i1 + 597 | 0] = i32;
      if ((_VP8GetValue(i11, 1) | 0) == 0) {
        i33 = -1;
      } else {
        i33 = _VP8GetValue(i11, 8) & 255;
      }
      HEAP8[i1 + 598 | 0] = i33;
    }
  } while (0);
  if ((HEAP32[i2 >> 2] | 0) != 0) {
    if ((HEAP32[i6 >> 2] | 0) != 0) {
      i5 = 0;
      STACKTOP = i3;
      return i5 | 0;
    }
    HEAP32[i6 >> 2] = 3;
    HEAP32[i7 >> 2] = 5273824;
    HEAP32[i1 + 4 >> 2] = 0;
    i5 = 0;
    STACKTOP = i3;
    return i5 | 0;
  }
  i33 = i1 + 52 | 0;
  HEAP32[i33 >> 2] = _VP8GetValue(i11, 1) | 0;
  i32 = i1 + 56 | 0;
  HEAP32[i32 >> 2] = _VP8GetValue(i11, 6) | 0;
  HEAP32[i1 + 60 >> 2] = _VP8GetValue(i11, 3) | 0;
  i31 = _VP8GetValue(i11, 1) | 0;
  HEAP32[i1 + 64 >> 2] = i31;
  do {
    if ((i31 | 0) != 0) {
      if ((_VP8GetValue(i11, 1) | 0) == 0) {
        break;
      }
      if ((_VP8GetValue(i11, 1) | 0) != 0) {
        i30 = _VP8GetValue(i11, 6) | 0;
        HEAP32[i1 + 68 >> 2] = (_VP8GetValue(i11, 1) | 0) != 0 ? -i30 | 0 : i30;
      }
      if ((_VP8GetValue(i11, 1) | 0) != 0) {
        i30 = _VP8GetValue(i11, 6) | 0;
        HEAP32[i1 + 72 >> 2] = (_VP8GetValue(i11, 1) | 0) != 0 ? -i30 | 0 : i30;
      }
      if ((_VP8GetValue(i11, 1) | 0) != 0) {
        i30 = _VP8GetValue(i11, 6) | 0;
        HEAP32[i1 + 76 >> 2] = (_VP8GetValue(i11, 1) | 0) != 0 ? -i30 | 0 : i30;
      }
      if ((_VP8GetValue(i11, 1) | 0) != 0) {
        i30 = _VP8GetValue(i11, 6) | 0;
        HEAP32[i1 + 80 >> 2] = (_VP8GetValue(i11, 1) | 0) != 0 ? -i30 | 0 : i30;
      }
      if ((_VP8GetValue(i11, 1) | 0) != 0) {
        i30 = _VP8GetValue(i11, 6) | 0;
        HEAP32[i1 + 84 >> 2] = (_VP8GetValue(i11, 1) | 0) != 0 ? -i30 | 0 : i30;
      }
      if ((_VP8GetValue(i11, 1) | 0) != 0) {
        i30 = _VP8GetValue(i11, 6) | 0;
        HEAP32[i1 + 88 >> 2] = (_VP8GetValue(i11, 1) | 0) != 0 ? -i30 | 0 : i30;
      }
      if ((_VP8GetValue(i11, 1) | 0) != 0) {
        i30 = _VP8GetValue(i11, 6) | 0;
        HEAP32[i1 + 92 >> 2] = (_VP8GetValue(i11, 1) | 0) != 0 ? -i30 | 0 : i30;
      }
      if ((_VP8GetValue(i11, 1) | 0) == 0) {
        break;
      }
      i30 = _VP8GetValue(i11, 6) | 0;
      HEAP32[i1 + 96 >> 2] = (_VP8GetValue(i11, 1) | 0) != 0 ? -i30 | 0 : i30;
    }
  } while (0);
  if ((HEAP32[i32 >> 2] | 0) == 0) {
    i34 = 0;
  } else {
    i34 = (HEAP32[i33 >> 2] | 0) != 0 ? 1 : 2;
  }
  HEAP32[i1 + 1764 >> 2] = i34;
  if ((HEAP32[i2 >> 2] | 0) != 0) {
    if ((HEAP32[i6 >> 2] | 0) != 0) {
      i5 = 0;
      STACKTOP = i3;
      return i5 | 0;
    }
    HEAP32[i6 >> 2] = 3;
    HEAP32[i7 >> 2] = 5272888;
    HEAP32[i1 + 4 >> 2] = 0;
    i5 = 0;
    STACKTOP = i3;
    return i5 | 0;
  }
  i34 = i20 + i21 | 0;
  i21 = 1 << _VP8GetValue(i11, 2);
  HEAP32[i1 + 300 >> 2] = i21;
  i33 = i21 - 1 | 0;
  i21 = i33 * 3 & -1;
  do {
    if ((i21 | 0) > (i8 | 0)) {
      i35 = 7;
    } else {
      i32 = i20 + (i21 + i22 | 0) | 0;
      L760 : do {
        if ((i33 | 0) > 0) {
          i31 = i32;
          i30 = i14;
          i29 = 0;
          while (1) {
            i28 = i31 + ((HEAPU8[i30 + 1 | 0] | 0) << 8 | (HEAPU8[i30] | 0) | (HEAPU8[i30 + 2 | 0] | 0) << 16) | 0;
            i27 = i28 >>> 0 > i34 >>> 0 ? i34 : i28;
            HEAP32[i1 + 304 + (i29 * 24 & -1) + 12 >> 2] = 65279;
            HEAP32[i1 + 304 + (i29 * 24 & -1) >> 2] = i31;
            HEAP32[i1 + 304 + (i29 * 24 & -1) + 4 >> 2] = i27;
            HEAP32[i1 + 304 + (i29 * 24 & -1) + 16 >> 2] = 0;
            HEAP32[i1 + 304 + (i29 * 24 & -1) + 20 >> 2] = 8;
            HEAP32[i1 + 304 + (i29 * 24 & -1) + 8 >> 2] = 0;
            i28 = i29 + 1 | 0;
            if ((i28 | 0) == (i33 | 0)) {
              i36 = i27;
              break L760;
            } else {
              i31 = i27;
              i30 = i30 + 3 | 0;
              i29 = i28;
            }
          }
        } else {
          i36 = i32;
        }
      } while (0);
      HEAP32[i1 + 304 + (i33 * 24 & -1) + 12 >> 2] = 65279;
      HEAP32[i1 + 304 + (i33 * 24 & -1) >> 2] = i36;
      HEAP32[i1 + 304 + (i33 * 24 & -1) + 4 >> 2] = i34;
      HEAP32[i1 + 304 + (i33 * 24 & -1) + 16 >> 2] = 0;
      HEAP32[i1 + 304 + (i33 * 24 & -1) + 20 >> 2] = 8;
      HEAP32[i1 + 304 + (i33 * 24 & -1) + 8 >> 2] = 0;
      i32 = i36 >>> 0 < i34 >>> 0;
      if (!i32) {
        i35 = i32 ? 0 : 5;
        break;
      }
      i32 = _VP8GetValue(i11, 7) | 0;
      if ((_VP8GetValue(i11, 1) | 0) == 0) {
        i37 = 0;
      } else {
        i29 = _VP8GetValue(i11, 4) | 0;
        i37 = (_VP8GetValue(i11, 1) | 0) != 0 ? -i29 | 0 : i29;
      }
      if ((_VP8GetValue(i11, 1) | 0) == 0) {
        i38 = 0;
      } else {
        i29 = _VP8GetValue(i11, 4) | 0;
        i38 = (_VP8GetValue(i11, 1) | 0) != 0 ? -i29 | 0 : i29;
      }
      if ((_VP8GetValue(i11, 1) | 0) == 0) {
        i39 = 0;
      } else {
        i29 = _VP8GetValue(i11, 4) | 0;
        i39 = (_VP8GetValue(i11, 1) | 0) != 0 ? -i29 | 0 : i29;
      }
      if ((_VP8GetValue(i11, 1) | 0) == 0) {
        i40 = 0;
      } else {
        i29 = _VP8GetValue(i11, 4) | 0;
        i40 = (_VP8GetValue(i11, 1) | 0) != 0 ? -i29 | 0 : i29;
      }
      if ((_VP8GetValue(i11, 1) | 0) == 0) {
        i41 = 0;
      } else {
        i29 = _VP8GetValue(i11, 4) | 0;
        i41 = (_VP8GetValue(i11, 1) | 0) != 0 ? -i29 | 0 : i29;
      }
      i29 = i1 + 500 | 0;
      i30 = i1 + 108 | 0;
      i31 = 0;
      while (1) {
        do {
          if ((HEAP32[i16 >> 2] | 0) == 0) {
            if ((i31 | 0) <= 0) {
              i42 = i32;
              i43 = 534;
              break;
            }
            i28 = i1 + 500 + (i31 * 24 & -1) | 0;
            HEAP32[i28 >> 2] = HEAP32[i29 >> 2] | 0;
            HEAP32[i28 + 4 >> 2] = HEAP32[i29 + 4 >> 2] | 0;
            HEAP32[i28 + 8 >> 2] = HEAP32[i29 + 8 >> 2] | 0;
            HEAP32[i28 + 12 >> 2] = HEAP32[i29 + 12 >> 2] | 0;
            HEAP32[i28 + 16 >> 2] = HEAP32[i29 + 16 >> 2] | 0;
            HEAP32[i28 + 20 >> 2] = HEAP32[i29 + 20 >> 2] | 0;
            break;
          } else {
            i28 = HEAP8[i31 + (i1 + 112) | 0] << 24 >> 24;
            if ((HEAP32[i30 >> 2] | 0) != 0) {
              i42 = i28;
              i43 = 534;
              break;
            }
            i42 = i28 + i32 | 0;
            i43 = 534;
            break;
          }
        } while (0);
        if ((i43 | 0) == 534) {
          i43 = 0;
          i28 = i42 + i37 | 0;
          if ((i28 | 0) < 0) {
            i44 = 0;
          } else {
            i44 = (i28 | 0) > 127 ? 127 : i28;
          }
          HEAP32[i1 + 500 + (i31 * 24 & -1) >> 2] = HEAPU8[i44 + 5247304 | 0] | 0;
          if ((i42 | 0) < 0) {
            i45 = 0;
          } else {
            i45 = (i42 | 0) > 127 ? 127 : i42;
          }
          HEAP32[i1 + 500 + (i31 * 24 & -1) + 4 >> 2] = HEAPU16[5248604 + (i45 << 1) >> 1] | 0;
          i28 = i42 + i38 | 0;
          if ((i28 | 0) < 0) {
            i46 = 0;
          } else {
            i46 = (i28 | 0) > 127 ? 127 : i28;
          }
          HEAP32[i1 + 500 + (i31 * 24 & -1) + 8 >> 2] = (HEAPU8[i46 + 5247304 | 0] | 0) << 1;
          i28 = i42 + i39 | 0;
          if ((i28 | 0) < 0) {
            i47 = 0;
          } else {
            i47 = (i28 | 0) > 127 ? 127 : i28;
          }
          i28 = (HEAPU16[5248604 + (i47 << 1) >> 1] | 0) * 101581 & -1;
          HEAP32[i1 + 500 + (i31 * 24 & -1) + 12 >> 2] = i28 >>> 0 < 524288 ? 8 : i28 >>> 16;
          i28 = i42 + i40 | 0;
          if ((i28 | 0) < 0) {
            i48 = 0;
          } else {
            i48 = (i28 | 0) > 117 ? 117 : i28;
          }
          HEAP32[i1 + 500 + (i31 * 24 & -1) + 16 >> 2] = HEAPU8[i48 + 5247304 | 0] | 0;
          i28 = i42 + i41 | 0;
          if ((i28 | 0) < 0) {
            i49 = 0;
          } else {
            i49 = (i28 | 0) > 127 ? 127 : i28;
          }
          HEAP32[i1 + 500 + (i31 * 24 & -1) + 20 >> 2] = HEAPU16[5248604 + (i49 << 1) >> 1] | 0;
        }
        i28 = i31 + 1 | 0;
        if ((i28 | 0) == 4) {
          break;
        } else {
          i31 = i28;
        }
      }
      if (HEAP8[i13] << 24 >> 24 == 0) {
        if ((HEAP32[i6 >> 2] | 0) != 0) {
          i5 = 0;
          STACKTOP = i3;
          return i5 | 0;
        }
        HEAP32[i6 >> 2] = 4;
        HEAP32[i7 >> 2] = 5271832;
        HEAP32[i1 + 4 >> 2] = 0;
        i5 = 0;
        STACKTOP = i3;
        return i5 | 0;
      }
      HEAP32[i1 + 496 >> 2] = 259;
      _VP8GetValue(i11, 1) | 0;
      i31 = 0;
      while (1) {
        i32 = 0;
        while (1) {
          i30 = 0;
          while (1) {
            i29 = 0;
            while (1) {
              i28 = HEAP32[i15 >> 2] | 0;
              i27 = Math_imul(i28 >>> 8, HEAPU8[5281164 + (i31 * 264 & -1) + (i32 * 33 & -1) + (i30 * 11 & -1) + i29 | 0] | 0) | 255;
              i26 = HEAP32[i12 >> 2] | 0;
              do {
                if ((i26 | 0) > 0) {
                  i25 = HEAP32[i10 >> 2] | 0;
                  i24 = i25 + 1 | 0;
                  i23 = HEAP32[i4 >> 2] | 0;
                  if (i24 >>> 0 <= i23 >>> 0) {
                    i18 = HEAP8[i25] | 0;
                    HEAP32[i10 >> 2] = i24;
                    HEAP32[i9 >> 2] = (i18 & 255) << i26 | HEAP32[i9 >> 2];
                    i18 = i26 - 8 | 0;
                    HEAP32[i12 >> 2] = i18;
                    i50 = i18;
                    break;
                  }
                  if (i25 >>> 0 < i23 >>> 0) {
                    HEAP32[i10 >> 2] = i24;
                    HEAP32[i9 >> 2] = (HEAPU8[i25] | 0) << i26 | HEAP32[i9 >> 2];
                    i25 = i26 - 8 | 0;
                    HEAP32[i12 >> 2] = i25;
                    i50 = i25;
                    break;
                  } else {
                    HEAP32[i2 >> 2] = 1;
                    i50 = i26;
                    break;
                  }
                } else {
                  i50 = i26;
                }
              } while (0);
              i26 = HEAP32[i9 >> 2] | 0;
              if (i26 >>> 0 > i27 >>> 0) {
                i25 = i27 + 1 | 0;
                i24 = i28 - i25 | 0;
                HEAP32[i15 >> 2] = i24;
                i23 = i26 - i25 | 0;
                HEAP32[i9 >> 2] = i23;
                i51 = 1;
                i52 = i24;
                i53 = i23;
              } else {
                HEAP32[i15 >> 2] = i27;
                i51 = 0;
                i52 = i27;
                i53 = i26;
              }
              if (i52 >>> 0 < 32512) {
                i26 = i52 >>> 8;
                i23 = HEAPU8[i26 + 5246928 | 0] | 0;
                HEAP32[i15 >> 2] = HEAP32[5246416 + (i26 << 2) >> 2] | 0;
                HEAP32[i9 >> 2] = i53 << i23;
                HEAP32[i12 >> 2] = i23 + i50 | 0;
              }
              if ((i51 | 0) != 0) {
                HEAP8[i1 + 599 + (i31 * 264 & -1) + (i32 * 33 & -1) + (i30 * 11 & -1) + i29 | 0] = _VP8GetValue(i11, 8) & 255;
              }
              i23 = i29 + 1 | 0;
              if ((i23 | 0) == 11) {
                break;
              } else {
                i29 = i23;
              }
            }
            i29 = i30 + 1 | 0;
            if ((i29 | 0) == 3) {
              break;
            } else {
              i30 = i29;
            }
          }
          i30 = i32 + 1 | 0;
          if ((i30 | 0) == 8) {
            break;
          } else {
            i32 = i30;
          }
        }
        i32 = i31 + 1 | 0;
        if ((i32 | 0) == 4) {
          break;
        } else {
          i31 = i32;
        }
      }
      i31 = _VP8GetValue(i11, 1) | 0;
      HEAP32[i1 + 1656 >> 2] = i31;
      if ((i31 | 0) != 0) {
        HEAP8[i1 + 1660 | 0] = _VP8GetValue(i11, 8) & 255;
      }
      HEAP32[i1 + 4 >> 2] = 1;
      i5 = 1;
      STACKTOP = i3;
      return i5 | 0;
    }
  } while (0);
  if ((HEAP32[i6 >> 2] | 0) != 0) {
    i5 = 0;
    STACKTOP = i3;
    return i5 | 0;
  }
  HEAP32[i6 >> 2] = i35;
  HEAP32[i7 >> 2] = 5272304;
  HEAP32[i1 + 4 >> 2] = 0;
  i5 = 0;
  STACKTOP = i3;
  return i5 | 0;
}
function _GetCoeffs(i1, i2, i3, i4, i5, i6) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, i150 = 0, i151 = 0, i152 = 0, i153 = 0, i154 = 0, i155 = 0;
  i7 = i2 + (i5 * 33 & -1) + (i3 * 11 & -1) | 0;
  i3 = i1 + 12 | 0;
  i8 = HEAP32[i3 >> 2] | 0;
  i9 = Math_imul(i8 >>> 8, HEAPU8[i7] | 0) | 255;
  i10 = i1 + 20 | 0;
  i11 = HEAP32[i10 >> 2] | 0;
  do {
    if ((i11 | 0) > 0) {
      i12 = i1 | 0;
      i13 = HEAP32[i12 >> 2] | 0;
      i14 = i13 + 1 | 0;
      i15 = HEAP32[i1 + 4 >> 2] | 0;
      if (i14 >>> 0 <= i15 >>> 0) {
        i16 = HEAP8[i13] | 0;
        HEAP32[i12 >> 2] = i14;
        i17 = i1 + 16 | 0;
        HEAP32[i17 >> 2] = (i16 & 255) << i11 | HEAP32[i17 >> 2];
        i17 = i11 - 8 | 0;
        HEAP32[i10 >> 2] = i17;
        i18 = i17;
        break;
      }
      if (i13 >>> 0 < i15 >>> 0) {
        HEAP32[i12 >> 2] = i14;
        i14 = i1 + 16 | 0;
        HEAP32[i14 >> 2] = (HEAPU8[i13] | 0) << i11 | HEAP32[i14 >> 2];
        i14 = i11 - 8 | 0;
        HEAP32[i10 >> 2] = i14;
        i18 = i14;
        break;
      } else {
        HEAP32[i1 + 8 >> 2] = 1;
        i18 = i11;
        break;
      }
    } else {
      i18 = i11;
    }
  } while (0);
  i11 = i1 + 16 | 0;
  i14 = HEAP32[i11 >> 2] | 0;
  if (i14 >>> 0 > i9 >>> 0) {
    i13 = i9 + 1 | 0;
    i12 = i8 - i13 | 0;
    HEAP32[i3 >> 2] = i12;
    i8 = i14 - i13 | 0;
    HEAP32[i11 >> 2] = i8;
    i19 = 1;
    i20 = i12;
    i21 = i8;
  } else {
    HEAP32[i3 >> 2] = i9;
    i19 = 0;
    i20 = i9;
    i21 = i14;
  }
  if (i20 >>> 0 < 32512) {
    i14 = i20 >>> 8;
    i9 = HEAPU8[i14 + 5246928 | 0] | 0;
    i8 = HEAP32[5246416 + (i14 << 2) >> 2] | 0;
    HEAP32[i3 >> 2] = i8;
    HEAP32[i11 >> 2] = i21 << i9;
    i21 = i9 + i18 | 0;
    HEAP32[i10 >> 2] = i21;
    i22 = i8;
    i23 = i21;
  } else {
    i22 = i20;
    i23 = i18;
  }
  if ((i19 | 0) == 0) {
    i24 = 0;
    return i24 | 0;
  }
  if ((i5 | 0) >= 16) {
    i24 = 16;
    return i24 | 0;
  }
  i19 = i1 | 0;
  i18 = i1 + 4 | 0;
  i20 = i1 + 8 | 0;
  i1 = i5;
  i5 = i7;
  i7 = i22;
  i22 = i23;
  L879 : while (1) {
    i23 = i1 + 1 | 0;
    i21 = HEAP32[5247624 + (i23 << 2) >> 2] | 0;
    i8 = Math_imul(i7 >>> 8, HEAPU8[i5 + 1 | 0] | 0) | 255;
    do {
      if ((i22 | 0) > 0) {
        i9 = HEAP32[i19 >> 2] | 0;
        i14 = i9 + 1 | 0;
        i12 = HEAP32[i18 >> 2] | 0;
        if (i14 >>> 0 <= i12 >>> 0) {
          i13 = HEAP8[i9] | 0;
          HEAP32[i19 >> 2] = i14;
          HEAP32[i11 >> 2] = (i13 & 255) << i22 | HEAP32[i11 >> 2];
          i13 = i22 - 8 | 0;
          HEAP32[i10 >> 2] = i13;
          i25 = i13;
          break;
        }
        if (i9 >>> 0 < i12 >>> 0) {
          HEAP32[i19 >> 2] = i14;
          HEAP32[i11 >> 2] = (HEAPU8[i9] | 0) << i22 | HEAP32[i11 >> 2];
          i9 = i22 - 8 | 0;
          HEAP32[i10 >> 2] = i9;
          i25 = i9;
          break;
        } else {
          HEAP32[i20 >> 2] = 1;
          i25 = i22;
          break;
        }
      } else {
        i25 = i22;
      }
    } while (0);
    i9 = HEAP32[i11 >> 2] | 0;
    if (i9 >>> 0 > i8 >>> 0) {
      i14 = i8 + 1 | 0;
      i12 = i7 - i14 | 0;
      HEAP32[i3 >> 2] = i12;
      i13 = i9 - i14 | 0;
      HEAP32[i11 >> 2] = i13;
      i26 = 1;
      i27 = i12;
      i28 = i13;
    } else {
      HEAP32[i3 >> 2] = i8;
      i26 = 0;
      i27 = i8;
      i28 = i9;
    }
    if (i27 >>> 0 < 32512) {
      i9 = i27 >>> 8;
      i13 = HEAPU8[i9 + 5246928 | 0] | 0;
      i12 = HEAP32[5246416 + (i9 << 2) >> 2] | 0;
      HEAP32[i3 >> 2] = i12;
      i9 = i28 << i13;
      HEAP32[i11 >> 2] = i9;
      i14 = i13 + i25 | 0;
      HEAP32[i10 >> 2] = i14;
      i29 = i12;
      i30 = i14;
      i31 = i9;
    } else {
      i29 = i27;
      i30 = i25;
      i31 = i28;
    }
    do {
      if ((i26 | 0) == 0) {
        i32 = i2 + (i21 * 33 & -1) | 0;
      } else {
        i9 = Math_imul(i29 >>> 8, HEAPU8[i5 + 2 | 0] | 0) | 255;
        do {
          if ((i30 | 0) > 0) {
            i14 = HEAP32[i19 >> 2] | 0;
            i12 = i14 + 1 | 0;
            i13 = HEAP32[i18 >> 2] | 0;
            if (i12 >>> 0 <= i13 >>> 0) {
              i15 = HEAP8[i14] | 0;
              HEAP32[i19 >> 2] = i12;
              i17 = (i15 & 255) << i30 | i31;
              HEAP32[i11 >> 2] = i17;
              i15 = i30 - 8 | 0;
              HEAP32[i10 >> 2] = i15;
              i33 = i15;
              i34 = i17;
              break;
            }
            if (i14 >>> 0 < i13 >>> 0) {
              HEAP32[i19 >> 2] = i12;
              i12 = (HEAPU8[i14] | 0) << i30 | i31;
              HEAP32[i11 >> 2] = i12;
              i14 = i30 - 8 | 0;
              HEAP32[i10 >> 2] = i14;
              i33 = i14;
              i34 = i12;
              break;
            } else {
              HEAP32[i20 >> 2] = 1;
              i33 = i30;
              i34 = i31;
              break;
            }
          } else {
            i33 = i30;
            i34 = i31;
          }
        } while (0);
        if (i34 >>> 0 > i9 >>> 0) {
          i12 = i9 + 1 | 0;
          i14 = i29 - i12 | 0;
          HEAP32[i3 >> 2] = i14;
          i13 = i34 - i12 | 0;
          HEAP32[i11 >> 2] = i13;
          i35 = 1;
          i36 = i14;
          i37 = i13;
        } else {
          HEAP32[i3 >> 2] = i9;
          i35 = 0;
          i36 = i9;
          i37 = i34;
        }
        if (i36 >>> 0 < 32512) {
          i13 = i36 >>> 8;
          i14 = HEAPU8[i13 + 5246928 | 0] | 0;
          i12 = HEAP32[5246416 + (i13 << 2) >> 2] | 0;
          HEAP32[i3 >> 2] = i12;
          i13 = i37 << i14;
          HEAP32[i11 >> 2] = i13;
          i17 = i14 + i33 | 0;
          HEAP32[i10 >> 2] = i17;
          i38 = i12;
          i39 = i17;
          i40 = i13;
        } else {
          i38 = i36;
          i39 = i33;
          i40 = i37;
        }
        if ((i35 | 0) == 0) {
          i41 = 1;
          i42 = i2 + (i21 * 33 & -1) + 11 | 0;
          i43 = i38;
          i44 = i39;
          i45 = i40;
        } else {
          i13 = Math_imul(i38 >>> 8, HEAPU8[i5 + 3 | 0] | 0) | 255;
          do {
            if ((i39 | 0) > 0) {
              i17 = HEAP32[i19 >> 2] | 0;
              i12 = i17 + 1 | 0;
              i14 = HEAP32[i18 >> 2] | 0;
              if (i12 >>> 0 <= i14 >>> 0) {
                i15 = HEAP8[i17] | 0;
                HEAP32[i19 >> 2] = i12;
                i16 = (i15 & 255) << i39 | i40;
                HEAP32[i11 >> 2] = i16;
                i15 = i39 - 8 | 0;
                HEAP32[i10 >> 2] = i15;
                i46 = i15;
                i47 = i16;
                break;
              }
              if (i17 >>> 0 < i14 >>> 0) {
                HEAP32[i19 >> 2] = i12;
                i12 = (HEAPU8[i17] | 0) << i39 | i40;
                HEAP32[i11 >> 2] = i12;
                i17 = i39 - 8 | 0;
                HEAP32[i10 >> 2] = i17;
                i46 = i17;
                i47 = i12;
                break;
              } else {
                HEAP32[i20 >> 2] = 1;
                i46 = i39;
                i47 = i40;
                break;
              }
            } else {
              i46 = i39;
              i47 = i40;
            }
          } while (0);
          if (i47 >>> 0 > i13 >>> 0) {
            i9 = i13 + 1 | 0;
            i12 = i38 - i9 | 0;
            HEAP32[i3 >> 2] = i12;
            i17 = i47 - i9 | 0;
            HEAP32[i11 >> 2] = i17;
            i48 = 1;
            i49 = i12;
            i50 = i17;
          } else {
            HEAP32[i3 >> 2] = i13;
            i48 = 0;
            i49 = i13;
            i50 = i47;
          }
          if (i49 >>> 0 < 32512) {
            i17 = i49 >>> 8;
            i12 = HEAPU8[i17 + 5246928 | 0] | 0;
            i9 = HEAP32[5246416 + (i17 << 2) >> 2] | 0;
            HEAP32[i3 >> 2] = i9;
            i17 = i50 << i12;
            HEAP32[i11 >> 2] = i17;
            i14 = i12 + i46 | 0;
            HEAP32[i10 >> 2] = i14;
            i51 = i9;
            i52 = i14;
            i53 = i17;
          } else {
            i51 = i49;
            i52 = i46;
            i53 = i50;
          }
          do {
            if ((i48 | 0) == 0) {
              i17 = Math_imul(HEAPU8[i5 + 4 | 0] | 0, i51 >>> 8) | 255;
              do {
                if ((i52 | 0) > 0) {
                  i14 = HEAP32[i19 >> 2] | 0;
                  i9 = i14 + 1 | 0;
                  i12 = HEAP32[i18 >> 2] | 0;
                  if (i9 >>> 0 <= i12 >>> 0) {
                    i16 = HEAP8[i14] | 0;
                    HEAP32[i19 >> 2] = i9;
                    i15 = (i16 & 255) << i52 | i53;
                    HEAP32[i11 >> 2] = i15;
                    i16 = i52 - 8 | 0;
                    HEAP32[i10 >> 2] = i16;
                    i54 = i16;
                    i55 = i15;
                    break;
                  }
                  if (i14 >>> 0 < i12 >>> 0) {
                    HEAP32[i19 >> 2] = i9;
                    i9 = (HEAPU8[i14] | 0) << i52 | i53;
                    HEAP32[i11 >> 2] = i9;
                    i14 = i52 - 8 | 0;
                    HEAP32[i10 >> 2] = i14;
                    i54 = i14;
                    i55 = i9;
                    break;
                  } else {
                    HEAP32[i20 >> 2] = 1;
                    i54 = i52;
                    i55 = i53;
                    break;
                  }
                } else {
                  i54 = i52;
                  i55 = i53;
                }
              } while (0);
              if (i55 >>> 0 > i17 >>> 0) {
                i9 = i17 + 1 | 0;
                i14 = i51 - i9 | 0;
                HEAP32[i3 >> 2] = i14;
                i12 = i55 - i9 | 0;
                HEAP32[i11 >> 2] = i12;
                i56 = 1;
                i57 = i14;
                i58 = i12;
              } else {
                HEAP32[i3 >> 2] = i17;
                i56 = 0;
                i57 = i17;
                i58 = i55;
              }
              if (i57 >>> 0 < 32512) {
                i12 = i57 >>> 8;
                i14 = HEAPU8[i12 + 5246928 | 0] | 0;
                i9 = HEAP32[5246416 + (i12 << 2) >> 2] | 0;
                HEAP32[i3 >> 2] = i9;
                i12 = i58 << i14;
                HEAP32[i11 >> 2] = i12;
                i15 = i14 + i54 | 0;
                HEAP32[i10 >> 2] = i15;
                i59 = i9;
                i60 = i15;
                i61 = i12;
              } else {
                i59 = i57;
                i60 = i54;
                i61 = i58;
              }
              if ((i56 | 0) == 0) {
                i62 = 2;
                i63 = i59;
                i64 = i60;
                i65 = i61;
                break;
              }
              i12 = Math_imul(HEAPU8[i5 + 5 | 0] | 0, i59 >>> 8) | 255;
              do {
                if ((i60 | 0) > 0) {
                  i15 = HEAP32[i19 >> 2] | 0;
                  i9 = i15 + 1 | 0;
                  i14 = HEAP32[i18 >> 2] | 0;
                  if (i9 >>> 0 <= i14 >>> 0) {
                    i16 = HEAP8[i15] | 0;
                    HEAP32[i19 >> 2] = i9;
                    i66 = (i16 & 255) << i60 | i61;
                    HEAP32[i11 >> 2] = i66;
                    i16 = i60 - 8 | 0;
                    HEAP32[i10 >> 2] = i16;
                    i67 = i16;
                    i68 = i66;
                    break;
                  }
                  if (i15 >>> 0 < i14 >>> 0) {
                    HEAP32[i19 >> 2] = i9;
                    i9 = (HEAPU8[i15] | 0) << i60 | i61;
                    HEAP32[i11 >> 2] = i9;
                    i15 = i60 - 8 | 0;
                    HEAP32[i10 >> 2] = i15;
                    i67 = i15;
                    i68 = i9;
                    break;
                  } else {
                    HEAP32[i20 >> 2] = 1;
                    i67 = i60;
                    i68 = i61;
                    break;
                  }
                } else {
                  i67 = i60;
                  i68 = i61;
                }
              } while (0);
              if (i68 >>> 0 > i12 >>> 0) {
                i17 = i12 + 1 | 0;
                i9 = i59 - i17 | 0;
                HEAP32[i3 >> 2] = i9;
                i15 = i68 - i17 | 0;
                HEAP32[i11 >> 2] = i15;
                i69 = 4;
                i70 = i9;
                i71 = i15;
              } else {
                HEAP32[i3 >> 2] = i12;
                i69 = 3;
                i70 = i12;
                i71 = i68;
              }
              if (i70 >>> 0 >= 32512) {
                i62 = i69;
                i63 = i70;
                i64 = i67;
                i65 = i71;
                break;
              }
              i15 = i70 >>> 8;
              i9 = HEAPU8[i15 + 5246928 | 0] | 0;
              i17 = HEAP32[5246416 + (i15 << 2) >> 2] | 0;
              HEAP32[i3 >> 2] = i17;
              i15 = i71 << i9;
              HEAP32[i11 >> 2] = i15;
              i14 = i9 + i67 | 0;
              HEAP32[i10 >> 2] = i14;
              i62 = i69;
              i63 = i17;
              i64 = i14;
              i65 = i15;
            } else {
              i15 = Math_imul(HEAPU8[i5 + 6 | 0] | 0, i51 >>> 8) | 255;
              do {
                if ((i52 | 0) > 0) {
                  i14 = HEAP32[i19 >> 2] | 0;
                  i17 = i14 + 1 | 0;
                  i9 = HEAP32[i18 >> 2] | 0;
                  if (i17 >>> 0 <= i9 >>> 0) {
                    i66 = HEAP8[i14] | 0;
                    HEAP32[i19 >> 2] = i17;
                    i16 = (i66 & 255) << i52 | i53;
                    HEAP32[i11 >> 2] = i16;
                    i66 = i52 - 8 | 0;
                    HEAP32[i10 >> 2] = i66;
                    i72 = i66;
                    i73 = i16;
                    break;
                  }
                  if (i14 >>> 0 < i9 >>> 0) {
                    HEAP32[i19 >> 2] = i17;
                    i17 = (HEAPU8[i14] | 0) << i52 | i53;
                    HEAP32[i11 >> 2] = i17;
                    i14 = i52 - 8 | 0;
                    HEAP32[i10 >> 2] = i14;
                    i72 = i14;
                    i73 = i17;
                    break;
                  } else {
                    HEAP32[i20 >> 2] = 1;
                    i72 = i52;
                    i73 = i53;
                    break;
                  }
                } else {
                  i72 = i52;
                  i73 = i53;
                }
              } while (0);
              if (i73 >>> 0 > i15 >>> 0) {
                i12 = i15 + 1 | 0;
                i17 = i51 - i12 | 0;
                HEAP32[i3 >> 2] = i17;
                i14 = i73 - i12 | 0;
                HEAP32[i11 >> 2] = i14;
                i74 = 1;
                i75 = i17;
                i76 = i14;
              } else {
                HEAP32[i3 >> 2] = i15;
                i74 = 0;
                i75 = i15;
                i76 = i73;
              }
              if (i75 >>> 0 < 32512) {
                i14 = i75 >>> 8;
                i17 = HEAPU8[i14 + 5246928 | 0] | 0;
                i12 = HEAP32[5246416 + (i14 << 2) >> 2] | 0;
                HEAP32[i3 >> 2] = i12;
                i14 = i76 << i17;
                HEAP32[i11 >> 2] = i14;
                i9 = i17 + i72 | 0;
                HEAP32[i10 >> 2] = i9;
                i77 = i12;
                i78 = i9;
                i79 = i14;
              } else {
                i77 = i75;
                i78 = i72;
                i79 = i76;
              }
              if ((i74 | 0) != 0) {
                i14 = Math_imul(HEAPU8[i5 + 8 | 0] | 0, i77 >>> 8) | 255;
                do {
                  if ((i78 | 0) > 0) {
                    i9 = HEAP32[i19 >> 2] | 0;
                    i12 = i9 + 1 | 0;
                    i17 = HEAP32[i18 >> 2] | 0;
                    if (i12 >>> 0 <= i17 >>> 0) {
                      i16 = HEAP8[i9] | 0;
                      HEAP32[i19 >> 2] = i12;
                      i66 = (i16 & 255) << i78 | i79;
                      HEAP32[i11 >> 2] = i66;
                      i16 = i78 - 8 | 0;
                      HEAP32[i10 >> 2] = i16;
                      i80 = i16;
                      i81 = i66;
                      break;
                    }
                    if (i9 >>> 0 < i17 >>> 0) {
                      HEAP32[i19 >> 2] = i12;
                      i12 = (HEAPU8[i9] | 0) << i78 | i79;
                      HEAP32[i11 >> 2] = i12;
                      i9 = i78 - 8 | 0;
                      HEAP32[i10 >> 2] = i9;
                      i80 = i9;
                      i81 = i12;
                      break;
                    } else {
                      HEAP32[i20 >> 2] = 1;
                      i80 = i78;
                      i81 = i79;
                      break;
                    }
                  } else {
                    i80 = i78;
                    i81 = i79;
                  }
                } while (0);
                if (i81 >>> 0 > i14 >>> 0) {
                  i15 = i14 + 1 | 0;
                  i12 = i77 - i15 | 0;
                  HEAP32[i3 >> 2] = i12;
                  i9 = i81 - i15 | 0;
                  HEAP32[i11 >> 2] = i9;
                  i82 = 1;
                  i83 = i12;
                  i84 = i9;
                } else {
                  HEAP32[i3 >> 2] = i14;
                  i82 = 0;
                  i83 = i14;
                  i84 = i81;
                }
                if (i83 >>> 0 < 32512) {
                  i9 = i83 >>> 8;
                  i12 = HEAPU8[i9 + 5246928 | 0] | 0;
                  i15 = HEAP32[5246416 + (i9 << 2) >> 2] | 0;
                  HEAP32[i3 >> 2] = i15;
                  i9 = i84 << i12;
                  HEAP32[i11 >> 2] = i9;
                  i17 = i12 + i80 | 0;
                  HEAP32[i10 >> 2] = i17;
                  i85 = i15;
                  i86 = i17;
                  i87 = i9;
                } else {
                  i85 = i83;
                  i86 = i80;
                  i87 = i84;
                }
                i9 = Math_imul(HEAPU8[i5 + (i82 + 9 | 0) | 0] | 0, i85 >>> 8) | 255;
                do {
                  if ((i86 | 0) > 0) {
                    i17 = HEAP32[i19 >> 2] | 0;
                    i15 = i17 + 1 | 0;
                    i12 = HEAP32[i18 >> 2] | 0;
                    if (i15 >>> 0 <= i12 >>> 0) {
                      i66 = HEAP8[i17] | 0;
                      HEAP32[i19 >> 2] = i15;
                      i16 = (i66 & 255) << i86 | i87;
                      HEAP32[i11 >> 2] = i16;
                      i66 = i86 - 8 | 0;
                      HEAP32[i10 >> 2] = i66;
                      i88 = i66;
                      i89 = i16;
                      break;
                    }
                    if (i17 >>> 0 < i12 >>> 0) {
                      HEAP32[i19 >> 2] = i15;
                      i15 = (HEAPU8[i17] | 0) << i86 | i87;
                      HEAP32[i11 >> 2] = i15;
                      i17 = i86 - 8 | 0;
                      HEAP32[i10 >> 2] = i17;
                      i88 = i17;
                      i89 = i15;
                      break;
                    } else {
                      HEAP32[i20 >> 2] = 1;
                      i88 = i86;
                      i89 = i87;
                      break;
                    }
                  } else {
                    i88 = i86;
                    i89 = i87;
                  }
                } while (0);
                if (i89 >>> 0 > i9 >>> 0) {
                  i14 = i9 + 1 | 0;
                  i15 = i85 - i14 | 0;
                  HEAP32[i3 >> 2] = i15;
                  i17 = i89 - i14 | 0;
                  HEAP32[i11 >> 2] = i17;
                  i90 = 1;
                  i91 = i15;
                  i92 = i17;
                } else {
                  HEAP32[i3 >> 2] = i9;
                  i90 = 0;
                  i91 = i9;
                  i92 = i89;
                }
                if (i91 >>> 0 < 32512) {
                  i17 = i91 >>> 8;
                  i15 = HEAPU8[i17 + 5246928 | 0] | 0;
                  i14 = HEAP32[5246416 + (i17 << 2) >> 2] | 0;
                  HEAP32[i3 >> 2] = i14;
                  i17 = i92 << i15;
                  HEAP32[i11 >> 2] = i17;
                  i12 = i15 + i88 | 0;
                  HEAP32[i10 >> 2] = i12;
                  i93 = i14;
                  i94 = i12;
                  i95 = i17;
                } else {
                  i93 = i91;
                  i94 = i88;
                  i95 = i92;
                }
                i17 = i90 | i82 << 1;
                i12 = HEAP32[5247504 + (i17 << 2) >> 2] | 0;
                i14 = HEAP8[i12] | 0;
                L1019 : do {
                  if (i14 << 24 >> 24 == 0) {
                    i96 = 0;
                    i97 = i93;
                    i98 = i94;
                    i99 = i95;
                  } else {
                    i15 = i12;
                    i16 = 0;
                    i66 = i14;
                    i100 = i93;
                    i101 = i94;
                    i102 = i95;
                    while (1) {
                      i103 = Math_imul(i66 & 255, i100 >>> 8) | 255;
                      do {
                        if ((i101 | 0) > 0) {
                          i104 = HEAP32[i19 >> 2] | 0;
                          i105 = i104 + 1 | 0;
                          i106 = HEAP32[i18 >> 2] | 0;
                          if (i105 >>> 0 <= i106 >>> 0) {
                            i107 = HEAP8[i104] | 0;
                            HEAP32[i19 >> 2] = i105;
                            i108 = (i107 & 255) << i101 | i102;
                            HEAP32[i11 >> 2] = i108;
                            i107 = i101 - 8 | 0;
                            HEAP32[i10 >> 2] = i107;
                            i109 = i107;
                            i110 = i108;
                            break;
                          }
                          if (i104 >>> 0 < i106 >>> 0) {
                            HEAP32[i19 >> 2] = i105;
                            i105 = (HEAPU8[i104] | 0) << i101 | i102;
                            HEAP32[i11 >> 2] = i105;
                            i104 = i101 - 8 | 0;
                            HEAP32[i10 >> 2] = i104;
                            i109 = i104;
                            i110 = i105;
                            break;
                          } else {
                            HEAP32[i20 >> 2] = 1;
                            i109 = i101;
                            i110 = i102;
                            break;
                          }
                        } else {
                          i109 = i101;
                          i110 = i102;
                        }
                      } while (0);
                      if (i110 >>> 0 > i103 >>> 0) {
                        i105 = i103 + 1 | 0;
                        i104 = i100 - i105 | 0;
                        HEAP32[i3 >> 2] = i104;
                        i106 = i110 - i105 | 0;
                        HEAP32[i11 >> 2] = i106;
                        i111 = 1;
                        i112 = i104;
                        i113 = i106;
                      } else {
                        HEAP32[i3 >> 2] = i103;
                        i111 = 0;
                        i112 = i103;
                        i113 = i110;
                      }
                      if (i112 >>> 0 < 32512) {
                        i106 = i112 >>> 8;
                        i104 = HEAPU8[i106 + 5246928 | 0] | 0;
                        i105 = HEAP32[5246416 + (i106 << 2) >> 2] | 0;
                        HEAP32[i3 >> 2] = i105;
                        i106 = i113 << i104;
                        HEAP32[i11 >> 2] = i106;
                        i108 = i104 + i109 | 0;
                        HEAP32[i10 >> 2] = i108;
                        i114 = i105;
                        i115 = i108;
                        i116 = i106;
                      } else {
                        i114 = i112;
                        i115 = i109;
                        i116 = i113;
                      }
                      i106 = i111 | i16 << 1;
                      i108 = i15 + 1 | 0;
                      i105 = HEAP8[i108] | 0;
                      if (i105 << 24 >> 24 == 0) {
                        i96 = i106;
                        i97 = i114;
                        i98 = i115;
                        i99 = i116;
                        break L1019;
                      } else {
                        i15 = i108;
                        i16 = i106;
                        i66 = i105;
                        i100 = i114;
                        i101 = i115;
                        i102 = i116;
                      }
                    }
                  }
                } while (0);
                i62 = ((8 << i17) + 3 | 0) + i96 | 0;
                i63 = i97;
                i64 = i98;
                i65 = i99;
                break;
              }
              i14 = Math_imul(HEAPU8[i5 + 7 | 0] | 0, i77 >>> 8) | 255;
              do {
                if ((i78 | 0) > 0) {
                  i12 = HEAP32[i19 >> 2] | 0;
                  i9 = i12 + 1 | 0;
                  i102 = HEAP32[i18 >> 2] | 0;
                  if (i9 >>> 0 <= i102 >>> 0) {
                    i101 = HEAP8[i12] | 0;
                    HEAP32[i19 >> 2] = i9;
                    i100 = (i101 & 255) << i78 | i79;
                    HEAP32[i11 >> 2] = i100;
                    i101 = i78 - 8 | 0;
                    HEAP32[i10 >> 2] = i101;
                    i117 = i101;
                    i118 = i100;
                    break;
                  }
                  if (i12 >>> 0 < i102 >>> 0) {
                    HEAP32[i19 >> 2] = i9;
                    i9 = (HEAPU8[i12] | 0) << i78 | i79;
                    HEAP32[i11 >> 2] = i9;
                    i12 = i78 - 8 | 0;
                    HEAP32[i10 >> 2] = i12;
                    i117 = i12;
                    i118 = i9;
                    break;
                  } else {
                    HEAP32[i20 >> 2] = 1;
                    i117 = i78;
                    i118 = i79;
                    break;
                  }
                } else {
                  i117 = i78;
                  i118 = i79;
                }
              } while (0);
              if (i118 >>> 0 > i14 >>> 0) {
                i17 = i14 + 1 | 0;
                i9 = i77 - i17 | 0;
                HEAP32[i3 >> 2] = i9;
                i12 = i118 - i17 | 0;
                HEAP32[i11 >> 2] = i12;
                i119 = 1;
                i120 = i9;
                i121 = i12;
              } else {
                HEAP32[i3 >> 2] = i14;
                i119 = 0;
                i120 = i14;
                i121 = i118;
              }
              if (i120 >>> 0 < 32512) {
                i12 = i120 >>> 8;
                i9 = HEAPU8[i12 + 5246928 | 0] | 0;
                i17 = HEAP32[5246416 + (i12 << 2) >> 2] | 0;
                HEAP32[i3 >> 2] = i17;
                i12 = i121 << i9;
                HEAP32[i11 >> 2] = i12;
                i102 = i9 + i117 | 0;
                HEAP32[i10 >> 2] = i102;
                i122 = i17;
                i123 = i102;
                i124 = i12;
              } else {
                i122 = i120;
                i123 = i117;
                i124 = i121;
              }
              i12 = i122 >>> 8;
              if ((i119 | 0) == 0) {
                i102 = i12 * 159 & -1 | 255;
                do {
                  if ((i123 | 0) > 0) {
                    i17 = HEAP32[i19 >> 2] | 0;
                    i9 = i17 + 1 | 0;
                    i100 = HEAP32[i18 >> 2] | 0;
                    if (i9 >>> 0 <= i100 >>> 0) {
                      i101 = HEAP8[i17] | 0;
                      HEAP32[i19 >> 2] = i9;
                      i66 = (i101 & 255) << i123 | i124;
                      HEAP32[i11 >> 2] = i66;
                      i101 = i123 - 8 | 0;
                      HEAP32[i10 >> 2] = i101;
                      i125 = i101;
                      i126 = i66;
                      break;
                    }
                    if (i17 >>> 0 < i100 >>> 0) {
                      HEAP32[i19 >> 2] = i9;
                      i9 = (HEAPU8[i17] | 0) << i123 | i124;
                      HEAP32[i11 >> 2] = i9;
                      i17 = i123 - 8 | 0;
                      HEAP32[i10 >> 2] = i17;
                      i125 = i17;
                      i126 = i9;
                      break;
                    } else {
                      HEAP32[i20 >> 2] = 1;
                      i125 = i123;
                      i126 = i124;
                      break;
                    }
                  } else {
                    i125 = i123;
                    i126 = i124;
                  }
                } while (0);
                if (i126 >>> 0 > i102 >>> 0) {
                  i14 = i102 + 1 | 0;
                  i9 = i122 - i14 | 0;
                  HEAP32[i3 >> 2] = i9;
                  i17 = i126 - i14 | 0;
                  HEAP32[i11 >> 2] = i17;
                  i127 = 6;
                  i128 = i9;
                  i129 = i17;
                } else {
                  HEAP32[i3 >> 2] = i102;
                  i127 = 5;
                  i128 = i102;
                  i129 = i126;
                }
                if (i128 >>> 0 >= 32512) {
                  i62 = i127;
                  i63 = i128;
                  i64 = i125;
                  i65 = i129;
                  break;
                }
                i17 = i128 >>> 8;
                i9 = HEAPU8[i17 + 5246928 | 0] | 0;
                i14 = HEAP32[5246416 + (i17 << 2) >> 2] | 0;
                HEAP32[i3 >> 2] = i14;
                i17 = i129 << i9;
                HEAP32[i11 >> 2] = i17;
                i100 = i9 + i125 | 0;
                HEAP32[i10 >> 2] = i100;
                i62 = i127;
                i63 = i14;
                i64 = i100;
                i65 = i17;
                break;
              }
              i17 = i12 * 165 & -1 | 255;
              do {
                if ((i123 | 0) > 0) {
                  i100 = HEAP32[i19 >> 2] | 0;
                  i14 = i100 + 1 | 0;
                  i9 = HEAP32[i18 >> 2] | 0;
                  if (i14 >>> 0 <= i9 >>> 0) {
                    i66 = HEAP8[i100] | 0;
                    HEAP32[i19 >> 2] = i14;
                    i101 = (i66 & 255) << i123 | i124;
                    HEAP32[i11 >> 2] = i101;
                    i66 = i123 - 8 | 0;
                    HEAP32[i10 >> 2] = i66;
                    i130 = i66;
                    i131 = i101;
                    break;
                  }
                  if (i100 >>> 0 < i9 >>> 0) {
                    HEAP32[i19 >> 2] = i14;
                    i14 = (HEAPU8[i100] | 0) << i123 | i124;
                    HEAP32[i11 >> 2] = i14;
                    i100 = i123 - 8 | 0;
                    HEAP32[i10 >> 2] = i100;
                    i130 = i100;
                    i131 = i14;
                    break;
                  } else {
                    HEAP32[i20 >> 2] = 1;
                    i130 = i123;
                    i131 = i124;
                    break;
                  }
                } else {
                  i130 = i123;
                  i131 = i124;
                }
              } while (0);
              if (i131 >>> 0 > i17 >>> 0) {
                i12 = i17 + 1 | 0;
                i102 = i122 - i12 | 0;
                HEAP32[i3 >> 2] = i102;
                i14 = i131 - i12 | 0;
                HEAP32[i11 >> 2] = i14;
                i132 = 9;
                i133 = i102;
                i134 = i14;
              } else {
                HEAP32[i3 >> 2] = i17;
                i132 = 7;
                i133 = i17;
                i134 = i131;
              }
              if (i133 >>> 0 < 32512) {
                i14 = i133 >>> 8;
                i102 = HEAPU8[i14 + 5246928 | 0] | 0;
                i12 = HEAP32[5246416 + (i14 << 2) >> 2] | 0;
                HEAP32[i3 >> 2] = i12;
                i14 = i134 << i102;
                HEAP32[i11 >> 2] = i14;
                i100 = i102 + i130 | 0;
                HEAP32[i10 >> 2] = i100;
                i135 = i100;
                i136 = i12;
                i137 = i14;
              } else {
                i135 = i130;
                i136 = i133;
                i137 = i134;
              }
              i14 = (i136 >>> 8) * 145 & -1 | 255;
              do {
                if ((i135 | 0) > 0) {
                  i12 = HEAP32[i19 >> 2] | 0;
                  i100 = i12 + 1 | 0;
                  i102 = HEAP32[i18 >> 2] | 0;
                  if (i100 >>> 0 <= i102 >>> 0) {
                    i9 = HEAP8[i12] | 0;
                    HEAP32[i19 >> 2] = i100;
                    i101 = (i9 & 255) << i135 | i137;
                    HEAP32[i11 >> 2] = i101;
                    i9 = i135 - 8 | 0;
                    HEAP32[i10 >> 2] = i9;
                    i138 = i9;
                    i139 = i101;
                    break;
                  }
                  if (i12 >>> 0 < i102 >>> 0) {
                    HEAP32[i19 >> 2] = i100;
                    i100 = (HEAPU8[i12] | 0) << i135 | i137;
                    HEAP32[i11 >> 2] = i100;
                    i12 = i135 - 8 | 0;
                    HEAP32[i10 >> 2] = i12;
                    i138 = i12;
                    i139 = i100;
                    break;
                  } else {
                    HEAP32[i20 >> 2] = 1;
                    i138 = i135;
                    i139 = i137;
                    break;
                  }
                } else {
                  i138 = i135;
                  i139 = i137;
                }
              } while (0);
              if (i139 >>> 0 > i14 >>> 0) {
                i17 = i14 + 1 | 0;
                i100 = i136 - i17 | 0;
                HEAP32[i3 >> 2] = i100;
                i12 = i139 - i17 | 0;
                HEAP32[i11 >> 2] = i12;
                i140 = 1;
                i141 = i100;
                i142 = i12;
              } else {
                HEAP32[i3 >> 2] = i14;
                i140 = 0;
                i141 = i14;
                i142 = i139;
              }
              if (i141 >>> 0 < 32512) {
                i12 = i141 >>> 8;
                i100 = HEAPU8[i12 + 5246928 | 0] | 0;
                i17 = HEAP32[5246416 + (i12 << 2) >> 2] | 0;
                HEAP32[i3 >> 2] = i17;
                i12 = i142 << i100;
                HEAP32[i11 >> 2] = i12;
                i102 = i100 + i138 | 0;
                HEAP32[i10 >> 2] = i102;
                i143 = i17;
                i144 = i102;
                i145 = i12;
              } else {
                i143 = i141;
                i144 = i138;
                i145 = i142;
              }
              i62 = i140 + i132 | 0;
              i63 = i143;
              i64 = i144;
              i65 = i145;
            }
          } while (0);
          i41 = i62;
          i42 = i2 + (i21 * 33 & -1) + 22 | 0;
          i43 = i63;
          i44 = i64;
          i45 = i65;
        }
        i13 = i43 >>> 1 | 255;
        do {
          if ((i44 | 0) > 0) {
            i12 = HEAP32[i19 >> 2] | 0;
            i102 = i12 + 1 | 0;
            i17 = HEAP32[i18 >> 2] | 0;
            if (i102 >>> 0 <= i17 >>> 0) {
              i100 = HEAP8[i12] | 0;
              HEAP32[i19 >> 2] = i102;
              i101 = (i100 & 255) << i44 | i45;
              HEAP32[i11 >> 2] = i101;
              i100 = i44 - 8 | 0;
              HEAP32[i10 >> 2] = i100;
              i146 = i100;
              i147 = i101;
              break;
            }
            if (i12 >>> 0 < i17 >>> 0) {
              HEAP32[i19 >> 2] = i102;
              i102 = (HEAPU8[i12] | 0) << i44 | i45;
              HEAP32[i11 >> 2] = i102;
              i12 = i44 - 8 | 0;
              HEAP32[i10 >> 2] = i12;
              i146 = i12;
              i147 = i102;
              break;
            } else {
              HEAP32[i20 >> 2] = 1;
              i146 = i44;
              i147 = i45;
              break;
            }
          } else {
            i146 = i44;
            i147 = i45;
          }
        } while (0);
        if (i147 >>> 0 > i13 >>> 0) {
          i102 = i13 + 1 | 0;
          i12 = i43 - i102 | 0;
          HEAP32[i3 >> 2] = i12;
          i17 = i147 - i102 | 0;
          HEAP32[i11 >> 2] = i17;
          i148 = 1;
          i149 = i12;
          i150 = i17;
        } else {
          HEAP32[i3 >> 2] = i13;
          i148 = 0;
          i149 = i13;
          i150 = i147;
        }
        i17 = i149 >>> 8;
        i12 = HEAPU8[i17 + 5246928 | 0] | 0;
        HEAP32[i3 >> 2] = HEAP32[5246416 + (i17 << 2) >> 2] | 0;
        HEAP32[i11 >> 2] = i150 << i12;
        HEAP32[i10 >> 2] = i12 + i146 | 0;
        i12 = Math_imul(HEAP32[i4 + (((i1 | 0) > 0 & 1) << 2) >> 2] | 0, i148 ? -i41 | 0 : i41) & 65535;
        HEAP16[i6 + ((HEAPU8[i1 + 5246380 | 0] | 0) << 1) >> 1] = i12;
        if ((i1 | 0) >= 15) {
          i32 = i42;
          break;
        }
        i12 = HEAP32[i3 >> 2] | 0;
        i17 = Math_imul(i12 >>> 8, HEAPU8[i42] | 0) | 255;
        i102 = HEAP32[i10 >> 2] | 0;
        do {
          if ((i102 | 0) > 0) {
            i101 = HEAP32[i19 >> 2] | 0;
            i100 = i101 + 1 | 0;
            i9 = HEAP32[i18 >> 2] | 0;
            if (i100 >>> 0 <= i9 >>> 0) {
              i66 = HEAP8[i101] | 0;
              HEAP32[i19 >> 2] = i100;
              HEAP32[i11 >> 2] = (i66 & 255) << i102 | HEAP32[i11 >> 2];
              i66 = i102 - 8 | 0;
              HEAP32[i10 >> 2] = i66;
              i151 = i66;
              break;
            }
            if (i101 >>> 0 < i9 >>> 0) {
              HEAP32[i19 >> 2] = i100;
              HEAP32[i11 >> 2] = (HEAPU8[i101] | 0) << i102 | HEAP32[i11 >> 2];
              i101 = i102 - 8 | 0;
              HEAP32[i10 >> 2] = i101;
              i151 = i101;
              break;
            } else {
              HEAP32[i20 >> 2] = 1;
              i151 = i102;
              break;
            }
          } else {
            i151 = i102;
          }
        } while (0);
        i102 = HEAP32[i11 >> 2] | 0;
        if (i102 >>> 0 > i17 >>> 0) {
          i13 = i17 + 1 | 0;
          i101 = i12 - i13 | 0;
          HEAP32[i3 >> 2] = i101;
          i100 = i102 - i13 | 0;
          HEAP32[i11 >> 2] = i100;
          i152 = 1;
          i153 = i101;
          i154 = i100;
        } else {
          HEAP32[i3 >> 2] = i17;
          i152 = 0;
          i153 = i17;
          i154 = i102;
        }
        if (i153 >>> 0 < 32512) {
          i102 = i153 >>> 8;
          i100 = HEAPU8[i102 + 5246928 | 0] | 0;
          HEAP32[i3 >> 2] = HEAP32[5246416 + (i102 << 2) >> 2] | 0;
          HEAP32[i11 >> 2] = i154 << i100;
          HEAP32[i10 >> 2] = i100 + i151 | 0;
        }
        if ((i152 | 0) == 0) {
          i24 = i23;
          i155 = 800;
          break L879;
        } else {
          i32 = i42;
        }
      }
    } while (0);
    if ((i23 | 0) >= 16) {
      i24 = 16;
      i155 = 801;
      break;
    }
    i1 = i23;
    i5 = i32;
    i7 = HEAP32[i3 >> 2] | 0;
    i22 = HEAP32[i10 >> 2] | 0;
  }
  if ((i155 | 0) == 800) {
    return i24 | 0;
  } else if ((i155 | 0) == 801) {
    return i24 | 0;
  }
  return 0;
}
function _VP8LClear(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0;
  if ((i1 | 0) == 0) {
    return;
  }
  _free(HEAP32[i1 + 100 >> 2] | 0);
  _DeleteHtreeGroups(HEAP32[i1 + 108 >> 2] | 0, HEAP32[i1 + 104 >> 2] | 0);
  i2 = i1 + 80 | 0;
  if ((i2 | 0) != 0) {
    i3 = i2 | 0;
    _free(HEAP32[i3 >> 2] | 0);
    HEAP32[i3 >> 2] = 0;
  }
  i3 = i1 + 76 | 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i3 + 4 >> 2] = 0;
  HEAP32[i3 + 8 >> 2] = 0;
  HEAP32[i3 + 12 >> 2] = 0;
  HEAP32[i3 + 16 >> 2] = 0;
  HEAP32[i3 + 20 >> 2] = 0;
  HEAP32[i3 + 24 >> 2] = 0;
  HEAP32[i3 + 28 >> 2] = 0;
  HEAP32[i3 + 32 >> 2] = 0;
  i3 = i1 + 20 | 0;
  _free(HEAP32[i3 >> 2] | 0);
  HEAP32[i3 >> 2] = 0;
  i3 = i1 + 112 | 0;
  L1149 : do {
    if ((HEAP32[i3 >> 2] | 0) > 0) {
      i2 = 0;
      while (1) {
        i4 = i1 + 116 + (i2 * 20 & -1) + 16 | 0;
        _free(HEAP32[i4 >> 2] | 0);
        HEAP32[i4 >> 2] = 0;
        i4 = i2 + 1 | 0;
        if ((i4 | 0) < (HEAP32[i3 >> 2] | 0)) {
          i2 = i4;
        } else {
          break L1149;
        }
      }
    }
  } while (0);
  HEAP32[i3 >> 2] = 0;
  HEAP32[i1 + 196 >> 2] = 0;
  i3 = i1 + 200 | 0;
  _free(HEAP32[i3 >> 2] | 0);
  HEAP32[i3 >> 2] = 0;
  HEAP32[i1 + 16 >> 2] = 0;
  return;
}
function _DecodeImageStream(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0;
  i6 = STACKTOP;
  STACKTOP = STACKTOP + 116 | 0;
  i7 = i6 | 0;
  i8 = i6 + 12 | 0;
  i9 = i6 + 20 | 0;
  i10 = i6 + 28 | 0;
  i11 = i6 + 36 | 0;
  i12 = i6 + 112 | 0;
  i13 = i4 + 28 | 0;
  i14 = i4 + 76 | 0;
  i15 = (i3 | 0) != 0;
  L1155 : do {
    if (i15) {
      i16 = i4 + 112 | 0;
      i17 = i4 + 196 | 0;
      i18 = i1;
      while (1) {
        i19 = 1;
        while (1) {
          if ((_VP8LReadBits(i13, 1) | 0) == 0) {
            i20 = i18;
            i21 = i19;
            i22 = 830;
            break L1155;
          }
          i23 = HEAP32[i16 >> 2] | 0;
          i24 = _VP8LReadBits(i13, 2) | 0;
          i25 = HEAP32[i17 >> 2] | 0;
          i26 = 1 << i24;
          if ((i25 & i26 | 0) != 0) {
            i22 = 937;
            break L1155;
          }
          HEAP32[i17 >> 2] = i25 | i26;
          HEAP32[i4 + 116 + (i23 * 20 & -1) >> 2] = i24;
          i27 = i4 + 116 + (i23 * 20 & -1) + 8 | 0;
          HEAP32[i27 >> 2] = i18;
          i26 = i4 + 116 + (i23 * 20 & -1) + 12 | 0;
          HEAP32[i26 >> 2] = i2;
          i28 = i4 + 116 + (i23 * 20 & -1) + 16 | 0;
          HEAP32[i28 >> 2] = 0;
          HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1 | 0;
          if ((i24 | 0) == 3) {
            break;
          } else if (!((i24 | 0) == 0 | (i24 | 0) == 1)) {
            i19 = 1;
            continue;
          }
          i24 = (_VP8LReadBits(i13, 3) | 0) + 2 | 0;
          HEAP32[i4 + 116 + (i23 * 20 & -1) + 4 >> 2] = i24;
          i25 = 1 << i24;
          i29 = _DecodeImageStream((((HEAP32[i27 >> 2] | 0) - 1 | 0) + i25 | 0) >>> (i24 >>> 0), (((HEAP32[i26 >> 2] | 0) - 1 | 0) + i25 | 0) >>> (i24 >>> 0), 0, i4, i28) | 0;
          if ((i29 | 0) == 0) {
            i22 = 937;
            break L1155;
          } else {
            i19 = i29;
          }
        }
        i19 = (_VP8LReadBits(i13, 8) | 0) + 1 | 0;
        do {
          if ((i19 | 0) > 16) {
            i30 = 0;
          } else {
            if ((i19 | 0) > 4) {
              i30 = 1;
              break;
            }
            i30 = (i19 | 0) > 2 ? 2 : 3;
          }
        } while (0);
        i29 = (((HEAP32[i27 >> 2] | 0) - 1 | 0) + (1 << i30) | 0) >>> (i30 >>> 0);
        i24 = i4 + 116 + (i23 * 20 & -1) + 4 | 0;
        HEAP32[i24 >> 2] = i30;
        if ((_DecodeImageStream(i19, 1, 0, i4, i28) | 0) == 0) {
          i22 = 937;
          break L1155;
        }
        i25 = 1 << (8 >>> ((HEAP32[i24 >> 2] | 0) >>> 0));
        i24 = i25;
        i26 = (i25 | 0) < 0 ? -1 : 0;
        i31 = i24 << 2 | 0 >>> 30;
        i32 = i26 << 2 | i24 >>> 30;
        i33 = 0;
        i34 = 256;
        i35 = ~~Math_floor((+(i33 >>> 0) + +(i34 >>> 0) * 4294967296.0) / (+(i24 >>> 0) + +(i26 >>> 0) * 4294967296.0)) >>> 0;
        i36 = Math_min(Math_floor(Math_floor((+(i33 >>> 0) + +(i34 >>> 0) * 4294967296.0) / (+(i24 >>> 0) + +(i26 >>> 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
        i26 = 0;
        if (i36 >>> 0 < i26 >>> 0 | i36 >>> 0 == i26 >>> 0 & i35 >>> 0 < 4 >>> 0) {
          i22 = 937;
          break L1155;
        }
        if (!((i31 | 0) == (i31 & -4 | 0) & (i32 | 0) == (i32 & 0 | 0))) {
          i22 = 937;
          break L1155;
        }
        i32 = _malloc(i31) | 0;
        i31 = i32;
        if ((i32 | 0) == 0) {
          i22 = 937;
          break L1155;
        }
        i35 = HEAP32[i28 >> 2] | 0;
        i26 = i35;
        HEAP32[i31 >> 2] = HEAP32[i35 >> 2] | 0;
        i35 = i19 << 2;
        L1173 : do {
          if ((i35 | 0) > 4) {
            i36 = 4;
            while (1) {
              HEAP8[i32 + i36 | 0] = (HEAP8[i32 + (i36 - 4 | 0) | 0] | 0) + (HEAP8[i26 + i36 | 0] | 0) & 255;
              i24 = i36 + 1 | 0;
              if ((i24 | 0) == (i35 | 0)) {
                i37 = i35;
                break L1173;
              } else {
                i36 = i24;
              }
            }
          } else {
            i37 = 4;
          }
        } while (0);
        i35 = i25 << 2;
        if ((i37 | 0) < (i35 | 0)) {
          _memset(i32 + i37 | 0, 0, i35 - i37 | 0);
        }
        _free(HEAP32[i28 >> 2] | 0);
        HEAP32[i28 >> 2] = i31;
        i18 = i29;
      }
    } else {
      i20 = i1;
      i21 = 1;
      i22 = 830;
    }
  } while (0);
  L1180 : do {
    if ((i22 | 0) == 830) {
      do {
        if ((_VP8LReadBits(i13, 1) | 0) == 0) {
          i38 = i21;
          i39 = 0;
          i22 = 833;
        } else {
          i1 = _VP8LReadBits(i13, 4) | 0;
          i28 = (i1 - 1 | 0) >>> 0 < 11;
          i37 = i28 & 1;
          if (i28) {
            i38 = i37;
            i39 = i1;
            i22 = 833;
            break;
          }
          HEAP32[i4 >> 2] = 3;
          i40 = i37;
          i41 = 0;
          i22 = 959;
          break;
        }
      } while (0);
      L1185 : do {
        if ((i22 | 0) == 833) {
          if ((i38 | 0) == 0) {
            i22 = 937;
            break L1180;
          }
          HEAP32[i12 >> 2] = 0;
          L1188 : do {
            if ((i3 | 0) == 0) {
              i42 = 1;
              i22 = 840;
            } else {
              if ((_VP8LReadBits(i13, 1) | 0) == 0) {
                i42 = 1;
                i22 = 840;
                break;
              }
              i37 = (_VP8LReadBits(i13, 3) | 0) + 2 | 0;
              i1 = 1 << i37;
              i28 = ((i20 - 1 | 0) + i1 | 0) >>> (i37 >>> 0);
              i30 = ((i2 - 1 | 0) + i1 | 0) >>> (i37 >>> 0);
              i1 = Math_imul(i28, i30);
              if ((_DecodeImageStream(i28, i30, 0, i4, i12) | 0) == 0) {
                HEAP32[i4 >> 2] = 3;
                i43 = 0;
                i44 = 1;
                break;
              }
              HEAP32[i4 + 92 >> 2] = i37;
              if ((i1 | 0) > 0) {
                i45 = 1;
                i46 = 0;
              } else {
                i42 = 1;
                i22 = 840;
                break;
              }
              while (1) {
                i37 = (HEAP32[i12 >> 2] | 0) + (i46 << 2) | 0;
                i30 = (HEAP32[i37 >> 2] | 0) >>> 8 & 65535;
                HEAP32[i37 >> 2] = i30;
                i37 = (i30 | 0) < (i45 | 0) ? i45 : i30 + 1 | 0;
                i30 = i46 + 1 | 0;
                if ((i30 | 0) == (i1 | 0)) {
                  i42 = i37;
                  i22 = 840;
                  break L1188;
                } else {
                  i45 = i37;
                  i46 = i30;
                }
              }
            }
          } while (0);
          L1196 : do {
            if ((i22 | 0) == 840) {
              i29 = i4 + 56 | 0;
              if ((HEAP32[i29 >> 2] | 0) != 0) {
                i43 = 0;
                i44 = i42;
                break;
              }
              i31 = i42;
              i32 = (i42 | 0) < 0 ? -1 : 0;
              i25 = 60;
              i1 = 0;
              i30 = ~~((+(i31 >>> 0) + +(i32 | 0) * 4294967296.0) * (+(i25 >>> 0) + +(i1 | 0) * 4294967296.0)) >>> 0;
              i37 = Math_min(Math_floor((+(i31 >>> 0) + +(i32 | 0) * 4294967296.0) * (+(i25 >>> 0) + +(i1 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
              do {
                if ((i42 | 0) == 0) {
                  i47 = 0;
                  i22 = 846;
                } else {
                  i1 = 0;
                  i25 = 256;
                  i28 = ~~Math_floor((+(i1 >>> 0) + +(i25 >>> 0) * 4294967296.0) / (+(i31 >>> 0) + +(i32 >>> 0) * 4294967296.0)) >>> 0;
                  i23 = Math_min(Math_floor(Math_floor((+(i1 >>> 0) + +(i25 >>> 0) * 4294967296.0) / (+(i31 >>> 0) + +(i32 >>> 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
                  i25 = 0;
                  if (i23 >>> 0 < i25 >>> 0 | i23 >>> 0 == i25 >>> 0 & i28 >>> 0 < 60 >>> 0) {
                    break;
                  }
                  if (!((i30 | 0) == (i30 & -4 | 0) & (i37 | 0) == (i37 & 0 | 0))) {
                    break;
                  }
                  i28 = i42 * 60 & -1;
                  if (i42 >>> 0 <= 65535) {
                    i47 = i28;
                    i22 = 846;
                    break;
                  }
                  i47 = ((i28 >>> 0) / (i42 >>> 0) >>> 0 | 0) == 60 ? i28 : -1;
                  i22 = 846;
                  break;
                }
              } while (0);
              do {
                if ((i22 | 0) == 846) {
                  i37 = _malloc(i47) | 0;
                  if ((i37 | 0) == 0) {
                    break;
                  }
                  if ((HEAP32[i37 - 4 >> 2] & 3 | 0) != 0) {
                    _memset(i37 | 0, 0, i47 | 0);
                  }
                  i30 = i37;
                  L1210 : do {
                    if ((i42 | 0) > 0) {
                      i37 = (i39 | 0) > 0;
                      i32 = 1 << i39;
                      i31 = i11;
                      i28 = i11 | 0;
                      i25 = i4 | 0;
                      i23 = i4 + 48 | 0;
                      i1 = i4 + 44 | 0;
                      i27 = i4 + 40 | 0;
                      i18 = i13 | 0;
                      i16 = i4 + 36 | 0;
                      i17 = i4 + 52 | 0;
                      i35 = i7 | 0;
                      i26 = i7 + 4 | 0;
                      i19 = i7 + 8 | 0;
                      i36 = i8 | 0;
                      i24 = i9 | 0;
                      i34 = i10 | 0;
                      i33 = i8 + 4 | 0;
                      i48 = i9 + 4 | 0;
                      i49 = i10 + 4 | 0;
                      i50 = 0;
                      L1212 : while (1) {
                        i51 = 0;
                        while (1) {
                          i52 = (HEAPU16[5248592 + (i51 << 1) >> 1] | 0) + ((i51 | 0) == 0 & i37 ? i32 : 0) | 0;
                          i53 = i30 + (i50 * 60 & -1) + (i51 * 12 & -1) | 0;
                          do {
                            if ((_VP8LReadBits(i13, 1) | 0) == 0) {
                              HEAP32[i31 >> 2] = 0;
                              HEAP32[i31 + 4 >> 2] = 0;
                              HEAP32[i31 + 8 >> 2] = 0;
                              HEAP32[i31 + 12 >> 2] = 0;
                              HEAP32[i31 + 16 >> 2] = 0;
                              HEAP32[i31 + 20 >> 2] = 0;
                              HEAP32[i31 + 24 >> 2] = 0;
                              HEAP32[i31 + 28 >> 2] = 0;
                              HEAP32[i31 + 32 >> 2] = 0;
                              HEAP32[i31 + 36 >> 2] = 0;
                              HEAP32[i31 + 40 >> 2] = 0;
                              HEAP32[i31 + 44 >> 2] = 0;
                              HEAP32[i31 + 48 >> 2] = 0;
                              HEAP32[i31 + 52 >> 2] = 0;
                              HEAP32[i31 + 56 >> 2] = 0;
                              HEAP32[i31 + 60 >> 2] = 0;
                              HEAP32[i31 + 64 >> 2] = 0;
                              HEAP32[i31 + 68 >> 2] = 0;
                              HEAP32[i31 + 72 >> 2] = 0;
                              i54 = (_VP8LReadBits(i13, 4) | 0) + 4 | 0;
                              if ((i54 | 0) > 19) {
                                i22 = 881;
                                break L1212;
                              }
                              i55 = i52;
                              i56 = (i52 | 0) < 0 ? -1 : 0;
                              i57 = i55 << 2 | 0 >>> 30;
                              i58 = i56 << 2 | i55 >>> 30;
                              do {
                                if ((i52 | 0) == 0) {
                                  i59 = 0;
                                } else {
                                  i60 = 0;
                                  i61 = 256;
                                  i62 = ~~Math_floor((+(i60 >>> 0) + +(i61 >>> 0) * 4294967296.0) / (+(i55 >>> 0) + +(i56 >>> 0) * 4294967296.0)) >>> 0;
                                  i63 = Math_min(Math_floor(Math_floor((+(i60 >>> 0) + +(i61 >>> 0) * 4294967296.0) / (+(i55 >>> 0) + +(i56 >>> 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
                                  i61 = 0;
                                  if (i63 >>> 0 < i61 >>> 0 | i63 >>> 0 == i61 >>> 0 & i62 >>> 0 < 4 >>> 0) {
                                    i22 = 891;
                                    break L1212;
                                  }
                                  if (!((i57 | 0) == (i57 & -4 | 0) & (i58 | 0) == (i58 & 0 | 0))) {
                                    i22 = 891;
                                    break L1212;
                                  }
                                  i62 = i52 << 2;
                                  if (i52 >>> 0 <= 65535) {
                                    i59 = i62;
                                    break;
                                  }
                                  i59 = ((i62 >>> 0) / (i52 >>> 0) >>> 0 | 0) == 4 ? i62 : -1;
                                }
                              } while (0);
                              i58 = _malloc(i59) | 0;
                              if ((i58 | 0) == 0) {
                                i22 = 891;
                                break L1212;
                              }
                              if ((HEAP32[i58 - 4 >> 2] & 3 | 0) != 0) {
                                _memset(i58 | 0, 0, i59 | 0);
                              }
                              i57 = i58;
                              L1264 : do {
                                if ((i54 | 0) > 0) {
                                  i56 = 0;
                                  while (1) {
                                    i55 = _VP8LReadBits(i13, 3) | 0;
                                    HEAP32[i11 + ((HEAPU8[i56 + 5247456 | 0] | 0) << 2) >> 2] = i55;
                                    i55 = i56 + 1 | 0;
                                    if ((i55 | 0) == (i54 | 0)) {
                                      break L1264;
                                    } else {
                                      i56 = i55;
                                    }
                                  }
                                }
                              } while (0);
                              L1268 : do {
                                if ((_HuffmanTreeBuildImplicit(i7, i28, 19) | 0) == 0) {
                                  HEAP32[i25 >> 2] = 3;
                                  i64 = 0;
                                } else {
                                  do {
                                    if ((_VP8LReadBits(i13, 1) | 0) == 0) {
                                      i65 = i52;
                                    } else {
                                      i54 = (_VP8LReadBits(i13, (_VP8LReadBits(i13, 3) << 1) + 2 | 0) | 0) + 2 | 0;
                                      if ((i54 | 0) <= (i52 | 0)) {
                                        i65 = i54;
                                        break;
                                      }
                                      HEAP32[i25 >> 2] = 3;
                                      _free(HEAP32[i35 >> 2] | 0);
                                      HEAP32[i35 >> 2] = 0;
                                      HEAP32[i26 >> 2] = 0;
                                      HEAP32[i19 >> 2] = 0;
                                      i64 = 0;
                                      break L1268;
                                    }
                                  } while (0);
                                  L1275 : do {
                                    if ((i52 | 0) > 0) {
                                      i54 = 8;
                                      i56 = i65;
                                      i55 = 0;
                                      L1276 : while (1) {
                                        i62 = i56;
                                        i61 = i55;
                                        while (1) {
                                          i66 = i62 - 1 | 0;
                                          if ((i62 | 0) == 0) {
                                            break L1275;
                                          }
                                          i63 = HEAP32[i23 >> 2] | 0;
                                          i60 = HEAP32[i1 >> 2] | 0;
                                          i67 = HEAP32[i27 >> 2] | 0;
                                          L1281 : do {
                                            if ((i63 | 0) > 31) {
                                              i68 = i60;
                                              i69 = i63;
                                              while (1) {
                                                if (i68 >>> 0 >= i67 >>> 0) {
                                                  break;
                                                }
                                                i70 = i18 | 0;
                                                i71 = i18 + 4 | 0;
                                                i72 = HEAP32[i71 >> 2] | 0;
                                                i73 = (HEAP32[i70 >> 2] | 0) >>> 8 | i72 << 24;
                                                i74 = i72 >>> 8 | 0 << 24;
                                                HEAP32[i18 >> 2] = i73;
                                                HEAP32[i18 + 4 >> 2] = i74;
                                                i72 = (HEAPU8[(HEAP32[i16 >> 2] | 0) + i68 | 0] | 0) << 24 | 0 >>> 8 | i74;
                                                HEAP32[i18 >> 2] = 0 << 24 | 0 >>> 8 | i73;
                                                HEAP32[i18 + 4 >> 2] = i72;
                                                i72 = i68 + 1 | 0;
                                                HEAP32[i1 >> 2] = i72;
                                                i73 = i69 - 8 | 0;
                                                HEAP32[i23 >> 2] = i73;
                                                if ((i73 | 0) > 7) {
                                                  i68 = i72;
                                                  i69 = i73;
                                                } else {
                                                  i75 = i73;
                                                  i76 = i72;
                                                  break L1281;
                                                }
                                              }
                                              if (!((i68 | 0) == (i67 | 0) & (i69 | 0) == 64)) {
                                                i75 = i69;
                                                i76 = i68;
                                                break;
                                              }
                                              HEAP32[i17 >> 2] = 1;
                                              i75 = 64;
                                              i76 = i67;
                                            } else {
                                              i75 = i63;
                                              i76 = i60;
                                            }
                                          } while (0);
                                          i60 = HEAP32[i35 >> 2] | 0;
                                          i63 = (HEAP32[i60 + 4 >> 2] | 0) == 0;
                                          L1288 : do {
                                            if ((i76 + 8 | 0) >>> 0 > i67 >>> 0) {
                                              if (i63) {
                                                i77 = i60;
                                                break;
                                              }
                                              i70 = i18 | 0;
                                              i71 = i18 + 4 | 0;
                                              i72 = i60;
                                              i73 = HEAP32[i71 >> 2] | 0;
                                              i74 = HEAP32[i70 >> 2] | 0;
                                              i78 = i75;
                                              i79 = i76;
                                              i80 = HEAP32[i17 >> 2] | 0;
                                              while (1) {
                                                Runtime_bitshift64(i74 | 0, i73 | 0, 2, i78 | 0);
                                                i81 = HEAP32[tempDoublePtr >> 2] | 0, i82 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
                                                i82 = i81 & 1;
                                                L1293 : do {
                                                  if ((i80 | 0) == 0) {
                                                    i81 = i78 + 1 | 0;
                                                    HEAP32[i23 >> 2] = i81;
                                                    if ((i81 | 0) > 31) {
                                                      i83 = i79;
                                                      i84 = i81;
                                                      i85 = i73;
                                                      i86 = i74;
                                                    } else {
                                                      i87 = i73;
                                                      i88 = i74;
                                                      i89 = i81;
                                                      i90 = i79;
                                                      i91 = 0;
                                                      break;
                                                    }
                                                    while (1) {
                                                      if (i83 >>> 0 >= i67 >>> 0) {
                                                        break;
                                                      }
                                                      i81 = i86 >>> 8 | i85 << 24;
                                                      i92 = i85 >>> 8 | 0 << 24;
                                                      HEAP32[i18 >> 2] = i81;
                                                      HEAP32[i18 + 4 >> 2] = i92;
                                                      i93 = 0 << 24 | 0 >>> 8 | i81;
                                                      i81 = (HEAPU8[(HEAP32[i16 >> 2] | 0) + i83 | 0] | 0) << 24 | 0 >>> 8 | i92;
                                                      HEAP32[i18 >> 2] = i93;
                                                      HEAP32[i18 + 4 >> 2] = i81;
                                                      i92 = i83 + 1 | 0;
                                                      HEAP32[i1 >> 2] = i92;
                                                      i94 = i84 - 8 | 0;
                                                      HEAP32[i23 >> 2] = i94;
                                                      if ((i94 | 0) > 7) {
                                                        i83 = i92;
                                                        i84 = i94;
                                                        i85 = i81;
                                                        i86 = i93;
                                                      } else {
                                                        i87 = i81;
                                                        i88 = i93;
                                                        i89 = i94;
                                                        i90 = i92;
                                                        i91 = 0;
                                                        break L1293;
                                                      }
                                                    }
                                                    if (!((i83 | 0) == (i67 | 0) & (i84 | 0) == 64)) {
                                                      i87 = i85;
                                                      i88 = i86;
                                                      i89 = i84;
                                                      i90 = i83;
                                                      i91 = 0;
                                                      break;
                                                    }
                                                    HEAP32[i17 >> 2] = 1;
                                                    i87 = i85;
                                                    i88 = i86;
                                                    i89 = 64;
                                                    i90 = i67;
                                                    i91 = 1;
                                                  } else {
                                                    HEAP32[i29 >> 2] = 1;
                                                    i87 = i73;
                                                    i88 = i74;
                                                    i89 = i78;
                                                    i90 = i79;
                                                    i91 = i80;
                                                  }
                                                } while (0);
                                                i92 = (HEAP32[i72 + 4 >> 2] | 0) + i82 | 0;
                                                i94 = i72 + (i92 << 3) | 0;
                                                if ((HEAP32[i72 + (i92 << 3) + 4 >> 2] | 0) == 0) {
                                                  i77 = i94;
                                                  break L1288;
                                                } else {
                                                  i72 = i94;
                                                  i73 = i87;
                                                  i74 = i88;
                                                  i78 = i89;
                                                  i79 = i90;
                                                  i80 = i91;
                                                }
                                              }
                                            } else {
                                              if (i63) {
                                                i77 = i60;
                                                break;
                                              }
                                              i70 = i18 | 0;
                                              i80 = HEAP32[i70 >> 2] | 0;
                                              i71 = i18 + 4 | 0;
                                              i79 = HEAP32[i71 >> 2] | 0;
                                              i78 = i60;
                                              i74 = i75;
                                              while (1) {
                                                Runtime_bitshift64(i80 | 0, i79 | 0, 2, i74 | 0);
                                                i73 = HEAP32[tempDoublePtr >> 2] | 0, i72 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
                                                i72 = i74 + 1 | 0;
                                                HEAP32[i23 >> 2] = i72;
                                                i68 = (i73 & 1) + (HEAP32[i78 + 4 >> 2] | 0) | 0;
                                                i73 = i78 + (i68 << 3) | 0;
                                                if ((HEAP32[i78 + (i68 << 3) + 4 >> 2] | 0) == 0) {
                                                  i77 = i73;
                                                  break L1288;
                                                } else {
                                                  i78 = i73;
                                                  i74 = i72;
                                                }
                                              }
                                            }
                                          } while (0);
                                          i95 = HEAP32[i77 >> 2] | 0;
                                          if ((i95 | 0) < 16) {
                                            break;
                                          }
                                          i60 = i95 - 16 | 0;
                                          i63 = HEAP32[5247432 + (i60 << 2) >> 2] | 0;
                                          i67 = _VP8LReadBits(i13, HEAP32[5247444 + (i60 << 2) >> 2] | 0) | 0;
                                          i60 = i67 + i63 | 0;
                                          if ((i60 + i61 | 0) > (i52 | 0)) {
                                            break L1276;
                                          }
                                          i74 = (i95 | 0) == 16 ? i54 : 0;
                                          if ((i60 | 0) > 0) {
                                            i78 = -i60 | 0;
                                            i79 = i61;
                                            i80 = i60;
                                            while (1) {
                                              i60 = i80 - 1 | 0;
                                              HEAP32[i57 + (i79 << 2) >> 2] = i74;
                                              if ((i60 | 0) > 0) {
                                                i79 = i79 + 1 | 0;
                                                i80 = i60;
                                              } else {
                                                break;
                                              }
                                            }
                                            i96 = (((i61 + 1 | 0) + i63 | 0) + i67 | 0) + ((i78 | 0) > -1 ? i78 : -1) | 0;
                                          } else {
                                            i96 = i61;
                                          }
                                          if ((i96 | 0) < (i52 | 0)) {
                                            i62 = i66;
                                            i61 = i96;
                                          } else {
                                            break L1275;
                                          }
                                        }
                                        i62 = i61 + 1 | 0;
                                        HEAP32[i57 + (i61 << 2) >> 2] = i95;
                                        if ((i62 | 0) < (i52 | 0)) {
                                          i54 = (i95 | 0) == 0 ? i54 : i95;
                                          i56 = i66;
                                          i55 = i62;
                                        } else {
                                          break L1275;
                                        }
                                      }
                                      HEAP32[i25 >> 2] = 3;
                                      _free(HEAP32[i35 >> 2] | 0);
                                      HEAP32[i35 >> 2] = 0;
                                      HEAP32[i26 >> 2] = 0;
                                      HEAP32[i19 >> 2] = 0;
                                      i64 = 0;
                                      break L1268;
                                    }
                                  } while (0);
                                  _free(HEAP32[i35 >> 2] | 0);
                                  HEAP32[i35 >> 2] = 0;
                                  HEAP32[i26 >> 2] = 0;
                                  HEAP32[i19 >> 2] = 0;
                                  i64 = _HuffmanTreeBuildImplicit(i53, i57, i52) | 0;
                                }
                              } while (0);
                              _free(i58);
                              i97 = i64;
                            } else {
                              i57 = _VP8LReadBits(i13, 1) | 0;
                              i55 = i57 + 1 | 0;
                              HEAP32[i36 >> 2] = _VP8LReadBits(i13, (_VP8LReadBits(i13, 1) | 0) == 0 ? 1 : 8) | 0;
                              HEAP32[i24 >> 2] = 0;
                              HEAP32[i34 >> 2] = i57;
                              if ((i55 | 0) == 2) {
                                HEAP32[i33 >> 2] = _VP8LReadBits(i13, 8) | 0;
                                HEAP32[i48 >> 2] = 1;
                                HEAP32[i49 >> 2] = i57;
                              } else if ((i55 | 0) == 0) {
                                break L1212;
                              }
                              i57 = (i55 << 1) - 1 | 0;
                              i56 = i30 + (i50 * 60 & -1) + (i51 * 12 & -1) + 4 | 0;
                              HEAP32[i56 >> 2] = i57;
                              i54 = i57;
                              i62 = (i57 | 0) < 0 ? -1 : 0;
                              i57 = i54 << 3 | 0 >>> 29;
                              i80 = i62 << 3 | i54 >>> 29;
                              i79 = 0;
                              i74 = 256;
                              i60 = ~~Math_floor((+(i79 >>> 0) + +(i74 >>> 0) * 4294967296.0) / (+(i54 >>> 0) + +(i62 >>> 0) * 4294967296.0)) >>> 0;
                              i72 = Math_min(Math_floor(Math_floor((+(i79 >>> 0) + +(i74 >>> 0) * 4294967296.0) / (+(i54 >>> 0) + +(i62 >>> 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
                              i62 = 0;
                              if (i72 >>> 0 < i62 >>> 0 | i72 >>> 0 == i62 >>> 0 & i60 >>> 0 < 8 >>> 0) {
                                i22 = 858;
                                break L1212;
                              }
                              if (!((i57 | 0) == (i57 & -8 | 0) & (i80 | 0) == (i80 & 0 | 0))) {
                                i22 = 858;
                                break L1212;
                              }
                              i80 = _malloc(i57) | 0;
                              i57 = i53 | 0;
                              HEAP32[i57 >> 2] = i80;
                              if ((i80 | 0) == 0) {
                                break L1212;
                              }
                              HEAP32[i80 + 4 >> 2] = -1;
                              i80 = i30 + (i50 * 60 & -1) + (i51 * 12 & -1) + 8 | 0;
                              HEAP32[i80 >> 2] = 1;
                              do {
                                if ((i55 | 0) > 0) {
                                  i60 = 0;
                                  i62 = 0;
                                  L1225 : while (1) {
                                    if ((i62 | 0) != -1) {
                                      i72 = HEAP32[i8 + (i60 << 2) >> 2] | 0;
                                      if (!((i72 | 0) > -1 & (i72 | 0) < (i52 | 0))) {
                                        i22 = 878;
                                        break;
                                      }
                                      i54 = HEAP32[i10 + (i60 << 2) >> 2] | 0;
                                      i74 = HEAP32[i57 >> 2] | 0;
                                      i79 = i74 + (HEAP32[i56 >> 2] << 3) | 0;
                                      L1230 : do {
                                        if ((i54 | 0) > 0) {
                                          i73 = i74;
                                          i68 = i54;
                                          while (1) {
                                            i69 = i68 - 1 | 0;
                                            if (i73 >>> 0 >= i79 >>> 0) {
                                              i22 = 878;
                                              break L1225;
                                            }
                                            i94 = i73 + 4 | 0;
                                            i92 = HEAP32[i94 >> 2] | 0;
                                            if ((i92 | 0) > -1) {
                                              if ((i92 | 0) == 0) {
                                                i22 = 878;
                                                break L1225;
                                              } else {
                                                i98 = i92;
                                              }
                                            } else {
                                              i92 = HEAP32[i80 >> 2] | 0;
                                              if ((i92 | 0) == (HEAP32[i56 >> 2] | 0)) {
                                                i22 = 878;
                                                break L1225;
                                              }
                                              i93 = HEAP32[i57 >> 2] | 0;
                                              HEAP32[i94 >> 2] = (i93 + (i92 << 3) | 0) - i73 >> 3;
                                              HEAP32[i80 >> 2] = (HEAP32[i80 >> 2] | 0) + 2 | 0;
                                              HEAP32[i93 + (i92 << 3) + 4 >> 2] = -1;
                                              HEAP32[i93 + (i92 + 1 << 3) + 4 >> 2] = -1;
                                              i98 = HEAP32[i94 >> 2] | 0;
                                            }
                                            i94 = i73 + (i98 + (i62 >>> (i69 >>> 0) & 1) << 3) | 0;
                                            if ((i69 | 0) > 0) {
                                              i73 = i94;
                                              i68 = i69;
                                            } else {
                                              i99 = i94;
                                              break L1230;
                                            }
                                          }
                                        } else {
                                          i99 = i74;
                                        }
                                      } while (0);
                                      i74 = i99 + 4 | 0;
                                      i79 = HEAP32[i74 >> 2] | 0;
                                      if ((i79 | 0) > -1) {
                                        if ((i79 | 0) != 0) {
                                          i22 = 878;
                                          break;
                                        }
                                      } else {
                                        HEAP32[i74 >> 2] = 0;
                                      }
                                      HEAP32[i99 >> 2] = i72;
                                    }
                                    i74 = i60 + 1 | 0;
                                    if ((i74 | 0) >= (i55 | 0)) {
                                      i22 = 876;
                                      break;
                                    }
                                    i60 = i74;
                                    i62 = HEAP32[i9 + (i74 << 2) >> 2] | 0;
                                  }
                                  if ((i22 | 0) == 876) {
                                    i22 = 0;
                                    i100 = HEAP32[i80 >> 2] | 0;
                                    i22 = 877;
                                    break;
                                  } else if ((i22 | 0) == 878) {
                                    i22 = 0;
                                    if ((i53 | 0) == 0) {
                                      break L1212;
                                    } else {
                                      i101 = 0;
                                      break;
                                    }
                                  }
                                } else {
                                  i100 = 1;
                                  i22 = 877;
                                }
                              } while (0);
                              if ((i22 | 0) == 877) {
                                i22 = 0;
                                i55 = (i100 | 0) == (HEAP32[i56 >> 2] | 0);
                                i58 = i55 & 1;
                                if (i55) {
                                  i97 = i58;
                                  break;
                                } else {
                                  i101 = i58;
                                }
                              }
                              _free(HEAP32[i57 >> 2] | 0);
                              HEAP32[i57 >> 2] = 0;
                              HEAP32[i56 >> 2] = 0;
                              HEAP32[i80 >> 2] = 0;
                              i97 = i101;
                            }
                          } while (0);
                          if ((i97 | 0) == 0) {
                            break L1212;
                          }
                          if ((HEAP32[i29 >> 2] | 0) != 0) {
                            break L1212;
                          }
                          i52 = i51 + 1 | 0;
                          if ((i52 | 0) < 5) {
                            i51 = i52;
                          } else {
                            break;
                          }
                        }
                        i51 = i50 + 1 | 0;
                        if ((i51 | 0) < (i42 | 0)) {
                          i50 = i51;
                        } else {
                          break L1210;
                        }
                      }
                      if ((i22 | 0) == 858) {
                        HEAP32[i53 >> 2] = 0;
                      } else if ((i22 | 0) == 881) {
                        HEAP32[i25 >> 2] = 3;
                        i43 = i30;
                        i44 = i42;
                        break L1196;
                      } else if ((i22 | 0) == 891) {
                        HEAP32[i25 >> 2] = 1;
                        i43 = i30;
                        i44 = i42;
                        break L1196;
                      }
                      HEAP32[i25 >> 2] = 3;
                      i43 = i30;
                      i44 = i42;
                      break L1196;
                    }
                  } while (0);
                  HEAP32[i4 + 100 >> 2] = HEAP32[i12 >> 2] | 0;
                  HEAP32[i4 + 104 >> 2] = i42;
                  HEAP32[i4 + 108 >> 2] = i30;
                  L1329 : do {
                    if ((i39 | 0) > 0) {
                      i50 = 1 << i39;
                      HEAP32[i14 >> 2] = i50;
                      i49 = i4 + 80 | 0;
                      i48 = i50;
                      i33 = (i50 | 0) < 0 ? -1 : 0;
                      i34 = i48 << 2 | 0 >>> 30;
                      i24 = i33 << 2 | i48 >>> 30;
                      i36 = 0;
                      i19 = 256;
                      i26 = ~~Math_floor((+(i36 >>> 0) + +(i19 >>> 0) * 4294967296.0) / (+(i48 >>> 0) + +(i33 >>> 0) * 4294967296.0)) >>> 0;
                      i35 = Math_min(Math_floor(Math_floor((+(i36 >>> 0) + +(i19 >>> 0) * 4294967296.0) / (+(i48 >>> 0) + +(i33 >>> 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
                      i33 = 0;
                      do {
                        if (!(i35 >>> 0 < i33 >>> 0 | i35 >>> 0 == i33 >>> 0 & i26 >>> 0 < 4 >>> 0)) {
                          if (!((i34 | 0) == (i34 & -4 | 0) & (i24 | 0) == (i24 & 0 | 0))) {
                            break;
                          }
                          i48 = i50 << 2;
                          if (i50 >>> 0 > 65535) {
                            i102 = (i48 >>> (i39 >>> 0) | 0) == 4 ? i48 : -1;
                          } else {
                            i102 = i48;
                          }
                          i48 = _malloc(i102) | 0;
                          if ((i48 | 0) == 0) {
                            break;
                          }
                          if ((HEAP32[i48 - 4 >> 2] & 3 | 0) != 0) {
                            _memset(i48 | 0, 0, i102 | 0);
                          }
                          HEAP32[i49 >> 2] = i48;
                          HEAP32[i4 + 84 >> 2] = 32 - i39 | 0;
                          break L1329;
                        }
                      } while (0);
                      HEAP32[i49 >> 2] = 0;
                      HEAP32[i4 >> 2] = 1;
                      i103 = 0;
                      break L1180;
                    } else {
                      HEAP32[i14 >> 2] = 0;
                    }
                  } while (0);
                  i30 = HEAP32[i4 + 92 >> 2] | 0;
                  HEAP32[i4 + 60 >> 2] = i20;
                  HEAP32[i4 + 64 >> 2] = i2;
                  i50 = 1 << i30;
                  HEAP32[i4 + 96 >> 2] = ((i20 - 1 | 0) + i50 | 0) >>> (i30 >>> 0);
                  HEAP32[i4 + 88 >> 2] = (i30 | 0) == 0 ? -1 : i50 - 1 | 0;
                  if (i15) {
                    HEAP32[i4 + 8 >> 2] = 1;
                    i104 = 0;
                    i105 = 1;
                    break L1185;
                  }
                  i50 = i20;
                  i30 = (i20 | 0) < 0 ? -1 : 0;
                  i24 = i2;
                  i34 = (i2 | 0) < 0 ? -1 : 0;
                  i26 = ~~((+(i50 >>> 0) + +(i30 | 0) * 4294967296.0) * (+(i24 >>> 0) + +(i34 | 0) * 4294967296.0)) >>> 0;
                  i33 = Math_min(Math_floor((+(i50 >>> 0) + +(i30 | 0) * 4294967296.0) * (+(i24 >>> 0) + +(i34 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
                  i34 = i26 << 2 | 0 >>> 30;
                  i24 = i33 << 2 | i26 >>> 30;
                  do {
                    if ((i26 | 0) == 0 & (i33 | 0) == 0) {
                      i22 = 954;
                    } else {
                      i30 = 0;
                      i50 = 256;
                      i35 = ~~Math_floor((+(i30 >>> 0) + +(i50 >>> 0) * 4294967296.0) / (+(i26 >>> 0) + +(i33 >>> 0) * 4294967296.0)) >>> 0;
                      i25 = Math_min(Math_floor(Math_floor((+(i30 >>> 0) + +(i50 >>> 0) * 4294967296.0) / (+(i26 >>> 0) + +(i33 >>> 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
                      i50 = 0;
                      if (i25 >>> 0 < i50 >>> 0 | i25 >>> 0 == i50 >>> 0 & i35 >>> 0 < 4 >>> 0) {
                        i106 = 0;
                        break;
                      }
                      if ((i34 | 0) == (i34 & -4 | 0) & (i24 | 0) == (i24 & 0 | 0)) {
                        i22 = 954;
                        break;
                      } else {
                        i106 = 0;
                        break;
                      }
                    }
                  } while (0);
                  do {
                    if ((i22 | 0) == 954) {
                      i24 = _malloc(i34) | 0;
                      i33 = i24;
                      if ((i24 | 0) == 0) {
                        i106 = i33;
                        break;
                      }
                      if ((_DecodeImageData(i4, i33, i20, i2, 0) | 0) == 0) {
                        i107 = 0;
                      } else {
                        i107 = (HEAP32[i29 >> 2] | 0) == 0;
                      }
                      i40 = i107 & 1;
                      i41 = i33;
                      i22 = 959;
                      break L1185;
                    }
                  } while (0);
                  HEAP32[i4 >> 2] = 1;
                  i103 = i106;
                  break L1180;
                }
              } while (0);
              HEAP32[i4 >> 2] = 1;
              i43 = 0;
              i44 = i42;
            }
          } while (0);
          _free(HEAP32[i12 >> 2] | 0);
          _DeleteHtreeGroups(i43, i44);
          i22 = 937;
          break L1180;
        }
      } while (0);
      if ((i22 | 0) == 959) {
        if ((i40 | 0) == 0) {
          i103 = i41;
          break;
        } else {
          i104 = i41;
          i105 = i40;
        }
      }
      if ((i5 | 0) != 0) {
        HEAP32[i5 >> 2] = i104;
      }
      if (i15) {
        i108 = i105;
        STACKTOP = i6;
        return i108 | 0;
      }
      _free(HEAP32[i4 + 100 >> 2] | 0);
      _DeleteHtreeGroups(HEAP32[i4 + 108 >> 2] | 0, HEAP32[i4 + 104 >> 2] | 0);
      i29 = i4 + 80 | 0;
      if ((i29 | 0) != 0) {
        i34 = i29 | 0;
        _free(HEAP32[i34 >> 2] | 0);
        HEAP32[i34 >> 2] = 0;
      }
      i34 = i14;
      HEAP32[i34 >> 2] = 0;
      HEAP32[i34 + 4 >> 2] = 0;
      HEAP32[i34 + 8 >> 2] = 0;
      HEAP32[i34 + 12 >> 2] = 0;
      HEAP32[i34 + 16 >> 2] = 0;
      HEAP32[i34 + 20 >> 2] = 0;
      HEAP32[i34 + 24 >> 2] = 0;
      HEAP32[i34 + 28 >> 2] = 0;
      HEAP32[i34 + 32 >> 2] = 0;
      i108 = i105;
      STACKTOP = i6;
      return i108 | 0;
    }
  } while (0);
  if ((i22 | 0) == 937) {
    HEAP32[i4 >> 2] = 3;
    i103 = 0;
  }
  _free(i103);
  _free(HEAP32[i4 + 100 >> 2] | 0);
  _DeleteHtreeGroups(HEAP32[i4 + 108 >> 2] | 0, HEAP32[i4 + 104 >> 2] | 0);
  i103 = i4 + 80 | 0;
  if ((i103 | 0) != 0) {
    i22 = i103 | 0;
    _free(HEAP32[i22 >> 2] | 0);
    HEAP32[i22 >> 2] = 0;
  }
  i22 = i14;
  HEAP32[i22 >> 2] = 0;
  HEAP32[i22 + 4 >> 2] = 0;
  HEAP32[i22 + 8 >> 2] = 0;
  HEAP32[i22 + 12 >> 2] = 0;
  HEAP32[i22 + 16 >> 2] = 0;
  HEAP32[i22 + 20 >> 2] = 0;
  HEAP32[i22 + 24 >> 2] = 0;
  HEAP32[i22 + 28 >> 2] = 0;
  HEAP32[i22 + 32 >> 2] = 0;
  i22 = i4 | 0;
  if ((HEAP32[i22 >> 2] | 0) != 3) {
    i108 = 0;
    STACKTOP = i6;
    return i108 | 0;
  }
  if ((HEAP32[i4 + 52 >> 2] | 0) == 0) {
    i108 = 0;
    STACKTOP = i6;
    return i108 | 0;
  }
  HEAP32[i22 >> 2] = 5;
  i108 = 0;
  STACKTOP = i6;
  return i108 | 0;
}
function _DecodeImageData(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, i150 = 0, i151 = 0, i152 = 0, i153 = 0, i154 = 0, i155 = 0, i156 = 0, i157 = 0;
  i6 = i1 + 28 | 0;
  i7 = i1 + 108 | 0;
  i8 = HEAP32[i7 >> 2] | 0;
  i9 = i2 + (Math_imul(i4, i3) << 2) | 0;
  i4 = HEAP32[i1 + 76 >> 2] | 0;
  i10 = i4 + 280 | 0;
  i11 = (i4 | 0) > 0 ? i1 + 80 | 0 : 0;
  i4 = HEAP32[i1 + 88 >> 2] | 0;
  i12 = i1 + 52 | 0;
  i13 = i1 + 92 | 0;
  i14 = i1 + 96 | 0;
  i15 = i1 + 100 | 0;
  i16 = i1 + 48 | 0;
  i17 = i1 + 44 | 0;
  i18 = i1 + 40 | 0;
  i19 = i6 | 0;
  i20 = i1 + 36 | 0;
  i21 = i1 + 56 | 0;
  i22 = (i5 | 0) == 0;
  i23 = i11 | 0;
  i24 = i11 + 4 | 0;
  i25 = i2;
  i26 = i9;
  i27 = (i11 | 0) != 0;
  i11 = 1;
  i28 = 0;
  i29 = 0;
  i30 = i8;
  i8 = i2;
  i31 = i2;
  L1386 : while (1) {
    if (!((HEAP32[i12 >> 2] | 0) == 0 & i8 >>> 0 < i9 >>> 0)) {
      i32 = 1103;
      break;
    }
    if ((i28 & i4 | 0) == 0) {
      i2 = HEAP32[i13 >> 2] | 0;
      if ((i2 | 0) == 0) {
        i33 = 0;
      } else {
        i34 = HEAP32[i15 >> 2] | 0;
        i33 = HEAP32[i34 + (Math_imul(HEAP32[i14 >> 2] | 0, i29 >> i2) + (i28 >> i2) << 2) >> 2] | 0;
      }
      i35 = (HEAP32[i7 >> 2] | 0) + (i33 * 60 & -1) | 0;
    } else {
      i35 = i30;
    }
    i2 = HEAP32[i16 >> 2] | 0;
    i34 = HEAP32[i17 >> 2] | 0;
    i36 = HEAP32[i18 >> 2] | 0;
    L1395 : do {
      if ((i2 | 0) > 31) {
        i37 = i34;
        i38 = i2;
        while (1) {
          if (i37 >>> 0 >= i36 >>> 0) {
            break;
          }
          i39 = i19 | 0;
          i40 = i19 + 4 | 0;
          i41 = HEAP32[i40 >> 2] | 0;
          i42 = (HEAP32[i39 >> 2] | 0) >>> 8 | i41 << 24;
          i43 = i41 >>> 8 | 0 << 24;
          i44 = i19 | 0;
          HEAP32[i44 >> 2] = i42;
          i45 = i19 + 4 | 0;
          HEAP32[i45 >> 2] = i43;
          i41 = (HEAPU8[(HEAP32[i20 >> 2] | 0) + i37 | 0] | 0) << 24 | 0 >>> 8 | i43;
          i46 = i19 | 0;
          HEAP32[i46 >> 2] = 0 << 24 | 0 >>> 8 | i42;
          i47 = i19 + 4 | 0;
          HEAP32[i47 >> 2] = i41;
          i41 = i37 + 1 | 0;
          HEAP32[i17 >> 2] = i41;
          i42 = i38 - 8 | 0;
          HEAP32[i16 >> 2] = i42;
          if ((i42 | 0) > 7) {
            i37 = i41;
            i38 = i42;
          } else {
            i48 = i42;
            i49 = 0;
            i50 = i41;
            break L1395;
          }
        }
        if (!((i37 | 0) == (i36 | 0) & (i38 | 0) == 64)) {
          i48 = i38;
          i49 = 0;
          i50 = i37;
          break;
        }
        HEAP32[i12 >> 2] = 1;
        i48 = 64;
        i49 = 1;
        i50 = i36;
      } else {
        i48 = i2;
        i49 = 0;
        i50 = i34;
      }
    } while (0);
    i34 = HEAP32[i35 >> 2] | 0;
    i2 = (HEAP32[i34 + 4 >> 2] | 0) == 0;
    L1402 : do {
      if ((i50 + 8 | 0) >>> 0 > i36 >>> 0) {
        if (i2) {
          i51 = i34;
          i52 = i50;
          i53 = i48;
          i54 = i49;
          break;
        }
        i39 = i19 | 0;
        i40 = i19 + 4 | 0;
        i41 = i34;
        i42 = HEAP32[i40 >> 2] | 0;
        i43 = HEAP32[i39 >> 2] | 0;
        i55 = i48;
        i56 = i49;
        i57 = i50;
        i58 = i48;
        i59 = i49;
        while (1) {
          Runtime_bitshift64(i43 | 0, i42 | 0, 2, i55 | 0);
          i60 = HEAP32[tempDoublePtr >> 2] | 0, i61 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
          i61 = i60 & 1;
          L1407 : do {
            if ((i56 | 0) == 0) {
              i60 = i55 + 1 | 0;
              HEAP32[i16 >> 2] = i60;
              if ((i60 | 0) > 31) {
                i62 = i57;
                i63 = i60;
                i64 = i42;
                i65 = i43;
              } else {
                i66 = i42;
                i67 = i43;
                i68 = i60;
                i69 = 0;
                i70 = i57;
                i71 = i60;
                i72 = i59;
                break;
              }
              while (1) {
                if (i62 >>> 0 >= i36 >>> 0) {
                  break;
                }
                i60 = i65 >>> 8 | i64 << 24;
                i73 = i64 >>> 8 | 0 << 24;
                i74 = i19 | 0;
                HEAP32[i74 >> 2] = i60;
                i75 = i19 + 4 | 0;
                HEAP32[i75 >> 2] = i73;
                i76 = 0 << 24 | 0 >>> 8 | i60;
                i60 = (HEAPU8[(HEAP32[i20 >> 2] | 0) + i62 | 0] | 0) << 24 | 0 >>> 8 | i73;
                i77 = i19 | 0;
                HEAP32[i77 >> 2] = i76;
                i78 = i19 + 4 | 0;
                HEAP32[i78 >> 2] = i60;
                i73 = i62 + 1 | 0;
                HEAP32[i17 >> 2] = i73;
                i79 = i63 - 8 | 0;
                HEAP32[i16 >> 2] = i79;
                if ((i79 | 0) > 7) {
                  i62 = i73;
                  i63 = i79;
                  i64 = i60;
                  i65 = i76;
                } else {
                  i66 = i60;
                  i67 = i76;
                  i68 = i79;
                  i69 = 0;
                  i70 = i73;
                  i71 = i79;
                  i72 = i59;
                  break L1407;
                }
              }
              if (!((i62 | 0) == (i36 | 0) & (i63 | 0) == 64)) {
                i66 = i64;
                i67 = i65;
                i68 = i63;
                i69 = 0;
                i70 = i62;
                i71 = i63;
                i72 = i59;
                break;
              }
              HEAP32[i12 >> 2] = 1;
              i66 = i64;
              i67 = i65;
              i68 = 64;
              i69 = 1;
              i70 = i36;
              i71 = 64;
              i72 = 1;
            } else {
              HEAP32[i21 >> 2] = 1;
              i66 = i42;
              i67 = i43;
              i68 = i55;
              i69 = i56;
              i70 = i57;
              i71 = i58;
              i72 = i59;
            }
          } while (0);
          i79 = (HEAP32[i41 + 4 >> 2] | 0) + i61 | 0;
          i73 = i41 + (i79 << 3) | 0;
          if ((HEAP32[i41 + (i79 << 3) + 4 >> 2] | 0) == 0) {
            i51 = i73;
            i52 = i70;
            i53 = i71;
            i54 = i72;
            break L1402;
          } else {
            i41 = i73;
            i42 = i66;
            i43 = i67;
            i55 = i68;
            i56 = i69;
            i57 = i70;
            i58 = i71;
            i59 = i72;
          }
        }
      } else {
        if (i2) {
          i51 = i34;
          i52 = i50;
          i53 = i48;
          i54 = i49;
          break;
        }
        i39 = i19 | 0;
        i59 = HEAP32[i39 >> 2] | 0;
        i40 = i19 + 4 | 0;
        i58 = HEAP32[i40 >> 2] | 0;
        i57 = i34;
        i56 = i48;
        while (1) {
          Runtime_bitshift64(i59 | 0, i58 | 0, 2, i56 | 0);
          i55 = HEAP32[tempDoublePtr >> 2] | 0, i43 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
          i43 = i56 + 1 | 0;
          HEAP32[i16 >> 2] = i43;
          i42 = (i55 & 1) + (HEAP32[i57 + 4 >> 2] | 0) | 0;
          i55 = i57 + (i42 << 3) | 0;
          if ((HEAP32[i57 + (i42 << 3) + 4 >> 2] | 0) == 0) {
            i51 = i55;
            i52 = i50;
            i53 = i43;
            i54 = i49;
            break L1402;
          } else {
            i57 = i55;
            i56 = i43;
          }
        }
      }
    } while (0);
    i34 = HEAP32[i51 >> 2] | 0;
    L1421 : do {
      if ((i34 | 0) < 256) {
        i2 = HEAP32[i35 + 12 >> 2] | 0;
        i56 = (HEAP32[i2 + 4 >> 2] | 0) == 0;
        L1423 : do {
          if ((i52 + 8 | 0) >>> 0 > i36 >>> 0) {
            if (i56) {
              i80 = i2;
              i81 = i53;
              i82 = i52;
              i83 = i54;
              break;
            }
            i39 = i19 | 0;
            i40 = i19 + 4 | 0;
            i57 = i2;
            i58 = HEAP32[i40 >> 2] | 0;
            i59 = HEAP32[i39 >> 2] | 0;
            i43 = i53;
            i55 = i54;
            i42 = i52;
            i41 = i53;
            i37 = i54;
            while (1) {
              Runtime_bitshift64(i59 | 0, i58 | 0, 2, i43 | 0);
              i38 = HEAP32[tempDoublePtr >> 2] | 0, i73 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
              i73 = i38 & 1;
              L1428 : do {
                if ((i55 | 0) == 0) {
                  i38 = i43 + 1 | 0;
                  HEAP32[i16 >> 2] = i38;
                  if ((i38 | 0) > 31) {
                    i84 = i42;
                    i85 = i38;
                    i86 = i58;
                    i87 = i59;
                  } else {
                    i88 = i58;
                    i89 = i59;
                    i90 = i38;
                    i91 = 0;
                    i92 = i42;
                    i93 = i38;
                    i94 = i37;
                    break;
                  }
                  while (1) {
                    if (i84 >>> 0 >= i36 >>> 0) {
                      break;
                    }
                    i38 = i87 >>> 8 | i86 << 24;
                    i79 = i86 >>> 8 | 0 << 24;
                    i74 = i19 | 0;
                    HEAP32[i74 >> 2] = i38;
                    i75 = i19 + 4 | 0;
                    HEAP32[i75 >> 2] = i79;
                    i76 = 0 << 24 | 0 >>> 8 | i38;
                    i38 = (HEAPU8[(HEAP32[i20 >> 2] | 0) + i84 | 0] | 0) << 24 | 0 >>> 8 | i79;
                    i77 = i19 | 0;
                    HEAP32[i77 >> 2] = i76;
                    i78 = i19 + 4 | 0;
                    HEAP32[i78 >> 2] = i38;
                    i79 = i84 + 1 | 0;
                    HEAP32[i17 >> 2] = i79;
                    i60 = i85 - 8 | 0;
                    HEAP32[i16 >> 2] = i60;
                    if ((i60 | 0) > 7) {
                      i84 = i79;
                      i85 = i60;
                      i86 = i38;
                      i87 = i76;
                    } else {
                      i88 = i38;
                      i89 = i76;
                      i90 = i60;
                      i91 = 0;
                      i92 = i79;
                      i93 = i60;
                      i94 = i37;
                      break L1428;
                    }
                  }
                  if (!((i84 | 0) == (i36 | 0) & (i85 | 0) == 64)) {
                    i88 = i86;
                    i89 = i87;
                    i90 = i85;
                    i91 = 0;
                    i92 = i84;
                    i93 = i85;
                    i94 = i37;
                    break;
                  }
                  HEAP32[i12 >> 2] = 1;
                  i88 = i86;
                  i89 = i87;
                  i90 = 64;
                  i91 = 1;
                  i92 = i36;
                  i93 = 64;
                  i94 = 1;
                } else {
                  HEAP32[i21 >> 2] = 1;
                  i88 = i58;
                  i89 = i59;
                  i90 = i43;
                  i91 = i55;
                  i92 = i42;
                  i93 = i41;
                  i94 = i37;
                }
              } while (0);
              i60 = (HEAP32[i57 + 4 >> 2] | 0) + i73 | 0;
              i79 = i57 + (i60 << 3) | 0;
              if ((HEAP32[i57 + (i60 << 3) + 4 >> 2] | 0) == 0) {
                i80 = i79;
                i81 = i93;
                i82 = i92;
                i83 = i94;
                break L1423;
              } else {
                i57 = i79;
                i58 = i88;
                i59 = i89;
                i43 = i90;
                i55 = i91;
                i42 = i92;
                i41 = i93;
                i37 = i94;
              }
            }
          } else {
            if (i56) {
              i80 = i2;
              i81 = i53;
              i82 = i52;
              i83 = i54;
              break;
            }
            i39 = i19 | 0;
            i37 = HEAP32[i39 >> 2] | 0;
            i40 = i19 + 4 | 0;
            i41 = HEAP32[i40 >> 2] | 0;
            i42 = i2;
            i55 = i53;
            while (1) {
              Runtime_bitshift64(i37 | 0, i41 | 0, 2, i55 | 0);
              i43 = HEAP32[tempDoublePtr >> 2] | 0, i59 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
              i59 = i55 + 1 | 0;
              HEAP32[i16 >> 2] = i59;
              i58 = (i43 & 1) + (HEAP32[i42 + 4 >> 2] | 0) | 0;
              i43 = i42 + (i58 << 3) | 0;
              if ((HEAP32[i42 + (i58 << 3) + 4 >> 2] | 0) == 0) {
                i80 = i43;
                i81 = i59;
                i82 = i52;
                i83 = i54;
                break L1423;
              } else {
                i42 = i43;
                i55 = i59;
              }
            }
          }
        } while (0);
        i2 = HEAP32[i80 >> 2] | 0;
        L1442 : do {
          if ((i81 | 0) > 31) {
            i56 = i82;
            i55 = i81;
            while (1) {
              if (i56 >>> 0 >= i36 >>> 0) {
                break;
              }
              i39 = i19 | 0;
              i40 = i19 + 4 | 0;
              i42 = HEAP32[i40 >> 2] | 0;
              i41 = (HEAP32[i39 >> 2] | 0) >>> 8 | i42 << 24;
              i37 = i42 >>> 8 | 0 << 24;
              i44 = i19 | 0;
              HEAP32[i44 >> 2] = i41;
              i45 = i19 + 4 | 0;
              HEAP32[i45 >> 2] = i37;
              i42 = (HEAPU8[(HEAP32[i20 >> 2] | 0) + i56 | 0] | 0) << 24 | 0 >>> 8 | i37;
              i46 = i19 | 0;
              HEAP32[i46 >> 2] = 0 << 24 | 0 >>> 8 | i41;
              i47 = i19 + 4 | 0;
              HEAP32[i47 >> 2] = i42;
              i42 = i56 + 1 | 0;
              HEAP32[i17 >> 2] = i42;
              i41 = i55 - 8 | 0;
              HEAP32[i16 >> 2] = i41;
              if ((i41 | 0) > 7) {
                i56 = i42;
                i55 = i41;
              } else {
                i95 = i42;
                i96 = i41;
                i97 = i83;
                break L1442;
              }
            }
            if (!((i56 | 0) == (i36 | 0) & (i55 | 0) == 64)) {
              i95 = i56;
              i96 = i55;
              i97 = i83;
              break;
            }
            HEAP32[i12 >> 2] = 1;
            i95 = i36;
            i96 = 64;
            i97 = 1;
          } else {
            i95 = i82;
            i96 = i81;
            i97 = i83;
          }
        } while (0);
        i41 = HEAP32[i35 + 24 >> 2] | 0;
        i42 = (HEAP32[i41 + 4 >> 2] | 0) == 0;
        L1449 : do {
          if ((i95 + 8 | 0) >>> 0 > i36 >>> 0) {
            if (i42) {
              i98 = i41;
              i99 = i95;
              i100 = i96;
              i101 = i97;
              break;
            }
            i39 = i19 | 0;
            i40 = i19 + 4 | 0;
            i37 = i41;
            i59 = HEAP32[i40 >> 2] | 0;
            i43 = HEAP32[i39 >> 2] | 0;
            i58 = i96;
            i57 = i97;
            i61 = i95;
            i79 = i96;
            i60 = i97;
            while (1) {
              Runtime_bitshift64(i43 | 0, i59 | 0, 2, i58 | 0);
              i76 = HEAP32[tempDoublePtr >> 2] | 0, i38 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
              i38 = i76 & 1;
              L1458 : do {
                if ((i57 | 0) == 0) {
                  i76 = i58 + 1 | 0;
                  HEAP32[i16 >> 2] = i76;
                  if ((i76 | 0) > 31) {
                    i102 = i61;
                    i103 = i76;
                    i104 = i59;
                    i105 = i43;
                  } else {
                    i106 = i59;
                    i107 = i43;
                    i108 = i76;
                    i109 = 0;
                    i110 = i61;
                    i111 = i76;
                    i112 = i60;
                    break;
                  }
                  while (1) {
                    if (i102 >>> 0 >= i36 >>> 0) {
                      break;
                    }
                    i76 = i105 >>> 8 | i104 << 24;
                    i113 = i104 >>> 8 | 0 << 24;
                    i74 = i19 | 0;
                    HEAP32[i74 >> 2] = i76;
                    i75 = i19 + 4 | 0;
                    HEAP32[i75 >> 2] = i113;
                    i114 = 0 << 24 | 0 >>> 8 | i76;
                    i76 = (HEAPU8[(HEAP32[i20 >> 2] | 0) + i102 | 0] | 0) << 24 | 0 >>> 8 | i113;
                    i77 = i19 | 0;
                    HEAP32[i77 >> 2] = i114;
                    i78 = i19 + 4 | 0;
                    HEAP32[i78 >> 2] = i76;
                    i113 = i102 + 1 | 0;
                    HEAP32[i17 >> 2] = i113;
                    i115 = i103 - 8 | 0;
                    HEAP32[i16 >> 2] = i115;
                    if ((i115 | 0) > 7) {
                      i102 = i113;
                      i103 = i115;
                      i104 = i76;
                      i105 = i114;
                    } else {
                      i106 = i76;
                      i107 = i114;
                      i108 = i115;
                      i109 = 0;
                      i110 = i113;
                      i111 = i115;
                      i112 = i60;
                      break L1458;
                    }
                  }
                  if (!((i102 | 0) == (i36 | 0) & (i103 | 0) == 64)) {
                    i106 = i104;
                    i107 = i105;
                    i108 = i103;
                    i109 = 0;
                    i110 = i102;
                    i111 = i103;
                    i112 = i60;
                    break;
                  }
                  HEAP32[i12 >> 2] = 1;
                  i106 = i104;
                  i107 = i105;
                  i108 = 64;
                  i109 = 1;
                  i110 = i36;
                  i111 = 64;
                  i112 = 1;
                } else {
                  HEAP32[i21 >> 2] = 1;
                  i106 = i59;
                  i107 = i43;
                  i108 = i58;
                  i109 = i57;
                  i110 = i61;
                  i111 = i79;
                  i112 = i60;
                }
              } while (0);
              i73 = (HEAP32[i37 + 4 >> 2] | 0) + i38 | 0;
              i115 = i37 + (i73 << 3) | 0;
              if ((HEAP32[i37 + (i73 << 3) + 4 >> 2] | 0) == 0) {
                i98 = i115;
                i99 = i110;
                i100 = i111;
                i101 = i112;
                break L1449;
              } else {
                i37 = i115;
                i59 = i106;
                i43 = i107;
                i58 = i108;
                i57 = i109;
                i61 = i110;
                i79 = i111;
                i60 = i112;
              }
            }
          } else {
            if (i42) {
              i98 = i41;
              i99 = i95;
              i100 = i96;
              i101 = i97;
              break;
            }
            i39 = i19 | 0;
            i60 = HEAP32[i39 >> 2] | 0;
            i40 = i19 + 4 | 0;
            i79 = HEAP32[i40 >> 2] | 0;
            i61 = i41;
            i57 = i96;
            while (1) {
              Runtime_bitshift64(i60 | 0, i79 | 0, 2, i57 | 0);
              i58 = HEAP32[tempDoublePtr >> 2] | 0, i43 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
              i43 = i57 + 1 | 0;
              HEAP32[i16 >> 2] = i43;
              i59 = (i58 & 1) + (HEAP32[i61 + 4 >> 2] | 0) | 0;
              i58 = i61 + (i59 << 3) | 0;
              if ((HEAP32[i61 + (i59 << 3) + 4 >> 2] | 0) == 0) {
                i98 = i58;
                i99 = i95;
                i100 = i43;
                i101 = i97;
                break L1449;
              } else {
                i61 = i58;
                i57 = i43;
              }
            }
          }
        } while (0);
        i41 = HEAP32[i98 >> 2] | 0;
        i42 = HEAP32[i35 + 36 >> 2] | 0;
        i57 = (HEAP32[i42 + 4 >> 2] | 0) == 0;
        L1468 : do {
          if ((i99 + 8 | 0) >>> 0 > i36 >>> 0) {
            if (i57) {
              i116 = i42;
              break;
            }
            i39 = i19 | 0;
            i40 = i19 + 4 | 0;
            i61 = i42;
            i79 = HEAP32[i40 >> 2] | 0;
            i60 = HEAP32[i39 >> 2] | 0;
            i43 = i100;
            i58 = i101;
            i59 = i99;
            while (1) {
              Runtime_bitshift64(i60 | 0, i79 | 0, 2, i43 | 0);
              i37 = HEAP32[tempDoublePtr >> 2] | 0, i55 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
              i55 = i37 & 1;
              L1473 : do {
                if ((i58 | 0) == 0) {
                  i37 = i43 + 1 | 0;
                  HEAP32[i16 >> 2] = i37;
                  if ((i37 | 0) > 31) {
                    i117 = i59;
                    i118 = i37;
                    i119 = i79;
                    i120 = i60;
                  } else {
                    i121 = i79;
                    i122 = i60;
                    i123 = i37;
                    i124 = 0;
                    i125 = i59;
                    break;
                  }
                  while (1) {
                    if (i117 >>> 0 >= i36 >>> 0) {
                      break;
                    }
                    i37 = i120 >>> 8 | i119 << 24;
                    i56 = i119 >>> 8 | 0 << 24;
                    i74 = i19 | 0;
                    HEAP32[i74 >> 2] = i37;
                    i75 = i19 + 4 | 0;
                    HEAP32[i75 >> 2] = i56;
                    i115 = 0 << 24 | 0 >>> 8 | i37;
                    i37 = (HEAPU8[(HEAP32[i20 >> 2] | 0) + i117 | 0] | 0) << 24 | 0 >>> 8 | i56;
                    i77 = i19 | 0;
                    HEAP32[i77 >> 2] = i115;
                    i78 = i19 + 4 | 0;
                    HEAP32[i78 >> 2] = i37;
                    i56 = i117 + 1 | 0;
                    HEAP32[i17 >> 2] = i56;
                    i73 = i118 - 8 | 0;
                    HEAP32[i16 >> 2] = i73;
                    if ((i73 | 0) > 7) {
                      i117 = i56;
                      i118 = i73;
                      i119 = i37;
                      i120 = i115;
                    } else {
                      i121 = i37;
                      i122 = i115;
                      i123 = i73;
                      i124 = 0;
                      i125 = i56;
                      break L1473;
                    }
                  }
                  if (!((i117 | 0) == (i36 | 0) & (i118 | 0) == 64)) {
                    i121 = i119;
                    i122 = i120;
                    i123 = i118;
                    i124 = 0;
                    i125 = i117;
                    break;
                  }
                  HEAP32[i12 >> 2] = 1;
                  i121 = i119;
                  i122 = i120;
                  i123 = 64;
                  i124 = 1;
                  i125 = i36;
                } else {
                  HEAP32[i21 >> 2] = 1;
                  i121 = i79;
                  i122 = i60;
                  i123 = i43;
                  i124 = i58;
                  i125 = i59;
                }
              } while (0);
              i38 = (HEAP32[i61 + 4 >> 2] | 0) + i55 | 0;
              i56 = i61 + (i38 << 3) | 0;
              if ((HEAP32[i61 + (i38 << 3) + 4 >> 2] | 0) == 0) {
                i116 = i56;
                break L1468;
              } else {
                i61 = i56;
                i79 = i121;
                i60 = i122;
                i43 = i123;
                i58 = i124;
                i59 = i125;
              }
            }
          } else {
            if (i57) {
              i116 = i42;
              break;
            }
            i39 = i19 | 0;
            i59 = HEAP32[i39 >> 2] | 0;
            i40 = i19 + 4 | 0;
            i58 = HEAP32[i40 >> 2] | 0;
            i43 = i42;
            i60 = i100;
            while (1) {
              Runtime_bitshift64(i59 | 0, i58 | 0, 2, i60 | 0);
              i79 = HEAP32[tempDoublePtr >> 2] | 0, i61 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
              i61 = i60 + 1 | 0;
              HEAP32[i16 >> 2] = i61;
              i56 = (i79 & 1) + (HEAP32[i43 + 4 >> 2] | 0) | 0;
              i79 = i43 + (i56 << 3) | 0;
              if ((HEAP32[i43 + (i56 << 3) + 4 >> 2] | 0) == 0) {
                i116 = i79;
                break L1468;
              } else {
                i43 = i79;
                i60 = i61;
              }
            }
          }
        } while (0);
        i126 = i31;
        i127 = (((i2 << 16) + (i34 << 8) | 0) + i41 | 0) + (HEAP32[i116 >> 2] << 24) | 0;
        i32 = 1051;
        break;
      } else {
        if ((i34 | 0) >= 280) {
          if ((i34 | 0) >= (i10 | 0)) {
            break L1386;
          }
          i42 = i34 - 280 | 0;
          L1491 : do {
            if (i31 >>> 0 < i8 >>> 0) {
              i57 = i31;
              while (1) {
                i60 = i57 + 4 | 0;
                i43 = HEAP32[i57 >> 2] | 0;
                i58 = HEAP32[i23 >> 2] | 0;
                i59 = HEAP32[i24 >> 2] | 0;
                HEAP32[i58 + (Math_imul(i43, 506832829) >>> (i59 >>> 0) << 2) >> 2] = i43;
                if (i60 >>> 0 < i8 >>> 0) {
                  i57 = i60;
                } else {
                  i128 = i60;
                  break L1491;
                }
              }
            } else {
              i128 = i31;
            }
          } while (0);
          i126 = i128;
          i127 = HEAP32[(HEAP32[i23 >> 2] | 0) + (i42 << 2) >> 2] | 0;
          i32 = 1051;
          break;
        }
        i41 = i34 - 256 | 0;
        if ((i41 | 0) < 4) {
          i129 = i41;
          i130 = i52;
          i131 = i36;
        } else {
          i2 = i34 - 258 >> 1;
          i57 = (_VP8LReadBits(i6, i2) | 0) + ((i41 & 1 | 2) << i2) | 0;
          i129 = i57;
          i130 = HEAP32[i17 >> 2] | 0;
          i131 = HEAP32[i18 >> 2] | 0;
        }
        i57 = i129 + 1 | 0;
        i2 = HEAP32[i35 + 48 >> 2] | 0;
        i41 = (HEAP32[i2 + 4 >> 2] | 0) == 0;
        L1499 : do {
          if ((i130 + 8 | 0) >>> 0 > i131 >>> 0) {
            if (i41) {
              i132 = i2;
              i133 = i130;
              break;
            }
            i39 = i19 | 0;
            i40 = i19 + 4 | 0;
            i60 = i2;
            i43 = HEAP32[i40 >> 2] | 0;
            i59 = HEAP32[i39 >> 2] | 0;
            i58 = HEAP32[i16 >> 2] | 0;
            i61 = HEAP32[i12 >> 2] | 0;
            i79 = i130;
            while (1) {
              Runtime_bitshift64(i59 | 0, i43 | 0, 2, i58 | 0);
              i56 = HEAP32[tempDoublePtr >> 2] | 0, i38 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
              i38 = i56 & 1;
              L1504 : do {
                if ((i61 | 0) == 0) {
                  i56 = i58 + 1 | 0;
                  HEAP32[i16 >> 2] = i56;
                  if ((i56 | 0) > 31) {
                    i134 = i79;
                    i135 = i56;
                    i136 = i43;
                    i137 = i59;
                  } else {
                    i138 = i43;
                    i139 = i59;
                    i140 = i56;
                    i141 = 0;
                    i142 = i79;
                    break;
                  }
                  while (1) {
                    if (i134 >>> 0 >= i131 >>> 0) {
                      break;
                    }
                    i56 = i137 >>> 8 | i136 << 24;
                    i73 = i136 >>> 8 | 0 << 24;
                    i74 = i19 | 0;
                    HEAP32[i74 >> 2] = i56;
                    i75 = i19 + 4 | 0;
                    HEAP32[i75 >> 2] = i73;
                    i115 = 0 << 24 | 0 >>> 8 | i56;
                    i56 = (HEAPU8[(HEAP32[i20 >> 2] | 0) + i134 | 0] | 0) << 24 | 0 >>> 8 | i73;
                    i77 = i19 | 0;
                    HEAP32[i77 >> 2] = i115;
                    i78 = i19 + 4 | 0;
                    HEAP32[i78 >> 2] = i56;
                    i73 = i134 + 1 | 0;
                    HEAP32[i17 >> 2] = i73;
                    i37 = i135 - 8 | 0;
                    HEAP32[i16 >> 2] = i37;
                    if ((i37 | 0) > 7) {
                      i134 = i73;
                      i135 = i37;
                      i136 = i56;
                      i137 = i115;
                    } else {
                      i138 = i56;
                      i139 = i115;
                      i140 = i37;
                      i141 = 0;
                      i142 = i73;
                      break L1504;
                    }
                  }
                  if (!((i134 | 0) == (i131 | 0) & (i135 | 0) == 64)) {
                    i138 = i136;
                    i139 = i137;
                    i140 = i135;
                    i141 = 0;
                    i142 = i134;
                    break;
                  }
                  HEAP32[i12 >> 2] = 1;
                  i138 = i136;
                  i139 = i137;
                  i140 = 64;
                  i141 = 1;
                  i142 = i131;
                } else {
                  HEAP32[i21 >> 2] = 1;
                  i138 = i43;
                  i139 = i59;
                  i140 = i58;
                  i141 = i61;
                  i142 = i79;
                }
              } while (0);
              i55 = (HEAP32[i60 + 4 >> 2] | 0) + i38 | 0;
              i73 = i60 + (i55 << 3) | 0;
              if ((HEAP32[i60 + (i55 << 3) + 4 >> 2] | 0) == 0) {
                i132 = i73;
                i133 = i142;
                break L1499;
              } else {
                i60 = i73;
                i43 = i138;
                i59 = i139;
                i58 = i140;
                i61 = i141;
                i79 = i142;
              }
            }
          } else {
            if (i41) {
              i132 = i2;
              i133 = i130;
              break;
            }
            i39 = i19 | 0;
            i79 = HEAP32[i39 >> 2] | 0;
            i40 = i19 + 4 | 0;
            i61 = HEAP32[i40 >> 2] | 0;
            i58 = i2;
            i59 = HEAP32[i16 >> 2] | 0;
            while (1) {
              Runtime_bitshift64(i79 | 0, i61 | 0, 2, i59 | 0);
              i43 = HEAP32[tempDoublePtr >> 2] | 0, i60 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
              i60 = i59 + 1 | 0;
              HEAP32[i16 >> 2] = i60;
              i73 = (i43 & 1) + (HEAP32[i58 + 4 >> 2] | 0) | 0;
              i43 = i58 + (i73 << 3) | 0;
              if ((HEAP32[i58 + (i73 << 3) + 4 >> 2] | 0) == 0) {
                i132 = i43;
                i133 = i130;
                break L1499;
              } else {
                i58 = i43;
                i59 = i60;
              }
            }
          }
        } while (0);
        i2 = HEAP32[i132 >> 2] | 0;
        i41 = HEAP32[i16 >> 2] | 0;
        L1518 : do {
          if ((i41 | 0) > 31) {
            i42 = i133;
            i59 = i41;
            while (1) {
              if (i42 >>> 0 >= i131 >>> 0) {
                break;
              }
              i39 = i19 | 0;
              i40 = i19 + 4 | 0;
              i58 = HEAP32[i40 >> 2] | 0;
              i61 = (HEAP32[i39 >> 2] | 0) >>> 8 | i58 << 24;
              i79 = i58 >>> 8 | 0 << 24;
              i44 = i19 | 0;
              HEAP32[i44 >> 2] = i61;
              i45 = i19 + 4 | 0;
              HEAP32[i45 >> 2] = i79;
              i58 = (HEAPU8[(HEAP32[i20 >> 2] | 0) + i42 | 0] | 0) << 24 | 0 >>> 8 | i79;
              i46 = i19 | 0;
              HEAP32[i46 >> 2] = 0 << 24 | 0 >>> 8 | i61;
              i47 = i19 + 4 | 0;
              HEAP32[i47 >> 2] = i58;
              i58 = i42 + 1 | 0;
              HEAP32[i17 >> 2] = i58;
              i61 = i59 - 8 | 0;
              HEAP32[i16 >> 2] = i61;
              if ((i61 | 0) > 7) {
                i42 = i58;
                i59 = i61;
              } else {
                break L1518;
              }
            }
            if (!((i42 | 0) == (i131 | 0) & (i59 | 0) == 64)) {
              break;
            }
            HEAP32[i12 >> 2] = 1;
          }
        } while (0);
        if ((i2 | 0) < 4) {
          i143 = i2;
        } else {
          i41 = i2 - 2 >> 1;
          i143 = (_VP8LReadBits(i6, i41) | 0) + ((i2 & 1 | 2) << i41) | 0;
        }
        if ((i143 + 1 | 0) > 120) {
          i144 = i143 - 119 | 0;
        } else {
          i41 = HEAPU8[i143 + 5260748 | 0] | 0;
          i61 = Math_imul(i41 >>> 4, i3) + (8 - (i41 & 15) | 0) | 0;
          i144 = (i61 | 0) < 1 ? 1 : i61;
        }
        i61 = i8;
        if ((i61 - i25 >> 2 | 0) < (i144 | 0)) {
          break L1386;
        }
        if ((i26 - i61 >> 2 | 0) < (i57 | 0)) {
          break L1386;
        }
        L1534 : do {
          if ((i57 | 0) > 0) {
            i61 = 0;
            while (1) {
              HEAP32[i8 + (i61 << 2) >> 2] = HEAP32[i8 + (i61 - i144 << 2) >> 2] | 0;
              i41 = i61 + 1 | 0;
              if ((i41 | 0) == (i57 | 0)) {
                break L1534;
              } else {
                i61 = i41;
              }
            }
          }
        } while (0);
        i2 = i8 + (i57 << 2) | 0;
        i61 = i57 + i28 | 0;
        L1538 : do {
          if ((i61 | 0) < (i3 | 0)) {
            i145 = i29;
            i146 = i61;
          } else {
            i59 = i29;
            i42 = i61;
            while (1) {
              i41 = i42 - i3 | 0;
              i58 = i59 + 1 | 0;
              do {
                if (!i22) {
                  if ((i58 & 15 | 0) != 0) {
                    break;
                  }
                  FUNCTION_TABLE_vii[i5 & 511](i1, i58);
                }
              } while (0);
              if ((i41 | 0) < (i3 | 0)) {
                i145 = i58;
                i146 = i41;
                break L1538;
              } else {
                i59 = i58;
                i42 = i41;
              }
            }
          }
        } while (0);
        if (i2 >>> 0 >= i9 >>> 0) {
          i147 = i146;
          i148 = i145;
          i149 = i35;
          i150 = i2;
          i151 = i31;
          break;
        }
        i61 = HEAP32[i13 >> 2] | 0;
        if ((i61 | 0) == 0) {
          i152 = 0;
        } else {
          i57 = HEAP32[i15 >> 2] | 0;
          i152 = HEAP32[i57 + (Math_imul(HEAP32[i14 >> 2] | 0, i145 >> i61) + (i146 >> i61) << 2) >> 2] | 0;
        }
        i61 = (HEAP32[i7 >> 2] | 0) + (i152 * 60 & -1) | 0;
        if (i31 >>> 0 < i2 >>> 0 & i27) {
          i153 = i31;
        } else {
          i147 = i146;
          i148 = i145;
          i149 = i61;
          i150 = i2;
          i151 = i31;
          break;
        }
        while (1) {
          i57 = i153 + 4 | 0;
          i42 = HEAP32[i153 >> 2] | 0;
          i59 = HEAP32[i23 >> 2] | 0;
          i38 = HEAP32[i24 >> 2] | 0;
          HEAP32[i59 + (Math_imul(i42, 506832829) >>> (i38 >>> 0) << 2) >> 2] = i42;
          if (i57 >>> 0 < i2 >>> 0) {
            i153 = i57;
          } else {
            i147 = i146;
            i148 = i145;
            i149 = i61;
            i150 = i2;
            i151 = i57;
            break L1421;
          }
        }
      }
    } while (0);
    L1552 : do {
      if ((i32 | 0) == 1051) {
        i32 = 0;
        HEAP32[i8 >> 2] = i127;
        i34 = i8 + 4 | 0;
        i36 = i28 + 1 | 0;
        if ((i36 | 0) < (i3 | 0)) {
          i147 = i36;
          i148 = i29;
          i149 = i35;
          i150 = i34;
          i151 = i126;
          break;
        }
        i36 = i29 + 1 | 0;
        do {
          if (!i22) {
            if ((i36 & 15 | 0) != 0) {
              break;
            }
            FUNCTION_TABLE_vii[i5 & 511](i1, i36);
          }
        } while (0);
        if (i126 >>> 0 < i34 >>> 0 & i27) {
          i154 = i126;
        } else {
          i147 = 0;
          i148 = i36;
          i149 = i35;
          i150 = i34;
          i151 = i126;
          break;
        }
        while (1) {
          i2 = i154 + 4 | 0;
          i61 = HEAP32[i154 >> 2] | 0;
          i57 = HEAP32[i23 >> 2] | 0;
          i42 = HEAP32[i24 >> 2] | 0;
          HEAP32[i57 + (Math_imul(i61, 506832829) >>> (i42 >>> 0) << 2) >> 2] = i61;
          if ((i154 | 0) < (i8 | 0)) {
            i154 = i2;
          } else {
            i147 = 0;
            i148 = i36;
            i149 = i35;
            i150 = i34;
            i151 = i2;
            break L1552;
          }
        }
      }
    } while (0);
    i34 = (HEAP32[i21 >> 2] | 0) == 0;
    i36 = i34 & 1;
    if (i34) {
      i11 = i36;
      i28 = i147;
      i29 = i148;
      i30 = i149;
      i8 = i150;
      i31 = i151;
    } else {
      i155 = i36;
      i156 = i150;
      i32 = 1105;
      break;
    }
  }
  do {
    if ((i32 | 0) == 1103) {
      if (i22) {
        i155 = i11;
        i156 = i8;
        i32 = 1105;
        break;
      }
      FUNCTION_TABLE_vii[i5 & 511](i1, i29);
      i155 = i11;
      i156 = i8;
      i32 = 1105;
      break;
    }
  } while (0);
  do {
    if ((i32 | 0) == 1105) {
      if ((HEAP32[i21 >> 2] | 0) != 0 | (i155 | 0) == 0) {
        break;
      }
      if ((HEAP32[i12 >> 2] | 0) != 0 & i156 >>> 0 < i9 >>> 0) {
        break;
      }
      if ((i156 | 0) != (i9 | 0)) {
        i157 = i155;
        return i157 | 0;
      }
      HEAP32[i1 + 8 >> 2] = 0;
      i157 = i155;
      return i157 | 0;
    }
  } while (0);
  HEAP32[i1 >> 2] = (HEAP32[i12 >> 2] | 0) == 0 ? 3 : 5;
  i157 = 0;
  return i157 | 0;
}
function _ConvertToYUVA(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
  i5 = HEAP32[i4 + 16 >> 2] | 0;
  i6 = Math_imul(HEAP32[i4 + 32 >> 2] | 0, i3);
  i7 = (i2 | 0) > 0;
  L1576 : do {
    if (i7) {
      i8 = 0;
      while (1) {
        i9 = HEAP32[i1 + (i8 << 2) >> 2] | 0;
        HEAP8[i5 + (i8 + i6 | 0) | 0] = (((((i9 & 255) * 6420 & -1) + 1081344 | 0) + ((i9 >>> 16 & 255) * 16839 & -1) | 0) + ((i9 >>> 8 & 255) * 33059 & -1) | 0) >>> 16 & 255;
        i9 = i8 + 1 | 0;
        if ((i9 | 0) == (i2 | 0)) {
          break L1576;
        } else {
          i8 = i9;
        }
      }
    }
  } while (0);
  i6 = HEAP32[i4 + 20 >> 2] | 0;
  i5 = i3 >> 1;
  i8 = Math_imul(HEAP32[i4 + 36 >> 2] | 0, i5);
  i9 = HEAP32[i4 + 24 >> 2] | 0;
  i10 = Math_imul(HEAP32[i4 + 40 >> 2] | 0, i5);
  i5 = i2 >> 1;
  L1580 : do {
    if ((i5 | 0) > 0) {
      i11 = (i3 & 1 | 0) == 0;
      i12 = 0;
      while (1) {
        i13 = i12 << 1;
        i14 = HEAP32[i1 + (i13 << 2) >> 2] | 0;
        i15 = HEAP32[i1 + ((i13 | 1) << 2) >> 2] | 0;
        i13 = (i15 >>> 15 & 510) + (i14 >>> 15 & 510) | 0;
        i16 = (i15 >>> 7 & 510) + (i14 >>> 7 & 510) | 0;
        i17 = (i15 << 1 & 510) + (i14 << 1 & 510) | 0;
        i14 = (((i13 * -9719 & -1) + 33685504 | 0) + (i16 * -19081 & -1) | 0) + (i17 * 28800 & -1) | 0;
        i15 = i14 >> 18;
        if (i15 >>> 0 < 256) {
          i18 = i15;
        } else {
          i18 = (i14 >> 31 & -255) + 255 | 0;
        }
        if (i11) {
          HEAP8[i6 + (i12 + i8 | 0) | 0] = i18 & 255;
          i14 = (((i13 * 28800 & -1) + 33685504 | 0) + (i16 * -24116 & -1) | 0) + (i17 * -4684 & -1) | 0;
          i15 = i14 >> 18;
          if (i15 >>> 0 < 256) {
            i19 = i15;
          } else {
            i19 = (i14 >> 31 & -255) + 255 | 0;
          }
          HEAP8[i9 + (i12 + i10 | 0) | 0] = i19 & 255;
        } else {
          i14 = (((i13 * 28800 & -1) + 33685504 | 0) + (i16 * -24116 & -1) | 0) + (i17 * -4684 & -1) | 0;
          i17 = i14 >> 18;
          if (i17 >>> 0 < 256) {
            i20 = i17;
          } else {
            i20 = (i14 >> 31 & -255) + 255 | 0;
          }
          i14 = i6 + (i12 + i8 | 0) | 0;
          HEAP8[i14] = ((i18 + 1 | 0) + (HEAPU8[i14] | 0) | 0) >>> 1 & 255;
          i14 = i9 + (i12 + i10 | 0) | 0;
          HEAP8[i14] = ((i20 + 1 | 0) + (HEAPU8[i14] | 0) | 0) >>> 1 & 255;
        }
        i14 = i12 + 1 | 0;
        if ((i14 | 0) == (i5 | 0)) {
          i21 = i5;
          break L1580;
        } else {
          i12 = i14;
        }
      }
    } else {
      i21 = 0;
    }
  } while (0);
  do {
    if ((i2 & 1 | 0) != 0) {
      i5 = HEAP32[i1 + (i21 << 1 << 2) >> 2] | 0;
      i20 = i5 >>> 14 & 1020;
      i18 = i5 >>> 6 & 1020;
      i19 = i5 << 2 & 1020;
      i5 = (((i20 * -9719 & -1) + 33685504 | 0) + (i18 * -19081 & -1) | 0) + (i19 * 28800 & -1) | 0;
      i12 = i5 >> 18;
      if (i12 >>> 0 < 256) {
        i22 = i12;
      } else {
        i22 = (i5 >> 31 & -255) + 255 | 0;
      }
      if ((i3 & 1 | 0) == 0) {
        HEAP8[i6 + (i21 + i8 | 0) | 0] = i22 & 255;
        i5 = (((i20 * 28800 & -1) + 33685504 | 0) + (i18 * -24116 & -1) | 0) + (i19 * -4684 & -1) | 0;
        i12 = i5 >> 18;
        if (i12 >>> 0 < 256) {
          i23 = i12;
        } else {
          i23 = (i5 >> 31 & -255) + 255 | 0;
        }
        HEAP8[i9 + (i21 + i10 | 0) | 0] = i23 & 255;
        break;
      } else {
        i5 = (((i20 * 28800 & -1) + 33685504 | 0) + (i18 * -24116 & -1) | 0) + (i19 * -4684 & -1) | 0;
        i19 = i5 >> 18;
        if (i19 >>> 0 < 256) {
          i24 = i19;
        } else {
          i24 = (i5 >> 31 & -255) + 255 | 0;
        }
        i5 = i6 + (i21 + i8 | 0) | 0;
        HEAP8[i5] = ((i22 + 1 | 0) + (HEAPU8[i5] | 0) | 0) >>> 1 & 255;
        i5 = i9 + (i21 + i10 | 0) | 0;
        HEAP8[i5] = ((i24 + 1 | 0) + (HEAPU8[i5] | 0) | 0) >>> 1 & 255;
        break;
      }
    }
  } while (0);
  i24 = HEAP32[i4 + 28 >> 2] | 0;
  if ((i24 | 0) == 0) {
    return;
  }
  i10 = Math_imul(HEAP32[i4 + 44 >> 2] | 0, i3);
  if (i7) {
    i25 = 0;
  } else {
    return;
  }
  while (1) {
    HEAP8[i24 + (i25 + i10 | 0) | 0] = (HEAP32[i1 + (i25 << 2) >> 2] | 0) >>> 24 & 255;
    i7 = i25 + 1 | 0;
    if ((i7 | 0) == (i2 | 0)) {
      break;
    } else {
      i25 = i7;
    }
  }
  return;
}
function _ExtractAlphaRows(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
  i3 = i1 + 68 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  i5 = i2 - i4 | 0;
  if ((i5 | 0) < 1) {
    return;
  }
  i6 = HEAP32[i1 + 60 >> 2] | 0;
  i7 = Math_imul(i6, i4);
  i8 = (HEAP32[i1 + 20 >> 2] | 0) + (i7 << 2) | 0;
  i7 = HEAP32[i1 + 112 >> 2] | 0;
  i9 = i1 + 24 | 0;
  i10 = HEAP32[i9 >> 2] | 0;
  _memcpy(i10, i8, Math_imul(i5 << 2, i6));
  L1625 : do {
    if ((i7 | 0) > 0) {
      i6 = i8;
      i11 = i7;
      while (1) {
        i12 = i11 - 1 | 0;
        _VP8LInverseTransform(i1 + 116 + (i12 * 20 & -1) | 0, i4, i2, i6, i10);
        if ((i12 | 0) > 0) {
          i6 = i10;
          i11 = i12;
        } else {
          break L1625;
        }
      }
    }
  } while (0);
  i10 = HEAP32[i1 + 12 >> 2] | 0;
  i4 = HEAP32[i10 >> 2] | 0;
  i7 = Math_imul(i4, i5);
  i5 = HEAP32[i10 + 40 >> 2] | 0;
  i10 = Math_imul(HEAP32[i3 >> 2] | 0, i4);
  i4 = HEAP32[i9 >> 2] | 0;
  L1629 : do {
    if ((i7 | 0) > 0) {
      i9 = 0;
      while (1) {
        HEAP8[i5 + (i9 + i10 | 0) | 0] = (HEAP32[i4 + (i9 << 2) >> 2] | 0) >>> 8 & 255;
        i8 = i9 + 1 | 0;
        if ((i8 | 0) == (i7 | 0)) {
          break L1629;
        } else {
          i9 = i8;
        }
      }
    }
  } while (0);
  HEAP32[i1 + 72 >> 2] = i2;
  HEAP32[i3 >> 2] = i2;
  return;
}
function _ProcessRows(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0;
  i3 = i1 + 68 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  i5 = i2 - i4 | 0;
  if ((i5 | 0) < 1) {
    return;
  }
  i6 = HEAP32[i1 + 60 >> 2] | 0;
  i7 = Math_imul(i6, i4);
  i8 = (HEAP32[i1 + 20 >> 2] | 0) + (i7 << 2) | 0;
  i7 = HEAP32[i1 + 112 >> 2] | 0;
  i9 = i1 + 24 | 0;
  i10 = HEAP32[i9 >> 2] | 0;
  _memcpy(i10, i8, Math_imul(i5 << 2, i6));
  L1638 : do {
    if ((i7 | 0) > 0) {
      i6 = i8;
      i5 = i7;
      while (1) {
        i11 = i5 - 1 | 0;
        _VP8LInverseTransform(i1 + 116 + (i11 * 20 & -1) | 0, i4, i2, i6, i10);
        if ((i11 | 0) > 0) {
          i6 = i10;
          i5 = i11;
        } else {
          break L1638;
        }
      }
    }
  } while (0);
  i10 = HEAP32[i1 + 12 >> 2] | 0;
  i4 = HEAP32[i9 >> 2] | 0;
  i9 = HEAP32[i3 >> 2] | 0;
  i7 = i10 | 0;
  i8 = HEAP32[i10 + 88 >> 2] | 0;
  i5 = (i8 | 0) < (i2 | 0) ? i8 : i2;
  i8 = HEAP32[i10 + 84 >> 2] | 0;
  if ((i8 | 0) > (i9 | 0)) {
    i12 = i8;
    i13 = i4 + (Math_imul(HEAP32[i7 >> 2] | 0, i8 - i9 | 0) << 2) | 0;
  } else {
    i12 = i9;
    i13 = i4;
  }
  do {
    if ((i12 | 0) < (i5 | 0)) {
      i4 = HEAP32[i10 + 76 >> 2] | 0;
      i9 = i13 + (i4 << 2) | 0;
      HEAP32[i10 + 8 >> 2] = i12 - i8 | 0;
      i6 = (HEAP32[i10 + 80 >> 2] | 0) - i4 | 0;
      HEAP32[i10 + 12 >> 2] = i6;
      i4 = i5 - i12 | 0;
      HEAP32[i10 + 16 >> 2] = i4;
      i11 = i1 + 16 | 0;
      i14 = HEAP32[i11 >> 2] | 0;
      i15 = HEAP32[i7 >> 2] << 2;
      i16 = HEAP32[i14 >> 2] | 0;
      if (i16 >>> 0 < 11) {
        i17 = HEAP32[i14 + 16 >> 2] | 0;
        i18 = i1 + 72 | 0;
        i19 = HEAP32[i18 >> 2] | 0;
        i20 = HEAP32[i14 + 20 >> 2] | 0;
        i21 = i17 + Math_imul(i20, i19) | 0;
        L1649 : do {
          if ((HEAP32[i10 + 92 >> 2] | 0) == 0) {
            if ((i4 | 0) <= 0) {
              i22 = i4;
              break;
            }
            i23 = i4;
            i24 = i9;
            i25 = i21;
            while (1) {
              i26 = i23 - 1 | 0;
              _VP8LConvertFromBGRA(i24, i6, i16, i25);
              if ((i26 | 0) > 0) {
                i23 = i26;
                i24 = i24 + i15 | 0;
                i25 = i25 + i20 | 0;
              } else {
                i22 = i4;
                break L1649;
              }
            }
          } else {
            i25 = i9;
            if ((i4 | 0) <= 0) {
              i22 = 0;
              break;
            }
            i24 = i1 + 204 | 0;
            i23 = 0;
            i26 = 0;
            while (1) {
              i27 = HEAP32[i24 >> 2] | 0;
              i28 = i4 - i26 | 0;
              i29 = i27 + 24 | 0;
              if ((i28 | 0) > 0) {
                i30 = i25 + Math_imul(i26, i15) | 0;
                i31 = i27 + 4 | 0;
                i32 = i27 + 32 | 0;
                i33 = i30;
                i30 = 0;
                i34 = HEAP32[i29 >> 2] | 0;
                while (1) {
                  if ((i34 | 0) <= 0) {
                    i35 = i30;
                    break;
                  }
                  if ((HEAP32[i31 >> 2] | 0) > 0) {
                    i36 = 0;
                    while (1) {
                      _WebPRescalerImportRow(i27, i33, i36);
                      i37 = i36 + 1 | 0;
                      if ((i37 | 0) < (HEAP32[i31 >> 2] | 0)) {
                        i36 = i37;
                      } else {
                        break;
                      }
                    }
                    i38 = HEAP32[i29 >> 2] | 0;
                  } else {
                    i38 = i34;
                  }
                  i36 = i30 + 1 | 0;
                  i37 = i38 - (HEAP32[i32 >> 2] | 0) | 0;
                  HEAP32[i29 >> 2] = i37;
                  if ((i36 | 0) < (i28 | 0)) {
                    i33 = i33 + i15 | 0;
                    i30 = i36;
                    i34 = i37;
                  } else {
                    i35 = i36;
                    break;
                  }
                }
                i39 = i35;
                i40 = HEAP32[i24 >> 2] | 0;
              } else {
                i39 = 0;
                i40 = i27;
              }
              i34 = i39 + i26 | 0;
              i30 = i40 + 60 | 0;
              i33 = HEAP32[i30 >> 2] | 0;
              i28 = i40 + 52 | 0;
              i29 = HEAP32[i28 >> 2] | 0;
              i32 = i40 + 24 | 0;
              i31 = HEAP32[i32 >> 2] | 0;
              L1666 : do {
                if ((i31 | 0) < 1) {
                  i36 = i40 + 68 | 0;
                  i37 = i40 + 72 | 0;
                  i41 = i40 + 4 | 0;
                  i42 = i40 + 8 | 0;
                  i43 = i40 + 16 | 0;
                  i44 = i40 + 28 | 0;
                  i45 = i40 + 64 | 0;
                  i46 = i23 + i19 | 0;
                  i47 = 0;
                  i48 = i31;
                  while (1) {
                    i49 = i17 + Math_imul(i46 + i47 | 0, i20) | 0;
                    if ((i48 | 0) < 1) {
                      i50 = HEAP32[i30 >> 2] | 0;
                      i51 = HEAP32[i36 >> 2] | 0;
                      i52 = HEAP32[i37 >> 2] | 0;
                      i53 = Math_imul(HEAP32[i41 >> 2] | 0, HEAP32[i28 >> 2] | 0);
                      if ((i53 | 0) > 0) {
                        i54 = Math_imul(HEAP32[i42 >> 2] | 0, -i48 | 0);
                        i55 = i54;
                        i56 = (i54 | 0) < 0 ? -1 : 0;
                        i54 = 0;
                        while (1) {
                          i57 = HEAP32[i52 + (i54 << 2) >> 2] | 0;
                          i58 = i57;
                          i59 = (i57 | 0) < 0 ? -1 : 0;
                          i57 = ~~((+(i58 >>> 0) + +(i59 | 0) * 4294967296.0) * (+(i55 >>> 0) + +(i56 | 0) * 4294967296.0)) >>> 0;
                          i60 = Math_min(Math_floor((+(i58 >>> 0) + +(i59 | 0) * 4294967296.0) * (+(i55 >>> 0) + +(i56 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
                          i59 = 536870912;
                          i58 = 0;
                          i61 = Math_min(Math_floor((+(i57 >>> 0) + +(i60 | 0) * 4294967296.0 + (+(i59 >>> 0) + +(i58 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
                          i62 = ~~(+(i57 >>> 0) + +(i60 | 0) * 4294967296.0 + (+(i59 >>> 0) + +(i58 | 0) * 4294967296.0)) >>> 0 >>> 30 | i61 << 2;
                          i61 = i51 + (i54 << 2) | 0;
                          i58 = (HEAP32[i61 >> 2] | 0) - i62 | 0;
                          i59 = i58;
                          i60 = (i58 | 0) < 0 ? -1 : 0;
                          i63 = i43 | 0;
                          i58 = HEAP32[i63 >> 2] | 0;
                          i64 = i43 + 4 | 0;
                          i57 = HEAP32[i64 >> 2] | 0;
                          i65 = ~~((+(i59 >>> 0) + +(i60 | 0) * 4294967296.0) * (+(i58 >>> 0) + +(i57 | 0) * 4294967296.0)) >>> 0;
                          i66 = Math_min(Math_floor((+(i59 >>> 0) + +(i60 | 0) * 4294967296.0) * (+(i58 >>> 0) + +(i57 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
                          i57 = 536870912;
                          i58 = 0;
                          i60 = Math_min(Math_floor((+(i65 >>> 0) + +(i66 | 0) * 4294967296.0 + (+(i57 >>> 0) + +(i58 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
                          i59 = ~~(+(i65 >>> 0) + +(i66 | 0) * 4294967296.0 + (+(i57 >>> 0) + +(i58 | 0) * 4294967296.0)) >>> 0 >>> 30 | i60 << 2;
                          if (i59 >>> 0 > 255) {
                            i67 = (i59 >> 31 & -255) + 255 | 0;
                          } else {
                            i67 = i59;
                          }
                          HEAP8[i50 + i54 | 0] = i67 & 255;
                          HEAP32[i61 >> 2] = i62;
                          i62 = i54 + 1 | 0;
                          if ((i62 | 0) == (i53 | 0)) {
                            break;
                          } else {
                            i54 = i62;
                          }
                        }
                        i68 = HEAP32[i32 >> 2] | 0;
                        i69 = HEAP32[i30 >> 2] | 0;
                      } else {
                        i68 = i48;
                        i69 = i50;
                      }
                      HEAP32[i32 >> 2] = (HEAP32[i44 >> 2] | 0) + i68 | 0;
                      HEAP32[i30 >> 2] = i69 + (HEAP32[i45 >> 2] | 0) | 0;
                    }
                    _VP8LConvertFromBGRA(i33, i29, i16, i49);
                    i54 = i47 + 1 | 0;
                    i53 = HEAP32[i32 >> 2] | 0;
                    if ((i53 | 0) < 1) {
                      i47 = i54;
                      i48 = i53;
                    } else {
                      i70 = i54;
                      break L1666;
                    }
                  }
                } else {
                  i70 = 0;
                }
              } while (0);
              i32 = i70 + i23 | 0;
              if ((i34 | 0) < (i4 | 0)) {
                i23 = i32;
                i26 = i34;
              } else {
                i22 = i32;
                break L1649;
              }
            }
          }
        } while (0);
        HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + i22 | 0;
        break;
      }
      L1689 : do {
        if ((HEAP32[i10 + 92 >> 2] | 0) == 0) {
          i16 = HEAP32[i1 + 72 >> 2] | 0;
          if ((i4 | 0) <= 0) {
            i71 = i16;
            break;
          }
          i20 = i4;
          i17 = i16;
          i19 = i9;
          i21 = i14;
          while (1) {
            i26 = i20 - 1 | 0;
            _ConvertToYUVA(i19, i6, i17, i21);
            if ((i26 | 0) <= 0) {
              break;
            }
            i20 = i26;
            i17 = i17 + 1 | 0;
            i19 = i19 + i15 | 0;
            i21 = HEAP32[i11 >> 2] | 0;
          }
          i71 = i16 + i4 | 0;
        } else {
          i21 = i9;
          i19 = HEAP32[i1 + 72 >> 2] | 0;
          if ((i4 | 0) <= 0) {
            i71 = i19;
            break;
          }
          i17 = i1 + 204 | 0;
          i20 = i19;
          i19 = 0;
          while (1) {
            i26 = HEAP32[i17 >> 2] | 0;
            i23 = i4 - i19 | 0;
            i24 = i26 + 24 | 0;
            if ((i23 | 0) > 0) {
              i25 = i21 + Math_imul(i19, i15) | 0;
              i32 = i26 + 4 | 0;
              i29 = i26 + 32 | 0;
              i33 = i25;
              i25 = 0;
              i30 = HEAP32[i24 >> 2] | 0;
              while (1) {
                if ((i30 | 0) <= 0) {
                  i72 = i25;
                  break;
                }
                if ((HEAP32[i32 >> 2] | 0) > 0) {
                  i28 = 0;
                  while (1) {
                    _WebPRescalerImportRow(i26, i33, i28);
                    i31 = i28 + 1 | 0;
                    if ((i31 | 0) < (HEAP32[i32 >> 2] | 0)) {
                      i28 = i31;
                    } else {
                      break;
                    }
                  }
                  i73 = HEAP32[i24 >> 2] | 0;
                } else {
                  i73 = i30;
                }
                i28 = i25 + 1 | 0;
                i31 = i73 - (HEAP32[i29 >> 2] | 0) | 0;
                HEAP32[i24 >> 2] = i31;
                if ((i28 | 0) < (i23 | 0)) {
                  i33 = i33 + i15 | 0;
                  i25 = i28;
                  i30 = i31;
                } else {
                  i72 = i28;
                  break;
                }
              }
              i74 = i72;
              i75 = HEAP32[i17 >> 2] | 0;
            } else {
              i74 = 0;
              i75 = i26;
            }
            i30 = i74 + i19 | 0;
            i25 = i75 + 60 | 0;
            i33 = HEAP32[i25 >> 2] | 0;
            i23 = i75 + 52 | 0;
            i24 = HEAP32[i23 >> 2] | 0;
            i29 = i75 + 24 | 0;
            i32 = HEAP32[i29 >> 2] | 0;
            L1706 : do {
              if ((i32 | 0) < 1) {
                i34 = i75 + 68 | 0;
                i28 = i75 + 72 | 0;
                i31 = i75 + 4 | 0;
                i27 = i75 + 8 | 0;
                i48 = i75 + 16 | 0;
                i47 = i75 + 28 | 0;
                i45 = i75 + 64 | 0;
                i44 = i20;
                i43 = 0;
                i42 = i32;
                while (1) {
                  if ((i42 | 0) < 1) {
                    i41 = HEAP32[i25 >> 2] | 0;
                    i37 = HEAP32[i34 >> 2] | 0;
                    i36 = HEAP32[i28 >> 2] | 0;
                    i46 = Math_imul(HEAP32[i31 >> 2] | 0, HEAP32[i23 >> 2] | 0);
                    if ((i46 | 0) > 0) {
                      i54 = Math_imul(HEAP32[i27 >> 2] | 0, -i42 | 0);
                      i53 = i54;
                      i51 = (i54 | 0) < 0 ? -1 : 0;
                      i54 = 0;
                      while (1) {
                        i56 = HEAP32[i36 + (i54 << 2) >> 2] | 0;
                        i55 = i56;
                        i52 = (i56 | 0) < 0 ? -1 : 0;
                        i56 = ~~((+(i55 >>> 0) + +(i52 | 0) * 4294967296.0) * (+(i53 >>> 0) + +(i51 | 0) * 4294967296.0)) >>> 0;
                        i62 = Math_min(Math_floor((+(i55 >>> 0) + +(i52 | 0) * 4294967296.0) * (+(i53 >>> 0) + +(i51 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
                        i52 = 536870912;
                        i55 = 0;
                        i61 = Math_min(Math_floor((+(i56 >>> 0) + +(i62 | 0) * 4294967296.0 + (+(i52 >>> 0) + +(i55 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
                        i59 = ~~(+(i56 >>> 0) + +(i62 | 0) * 4294967296.0 + (+(i52 >>> 0) + +(i55 | 0) * 4294967296.0)) >>> 0 >>> 30 | i61 << 2;
                        i61 = i37 + (i54 << 2) | 0;
                        i55 = (HEAP32[i61 >> 2] | 0) - i59 | 0;
                        i52 = i55;
                        i62 = (i55 | 0) < 0 ? -1 : 0;
                        i63 = i48 | 0;
                        i55 = HEAP32[i63 >> 2] | 0;
                        i64 = i48 + 4 | 0;
                        i56 = HEAP32[i64 >> 2] | 0;
                        i60 = ~~((+(i52 >>> 0) + +(i62 | 0) * 4294967296.0) * (+(i55 >>> 0) + +(i56 | 0) * 4294967296.0)) >>> 0;
                        i58 = Math_min(Math_floor((+(i52 >>> 0) + +(i62 | 0) * 4294967296.0) * (+(i55 >>> 0) + +(i56 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
                        i56 = 536870912;
                        i55 = 0;
                        i62 = Math_min(Math_floor((+(i60 >>> 0) + +(i58 | 0) * 4294967296.0 + (+(i56 >>> 0) + +(i55 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
                        i52 = ~~(+(i60 >>> 0) + +(i58 | 0) * 4294967296.0 + (+(i56 >>> 0) + +(i55 | 0) * 4294967296.0)) >>> 0 >>> 30 | i62 << 2;
                        if (i52 >>> 0 > 255) {
                          i76 = (i52 >> 31 & -255) + 255 | 0;
                        } else {
                          i76 = i52;
                        }
                        HEAP8[i41 + i54 | 0] = i76 & 255;
                        HEAP32[i61 >> 2] = i59;
                        i59 = i54 + 1 | 0;
                        if ((i59 | 0) == (i46 | 0)) {
                          break;
                        } else {
                          i54 = i59;
                        }
                      }
                      i77 = HEAP32[i29 >> 2] | 0;
                      i78 = HEAP32[i25 >> 2] | 0;
                    } else {
                      i77 = i42;
                      i78 = i41;
                    }
                    HEAP32[i29 >> 2] = (HEAP32[i47 >> 2] | 0) + i77 | 0;
                    HEAP32[i25 >> 2] = i78 + (HEAP32[i45 >> 2] | 0) | 0;
                  }
                  _ConvertToYUVA(i33, i24, i44, HEAP32[i11 >> 2] | 0);
                  i54 = i43 + 1 | 0;
                  i46 = HEAP32[i29 >> 2] | 0;
                  if ((i46 | 0) < 1) {
                    i44 = i44 + 1 | 0;
                    i43 = i54;
                    i42 = i46;
                  } else {
                    i79 = i54;
                    break L1706;
                  }
                }
              } else {
                i79 = 0;
              }
            } while (0);
            i29 = i79 + i20 | 0;
            if ((i30 | 0) < (i4 | 0)) {
              i20 = i29;
              i19 = i30;
            } else {
              i71 = i29;
              break L1689;
            }
          }
        }
      } while (0);
      HEAP32[i1 + 72 >> 2] = i71;
    }
  } while (0);
  HEAP32[i3 >> 2] = i2;
  return;
}
function _DeleteHtreeGroups(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0;
  if ((i1 | 0) == 0) {
    return;
  }
  L1736 : do {
    if ((i2 | 0) > 0) {
      i3 = 0;
      while (1) {
        i4 = i1 + (i3 * 60 & -1) | 0;
        if ((i4 | 0) != 0) {
          i5 = i4 | 0;
          _free(HEAP32[i5 >> 2] | 0);
          HEAP32[i5 >> 2] = 0;
          HEAP32[i1 + (i3 * 60 & -1) + 4 >> 2] = 0;
          HEAP32[i1 + (i3 * 60 & -1) + 8 >> 2] = 0;
        }
        i5 = i1 + (i3 * 60 & -1) + 12 | 0;
        if ((i5 | 0) != 0) {
          i4 = i5 | 0;
          _free(HEAP32[i4 >> 2] | 0);
          HEAP32[i4 >> 2] = 0;
          HEAP32[i1 + (i3 * 60 & -1) + 16 >> 2] = 0;
          HEAP32[i1 + (i3 * 60 & -1) + 20 >> 2] = 0;
        }
        i4 = i1 + (i3 * 60 & -1) + 24 | 0;
        if ((i4 | 0) != 0) {
          i5 = i4 | 0;
          _free(HEAP32[i5 >> 2] | 0);
          HEAP32[i5 >> 2] = 0;
          HEAP32[i1 + (i3 * 60 & -1) + 28 >> 2] = 0;
          HEAP32[i1 + (i3 * 60 & -1) + 32 >> 2] = 0;
        }
        i5 = i1 + (i3 * 60 & -1) + 36 | 0;
        if ((i5 | 0) != 0) {
          i4 = i5 | 0;
          _free(HEAP32[i4 >> 2] | 0);
          HEAP32[i4 >> 2] = 0;
          HEAP32[i1 + (i3 * 60 & -1) + 40 >> 2] = 0;
          HEAP32[i1 + (i3 * 60 & -1) + 44 >> 2] = 0;
        }
        i4 = i1 + (i3 * 60 & -1) + 48 | 0;
        if ((i4 | 0) != 0) {
          i5 = i4 | 0;
          _free(HEAP32[i5 >> 2] | 0);
          HEAP32[i5 >> 2] = 0;
          HEAP32[i1 + (i3 * 60 & -1) + 52 >> 2] = 0;
          HEAP32[i1 + (i3 * 60 & -1) + 56 >> 2] = 0;
        }
        i5 = i3 + 1 | 0;
        if ((i5 | 0) == (i2 | 0)) {
          break L1736;
        } else {
          i3 = i5;
        }
      }
    }
  } while (0);
  _free(i1);
  return;
}
function _FinishRow(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0;
  i3 = STACKTOP;
  STACKTOP = STACKTOP + 108 | 0;
  i4 = i3 | 0;
  i5 = i1 + 1764 | 0;
  i6 = HEAPU8[5247300 + (HEAP32[i5 >> 2] | 0) | 0] | 0;
  i7 = i1 + 1712 | 0;
  i8 = HEAP32[i7 >> 2] | 0;
  i9 = Math_imul(i6, i8);
  i10 = i1 + 1716 | 0;
  i11 = HEAP32[i10 >> 2] | 0;
  i12 = Math_imul(i6 >>> 1, i11);
  i13 = i1 + 152 | 0;
  i14 = HEAP32[i13 >> 2] | 0;
  i15 = Math_imul(i14 << 4, i8);
  i16 = Math_imul(i14 << 3, i11);
  i11 = i1 + 1700 | 0;
  i17 = HEAP32[i11 >> 2] | 0;
  i18 = -i9 | 0;
  i19 = i15 - i9 | 0;
  i20 = i17 + i19 | 0;
  i21 = i1 + 1704 | 0;
  i22 = HEAP32[i21 >> 2] | 0;
  i23 = -i12 | 0;
  i24 = i16 - i12 | 0;
  i25 = i22 + i24 | 0;
  i26 = i1 + 1708 | 0;
  i27 = HEAP32[i26 >> 2] | 0;
  i28 = i27 + i24 | 0;
  i29 = HEAP32[i1 + 156 >> 2] | 0;
  i30 = (i29 | 0) == 0;
  i31 = (i29 | 0) >= ((HEAP32[i1 + 296 >> 2] | 0) - 1 | 0);
  i32 = i29 << 4;
  i33 = i32 + 16 | 0;
  L1757 : do {
    if ((HEAP32[i1 + 160 >> 2] | 0) != 0) {
      i34 = HEAP32[i1 + 284 >> 2] | 0;
      i35 = i1 + 292 | 0;
      if ((i34 | 0) >= (HEAP32[i35 >> 2] | 0)) {
        break;
      }
      i36 = i1 + 164 | 0;
      i37 = (i29 | 0) > 0;
      i38 = i1 + 36 | 0;
      i39 = i34;
      i34 = i8;
      i40 = i17;
      i41 = i14;
      while (1) {
        i42 = (HEAP32[i36 >> 2] | 0) + (i39 << 2) | 0;
        i43 = Math_imul(i41, i34) + i39 << 4;
        i44 = i40 + i43 | 0;
        i45 = i42;
        i42 = HEAP32[i45 >> 2] | 0;
        i46 = i42 & 63;
        i47 = i42 >>> 6 & 63;
        i48 = (i46 << 1) + i47 | 0;
        L1762 : do {
          if ((i46 | 0) != 0) {
            if ((HEAP32[i5 >> 2] | 0) != 1) {
              i49 = HEAP32[i10 >> 2] | 0;
              i50 = HEAP32[i21 >> 2] | 0;
              i51 = Math_imul(i41 << 3, i49) + (i39 << 3) | 0;
              i52 = i50 + i51 | 0;
              i53 = HEAP32[i26 >> 2] | 0;
              i54 = i53 + i51 | 0;
              i55 = i46 >>> 0 > 39;
              do {
                if (HEAP8[i38] << 24 >> 24 == 0) {
                  if (i55) {
                    i56 = 3;
                    break;
                  }
                  if (i46 >>> 0 > 19) {
                    i56 = 2;
                    break;
                  }
                  i56 = i46 >>> 0 > 14 & 1;
                } else {
                  if (i55) {
                    i56 = 2;
                    break;
                  }
                  i56 = i46 >>> 0 > 14 & 1;
                }
              } while (0);
              if ((i39 | 0) > 0) {
                i55 = i48 + 4 | 0;
                _FilterLoop26(i44, 1, i34, 16, i55, i47, i56);
                _FilterLoop26(i52, 1, i49, 8, i55, i47, i56);
                _FilterLoop26(i54, 1, i49, 8, i55, i47, i56);
                i57 = HEAP32[i45 >> 2] | 0;
              } else {
                i57 = i42;
              }
              if ((i57 & 4096 | 0) != 0) {
                _FilterLoop24(i40 + (i43 | 4) | 0, 1, i34, 16, i48, i47, i56);
                _FilterLoop24(i40 + (i43 | 8) | 0, 1, i34, 16, i48, i47, i56);
                _FilterLoop24(i40 + (i43 | 12) | 0, 1, i34, 16, i48, i47, i56);
                i55 = i51 | 4;
                _FilterLoop24(i50 + i55 | 0, 1, i49, 8, i48, i47, i56);
                _FilterLoop24(i53 + i55 | 0, 1, i49, 8, i48, i47, i56);
              }
              if (i37) {
                i55 = i48 + 4 | 0;
                _FilterLoop26(i44, i34, 1, 16, i55, i47, i56);
                _FilterLoop26(i52, i49, 1, 8, i55, i47, i56);
                _FilterLoop26(i54, i49, 1, 8, i55, i47, i56);
              }
              if ((HEAP32[i45 >> 2] & 4096 | 0) == 0) {
                break;
              }
              i55 = i34 << 2;
              _FilterLoop24(i40 + (i43 + i55 | 0) | 0, i34, 1, 16, i48, i47, i56);
              i58 = i34 << 3;
              _FilterLoop24(i40 + (i43 + i58 | 0) | 0, i34, 1, 16, i48, i47, i56);
              _FilterLoop24(i40 + (i43 + (i58 + i55 | 0) | 0) | 0, i34, 1, 16, i48, i47, i56);
              i55 = i51 + (i49 << 2) | 0;
              _FilterLoop24(i50 + i55 | 0, i49, 1, 8, i48, i47, i56);
              _FilterLoop24(i53 + i55 | 0, i49, 1, 8, i48, i47, i56);
              break;
            }
            if ((i39 | 0) > 0) {
              _SimpleHFilter16(i44, i34, i48 + 4 | 0);
              i59 = HEAP32[i45 >> 2] | 0;
            } else {
              i59 = i42;
            }
            if ((i59 & 4096 | 0) != 0) {
              _SimpleHFilter16(i40 + (i43 | 4) | 0, i34, i48);
              _SimpleHFilter16(i40 + (i43 | 8) | 0, i34, i48);
              _SimpleHFilter16(i40 + (i43 | 12) | 0, i34, i48);
            }
            L1790 : do {
              if (i37) {
                i55 = i48 + 4 | 0;
                i58 = i34 * -2 & -1;
                i60 = 0;
                while (1) {
                  i61 = i43 + i60 | 0;
                  i62 = i40 + i61 | 0;
                  i63 = HEAPU8[i62] | 0;
                  if ((((HEAPU8[5262404 + (((HEAPU8[i40 + (i43 + (i60 - i34 | 0) | 0) | 0] | 0) + 255 | 0) - i63 | 0) | 0] | 0) << 1) + (HEAPU8[5261892 + (((HEAPU8[i40 + (i43 + (i60 + i58 | 0) | 0) | 0] | 0) + 255 | 0) - (HEAPU8[i40 + (i43 + (i60 + i34 | 0) | 0) | 0] | 0) | 0) | 0] | 0) | 0) <= (i55 | 0)) {
                    i64 = i40 + (i61 - i34 | 0) | 0;
                    i65 = HEAPU8[i64] | 0;
                    i66 = ((i63 - i65 | 0) * 3 & -1) + (HEAP8[5243696 + (((HEAPU8[i40 + (i61 + i58 | 0) | 0] | 0) + 1020 | 0) - (HEAPU8[i40 + (i61 + i34 | 0) | 0] | 0) | 0) | 0] << 24 >> 24) | 0;
                    i61 = HEAP8[5243468 + ((i66 + 4 >> 3) + 112 | 0) | 0] << 24 >> 24;
                    HEAP8[i64] = HEAP8[5260868 + ((i65 + 255 | 0) + (HEAP8[5243468 + ((i66 + 3 >> 3) + 112 | 0) | 0] << 24 >> 24) | 0) | 0] | 0;
                    HEAP8[i62] = HEAP8[5260868 + ((i63 + 255 | 0) - i61 | 0) | 0] | 0;
                  }
                  i61 = i60 + 1 | 0;
                  if ((i61 | 0) == 16) {
                    break L1790;
                  } else {
                    i60 = i61;
                  }
                }
              }
            } while (0);
            if ((HEAP32[i45 >> 2] & 4096 | 0) == 0) {
              break;
            }
            i49 = i34 << 2;
            i53 = i34 * -2 & -1;
            i50 = i49 + i53 | 0;
            i51 = i49 - i34 | 0;
            i54 = i49 + i34 | 0;
            i52 = i44;
            i60 = 3;
            while (1) {
              i58 = 0;
              while (1) {
                i55 = i58 + i49 | 0;
                i61 = i52 + i55 | 0;
                i63 = HEAPU8[i61] | 0;
                if ((((HEAPU8[5262404 + (((HEAPU8[i52 + (i51 + i58 | 0) | 0] | 0) + 255 | 0) - i63 | 0) | 0] | 0) << 1) + (HEAPU8[5261892 + (((HEAPU8[i52 + (i50 + i58 | 0) | 0] | 0) + 255 | 0) - (HEAPU8[i52 + (i54 + i58 | 0) | 0] | 0) | 0) | 0] | 0) | 0) <= (i48 | 0)) {
                  i62 = i52 + (i55 - i34 | 0) | 0;
                  i66 = HEAPU8[i62] | 0;
                  i65 = ((i63 - i66 | 0) * 3 & -1) + (HEAP8[5243696 + (((HEAPU8[i52 + (i55 + i53 | 0) | 0] | 0) + 1020 | 0) - (HEAPU8[i52 + (i55 + i34 | 0) | 0] | 0) | 0) | 0] << 24 >> 24) | 0;
                  i55 = HEAP8[5243468 + ((i65 + 4 >> 3) + 112 | 0) | 0] << 24 >> 24;
                  HEAP8[i62] = HEAP8[5260868 + ((i66 + 255 | 0) + (HEAP8[5243468 + ((i65 + 3 >> 3) + 112 | 0) | 0] << 24 >> 24) | 0) | 0] | 0;
                  HEAP8[i61] = HEAP8[5260868 + ((i63 + 255 | 0) - i55 | 0) | 0] | 0;
                }
                i55 = i58 + 1 | 0;
                if ((i55 | 0) == 16) {
                  break;
                } else {
                  i58 = i55;
                }
              }
              i58 = i60 - 1 | 0;
              if ((i58 | 0) > 0) {
                i52 = i52 + i49 | 0;
                i60 = i58;
              } else {
                break L1762;
              }
            }
          }
        } while (0);
        i48 = i39 + 1 | 0;
        if ((i48 | 0) >= (HEAP32[i35 >> 2] | 0)) {
          break L1757;
        }
        i39 = i48;
        i34 = HEAP32[i7 >> 2] | 0;
        i40 = HEAP32[i11 >> 2] | 0;
        i41 = HEAP32[i13 >> 2] | 0;
      }
    }
  } while (0);
  i59 = i2 + 44 | 0;
  do {
    if ((HEAP32[i59 >> 2] | 0) == 0) {
      i67 = 1;
    } else {
      if (i30) {
        HEAP32[i2 + 20 >> 2] = (HEAP32[i11 >> 2] | 0) + i15 | 0;
        HEAP32[i2 + 24 >> 2] = (HEAP32[i21 >> 2] | 0) + i16 | 0;
        HEAP32[i2 + 28 >> 2] = (HEAP32[i26 >> 2] | 0) + i16 | 0;
        i68 = i32;
      } else {
        HEAP32[i2 + 20 >> 2] = i20;
        HEAP32[i2 + 24 >> 2] = i25;
        HEAP32[i2 + 28 >> 2] = i28;
        i68 = i32 - i6 | 0;
      }
      i56 = i33 + (i31 ? 0 : -i6 | 0) | 0;
      i57 = HEAP32[i2 + 88 >> 2] | 0;
      i5 = (i56 | 0) > (i57 | 0) ? i57 : i56;
      i56 = i2 + 104 | 0;
      HEAP32[i56 >> 2] = 0;
      i57 = HEAP32[i1 + 1804 >> 2] | 0;
      L1816 : do {
        if ((i57 | 0) != 0 & (i68 | 0) < (i5 | 0)) {
          i14 = HEAP16[i1 + 44 >> 1] | 0;
          i8 = i14 & 65535;
          L1818 : do {
            if ((i5 - i68 | i68 | 0) < 0) {
              i69 = 1323;
            } else {
              i29 = HEAP16[i1 + 46 >> 1] | 0;
              i41 = i29 & 65535;
              if ((i5 | 0) > (i41 | 0)) {
                i69 = 1323;
                break;
              }
              if ((i68 | 0) == 0) {
                i40 = HEAP32[i1 + 1808 >> 2] | 0;
                i34 = i1 + 1812 | 0;
                i39 = HEAP32[i34 >> 2] | 0;
                i35 = Math_imul(i41, i8);
                if (i40 >>> 0 < 2) {
                  i69 = 1323;
                  break;
                }
                i37 = HEAPU8[i57] | 0;
                i38 = i37 & 3;
                i36 = i37 >>> 2 & 3;
                i48 = i37 >>> 4 & 3;
                if (!((i48 | i38) >>> 0 < 2 & (i37 & 192 | 0) == 0)) {
                  i69 = 1323;
                  break;
                }
                i37 = (i38 | 0) == 0;
                do {
                  if (i37) {
                    i70 = i57 + 1 | 0;
                    i71 = i35 >>> 0 <= i40 >>> 0 & 1;
                  } else {
                    i38 = _malloc(i35) | 0;
                    if ((i38 | 0) == 0) {
                      i69 = 1323;
                      break L1818;
                    }
                    i44 = i57 + 1 | 0;
                    i45 = i40 - 1 | 0;
                    i43 = i4;
                    i42 = _malloc(208) | 0;
                    if ((i42 | 0) == 0) {
                      i70 = i38;
                      i71 = 0;
                      break;
                    }
                    if ((HEAP32[i42 - 4 >> 2] & 3 | 0) != 0) {
                      _memset(i42 | 0, 0, 208);
                    }
                    i47 = i42;
                    i46 = i42;
                    i60 = i42 + 4 | 0;
                    HEAP32[i60 >> 2] = 2;
                    HEAP32[i42 + 8 >> 2] = 2;
                    i49 = i42 + 60 | 0;
                    HEAP32[i49 >> 2] = i8;
                    i52 = i42 + 64 | 0;
                    HEAP32[i52 >> 2] = i41;
                    HEAP32[i42 + 12 >> 2] = i4;
                    HEAP32[i43 >> 2] = 0;
                    HEAP32[i43 + 4 >> 2] = 0;
                    HEAP32[i43 + 8 >> 2] = 0;
                    HEAP32[i43 + 12 >> 2] = 0;
                    HEAP32[i43 + 16 >> 2] = 0;
                    HEAP32[i43 + 20 >> 2] = 0;
                    HEAP32[i43 + 24 >> 2] = 0;
                    HEAP32[i43 + 28 >> 2] = 0;
                    HEAP32[i43 + 32 >> 2] = 0;
                    HEAP32[i43 + 36 >> 2] = 0;
                    HEAP32[i43 + 40 >> 2] = 0;
                    HEAP32[i43 + 44 >> 2] = 0;
                    HEAP32[i43 + 48 >> 2] = 0;
                    HEAP32[i43 + 52 >> 2] = 0;
                    HEAP32[i43 + 56 >> 2] = 0;
                    HEAP32[i43 + 60 >> 2] = 0;
                    HEAP32[i43 + 64 >> 2] = 0;
                    HEAP32[i43 + 68 >> 2] = 0;
                    HEAP32[i43 + 72 >> 2] = 0;
                    HEAP32[i43 + 76 >> 2] = 0;
                    HEAP32[i43 + 80 >> 2] = 0;
                    HEAP32[i43 + 84 >> 2] = 0;
                    HEAP32[i43 + 88 >> 2] = 0;
                    HEAP32[i43 + 92 >> 2] = 0;
                    HEAP32[i43 + 96 >> 2] = 0;
                    HEAP32[i43 + 100 >> 2] = 0;
                    HEAP32[i43 + 104 >> 2] = 0;
                    HEAP32[i4 + 44 >> 2] = 8;
                    HEAP32[i4 + 48 >> 2] = 66;
                    HEAP32[i4 + 52 >> 2] = 108;
                    HEAP32[i4 + 40 >> 2] = i38;
                    HEAP32[i4 >> 2] = i8;
                    HEAP32[i4 + 4 >> 2] = i41;
                    HEAP32[i46 >> 2] = 0;
                    HEAP32[i42 + 36 >> 2] = i44;
                    HEAP32[i42 + 40 >> 2] = i45;
                    i43 = i42 + 28 | 0;
                    HEAP32[i43 >> 2] = 0;
                    HEAP32[i43 + 4 >> 2] = 0;
                    i53 = i42 + 44 | 0;
                    i54 = i53;
                    HEAP32[i53 >> 2] = 0;
                    HEAP32[i53 + 4 >> 2] = 0;
                    HEAP32[i53 + 8 >> 2] = 0;
                    HEAP32[i53 + 12 >> 2] = 0;
                    do {
                      if ((i45 | 0) != 0) {
                        i53 = HEAPU8[i44] | 0;
                        i50 = 0;
                        HEAP32[i43 >> 2] = i53;
                        HEAP32[i43 + 4 >> 2] = i50;
                        HEAP32[i54 >> 2] = 1;
                        if (i45 >>> 0 <= 1) {
                          break;
                        }
                        i51 = HEAPU8[i57 + 2 | 0] | 0;
                        i58 = i51 << 8 | 0 >>> 24 | i53;
                        i53 = 0 << 8 | i51 >>> 24 | i50;
                        i50 = i43 | 0;
                        HEAP32[i50 >> 2] = i58;
                        i51 = i43 + 4 | 0;
                        HEAP32[i51 >> 2] = i53;
                        HEAP32[i54 >> 2] = 2;
                        if (i45 >>> 0 <= 2) {
                          break;
                        }
                        i55 = HEAPU8[i57 + 3 | 0] | 0;
                        i63 = i55 << 16 | 0 >>> 16 | i58;
                        i58 = 0 << 16 | i55 >>> 16 | i53;
                        i50 = i43 | 0;
                        HEAP32[i50 >> 2] = i63;
                        i51 = i43 + 4 | 0;
                        HEAP32[i51 >> 2] = i58;
                        HEAP32[i54 >> 2] = 3;
                        if (i45 >>> 0 <= 3) {
                          break;
                        }
                        i53 = HEAPU8[i57 + 4 | 0] | 0;
                        i55 = i53 << 24 | 0 >>> 8 | i63;
                        i63 = 0 << 24 | i53 >>> 8 | i58;
                        i50 = i43 | 0;
                        HEAP32[i50 >> 2] = i55;
                        i51 = i43 + 4 | 0;
                        HEAP32[i51 >> 2] = i63;
                        HEAP32[i54 >> 2] = 4;
                        if (i45 >>> 0 <= 4) {
                          break;
                        }
                        i58 = 0 | i55;
                        i55 = HEAPU8[i57 + 5 | 0] | 0 | i63;
                        i50 = i43 | 0;
                        HEAP32[i50 >> 2] = i58;
                        i51 = i43 + 4 | 0;
                        HEAP32[i51 >> 2] = i55;
                        HEAP32[i54 >> 2] = 5;
                        if (i45 >>> 0 <= 5) {
                          break;
                        }
                        i63 = 0 << 8 | 0 >>> 24 | i58;
                        i58 = (HEAPU8[i57 + 6 | 0] | 0) << 8 | 0 >>> 24 | i55;
                        i50 = i43 | 0;
                        HEAP32[i50 >> 2] = i63;
                        i51 = i43 + 4 | 0;
                        HEAP32[i51 >> 2] = i58;
                        HEAP32[i54 >> 2] = 6;
                        if (i45 >>> 0 <= 6) {
                          break;
                        }
                        i55 = 0 << 16 | 0 >>> 16 | i63;
                        i63 = (HEAPU8[i57 + 7 | 0] | 0) << 16 | 0 >>> 16 | i58;
                        i50 = i43 | 0;
                        HEAP32[i50 >> 2] = i55;
                        i51 = i43 + 4 | 0;
                        HEAP32[i51 >> 2] = i63;
                        HEAP32[i54 >> 2] = 7;
                        if (i45 >>> 0 <= 7) {
                          break;
                        }
                        i58 = (HEAPU8[i57 + 8 | 0] | 0) << 24 | 0 >>> 8 | i63;
                        i50 = i43 | 0;
                        HEAP32[i50 >> 2] = 0 << 24 | 0 >>> 8 | i55;
                        i51 = i43 + 4 | 0;
                        HEAP32[i51 >> 2] = i58;
                        HEAP32[i54 >> 2] = 8;
                      }
                    } while (0);
                    HEAP32[i60 >> 2] = 1;
                    L1844 : do {
                      if ((_DecodeImageStream(i8, i41, 1, i47, 0) | 0) == 0) {
                        i72 = 0;
                      } else {
                        i54 = HEAP32[i49 >> 2] | 0;
                        i43 = i54;
                        i45 = (i54 | 0) < 0 ? -1 : 0;
                        i54 = HEAP32[i52 >> 2] | 0;
                        i44 = i54;
                        i58 = (i54 | 0) < 0 ? -1 : 0;
                        i54 = ~~((+(i44 >>> 0) + +(i58 | 0) * 4294967296.0) * (+(i43 >>> 0) + +(i45 | 0) * 4294967296.0)) >>> 0;
                        i51 = Math_min(Math_floor((+(i44 >>> 0) + +(i58 | 0) * 4294967296.0) * (+(i43 >>> 0) + +(i45 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
                        i45 = i14 & 65535;
                        i43 = 0;
                        i58 = 17;
                        i44 = 0;
                        i55 = ~~((+(i45 >>> 0) + +(i43 | 0) * 4294967296.0) * (+(i58 >>> 0) + +(i44 | 0) * 4294967296.0)) >>> 0;
                        i50 = Math_min(Math_floor((+(i45 >>> 0) + +(i43 | 0) * 4294967296.0) * (+(i58 >>> 0) + +(i44 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
                        i44 = ~~(+(i54 >>> 0) + +(i51 | 0) * 4294967296.0 + (+(i55 >>> 0) + +(i50 | 0) * 4294967296.0)) >>> 0;
                        i58 = Math_min(Math_floor((+(i54 >>> 0) + +(i51 | 0) * 4294967296.0 + (+(i55 >>> 0) + +(i50 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
                        i50 = i44 << 2 | 0 >>> 30;
                        i55 = i58 << 2 | i44 >>> 30;
                        do {
                          if ((i44 | 0) == 0 & (i58 | 0) == 0) {
                            i69 = 1299;
                          } else {
                            i51 = 0;
                            i43 = 256;
                            i45 = ~~Math_floor((+(i51 >>> 0) + +(i43 >>> 0) * 4294967296.0) / (+(i44 >>> 0) + +(i58 >>> 0) * 4294967296.0)) >>> 0;
                            i63 = Math_min(Math_floor(Math_floor((+(i51 >>> 0) + +(i43 >>> 0) * 4294967296.0) / (+(i44 >>> 0) + +(i58 >>> 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
                            i43 = 0;
                            if (!(i63 >>> 0 < i43 >>> 0 | i63 >>> 0 == i43 >>> 0 & i45 >>> 0 < 4 >>> 0)) {
                              if ((i50 | 0) == (i50 & -4 | 0) & (i55 | 0) == (i55 & 0 | 0)) {
                                i69 = 1299;
                                break;
                              }
                            }
                            HEAP32[i42 + 20 >> 2] = 0;
                            break;
                          }
                        } while (0);
                        do {
                          if ((i69 | 0) == 1299) {
                            i55 = _malloc(i50) | 0;
                            i58 = i55;
                            HEAP32[i42 + 20 >> 2] = i58;
                            if ((i55 | 0) == 0) {
                              break;
                            }
                            HEAP32[i42 + 24 >> 2] = i58 + (i54 + i8 << 2) | 0;
                            HEAP32[i60 >> 2] = 0;
                            i72 = _DecodeImageData(i47, i58, HEAP32[i49 >> 2] | 0, HEAP32[i52 >> 2] | 0, 122) | 0;
                            break L1844;
                          }
                        } while (0);
                        HEAP32[i42 + 24 >> 2] = 0;
                        HEAP32[i46 >> 2] = 1;
                        i72 = 0;
                      }
                    } while (0);
                    _VP8LClear(i47);
                    _free(i42);
                    i70 = i38;
                    i71 = i72;
                  }
                } while (0);
                L1857 : do {
                  if ((i71 | 0) == 0) {
                    i73 = 0;
                  } else {
                    i40 = HEAP32[5276504 + (i36 << 2) >> 2] | 0;
                    L1859 : do {
                      if ((i36 | 0) == 0) {
                        if (i29 << 16 >> 16 == 0) {
                          break;
                        } else {
                          i74 = i39;
                          i75 = i70;
                          i76 = i41;
                        }
                        while (1) {
                          i46 = i76 - 1 | 0;
                          _memcpy(i74, i75, i8);
                          if ((i46 | 0) > 0) {
                            i74 = i74 + i8 | 0;
                            i75 = i75 + i8 | 0;
                            i76 = i46;
                          } else {
                            break L1859;
                          }
                        }
                      } else {
                        i46 = _malloc(i35) | 0;
                        if ((i46 | 0) == 0) {
                          i73 = 0;
                          break L1857;
                        }
                        FUNCTION_TABLE_viiiiii[i40 & 511](i70, i8, i41, 1, i8, i46);
                        L1862 : do {
                          if (i29 << 16 >> 16 != 0) {
                            i52 = i39;
                            i49 = i46;
                            i60 = i41;
                            while (1) {
                              i54 = i60 - 1 | 0;
                              _memcpy(i52, i49, i8);
                              if ((i54 | 0) > 0) {
                                i52 = i52 + i8 | 0;
                                i49 = i49 + i8 | 0;
                                i60 = i54;
                              } else {
                                break L1862;
                              }
                            }
                          }
                        } while (0);
                        _free(i46);
                      }
                    } while (0);
                    if ((i48 | 0) != 1) {
                      i73 = i71;
                      break;
                    }
                    i73 = ((i70 | 0) == 0 | i14 << 16 >> 16 == 0 | i29 << 16 >> 16 == 0) & 1 ^ 1;
                  }
                } while (0);
                if (!i37) {
                  _free(i70);
                }
                if ((i73 | 0) == 0) {
                  i69 = 1323;
                  break;
                } else {
                  i77 = i34;
                }
              } else {
                i77 = i1 + 1812 | 0;
              }
              i29 = HEAP32[i77 >> 2] | 0;
              i48 = i29 + Math_imul(i8, i68) | 0;
              HEAP32[i56 >> 2] = i48;
              if ((i48 | 0) == 0) {
                break;
              } else {
                i78 = i48;
                break L1816;
              }
            }
          } while (0);
          if ((i69 | 0) == 1323) {
            HEAP32[i56 >> 2] = 0;
          }
          i8 = i1 | 0;
          if ((HEAP32[i8 >> 2] | 0) != 0) {
            i79 = 0;
            STACKTOP = i3;
            return i79 | 0;
          }
          HEAP32[i8 >> 2] = 3;
          HEAP32[i1 + 8 >> 2] = 5268216;
          HEAP32[i1 + 4 >> 2] = 0;
          i79 = 0;
          STACKTOP = i3;
          return i79 | 0;
        } else {
          i78 = 0;
        }
      } while (0);
      i57 = HEAP32[i2 + 84 >> 2] | 0;
      do {
        if ((i68 | 0) < (i57 | 0)) {
          i8 = i57 - i68 | 0;
          i14 = Math_imul(HEAP32[i7 >> 2] | 0, i8);
          i48 = i2 + 20 | 0;
          HEAP32[i48 >> 2] = (HEAP32[i48 >> 2] | 0) + i14 | 0;
          i14 = i8 >> 1;
          i48 = Math_imul(HEAP32[i10 >> 2] | 0, i14);
          i29 = i2 + 24 | 0;
          HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + i48 | 0;
          i48 = Math_imul(HEAP32[i10 >> 2] | 0, i14);
          i14 = i2 + 28 | 0;
          HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + i48 | 0;
          if ((i78 | 0) == 0) {
            i80 = i57;
            i81 = 0;
            break;
          }
          i48 = i78 + Math_imul(HEAP32[i2 >> 2] | 0, i8) | 0;
          HEAP32[i56 >> 2] = i48;
          i80 = i57;
          i81 = i48;
        } else {
          i80 = i68;
          i81 = i78;
        }
      } while (0);
      if ((i80 | 0) >= (i5 | 0)) {
        i67 = 1;
        break;
      }
      i48 = HEAP32[i2 + 76 >> 2] | 0;
      i8 = i2 + 20 | 0;
      HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + i48 | 0;
      i8 = i48 >> 1;
      i14 = i2 + 24 | 0;
      HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + i8 | 0;
      i14 = i2 + 28 | 0;
      HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + i8 | 0;
      if ((i81 | 0) != 0) {
        HEAP32[i56 >> 2] = i81 + i48 | 0;
      }
      HEAP32[i2 + 8 >> 2] = i80 - i57 | 0;
      HEAP32[i2 + 12 >> 2] = (HEAP32[i2 + 80 >> 2] | 0) - i48 | 0;
      HEAP32[i2 + 16 >> 2] = i5 - i80 | 0;
      i67 = FUNCTION_TABLE_ii[HEAP32[i59 >> 2] & 511](i2) | 0;
    }
  } while (0);
  if (((HEAP32[i13 >> 2] | 0) + 1 | 0) != (HEAP32[i1 + 148 >> 2] | 0) | i31) {
    i79 = i67;
    STACKTOP = i3;
    return i79 | 0;
  }
  _memcpy((HEAP32[i11 >> 2] | 0) + i18 | 0, i17 + ((HEAP32[i7 >> 2] << 4) + i19 | 0) | 0, i9);
  _memcpy((HEAP32[i21 >> 2] | 0) + i23 | 0, i22 + ((HEAP32[i10 >> 2] << 3) + i24 | 0) | 0, i12);
  _memcpy((HEAP32[i26 >> 2] | 0) + i23 | 0, i27 + ((HEAP32[i10 >> 2] << 3) + i24 | 0) | 0, i12);
  i79 = i67;
  STACKTOP = i3;
  return i79 | 0;
}
function _SampleRgbLinePair(i1, i2, i3, i4, i5, i6, i7) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  i7 = i7 | 0;
  var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
  i8 = i7 - 1 | 0;
  L1898 : do {
    if ((i8 | 0) > 0) {
      i7 = i2;
      i9 = i3;
      i10 = i4;
      i11 = i5;
      i12 = i6;
      i13 = i1;
      i14 = 0;
      while (1) {
        i15 = HEAPU8[i10] | 0;
        i16 = HEAPU8[i9] | 0;
        i17 = (HEAP32[5278108 + (i16 << 2) >> 2] | 0) + (HEAP32[5277084 + (i15 << 2) >> 2] | 0) >> 16;
        i18 = HEAP16[5279132 + (i16 << 1) >> 1] << 16 >> 16;
        i16 = (HEAPU8[i13] | 0) + 227 | 0;
        HEAP8[i11] = HEAP8[5280356 + ((HEAP16[5276572 + (i15 << 1) >> 1] << 16 >> 16) + i16 | 0) | 0] | 0;
        HEAP8[i11 + 1 | 0] = HEAP8[5280356 + (i17 + i16 | 0) | 0] | 0;
        HEAP8[i11 + 2 | 0] = HEAP8[5280356 + (i18 + i16 | 0) | 0] | 0;
        i16 = HEAPU8[i10] | 0;
        i18 = HEAPU8[i9] | 0;
        i17 = (HEAP32[5278108 + (i18 << 2) >> 2] | 0) + (HEAP32[5277084 + (i16 << 2) >> 2] | 0) >> 16;
        i15 = HEAP16[5279132 + (i18 << 1) >> 1] << 16 >> 16;
        i18 = (HEAPU8[i13 + 1 | 0] | 0) + 227 | 0;
        HEAP8[i11 + 3 | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i16 << 1) >> 1] << 16 >> 16) + i18 | 0) | 0] | 0;
        HEAP8[i11 + 4 | 0] = HEAP8[5280356 + (i17 + i18 | 0) | 0] | 0;
        HEAP8[i11 + 5 | 0] = HEAP8[5280356 + (i15 + i18 | 0) | 0] | 0;
        i18 = HEAPU8[i10] | 0;
        i15 = HEAPU8[i9] | 0;
        i17 = (HEAP32[5278108 + (i15 << 2) >> 2] | 0) + (HEAP32[5277084 + (i18 << 2) >> 2] | 0) >> 16;
        i16 = HEAP16[5279132 + (i15 << 1) >> 1] << 16 >> 16;
        i15 = (HEAPU8[i7] | 0) + 227 | 0;
        HEAP8[i12] = HEAP8[5280356 + ((HEAP16[5276572 + (i18 << 1) >> 1] << 16 >> 16) + i15 | 0) | 0] | 0;
        HEAP8[i12 + 1 | 0] = HEAP8[5280356 + (i17 + i15 | 0) | 0] | 0;
        HEAP8[i12 + 2 | 0] = HEAP8[5280356 + (i16 + i15 | 0) | 0] | 0;
        i15 = HEAPU8[i10] | 0;
        i16 = HEAPU8[i9] | 0;
        i17 = (HEAP32[5278108 + (i16 << 2) >> 2] | 0) + (HEAP32[5277084 + (i15 << 2) >> 2] | 0) >> 16;
        i18 = HEAP16[5279132 + (i16 << 1) >> 1] << 16 >> 16;
        i16 = (HEAPU8[i7 + 1 | 0] | 0) + 227 | 0;
        HEAP8[i12 + 3 | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i15 << 1) >> 1] << 16 >> 16) + i16 | 0) | 0] | 0;
        HEAP8[i12 + 4 | 0] = HEAP8[5280356 + (i17 + i16 | 0) | 0] | 0;
        HEAP8[i12 + 5 | 0] = HEAP8[5280356 + (i18 + i16 | 0) | 0] | 0;
        i16 = i13 + 2 | 0;
        i18 = i7 + 2 | 0;
        i17 = i9 + 1 | 0;
        i15 = i10 + 1 | 0;
        i19 = i11 + 6 | 0;
        i20 = i12 + 6 | 0;
        i21 = i14 + 2 | 0;
        if ((i21 | 0) < (i8 | 0)) {
          i7 = i18;
          i9 = i17;
          i10 = i15;
          i11 = i19;
          i12 = i20;
          i13 = i16;
          i14 = i21;
        } else {
          i22 = i18;
          i23 = i17;
          i24 = i15;
          i25 = i19;
          i26 = i20;
          i27 = i16;
          i28 = i21;
          break L1898;
        }
      }
    } else {
      i22 = i2;
      i23 = i3;
      i24 = i4;
      i25 = i5;
      i26 = i6;
      i27 = i1;
      i28 = 0;
    }
  } while (0);
  if ((i28 | 0) != (i8 | 0)) {
    return;
  }
  i8 = HEAPU8[i24] | 0;
  i28 = HEAPU8[i23] | 0;
  i1 = (HEAP32[5278108 + (i28 << 2) >> 2] | 0) + (HEAP32[5277084 + (i8 << 2) >> 2] | 0) >> 16;
  i6 = HEAP16[5279132 + (i28 << 1) >> 1] << 16 >> 16;
  i28 = (HEAPU8[i27] | 0) + 227 | 0;
  HEAP8[i25] = HEAP8[5280356 + ((HEAP16[5276572 + (i8 << 1) >> 1] << 16 >> 16) + i28 | 0) | 0] | 0;
  HEAP8[i25 + 1 | 0] = HEAP8[5280356 + (i1 + i28 | 0) | 0] | 0;
  HEAP8[i25 + 2 | 0] = HEAP8[5280356 + (i6 + i28 | 0) | 0] | 0;
  i28 = HEAPU8[i24] | 0;
  i24 = HEAPU8[i23] | 0;
  i23 = (HEAP32[5278108 + (i24 << 2) >> 2] | 0) + (HEAP32[5277084 + (i28 << 2) >> 2] | 0) >> 16;
  i6 = HEAP16[5279132 + (i24 << 1) >> 1] << 16 >> 16;
  i24 = (HEAPU8[i22] | 0) + 227 | 0;
  HEAP8[i26] = HEAP8[5280356 + ((HEAP16[5276572 + (i28 << 1) >> 1] << 16 >> 16) + i24 | 0) | 0] | 0;
  HEAP8[i26 + 1 | 0] = HEAP8[5280356 + (i23 + i24 | 0) | 0] | 0;
  HEAP8[i26 + 2 | 0] = HEAP8[5280356 + (i6 + i24 | 0) | 0] | 0;
  return;
}
function _SampleRgbaLinePair(i1, i2, i3, i4, i5, i6, i7) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  i7 = i7 | 0;
  var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
  i8 = i7 - 1 | 0;
  L1907 : do {
    if ((i8 | 0) > 0) {
      i7 = i2;
      i9 = i3;
      i10 = i4;
      i11 = i5;
      i12 = i6;
      i13 = i1;
      i14 = 0;
      while (1) {
        i15 = HEAPU8[i10] | 0;
        i16 = HEAPU8[i9] | 0;
        i17 = (HEAP32[5278108 + (i16 << 2) >> 2] | 0) + (HEAP32[5277084 + (i15 << 2) >> 2] | 0) >> 16;
        i18 = HEAP16[5279132 + (i16 << 1) >> 1] << 16 >> 16;
        i16 = (HEAPU8[i13] | 0) + 227 | 0;
        HEAP8[i11] = HEAP8[5280356 + ((HEAP16[5276572 + (i15 << 1) >> 1] << 16 >> 16) + i16 | 0) | 0] | 0;
        HEAP8[i11 + 1 | 0] = HEAP8[5280356 + (i17 + i16 | 0) | 0] | 0;
        HEAP8[i11 + 2 | 0] = HEAP8[5280356 + (i18 + i16 | 0) | 0] | 0;
        HEAP8[i11 + 3 | 0] = -1;
        i16 = HEAPU8[i10] | 0;
        i18 = HEAPU8[i9] | 0;
        i17 = (HEAP32[5278108 + (i18 << 2) >> 2] | 0) + (HEAP32[5277084 + (i16 << 2) >> 2] | 0) >> 16;
        i15 = HEAP16[5279132 + (i18 << 1) >> 1] << 16 >> 16;
        i18 = (HEAPU8[i13 + 1 | 0] | 0) + 227 | 0;
        HEAP8[i11 + 4 | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i16 << 1) >> 1] << 16 >> 16) + i18 | 0) | 0] | 0;
        HEAP8[i11 + 5 | 0] = HEAP8[5280356 + (i17 + i18 | 0) | 0] | 0;
        HEAP8[i11 + 6 | 0] = HEAP8[5280356 + (i15 + i18 | 0) | 0] | 0;
        HEAP8[i11 + 7 | 0] = -1;
        i18 = HEAPU8[i10] | 0;
        i15 = HEAPU8[i9] | 0;
        i17 = (HEAP32[5278108 + (i15 << 2) >> 2] | 0) + (HEAP32[5277084 + (i18 << 2) >> 2] | 0) >> 16;
        i16 = HEAP16[5279132 + (i15 << 1) >> 1] << 16 >> 16;
        i15 = (HEAPU8[i7] | 0) + 227 | 0;
        HEAP8[i12] = HEAP8[5280356 + ((HEAP16[5276572 + (i18 << 1) >> 1] << 16 >> 16) + i15 | 0) | 0] | 0;
        HEAP8[i12 + 1 | 0] = HEAP8[5280356 + (i17 + i15 | 0) | 0] | 0;
        HEAP8[i12 + 2 | 0] = HEAP8[5280356 + (i16 + i15 | 0) | 0] | 0;
        HEAP8[i12 + 3 | 0] = -1;
        i15 = HEAPU8[i10] | 0;
        i16 = HEAPU8[i9] | 0;
        i17 = (HEAP32[5278108 + (i16 << 2) >> 2] | 0) + (HEAP32[5277084 + (i15 << 2) >> 2] | 0) >> 16;
        i18 = HEAP16[5279132 + (i16 << 1) >> 1] << 16 >> 16;
        i16 = (HEAPU8[i7 + 1 | 0] | 0) + 227 | 0;
        HEAP8[i12 + 4 | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i15 << 1) >> 1] << 16 >> 16) + i16 | 0) | 0] | 0;
        HEAP8[i12 + 5 | 0] = HEAP8[5280356 + (i17 + i16 | 0) | 0] | 0;
        HEAP8[i12 + 6 | 0] = HEAP8[5280356 + (i18 + i16 | 0) | 0] | 0;
        HEAP8[i12 + 7 | 0] = -1;
        i16 = i13 + 2 | 0;
        i18 = i7 + 2 | 0;
        i17 = i9 + 1 | 0;
        i15 = i10 + 1 | 0;
        i19 = i11 + 8 | 0;
        i20 = i12 + 8 | 0;
        i21 = i14 + 2 | 0;
        if ((i21 | 0) < (i8 | 0)) {
          i7 = i18;
          i9 = i17;
          i10 = i15;
          i11 = i19;
          i12 = i20;
          i13 = i16;
          i14 = i21;
        } else {
          i22 = i18;
          i23 = i17;
          i24 = i15;
          i25 = i19;
          i26 = i20;
          i27 = i16;
          i28 = i21;
          break L1907;
        }
      }
    } else {
      i22 = i2;
      i23 = i3;
      i24 = i4;
      i25 = i5;
      i26 = i6;
      i27 = i1;
      i28 = 0;
    }
  } while (0);
  if ((i28 | 0) != (i8 | 0)) {
    return;
  }
  i8 = HEAPU8[i24] | 0;
  i28 = HEAPU8[i23] | 0;
  i1 = (HEAP32[5278108 + (i28 << 2) >> 2] | 0) + (HEAP32[5277084 + (i8 << 2) >> 2] | 0) >> 16;
  i6 = HEAP16[5279132 + (i28 << 1) >> 1] << 16 >> 16;
  i28 = (HEAPU8[i27] | 0) + 227 | 0;
  HEAP8[i25] = HEAP8[5280356 + ((HEAP16[5276572 + (i8 << 1) >> 1] << 16 >> 16) + i28 | 0) | 0] | 0;
  HEAP8[i25 + 1 | 0] = HEAP8[5280356 + (i1 + i28 | 0) | 0] | 0;
  HEAP8[i25 + 2 | 0] = HEAP8[5280356 + (i6 + i28 | 0) | 0] | 0;
  HEAP8[i25 + 3 | 0] = -1;
  i25 = HEAPU8[i24] | 0;
  i24 = HEAPU8[i23] | 0;
  i23 = (HEAP32[5278108 + (i24 << 2) >> 2] | 0) + (HEAP32[5277084 + (i25 << 2) >> 2] | 0) >> 16;
  i28 = HEAP16[5279132 + (i24 << 1) >> 1] << 16 >> 16;
  i24 = (HEAPU8[i22] | 0) + 227 | 0;
  HEAP8[i26] = HEAP8[5280356 + ((HEAP16[5276572 + (i25 << 1) >> 1] << 16 >> 16) + i24 | 0) | 0] | 0;
  HEAP8[i26 + 1 | 0] = HEAP8[5280356 + (i23 + i24 | 0) | 0] | 0;
  HEAP8[i26 + 2 | 0] = HEAP8[5280356 + (i28 + i24 | 0) | 0] | 0;
  HEAP8[i26 + 3 | 0] = -1;
  return;
}
function _SampleBgrLinePair(i1, i2, i3, i4, i5, i6, i7) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  i7 = i7 | 0;
  var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
  i8 = i7 - 1 | 0;
  L1916 : do {
    if ((i8 | 0) > 0) {
      i7 = i2;
      i9 = i3;
      i10 = i4;
      i11 = i5;
      i12 = i6;
      i13 = i1;
      i14 = 0;
      while (1) {
        i15 = HEAPU8[i10] | 0;
        i16 = HEAP16[5276572 + (i15 << 1) >> 1] << 16 >> 16;
        i17 = HEAPU8[i9] | 0;
        i18 = (HEAP32[5278108 + (i17 << 2) >> 2] | 0) + (HEAP32[5277084 + (i15 << 2) >> 2] | 0) >> 16;
        i15 = (HEAPU8[i13] | 0) + 227 | 0;
        HEAP8[i11] = HEAP8[5280356 + ((HEAP16[5279132 + (i17 << 1) >> 1] << 16 >> 16) + i15 | 0) | 0] | 0;
        HEAP8[i11 + 1 | 0] = HEAP8[5280356 + (i18 + i15 | 0) | 0] | 0;
        HEAP8[i11 + 2 | 0] = HEAP8[5280356 + (i16 + i15 | 0) | 0] | 0;
        i15 = HEAPU8[i10] | 0;
        i16 = HEAP16[5276572 + (i15 << 1) >> 1] << 16 >> 16;
        i18 = HEAPU8[i9] | 0;
        i17 = (HEAP32[5278108 + (i18 << 2) >> 2] | 0) + (HEAP32[5277084 + (i15 << 2) >> 2] | 0) >> 16;
        i15 = (HEAPU8[i13 + 1 | 0] | 0) + 227 | 0;
        HEAP8[i11 + 3 | 0] = HEAP8[5280356 + ((HEAP16[5279132 + (i18 << 1) >> 1] << 16 >> 16) + i15 | 0) | 0] | 0;
        HEAP8[i11 + 4 | 0] = HEAP8[5280356 + (i17 + i15 | 0) | 0] | 0;
        HEAP8[i11 + 5 | 0] = HEAP8[5280356 + (i16 + i15 | 0) | 0] | 0;
        i15 = HEAPU8[i10] | 0;
        i16 = HEAP16[5276572 + (i15 << 1) >> 1] << 16 >> 16;
        i17 = HEAPU8[i9] | 0;
        i18 = (HEAP32[5278108 + (i17 << 2) >> 2] | 0) + (HEAP32[5277084 + (i15 << 2) >> 2] | 0) >> 16;
        i15 = (HEAPU8[i7] | 0) + 227 | 0;
        HEAP8[i12] = HEAP8[5280356 + ((HEAP16[5279132 + (i17 << 1) >> 1] << 16 >> 16) + i15 | 0) | 0] | 0;
        HEAP8[i12 + 1 | 0] = HEAP8[5280356 + (i18 + i15 | 0) | 0] | 0;
        HEAP8[i12 + 2 | 0] = HEAP8[5280356 + (i16 + i15 | 0) | 0] | 0;
        i15 = HEAPU8[i10] | 0;
        i16 = HEAP16[5276572 + (i15 << 1) >> 1] << 16 >> 16;
        i18 = HEAPU8[i9] | 0;
        i17 = (HEAP32[5278108 + (i18 << 2) >> 2] | 0) + (HEAP32[5277084 + (i15 << 2) >> 2] | 0) >> 16;
        i15 = (HEAPU8[i7 + 1 | 0] | 0) + 227 | 0;
        HEAP8[i12 + 3 | 0] = HEAP8[5280356 + ((HEAP16[5279132 + (i18 << 1) >> 1] << 16 >> 16) + i15 | 0) | 0] | 0;
        HEAP8[i12 + 4 | 0] = HEAP8[5280356 + (i17 + i15 | 0) | 0] | 0;
        HEAP8[i12 + 5 | 0] = HEAP8[5280356 + (i16 + i15 | 0) | 0] | 0;
        i15 = i13 + 2 | 0;
        i16 = i7 + 2 | 0;
        i17 = i9 + 1 | 0;
        i18 = i10 + 1 | 0;
        i19 = i11 + 6 | 0;
        i20 = i12 + 6 | 0;
        i21 = i14 + 2 | 0;
        if ((i21 | 0) < (i8 | 0)) {
          i7 = i16;
          i9 = i17;
          i10 = i18;
          i11 = i19;
          i12 = i20;
          i13 = i15;
          i14 = i21;
        } else {
          i22 = i16;
          i23 = i17;
          i24 = i18;
          i25 = i19;
          i26 = i20;
          i27 = i15;
          i28 = i21;
          break L1916;
        }
      }
    } else {
      i22 = i2;
      i23 = i3;
      i24 = i4;
      i25 = i5;
      i26 = i6;
      i27 = i1;
      i28 = 0;
    }
  } while (0);
  if ((i28 | 0) != (i8 | 0)) {
    return;
  }
  i8 = HEAPU8[i24] | 0;
  i28 = HEAP16[5276572 + (i8 << 1) >> 1] << 16 >> 16;
  i1 = HEAPU8[i23] | 0;
  i6 = (HEAP32[5278108 + (i1 << 2) >> 2] | 0) + (HEAP32[5277084 + (i8 << 2) >> 2] | 0) >> 16;
  i8 = (HEAPU8[i27] | 0) + 227 | 0;
  HEAP8[i25] = HEAP8[5280356 + ((HEAP16[5279132 + (i1 << 1) >> 1] << 16 >> 16) + i8 | 0) | 0] | 0;
  HEAP8[i25 + 1 | 0] = HEAP8[5280356 + (i6 + i8 | 0) | 0] | 0;
  HEAP8[i25 + 2 | 0] = HEAP8[5280356 + (i28 + i8 | 0) | 0] | 0;
  i8 = HEAPU8[i24] | 0;
  i24 = HEAP16[5276572 + (i8 << 1) >> 1] << 16 >> 16;
  i28 = HEAPU8[i23] | 0;
  i23 = (HEAP32[5278108 + (i28 << 2) >> 2] | 0) + (HEAP32[5277084 + (i8 << 2) >> 2] | 0) >> 16;
  i8 = (HEAPU8[i22] | 0) + 227 | 0;
  HEAP8[i26] = HEAP8[5280356 + ((HEAP16[5279132 + (i28 << 1) >> 1] << 16 >> 16) + i8 | 0) | 0] | 0;
  HEAP8[i26 + 1 | 0] = HEAP8[5280356 + (i23 + i8 | 0) | 0] | 0;
  HEAP8[i26 + 2 | 0] = HEAP8[5280356 + (i24 + i8 | 0) | 0] | 0;
  return;
}
function _SampleBgraLinePair(i1, i2, i3, i4, i5, i6, i7) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  i7 = i7 | 0;
  var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
  i8 = i7 - 1 | 0;
  L1925 : do {
    if ((i8 | 0) > 0) {
      i7 = i2;
      i9 = i3;
      i10 = i4;
      i11 = i5;
      i12 = i6;
      i13 = i1;
      i14 = 0;
      while (1) {
        i15 = HEAPU8[i10] | 0;
        i16 = HEAP16[5276572 + (i15 << 1) >> 1] << 16 >> 16;
        i17 = HEAPU8[i9] | 0;
        i18 = (HEAP32[5278108 + (i17 << 2) >> 2] | 0) + (HEAP32[5277084 + (i15 << 2) >> 2] | 0) >> 16;
        i15 = (HEAPU8[i13] | 0) + 227 | 0;
        HEAP8[i11] = HEAP8[5280356 + ((HEAP16[5279132 + (i17 << 1) >> 1] << 16 >> 16) + i15 | 0) | 0] | 0;
        HEAP8[i11 + 1 | 0] = HEAP8[5280356 + (i18 + i15 | 0) | 0] | 0;
        HEAP8[i11 + 2 | 0] = HEAP8[5280356 + (i16 + i15 | 0) | 0] | 0;
        HEAP8[i11 + 3 | 0] = -1;
        i15 = HEAPU8[i10] | 0;
        i16 = HEAP16[5276572 + (i15 << 1) >> 1] << 16 >> 16;
        i18 = HEAPU8[i9] | 0;
        i17 = (HEAP32[5278108 + (i18 << 2) >> 2] | 0) + (HEAP32[5277084 + (i15 << 2) >> 2] | 0) >> 16;
        i15 = (HEAPU8[i13 + 1 | 0] | 0) + 227 | 0;
        HEAP8[i11 + 4 | 0] = HEAP8[5280356 + ((HEAP16[5279132 + (i18 << 1) >> 1] << 16 >> 16) + i15 | 0) | 0] | 0;
        HEAP8[i11 + 5 | 0] = HEAP8[5280356 + (i17 + i15 | 0) | 0] | 0;
        HEAP8[i11 + 6 | 0] = HEAP8[5280356 + (i16 + i15 | 0) | 0] | 0;
        HEAP8[i11 + 7 | 0] = -1;
        i15 = HEAPU8[i10] | 0;
        i16 = HEAP16[5276572 + (i15 << 1) >> 1] << 16 >> 16;
        i17 = HEAPU8[i9] | 0;
        i18 = (HEAP32[5278108 + (i17 << 2) >> 2] | 0) + (HEAP32[5277084 + (i15 << 2) >> 2] | 0) >> 16;
        i15 = (HEAPU8[i7] | 0) + 227 | 0;
        HEAP8[i12] = HEAP8[5280356 + ((HEAP16[5279132 + (i17 << 1) >> 1] << 16 >> 16) + i15 | 0) | 0] | 0;
        HEAP8[i12 + 1 | 0] = HEAP8[5280356 + (i18 + i15 | 0) | 0] | 0;
        HEAP8[i12 + 2 | 0] = HEAP8[5280356 + (i16 + i15 | 0) | 0] | 0;
        HEAP8[i12 + 3 | 0] = -1;
        i15 = HEAPU8[i10] | 0;
        i16 = HEAP16[5276572 + (i15 << 1) >> 1] << 16 >> 16;
        i18 = HEAPU8[i9] | 0;
        i17 = (HEAP32[5278108 + (i18 << 2) >> 2] | 0) + (HEAP32[5277084 + (i15 << 2) >> 2] | 0) >> 16;
        i15 = (HEAPU8[i7 + 1 | 0] | 0) + 227 | 0;
        HEAP8[i12 + 4 | 0] = HEAP8[5280356 + ((HEAP16[5279132 + (i18 << 1) >> 1] << 16 >> 16) + i15 | 0) | 0] | 0;
        HEAP8[i12 + 5 | 0] = HEAP8[5280356 + (i17 + i15 | 0) | 0] | 0;
        HEAP8[i12 + 6 | 0] = HEAP8[5280356 + (i16 + i15 | 0) | 0] | 0;
        HEAP8[i12 + 7 | 0] = -1;
        i15 = i13 + 2 | 0;
        i16 = i7 + 2 | 0;
        i17 = i9 + 1 | 0;
        i18 = i10 + 1 | 0;
        i19 = i11 + 8 | 0;
        i20 = i12 + 8 | 0;
        i21 = i14 + 2 | 0;
        if ((i21 | 0) < (i8 | 0)) {
          i7 = i16;
          i9 = i17;
          i10 = i18;
          i11 = i19;
          i12 = i20;
          i13 = i15;
          i14 = i21;
        } else {
          i22 = i16;
          i23 = i17;
          i24 = i18;
          i25 = i19;
          i26 = i20;
          i27 = i15;
          i28 = i21;
          break L1925;
        }
      }
    } else {
      i22 = i2;
      i23 = i3;
      i24 = i4;
      i25 = i5;
      i26 = i6;
      i27 = i1;
      i28 = 0;
    }
  } while (0);
  if ((i28 | 0) != (i8 | 0)) {
    return;
  }
  i8 = HEAPU8[i24] | 0;
  i28 = HEAP16[5276572 + (i8 << 1) >> 1] << 16 >> 16;
  i1 = HEAPU8[i23] | 0;
  i6 = (HEAP32[5278108 + (i1 << 2) >> 2] | 0) + (HEAP32[5277084 + (i8 << 2) >> 2] | 0) >> 16;
  i8 = (HEAPU8[i27] | 0) + 227 | 0;
  HEAP8[i25] = HEAP8[5280356 + ((HEAP16[5279132 + (i1 << 1) >> 1] << 16 >> 16) + i8 | 0) | 0] | 0;
  HEAP8[i25 + 1 | 0] = HEAP8[5280356 + (i6 + i8 | 0) | 0] | 0;
  HEAP8[i25 + 2 | 0] = HEAP8[5280356 + (i28 + i8 | 0) | 0] | 0;
  HEAP8[i25 + 3 | 0] = -1;
  i25 = HEAPU8[i24] | 0;
  i24 = HEAP16[5276572 + (i25 << 1) >> 1] << 16 >> 16;
  i8 = HEAPU8[i23] | 0;
  i23 = (HEAP32[5278108 + (i8 << 2) >> 2] | 0) + (HEAP32[5277084 + (i25 << 2) >> 2] | 0) >> 16;
  i25 = (HEAPU8[i22] | 0) + 227 | 0;
  HEAP8[i26] = HEAP8[5280356 + ((HEAP16[5279132 + (i8 << 1) >> 1] << 16 >> 16) + i25 | 0) | 0] | 0;
  HEAP8[i26 + 1 | 0] = HEAP8[5280356 + (i23 + i25 | 0) | 0] | 0;
  HEAP8[i26 + 2 | 0] = HEAP8[5280356 + (i24 + i25 | 0) | 0] | 0;
  HEAP8[i26 + 3 | 0] = -1;
  return;
}
function _SampleArgbLinePair(i1, i2, i3, i4, i5, i6, i7) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  i7 = i7 | 0;
  var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
  i8 = i7 - 1 | 0;
  L1934 : do {
    if ((i8 | 0) > 0) {
      i7 = i2;
      i9 = i3;
      i10 = i4;
      i11 = i5;
      i12 = i6;
      i13 = i1;
      i14 = 0;
      while (1) {
        i15 = HEAP8[i13] | 0;
        i16 = HEAP8[i9] | 0;
        i17 = HEAP8[i10] | 0;
        HEAP8[i11] = -1;
        i18 = i17 & 255;
        i17 = i16 & 255;
        i16 = (HEAP32[5278108 + (i17 << 2) >> 2] | 0) + (HEAP32[5277084 + (i18 << 2) >> 2] | 0) >> 16;
        i19 = HEAP16[5279132 + (i17 << 1) >> 1] << 16 >> 16;
        i17 = (i15 & 255) + 227 | 0;
        HEAP8[i11 + 1 | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i18 << 1) >> 1] << 16 >> 16) + i17 | 0) | 0] | 0;
        HEAP8[i11 + 2 | 0] = HEAP8[5280356 + (i16 + i17 | 0) | 0] | 0;
        HEAP8[i11 + 3 | 0] = HEAP8[5280356 + (i19 + i17 | 0) | 0] | 0;
        i17 = HEAP8[i13 + 1 | 0] | 0;
        i19 = HEAP8[i9] | 0;
        i16 = HEAP8[i10] | 0;
        HEAP8[i11 + 4 | 0] = -1;
        i18 = i16 & 255;
        i16 = i19 & 255;
        i19 = (HEAP32[5278108 + (i16 << 2) >> 2] | 0) + (HEAP32[5277084 + (i18 << 2) >> 2] | 0) >> 16;
        i15 = HEAP16[5279132 + (i16 << 1) >> 1] << 16 >> 16;
        i16 = (i17 & 255) + 227 | 0;
        HEAP8[i11 + 5 | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i18 << 1) >> 1] << 16 >> 16) + i16 | 0) | 0] | 0;
        HEAP8[i11 + 6 | 0] = HEAP8[5280356 + (i19 + i16 | 0) | 0] | 0;
        HEAP8[i11 + 7 | 0] = HEAP8[5280356 + (i15 + i16 | 0) | 0] | 0;
        i16 = HEAP8[i7] | 0;
        i15 = HEAP8[i9] | 0;
        i19 = HEAP8[i10] | 0;
        HEAP8[i12] = -1;
        i18 = i19 & 255;
        i19 = i15 & 255;
        i15 = (HEAP32[5278108 + (i19 << 2) >> 2] | 0) + (HEAP32[5277084 + (i18 << 2) >> 2] | 0) >> 16;
        i17 = HEAP16[5279132 + (i19 << 1) >> 1] << 16 >> 16;
        i19 = (i16 & 255) + 227 | 0;
        HEAP8[i12 + 1 | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i18 << 1) >> 1] << 16 >> 16) + i19 | 0) | 0] | 0;
        HEAP8[i12 + 2 | 0] = HEAP8[5280356 + (i15 + i19 | 0) | 0] | 0;
        HEAP8[i12 + 3 | 0] = HEAP8[5280356 + (i17 + i19 | 0) | 0] | 0;
        i19 = HEAP8[i7 + 1 | 0] | 0;
        i17 = HEAP8[i9] | 0;
        i15 = HEAP8[i10] | 0;
        HEAP8[i12 + 4 | 0] = -1;
        i18 = i15 & 255;
        i15 = i17 & 255;
        i17 = (HEAP32[5278108 + (i15 << 2) >> 2] | 0) + (HEAP32[5277084 + (i18 << 2) >> 2] | 0) >> 16;
        i16 = HEAP16[5279132 + (i15 << 1) >> 1] << 16 >> 16;
        i15 = (i19 & 255) + 227 | 0;
        HEAP8[i12 + 5 | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i18 << 1) >> 1] << 16 >> 16) + i15 | 0) | 0] | 0;
        HEAP8[i12 + 6 | 0] = HEAP8[5280356 + (i17 + i15 | 0) | 0] | 0;
        HEAP8[i12 + 7 | 0] = HEAP8[5280356 + (i16 + i15 | 0) | 0] | 0;
        i15 = i13 + 2 | 0;
        i16 = i7 + 2 | 0;
        i17 = i9 + 1 | 0;
        i18 = i10 + 1 | 0;
        i19 = i11 + 8 | 0;
        i20 = i12 + 8 | 0;
        i21 = i14 + 2 | 0;
        if ((i21 | 0) < (i8 | 0)) {
          i7 = i16;
          i9 = i17;
          i10 = i18;
          i11 = i19;
          i12 = i20;
          i13 = i15;
          i14 = i21;
        } else {
          i22 = i16;
          i23 = i17;
          i24 = i18;
          i25 = i19;
          i26 = i20;
          i27 = i15;
          i28 = i21;
          break L1934;
        }
      }
    } else {
      i22 = i2;
      i23 = i3;
      i24 = i4;
      i25 = i5;
      i26 = i6;
      i27 = i1;
      i28 = 0;
    }
  } while (0);
  if ((i28 | 0) != (i8 | 0)) {
    return;
  }
  i8 = HEAP8[i27] | 0;
  i27 = HEAP8[i23] | 0;
  i28 = HEAP8[i24] | 0;
  HEAP8[i25] = -1;
  i1 = i28 & 255;
  i28 = i27 & 255;
  i27 = (HEAP32[5278108 + (i28 << 2) >> 2] | 0) + (HEAP32[5277084 + (i1 << 2) >> 2] | 0) >> 16;
  i6 = HEAP16[5279132 + (i28 << 1) >> 1] << 16 >> 16;
  i28 = (i8 & 255) + 227 | 0;
  HEAP8[i25 + 1 | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i1 << 1) >> 1] << 16 >> 16) + i28 | 0) | 0] | 0;
  HEAP8[i25 + 2 | 0] = HEAP8[5280356 + (i27 + i28 | 0) | 0] | 0;
  HEAP8[i25 + 3 | 0] = HEAP8[5280356 + (i6 + i28 | 0) | 0] | 0;
  i28 = HEAP8[i22] | 0;
  i22 = HEAP8[i23] | 0;
  i23 = HEAP8[i24] | 0;
  HEAP8[i26] = -1;
  i24 = i23 & 255;
  i23 = i22 & 255;
  i22 = (HEAP32[5278108 + (i23 << 2) >> 2] | 0) + (HEAP32[5277084 + (i24 << 2) >> 2] | 0) >> 16;
  i6 = HEAP16[5279132 + (i23 << 1) >> 1] << 16 >> 16;
  i23 = (i28 & 255) + 227 | 0;
  HEAP8[i26 + 1 | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i24 << 1) >> 1] << 16 >> 16) + i23 | 0) | 0] | 0;
  HEAP8[i26 + 2 | 0] = HEAP8[5280356 + (i22 + i23 | 0) | 0] | 0;
  HEAP8[i26 + 3 | 0] = HEAP8[5280356 + (i6 + i23 | 0) | 0] | 0;
  return;
}
function _SampleRgba4444LinePair(i1, i2, i3, i4, i5, i6, i7) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  i7 = i7 | 0;
  var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
  i8 = i7 - 1 | 0;
  L1943 : do {
    if ((i8 | 0) > 0) {
      i7 = i2;
      i9 = i3;
      i10 = i4;
      i11 = i5;
      i12 = i6;
      i13 = i1;
      i14 = 0;
      while (1) {
        i15 = HEAPU8[i10] | 0;
        i16 = HEAPU8[i9] | 0;
        i17 = HEAP16[5279132 + (i16 << 1) >> 1] << 16 >> 16;
        i18 = (HEAPU8[i13] | 0) + 227 | 0;
        HEAP8[i11] = HEAP8[5279644 + ((HEAP16[5276572 + (i15 << 1) >> 1] << 16 >> 16) + i18 | 0) | 0] << 4 | HEAP8[5279644 + (((HEAP32[5278108 + (i16 << 2) >> 2] | 0) + (HEAP32[5277084 + (i15 << 2) >> 2] | 0) >> 16) + i18 | 0) | 0];
        HEAP8[i11 + 1 | 0] = HEAP8[5279644 + (i17 + i18 | 0) | 0] << 4 | 15;
        i18 = HEAPU8[i10] | 0;
        i17 = HEAPU8[i9] | 0;
        i15 = HEAP16[5279132 + (i17 << 1) >> 1] << 16 >> 16;
        i16 = (HEAPU8[i13 + 1 | 0] | 0) + 227 | 0;
        HEAP8[i11 + 2 | 0] = HEAP8[5279644 + ((HEAP16[5276572 + (i18 << 1) >> 1] << 16 >> 16) + i16 | 0) | 0] << 4 | HEAP8[5279644 + (((HEAP32[5278108 + (i17 << 2) >> 2] | 0) + (HEAP32[5277084 + (i18 << 2) >> 2] | 0) >> 16) + i16 | 0) | 0];
        HEAP8[i11 + 3 | 0] = HEAP8[5279644 + (i15 + i16 | 0) | 0] << 4 | 15;
        i16 = HEAPU8[i10] | 0;
        i15 = HEAPU8[i9] | 0;
        i18 = HEAP16[5279132 + (i15 << 1) >> 1] << 16 >> 16;
        i17 = (HEAPU8[i7] | 0) + 227 | 0;
        HEAP8[i12] = HEAP8[5279644 + ((HEAP16[5276572 + (i16 << 1) >> 1] << 16 >> 16) + i17 | 0) | 0] << 4 | HEAP8[5279644 + (((HEAP32[5278108 + (i15 << 2) >> 2] | 0) + (HEAP32[5277084 + (i16 << 2) >> 2] | 0) >> 16) + i17 | 0) | 0];
        HEAP8[i12 + 1 | 0] = HEAP8[5279644 + (i18 + i17 | 0) | 0] << 4 | 15;
        i17 = HEAPU8[i10] | 0;
        i18 = HEAPU8[i9] | 0;
        i16 = HEAP16[5279132 + (i18 << 1) >> 1] << 16 >> 16;
        i15 = (HEAPU8[i7 + 1 | 0] | 0) + 227 | 0;
        HEAP8[i12 + 2 | 0] = HEAP8[5279644 + ((HEAP16[5276572 + (i17 << 1) >> 1] << 16 >> 16) + i15 | 0) | 0] << 4 | HEAP8[5279644 + (((HEAP32[5278108 + (i18 << 2) >> 2] | 0) + (HEAP32[5277084 + (i17 << 2) >> 2] | 0) >> 16) + i15 | 0) | 0];
        HEAP8[i12 + 3 | 0] = HEAP8[5279644 + (i16 + i15 | 0) | 0] << 4 | 15;
        i15 = i13 + 2 | 0;
        i16 = i7 + 2 | 0;
        i17 = i9 + 1 | 0;
        i18 = i10 + 1 | 0;
        i19 = i11 + 4 | 0;
        i20 = i12 + 4 | 0;
        i21 = i14 + 2 | 0;
        if ((i21 | 0) < (i8 | 0)) {
          i7 = i16;
          i9 = i17;
          i10 = i18;
          i11 = i19;
          i12 = i20;
          i13 = i15;
          i14 = i21;
        } else {
          i22 = i16;
          i23 = i17;
          i24 = i18;
          i25 = i19;
          i26 = i20;
          i27 = i15;
          i28 = i21;
          break L1943;
        }
      }
    } else {
      i22 = i2;
      i23 = i3;
      i24 = i4;
      i25 = i5;
      i26 = i6;
      i27 = i1;
      i28 = 0;
    }
  } while (0);
  if ((i28 | 0) != (i8 | 0)) {
    return;
  }
  i8 = HEAPU8[i24] | 0;
  i28 = HEAPU8[i23] | 0;
  i1 = HEAP16[5279132 + (i28 << 1) >> 1] << 16 >> 16;
  i6 = (HEAPU8[i27] | 0) + 227 | 0;
  HEAP8[i25] = HEAP8[5279644 + ((HEAP16[5276572 + (i8 << 1) >> 1] << 16 >> 16) + i6 | 0) | 0] << 4 | HEAP8[5279644 + (((HEAP32[5278108 + (i28 << 2) >> 2] | 0) + (HEAP32[5277084 + (i8 << 2) >> 2] | 0) >> 16) + i6 | 0) | 0];
  HEAP8[i25 + 1 | 0] = HEAP8[5279644 + (i1 + i6 | 0) | 0] << 4 | 15;
  i6 = HEAPU8[i24] | 0;
  i24 = HEAPU8[i23] | 0;
  i23 = HEAP16[5279132 + (i24 << 1) >> 1] << 16 >> 16;
  i1 = (HEAPU8[i22] | 0) + 227 | 0;
  HEAP8[i26] = HEAP8[5279644 + ((HEAP16[5276572 + (i6 << 1) >> 1] << 16 >> 16) + i1 | 0) | 0] << 4 | HEAP8[5279644 + (((HEAP32[5278108 + (i24 << 2) >> 2] | 0) + (HEAP32[5277084 + (i6 << 2) >> 2] | 0) >> 16) + i1 | 0) | 0];
  HEAP8[i26 + 1 | 0] = HEAP8[5279644 + (i23 + i1 | 0) | 0] << 4 | 15;
  return;
}
function _SampleRgb565LinePair(i1, i2, i3, i4, i5, i6, i7) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  i7 = i7 | 0;
  var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
  i8 = i7 - 1 | 0;
  L1952 : do {
    if ((i8 | 0) > 0) {
      i7 = i2;
      i9 = i3;
      i10 = i4;
      i11 = i5;
      i12 = i6;
      i13 = i1;
      i14 = 0;
      while (1) {
        i15 = HEAPU8[i10] | 0;
        i16 = HEAPU8[i9] | 0;
        i17 = HEAP16[5279132 + (i16 << 1) >> 1] << 16 >> 16;
        i18 = (HEAPU8[i13] | 0) + 227 | 0;
        i19 = HEAP8[5280356 + (((HEAP32[5278108 + (i16 << 2) >> 2] | 0) + (HEAP32[5277084 + (i15 << 2) >> 2] | 0) >> 16) + i18 | 0) | 0] | 0;
        HEAP8[i11] = (i19 & 255) >>> 5 | HEAP8[5280356 + ((HEAP16[5276572 + (i15 << 1) >> 1] << 16 >> 16) + i18 | 0) | 0] & -8;
        HEAP8[i11 + 1 | 0] = i19 << 3 & -32 | (HEAPU8[5280356 + (i17 + i18 | 0) | 0] | 0) >>> 3;
        i18 = HEAPU8[i10] | 0;
        i17 = HEAPU8[i9] | 0;
        i19 = HEAP16[5279132 + (i17 << 1) >> 1] << 16 >> 16;
        i15 = (HEAPU8[i13 + 1 | 0] | 0) + 227 | 0;
        i16 = HEAP8[5280356 + (((HEAP32[5278108 + (i17 << 2) >> 2] | 0) + (HEAP32[5277084 + (i18 << 2) >> 2] | 0) >> 16) + i15 | 0) | 0] | 0;
        HEAP8[i11 + 2 | 0] = (i16 & 255) >>> 5 | HEAP8[5280356 + ((HEAP16[5276572 + (i18 << 1) >> 1] << 16 >> 16) + i15 | 0) | 0] & -8;
        HEAP8[i11 + 3 | 0] = i16 << 3 & -32 | (HEAPU8[5280356 + (i19 + i15 | 0) | 0] | 0) >>> 3;
        i15 = HEAPU8[i10] | 0;
        i19 = HEAPU8[i9] | 0;
        i16 = HEAP16[5279132 + (i19 << 1) >> 1] << 16 >> 16;
        i18 = (HEAPU8[i7] | 0) + 227 | 0;
        i17 = HEAP8[5280356 + (((HEAP32[5278108 + (i19 << 2) >> 2] | 0) + (HEAP32[5277084 + (i15 << 2) >> 2] | 0) >> 16) + i18 | 0) | 0] | 0;
        HEAP8[i12] = (i17 & 255) >>> 5 | HEAP8[5280356 + ((HEAP16[5276572 + (i15 << 1) >> 1] << 16 >> 16) + i18 | 0) | 0] & -8;
        HEAP8[i12 + 1 | 0] = i17 << 3 & -32 | (HEAPU8[5280356 + (i16 + i18 | 0) | 0] | 0) >>> 3;
        i18 = HEAPU8[i10] | 0;
        i16 = HEAPU8[i9] | 0;
        i17 = HEAP16[5279132 + (i16 << 1) >> 1] << 16 >> 16;
        i15 = (HEAPU8[i7 + 1 | 0] | 0) + 227 | 0;
        i19 = HEAP8[5280356 + (((HEAP32[5278108 + (i16 << 2) >> 2] | 0) + (HEAP32[5277084 + (i18 << 2) >> 2] | 0) >> 16) + i15 | 0) | 0] | 0;
        HEAP8[i12 + 2 | 0] = (i19 & 255) >>> 5 | HEAP8[5280356 + ((HEAP16[5276572 + (i18 << 1) >> 1] << 16 >> 16) + i15 | 0) | 0] & -8;
        HEAP8[i12 + 3 | 0] = i19 << 3 & -32 | (HEAPU8[5280356 + (i17 + i15 | 0) | 0] | 0) >>> 3;
        i15 = i13 + 2 | 0;
        i17 = i7 + 2 | 0;
        i19 = i9 + 1 | 0;
        i18 = i10 + 1 | 0;
        i16 = i11 + 4 | 0;
        i20 = i12 + 4 | 0;
        i21 = i14 + 2 | 0;
        if ((i21 | 0) < (i8 | 0)) {
          i7 = i17;
          i9 = i19;
          i10 = i18;
          i11 = i16;
          i12 = i20;
          i13 = i15;
          i14 = i21;
        } else {
          i22 = i17;
          i23 = i19;
          i24 = i18;
          i25 = i16;
          i26 = i20;
          i27 = i15;
          i28 = i21;
          break L1952;
        }
      }
    } else {
      i22 = i2;
      i23 = i3;
      i24 = i4;
      i25 = i5;
      i26 = i6;
      i27 = i1;
      i28 = 0;
    }
  } while (0);
  if ((i28 | 0) != (i8 | 0)) {
    return;
  }
  i8 = HEAPU8[i24] | 0;
  i28 = HEAPU8[i23] | 0;
  i1 = HEAP16[5279132 + (i28 << 1) >> 1] << 16 >> 16;
  i6 = (HEAPU8[i27] | 0) + 227 | 0;
  i27 = HEAP8[5280356 + (((HEAP32[5278108 + (i28 << 2) >> 2] | 0) + (HEAP32[5277084 + (i8 << 2) >> 2] | 0) >> 16) + i6 | 0) | 0] | 0;
  HEAP8[i25] = (i27 & 255) >>> 5 | HEAP8[5280356 + ((HEAP16[5276572 + (i8 << 1) >> 1] << 16 >> 16) + i6 | 0) | 0] & -8;
  HEAP8[i25 + 1 | 0] = i27 << 3 & -32 | (HEAPU8[5280356 + (i1 + i6 | 0) | 0] | 0) >>> 3;
  i6 = HEAPU8[i24] | 0;
  i24 = HEAPU8[i23] | 0;
  i23 = HEAP16[5279132 + (i24 << 1) >> 1] << 16 >> 16;
  i1 = (HEAPU8[i22] | 0) + 227 | 0;
  i22 = HEAP8[5280356 + (((HEAP32[5278108 + (i24 << 2) >> 2] | 0) + (HEAP32[5277084 + (i6 << 2) >> 2] | 0) >> 16) + i1 | 0) | 0] | 0;
  HEAP8[i26] = (i22 & 255) >>> 5 | HEAP8[5280356 + ((HEAP16[5276572 + (i6 << 1) >> 1] << 16 >> 16) + i1 | 0) | 0] & -8;
  HEAP8[i26 + 1 | 0] = i22 << 3 & -32 | (HEAPU8[5280356 + (i23 + i1 | 0) | 0] | 0) >>> 3;
  return;
}
function _Yuv444ToRgb(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
  if ((i5 | 0) > 0) {
    i6 = 0;
  } else {
    return;
  }
  while (1) {
    i7 = i6 * 3 & -1;
    i8 = HEAPU8[i3 + i6 | 0] | 0;
    i9 = HEAPU8[i2 + i6 | 0] | 0;
    i10 = (HEAP32[5278108 + (i9 << 2) >> 2] | 0) + (HEAP32[5277084 + (i8 << 2) >> 2] | 0) >> 16;
    i11 = HEAP16[5279132 + (i9 << 1) >> 1] << 16 >> 16;
    i9 = (HEAPU8[i1 + i6 | 0] | 0) + 227 | 0;
    HEAP8[i4 + i7 | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i8 << 1) >> 1] << 16 >> 16) + i9 | 0) | 0] | 0;
    HEAP8[i4 + (i7 + 1 | 0) | 0] = HEAP8[5280356 + (i10 + i9 | 0) | 0] | 0;
    HEAP8[i4 + (i7 + 2 | 0) | 0] = HEAP8[5280356 + (i11 + i9 | 0) | 0] | 0;
    i9 = i6 + 1 | 0;
    if ((i9 | 0) == (i5 | 0)) {
      break;
    } else {
      i6 = i9;
    }
  }
  return;
}
function _Yuv444ToRgba(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
  if ((i5 | 0) > 0) {
    i6 = 0;
  } else {
    return;
  }
  while (1) {
    i7 = i6 << 2;
    i8 = HEAPU8[i3 + i6 | 0] | 0;
    i9 = HEAPU8[i2 + i6 | 0] | 0;
    i10 = (HEAP32[5278108 + (i9 << 2) >> 2] | 0) + (HEAP32[5277084 + (i8 << 2) >> 2] | 0) >> 16;
    i11 = HEAP16[5279132 + (i9 << 1) >> 1] << 16 >> 16;
    i9 = (HEAPU8[i1 + i6 | 0] | 0) + 227 | 0;
    HEAP8[i4 + i7 | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i8 << 1) >> 1] << 16 >> 16) + i9 | 0) | 0] | 0;
    HEAP8[i4 + (i7 | 1) | 0] = HEAP8[5280356 + (i10 + i9 | 0) | 0] | 0;
    HEAP8[i4 + (i7 | 2) | 0] = HEAP8[5280356 + (i11 + i9 | 0) | 0] | 0;
    HEAP8[i4 + (i7 | 3) | 0] = -1;
    i7 = i6 + 1 | 0;
    if ((i7 | 0) == (i5 | 0)) {
      break;
    } else {
      i6 = i7;
    }
  }
  return;
}
function _Yuv444ToBgr(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
  if ((i5 | 0) > 0) {
    i6 = 0;
  } else {
    return;
  }
  while (1) {
    i7 = i6 * 3 & -1;
    i8 = HEAPU8[i3 + i6 | 0] | 0;
    i9 = HEAP16[5276572 + (i8 << 1) >> 1] << 16 >> 16;
    i10 = HEAPU8[i2 + i6 | 0] | 0;
    i11 = (HEAP32[5278108 + (i10 << 2) >> 2] | 0) + (HEAP32[5277084 + (i8 << 2) >> 2] | 0) >> 16;
    i8 = (HEAPU8[i1 + i6 | 0] | 0) + 227 | 0;
    HEAP8[i4 + i7 | 0] = HEAP8[5280356 + ((HEAP16[5279132 + (i10 << 1) >> 1] << 16 >> 16) + i8 | 0) | 0] | 0;
    HEAP8[i4 + (i7 + 1 | 0) | 0] = HEAP8[5280356 + (i11 + i8 | 0) | 0] | 0;
    HEAP8[i4 + (i7 + 2 | 0) | 0] = HEAP8[5280356 + (i9 + i8 | 0) | 0] | 0;
    i8 = i6 + 1 | 0;
    if ((i8 | 0) == (i5 | 0)) {
      break;
    } else {
      i6 = i8;
    }
  }
  return;
}
function _Yuv444ToBgra(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
  if ((i5 | 0) > 0) {
    i6 = 0;
  } else {
    return;
  }
  while (1) {
    i7 = i6 << 2;
    i8 = HEAPU8[i3 + i6 | 0] | 0;
    i9 = HEAP16[5276572 + (i8 << 1) >> 1] << 16 >> 16;
    i10 = HEAPU8[i2 + i6 | 0] | 0;
    i11 = (HEAP32[5278108 + (i10 << 2) >> 2] | 0) + (HEAP32[5277084 + (i8 << 2) >> 2] | 0) >> 16;
    i8 = (HEAPU8[i1 + i6 | 0] | 0) + 227 | 0;
    HEAP8[i4 + i7 | 0] = HEAP8[5280356 + ((HEAP16[5279132 + (i10 << 1) >> 1] << 16 >> 16) + i8 | 0) | 0] | 0;
    HEAP8[i4 + (i7 | 1) | 0] = HEAP8[5280356 + (i11 + i8 | 0) | 0] | 0;
    HEAP8[i4 + (i7 | 2) | 0] = HEAP8[5280356 + (i9 + i8 | 0) | 0] | 0;
    HEAP8[i4 + (i7 | 3) | 0] = -1;
    i7 = i6 + 1 | 0;
    if ((i7 | 0) == (i5 | 0)) {
      break;
    } else {
      i6 = i7;
    }
  }
  return;
}
function _Yuv444ToArgb(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
  if ((i5 | 0) > 0) {
    i6 = 0;
  } else {
    return;
  }
  while (1) {
    i7 = HEAP8[i1 + i6 | 0] | 0;
    i8 = HEAP8[i2 + i6 | 0] | 0;
    i9 = HEAP8[i3 + i6 | 0] | 0;
    i10 = i6 << 2;
    HEAP8[i4 + i10 | 0] = -1;
    i11 = i9 & 255;
    i9 = i8 & 255;
    i8 = (HEAP32[5278108 + (i9 << 2) >> 2] | 0) + (HEAP32[5277084 + (i11 << 2) >> 2] | 0) >> 16;
    i12 = HEAP16[5279132 + (i9 << 1) >> 1] << 16 >> 16;
    i9 = (i7 & 255) + 227 | 0;
    HEAP8[i4 + (i10 | 1) | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i11 << 1) >> 1] << 16 >> 16) + i9 | 0) | 0] | 0;
    HEAP8[i4 + (i10 | 2) | 0] = HEAP8[5280356 + (i8 + i9 | 0) | 0] | 0;
    HEAP8[i4 + (i10 | 3) | 0] = HEAP8[5280356 + (i12 + i9 | 0) | 0] | 0;
    i9 = i6 + 1 | 0;
    if ((i9 | 0) == (i5 | 0)) {
      break;
    } else {
      i6 = i9;
    }
  }
  return;
}
function _Yuv444ToRgba4444(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
  if ((i5 | 0) > 0) {
    i6 = 0;
  } else {
    return;
  }
  while (1) {
    i7 = i6 << 1;
    i8 = HEAPU8[i3 + i6 | 0] | 0;
    i9 = HEAPU8[i2 + i6 | 0] | 0;
    i10 = HEAP16[5279132 + (i9 << 1) >> 1] << 16 >> 16;
    i11 = (HEAPU8[i1 + i6 | 0] | 0) + 227 | 0;
    HEAP8[i4 + i7 | 0] = HEAP8[5279644 + ((HEAP16[5276572 + (i8 << 1) >> 1] << 16 >> 16) + i11 | 0) | 0] << 4 | HEAP8[5279644 + (((HEAP32[5278108 + (i9 << 2) >> 2] | 0) + (HEAP32[5277084 + (i8 << 2) >> 2] | 0) >> 16) + i11 | 0) | 0];
    HEAP8[i4 + (i7 | 1) | 0] = HEAP8[5279644 + (i10 + i11 | 0) | 0] << 4 | 15;
    i11 = i6 + 1 | 0;
    if ((i11 | 0) == (i5 | 0)) {
      break;
    } else {
      i6 = i11;
    }
  }
  return;
}
function _Yuv444ToRgb565(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
  if ((i5 | 0) > 0) {
    i6 = 0;
  } else {
    return;
  }
  while (1) {
    i7 = i6 << 1;
    i8 = HEAPU8[i3 + i6 | 0] | 0;
    i9 = HEAPU8[i2 + i6 | 0] | 0;
    i10 = HEAP16[5279132 + (i9 << 1) >> 1] << 16 >> 16;
    i11 = (HEAPU8[i1 + i6 | 0] | 0) + 227 | 0;
    i12 = HEAP8[5280356 + (((HEAP32[5278108 + (i9 << 2) >> 2] | 0) + (HEAP32[5277084 + (i8 << 2) >> 2] | 0) >> 16) + i11 | 0) | 0] | 0;
    HEAP8[i4 + i7 | 0] = (i12 & 255) >>> 5 | HEAP8[5280356 + ((HEAP16[5276572 + (i8 << 1) >> 1] << 16 >> 16) + i11 | 0) | 0] & -8;
    HEAP8[i4 + (i7 | 1) | 0] = i12 << 3 & -32 | (HEAPU8[5280356 + (i10 + i11 | 0) | 0] | 0) >>> 3;
    i11 = i6 + 1 | 0;
    if ((i11 | 0) == (i5 | 0)) {
      break;
    } else {
      i6 = i11;
    }
  }
  return;
}
function _UpsampleRgbLinePair(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  i7 = i7 | 0;
  i8 = i8 | 0;
  i9 = i9 | 0;
  var i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
  i10 = i9 - 1 | 0;
  i11 = i10 >> 1;
  i12 = (HEAPU8[i4] | 0) << 16 | (HEAPU8[i3] | 0);
  i13 = (HEAPU8[i6] | 0) << 16 | (HEAPU8[i5] | 0);
  i14 = (i1 | 0) != 0;
  if (i14) {
    i15 = ((i12 * 3 & -1) + 131074 | 0) + i13 | 0;
    i16 = i15 >>> 18 & 255;
    i17 = i15 >>> 2 & 255;
    i15 = (HEAP32[5278108 + (i17 << 2) >> 2] | 0) + (HEAP32[5277084 + (i16 << 2) >> 2] | 0) >> 16;
    i18 = HEAP16[5279132 + (i17 << 1) >> 1] << 16 >> 16;
    i17 = (HEAPU8[i1] | 0) + 227 | 0;
    HEAP8[i7] = HEAP8[5280356 + (i17 + (HEAP16[5276572 + (i16 << 1) >> 1] << 16 >> 16) | 0) | 0] | 0;
    HEAP8[i7 + 1 | 0] = HEAP8[5280356 + (i15 + i17 | 0) | 0] | 0;
    HEAP8[i7 + 2 | 0] = HEAP8[5280356 + (i18 + i17 | 0) | 0] | 0;
  }
  i17 = (i2 | 0) != 0;
  if (i17) {
    i18 = (i12 + 131074 | 0) + (i13 * 3 & -1) | 0;
    i15 = i18 >>> 18 & 255;
    i16 = i18 >>> 2 & 255;
    i18 = (HEAP32[5278108 + (i16 << 2) >> 2] | 0) + (HEAP32[5277084 + (i15 << 2) >> 2] | 0) >> 16;
    i19 = HEAP16[5279132 + (i16 << 1) >> 1] << 16 >> 16;
    i16 = (HEAPU8[i2] | 0) + 227 | 0;
    HEAP8[i8] = HEAP8[5280356 + (i16 + (HEAP16[5276572 + (i15 << 1) >> 1] << 16 >> 16) | 0) | 0] | 0;
    HEAP8[i8 + 1 | 0] = HEAP8[5280356 + (i18 + i16 | 0) | 0] | 0;
    HEAP8[i8 + 2 | 0] = HEAP8[5280356 + (i19 + i16 | 0) | 0] | 0;
  }
  L2009 : do {
    if ((i11 | 0) < 1) {
      i20 = i13;
      i21 = i12;
    } else {
      i16 = i13;
      i19 = i12;
      i18 = 1;
      while (1) {
        i15 = (HEAPU8[i4 + i18 | 0] | 0) << 16 | (HEAPU8[i3 + i18 | 0] | 0);
        i22 = (HEAPU8[i6 + i18 | 0] | 0) << 16 | (HEAPU8[i5 + i18 | 0] | 0);
        i23 = (((i16 + 524296 | 0) + i19 | 0) + i15 | 0) + i22 | 0;
        i24 = (i23 + (i15 + i16 << 1) | 0) >>> 3;
        i25 = ((i22 + i19 << 1) + i23 | 0) >>> 3;
        if (i14) {
          i23 = i24 + i19 | 0;
          i26 = i25 + i15 | 0;
          i27 = i18 << 1;
          i28 = i27 - 1 | 0;
          i29 = i28 * 3 & -1;
          i30 = i23 >>> 17 & 255;
          i31 = i23 >>> 1 & 255;
          i23 = (HEAP32[5278108 + (i31 << 2) >> 2] | 0) + (HEAP32[5277084 + (i30 << 2) >> 2] | 0) >> 16;
          i32 = HEAP16[5279132 + (i31 << 1) >> 1] << 16 >> 16;
          i31 = (HEAPU8[i1 + i28 | 0] | 0) + 227 | 0;
          HEAP8[i7 + i29 | 0] = HEAP8[5280356 + (i31 + (HEAP16[5276572 + (i30 << 1) >> 1] << 16 >> 16) | 0) | 0] | 0;
          HEAP8[i7 + (i29 + 1 | 0) | 0] = HEAP8[5280356 + (i23 + i31 | 0) | 0] | 0;
          HEAP8[i7 + (i29 + 2 | 0) | 0] = HEAP8[5280356 + (i32 + i31 | 0) | 0] | 0;
          i31 = i18 * 6 & -1;
          i32 = i26 >>> 17 & 255;
          i29 = i26 >>> 1 & 255;
          i26 = (HEAP32[5278108 + (i29 << 2) >> 2] | 0) + (HEAP32[5277084 + (i32 << 2) >> 2] | 0) >> 16;
          i23 = HEAP16[5279132 + (i29 << 1) >> 1] << 16 >> 16;
          i29 = (HEAPU8[i1 + i27 | 0] | 0) + 227 | 0;
          HEAP8[i7 + i31 | 0] = HEAP8[5280356 + (i29 + (HEAP16[5276572 + (i32 << 1) >> 1] << 16 >> 16) | 0) | 0] | 0;
          HEAP8[i7 + (i31 | 1) | 0] = HEAP8[5280356 + (i26 + i29 | 0) | 0] | 0;
          HEAP8[i7 + (i31 + 2 | 0) | 0] = HEAP8[5280356 + (i23 + i29 | 0) | 0] | 0;
        }
        if (i17) {
          i29 = i25 + i16 | 0;
          i25 = i24 + i22 | 0;
          i24 = i18 << 1;
          i23 = i24 - 1 | 0;
          i31 = i23 * 3 & -1;
          i26 = i29 >>> 17 & 255;
          i32 = i29 >>> 1 & 255;
          i29 = (HEAP32[5278108 + (i32 << 2) >> 2] | 0) + (HEAP32[5277084 + (i26 << 2) >> 2] | 0) >> 16;
          i27 = HEAP16[5279132 + (i32 << 1) >> 1] << 16 >> 16;
          i32 = (HEAPU8[i2 + i23 | 0] | 0) + 227 | 0;
          HEAP8[i8 + i31 | 0] = HEAP8[5280356 + (i32 + (HEAP16[5276572 + (i26 << 1) >> 1] << 16 >> 16) | 0) | 0] | 0;
          HEAP8[i8 + (i31 + 1 | 0) | 0] = HEAP8[5280356 + (i29 + i32 | 0) | 0] | 0;
          HEAP8[i8 + (i31 + 2 | 0) | 0] = HEAP8[5280356 + (i27 + i32 | 0) | 0] | 0;
          i32 = i18 * 6 & -1;
          i27 = i25 >>> 17 & 255;
          i31 = i25 >>> 1 & 255;
          i25 = (HEAP32[5278108 + (i31 << 2) >> 2] | 0) + (HEAP32[5277084 + (i27 << 2) >> 2] | 0) >> 16;
          i29 = HEAP16[5279132 + (i31 << 1) >> 1] << 16 >> 16;
          i31 = (HEAPU8[i2 + i24 | 0] | 0) + 227 | 0;
          HEAP8[i8 + i32 | 0] = HEAP8[5280356 + (i31 + (HEAP16[5276572 + (i27 << 1) >> 1] << 16 >> 16) | 0) | 0] | 0;
          HEAP8[i8 + (i32 | 1) | 0] = HEAP8[5280356 + (i25 + i31 | 0) | 0] | 0;
          HEAP8[i8 + (i32 + 2 | 0) | 0] = HEAP8[5280356 + (i29 + i31 | 0) | 0] | 0;
        }
        i31 = i18 + 1 | 0;
        if ((i31 | 0) > (i11 | 0)) {
          i20 = i22;
          i21 = i15;
          break L2009;
        } else {
          i16 = i22;
          i19 = i15;
          i18 = i31;
        }
      }
    }
  } while (0);
  if ((i9 & 1 | 0) != 0) {
    return;
  }
  if (i14) {
    i14 = (i20 + 131074 | 0) + (i21 * 3 & -1) | 0;
    i9 = i10 * 3 & -1;
    i11 = i14 >>> 18 & 255;
    i5 = i14 >>> 2 & 255;
    i14 = (HEAP32[5278108 + (i5 << 2) >> 2] | 0) + (HEAP32[5277084 + (i11 << 2) >> 2] | 0) >> 16;
    i6 = HEAP16[5279132 + (i5 << 1) >> 1] << 16 >> 16;
    i5 = (HEAPU8[i1 + i10 | 0] | 0) + 227 | 0;
    HEAP8[i7 + i9 | 0] = HEAP8[5280356 + (i5 + (HEAP16[5276572 + (i11 << 1) >> 1] << 16 >> 16) | 0) | 0] | 0;
    HEAP8[i7 + (i9 + 1 | 0) | 0] = HEAP8[5280356 + (i14 + i5 | 0) | 0] | 0;
    HEAP8[i7 + (i9 + 2 | 0) | 0] = HEAP8[5280356 + (i6 + i5 | 0) | 0] | 0;
  }
  if (!i17) {
    return;
  }
  i17 = (i21 + 131074 | 0) + (i20 * 3 & -1) | 0;
  i20 = i10 * 3 & -1;
  i21 = i17 >>> 18 & 255;
  i5 = i17 >>> 2 & 255;
  i17 = (HEAP32[5278108 + (i5 << 2) >> 2] | 0) + (HEAP32[5277084 + (i21 << 2) >> 2] | 0) >> 16;
  i6 = HEAP16[5279132 + (i5 << 1) >> 1] << 16 >> 16;
  i5 = (HEAPU8[i2 + i10 | 0] | 0) + 227 | 0;
  HEAP8[i8 + i20 | 0] = HEAP8[5280356 + (i5 + (HEAP16[5276572 + (i21 << 1) >> 1] << 16 >> 16) | 0) | 0] | 0;
  HEAP8[i8 + (i20 + 1 | 0) | 0] = HEAP8[5280356 + (i17 + i5 | 0) | 0] | 0;
  HEAP8[i8 + (i20 + 2 | 0) | 0] = HEAP8[5280356 + (i6 + i5 | 0) | 0] | 0;
  return;
}
function _UpsampleRgbaLinePair(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  i7 = i7 | 0;
  i8 = i8 | 0;
  i9 = i9 | 0;
  var i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
  i10 = i9 - 1 | 0;
  i11 = i10 >> 1;
  i12 = (HEAPU8[i4] | 0) << 16 | (HEAPU8[i3] | 0);
  i13 = (HEAPU8[i6] | 0) << 16 | (HEAPU8[i5] | 0);
  i14 = (i1 | 0) != 0;
  if (i14) {
    i15 = ((i12 * 3 & -1) + 131074 | 0) + i13 | 0;
    i16 = i15 >>> 18 & 255;
    i17 = i15 >>> 2 & 255;
    i15 = (HEAP32[5278108 + (i17 << 2) >> 2] | 0) + (HEAP32[5277084 + (i16 << 2) >> 2] | 0) >> 16;
    i18 = HEAP16[5279132 + (i17 << 1) >> 1] << 16 >> 16;
    i17 = (HEAPU8[i1] | 0) + 227 | 0;
    HEAP8[i7] = HEAP8[5280356 + ((HEAP16[5276572 + (i16 << 1) >> 1] << 16 >> 16) + i17 | 0) | 0] | 0;
    HEAP8[i7 + 1 | 0] = HEAP8[5280356 + (i15 + i17 | 0) | 0] | 0;
    HEAP8[i7 + 2 | 0] = HEAP8[5280356 + (i18 + i17 | 0) | 0] | 0;
    HEAP8[i7 + 3 | 0] = -1;
  }
  i17 = (i2 | 0) != 0;
  if (i17) {
    i18 = (i12 + 131074 | 0) + (i13 * 3 & -1) | 0;
    i15 = i18 >>> 18 & 255;
    i16 = i18 >>> 2 & 255;
    i18 = (HEAP32[5278108 + (i16 << 2) >> 2] | 0) + (HEAP32[5277084 + (i15 << 2) >> 2] | 0) >> 16;
    i19 = HEAP16[5279132 + (i16 << 1) >> 1] << 16 >> 16;
    i16 = (HEAPU8[i2] | 0) + 227 | 0;
    HEAP8[i8] = HEAP8[5280356 + ((HEAP16[5276572 + (i15 << 1) >> 1] << 16 >> 16) + i16 | 0) | 0] | 0;
    HEAP8[i8 + 1 | 0] = HEAP8[5280356 + (i18 + i16 | 0) | 0] | 0;
    HEAP8[i8 + 2 | 0] = HEAP8[5280356 + (i19 + i16 | 0) | 0] | 0;
    HEAP8[i8 + 3 | 0] = -1;
  }
  L2036 : do {
    if ((i11 | 0) < 1) {
      i20 = i13;
      i21 = i12;
    } else {
      i16 = i13;
      i19 = i12;
      i18 = 1;
      while (1) {
        i15 = (HEAPU8[i4 + i18 | 0] | 0) << 16 | (HEAPU8[i3 + i18 | 0] | 0);
        i22 = (HEAPU8[i6 + i18 | 0] | 0) << 16 | (HEAPU8[i5 + i18 | 0] | 0);
        i23 = (((i16 + 524296 | 0) + i19 | 0) + i15 | 0) + i22 | 0;
        i24 = (i23 + (i15 + i16 << 1) | 0) >>> 3;
        i25 = ((i22 + i19 << 1) + i23 | 0) >>> 3;
        if (i14) {
          i23 = i24 + i19 | 0;
          i26 = i25 + i15 | 0;
          i27 = i18 << 1;
          i28 = i27 - 1 | 0;
          i29 = i28 << 2;
          i30 = i23 >>> 17 & 255;
          i31 = i23 >>> 1 & 255;
          i23 = (HEAP32[5278108 + (i31 << 2) >> 2] | 0) + (HEAP32[5277084 + (i30 << 2) >> 2] | 0) >> 16;
          i32 = HEAP16[5279132 + (i31 << 1) >> 1] << 16 >> 16;
          i31 = (HEAPU8[i1 + i28 | 0] | 0) + 227 | 0;
          HEAP8[i7 + i29 | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i30 << 1) >> 1] << 16 >> 16) + i31 | 0) | 0] | 0;
          HEAP8[i7 + (i29 | 1) | 0] = HEAP8[5280356 + (i23 + i31 | 0) | 0] | 0;
          HEAP8[i7 + (i29 | 2) | 0] = HEAP8[5280356 + (i32 + i31 | 0) | 0] | 0;
          HEAP8[i7 + (i29 | 3) | 0] = -1;
          i29 = i18 << 3;
          i31 = i26 >>> 17 & 255;
          i32 = i26 >>> 1 & 255;
          i26 = (HEAP32[5278108 + (i32 << 2) >> 2] | 0) + (HEAP32[5277084 + (i31 << 2) >> 2] | 0) >> 16;
          i23 = HEAP16[5279132 + (i32 << 1) >> 1] << 16 >> 16;
          i32 = (HEAPU8[i1 + i27 | 0] | 0) + 227 | 0;
          HEAP8[i7 + i29 | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i31 << 1) >> 1] << 16 >> 16) + i32 | 0) | 0] | 0;
          HEAP8[i7 + (i29 | 1) | 0] = HEAP8[5280356 + (i26 + i32 | 0) | 0] | 0;
          HEAP8[i7 + (i29 | 2) | 0] = HEAP8[5280356 + (i23 + i32 | 0) | 0] | 0;
          HEAP8[i7 + (i29 | 3) | 0] = -1;
        }
        if (i17) {
          i29 = i25 + i16 | 0;
          i25 = i24 + i22 | 0;
          i24 = i18 << 1;
          i32 = i24 - 1 | 0;
          i23 = i32 << 2;
          i26 = i29 >>> 17 & 255;
          i31 = i29 >>> 1 & 255;
          i29 = (HEAP32[5278108 + (i31 << 2) >> 2] | 0) + (HEAP32[5277084 + (i26 << 2) >> 2] | 0) >> 16;
          i27 = HEAP16[5279132 + (i31 << 1) >> 1] << 16 >> 16;
          i31 = (HEAPU8[i2 + i32 | 0] | 0) + 227 | 0;
          HEAP8[i8 + i23 | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i26 << 1) >> 1] << 16 >> 16) + i31 | 0) | 0] | 0;
          HEAP8[i8 + (i23 | 1) | 0] = HEAP8[5280356 + (i29 + i31 | 0) | 0] | 0;
          HEAP8[i8 + (i23 | 2) | 0] = HEAP8[5280356 + (i27 + i31 | 0) | 0] | 0;
          HEAP8[i8 + (i23 | 3) | 0] = -1;
          i23 = i18 << 3;
          i31 = i25 >>> 17 & 255;
          i27 = i25 >>> 1 & 255;
          i25 = (HEAP32[5278108 + (i27 << 2) >> 2] | 0) + (HEAP32[5277084 + (i31 << 2) >> 2] | 0) >> 16;
          i29 = HEAP16[5279132 + (i27 << 1) >> 1] << 16 >> 16;
          i27 = (HEAPU8[i2 + i24 | 0] | 0) + 227 | 0;
          HEAP8[i8 + i23 | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i31 << 1) >> 1] << 16 >> 16) + i27 | 0) | 0] | 0;
          HEAP8[i8 + (i23 | 1) | 0] = HEAP8[5280356 + (i25 + i27 | 0) | 0] | 0;
          HEAP8[i8 + (i23 | 2) | 0] = HEAP8[5280356 + (i29 + i27 | 0) | 0] | 0;
          HEAP8[i8 + (i23 | 3) | 0] = -1;
        }
        i23 = i18 + 1 | 0;
        if ((i23 | 0) > (i11 | 0)) {
          i20 = i22;
          i21 = i15;
          break L2036;
        } else {
          i16 = i22;
          i19 = i15;
          i18 = i23;
        }
      }
    }
  } while (0);
  if ((i9 & 1 | 0) != 0) {
    return;
  }
  if (i14) {
    i14 = (i20 + 131074 | 0) + (i21 * 3 & -1) | 0;
    i9 = i10 << 2;
    i11 = i14 >>> 18 & 255;
    i5 = i14 >>> 2 & 255;
    i14 = (HEAP32[5278108 + (i5 << 2) >> 2] | 0) + (HEAP32[5277084 + (i11 << 2) >> 2] | 0) >> 16;
    i6 = HEAP16[5279132 + (i5 << 1) >> 1] << 16 >> 16;
    i5 = (HEAPU8[i1 + i10 | 0] | 0) + 227 | 0;
    HEAP8[i7 + i9 | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i11 << 1) >> 1] << 16 >> 16) + i5 | 0) | 0] | 0;
    HEAP8[i7 + (i9 | 1) | 0] = HEAP8[5280356 + (i14 + i5 | 0) | 0] | 0;
    HEAP8[i7 + (i9 | 2) | 0] = HEAP8[5280356 + (i6 + i5 | 0) | 0] | 0;
    HEAP8[i7 + (i9 | 3) | 0] = -1;
  }
  if (!i17) {
    return;
  }
  i17 = (i21 + 131074 | 0) + (i20 * 3 & -1) | 0;
  i20 = i10 << 2;
  i21 = i17 >>> 18 & 255;
  i9 = i17 >>> 2 & 255;
  i17 = (HEAP32[5278108 + (i9 << 2) >> 2] | 0) + (HEAP32[5277084 + (i21 << 2) >> 2] | 0) >> 16;
  i7 = HEAP16[5279132 + (i9 << 1) >> 1] << 16 >> 16;
  i9 = (HEAPU8[i2 + i10 | 0] | 0) + 227 | 0;
  HEAP8[i8 + i20 | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i21 << 1) >> 1] << 16 >> 16) + i9 | 0) | 0] | 0;
  HEAP8[i8 + (i20 | 1) | 0] = HEAP8[5280356 + (i17 + i9 | 0) | 0] | 0;
  HEAP8[i8 + (i20 | 2) | 0] = HEAP8[5280356 + (i7 + i9 | 0) | 0] | 0;
  HEAP8[i8 + (i20 | 3) | 0] = -1;
  return;
}
function _UpsampleBgrLinePair(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  i7 = i7 | 0;
  i8 = i8 | 0;
  i9 = i9 | 0;
  var i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
  i10 = i9 - 1 | 0;
  i11 = i10 >> 1;
  i12 = (HEAPU8[i4] | 0) << 16 | (HEAPU8[i3] | 0);
  i13 = (HEAPU8[i6] | 0) << 16 | (HEAPU8[i5] | 0);
  i14 = (i1 | 0) != 0;
  if (i14) {
    i15 = ((i12 * 3 & -1) + 131074 | 0) + i13 | 0;
    i16 = i15 >>> 18 & 255;
    i17 = HEAP16[5276572 + (i16 << 1) >> 1] << 16 >> 16;
    i18 = i15 >>> 2 & 255;
    i15 = (HEAP32[5278108 + (i18 << 2) >> 2] | 0) + (HEAP32[5277084 + (i16 << 2) >> 2] | 0) >> 16;
    i16 = (HEAPU8[i1] | 0) + 227 | 0;
    HEAP8[i7] = HEAP8[5280356 + ((HEAP16[5279132 + (i18 << 1) >> 1] << 16 >> 16) + i16 | 0) | 0] | 0;
    HEAP8[i7 + 1 | 0] = HEAP8[5280356 + (i15 + i16 | 0) | 0] | 0;
    HEAP8[i7 + 2 | 0] = HEAP8[5280356 + (i16 + i17 | 0) | 0] | 0;
  }
  i17 = (i2 | 0) != 0;
  if (i17) {
    i16 = (i12 + 131074 | 0) + (i13 * 3 & -1) | 0;
    i15 = i16 >>> 18 & 255;
    i18 = HEAP16[5276572 + (i15 << 1) >> 1] << 16 >> 16;
    i19 = i16 >>> 2 & 255;
    i16 = (HEAP32[5278108 + (i19 << 2) >> 2] | 0) + (HEAP32[5277084 + (i15 << 2) >> 2] | 0) >> 16;
    i15 = (HEAPU8[i2] | 0) + 227 | 0;
    HEAP8[i8] = HEAP8[5280356 + ((HEAP16[5279132 + (i19 << 1) >> 1] << 16 >> 16) + i15 | 0) | 0] | 0;
    HEAP8[i8 + 1 | 0] = HEAP8[5280356 + (i16 + i15 | 0) | 0] | 0;
    HEAP8[i8 + 2 | 0] = HEAP8[5280356 + (i15 + i18 | 0) | 0] | 0;
  }
  L2063 : do {
    if ((i11 | 0) < 1) {
      i20 = i13;
      i21 = i12;
    } else {
      i18 = i13;
      i15 = i12;
      i16 = 1;
      while (1) {
        i19 = (HEAPU8[i4 + i16 | 0] | 0) << 16 | (HEAPU8[i3 + i16 | 0] | 0);
        i22 = (HEAPU8[i6 + i16 | 0] | 0) << 16 | (HEAPU8[i5 + i16 | 0] | 0);
        i23 = (((i18 + 524296 | 0) + i15 | 0) + i19 | 0) + i22 | 0;
        i24 = (i23 + (i19 + i18 << 1) | 0) >>> 3;
        i25 = ((i22 + i15 << 1) + i23 | 0) >>> 3;
        if (i14) {
          i23 = i24 + i15 | 0;
          i26 = i25 + i19 | 0;
          i27 = i16 << 1;
          i28 = i27 - 1 | 0;
          i29 = i28 * 3 & -1;
          i30 = i23 >>> 17 & 255;
          i31 = HEAP16[5276572 + (i30 << 1) >> 1] << 16 >> 16;
          i32 = i23 >>> 1 & 255;
          i23 = (HEAP32[5278108 + (i32 << 2) >> 2] | 0) + (HEAP32[5277084 + (i30 << 2) >> 2] | 0) >> 16;
          i30 = (HEAPU8[i1 + i28 | 0] | 0) + 227 | 0;
          HEAP8[i7 + i29 | 0] = HEAP8[5280356 + ((HEAP16[5279132 + (i32 << 1) >> 1] << 16 >> 16) + i30 | 0) | 0] | 0;
          HEAP8[i7 + (i29 + 1 | 0) | 0] = HEAP8[5280356 + (i23 + i30 | 0) | 0] | 0;
          HEAP8[i7 + (i29 + 2 | 0) | 0] = HEAP8[5280356 + (i30 + i31 | 0) | 0] | 0;
          i31 = i16 * 6 & -1;
          i30 = i26 >>> 17 & 255;
          i29 = HEAP16[5276572 + (i30 << 1) >> 1] << 16 >> 16;
          i23 = i26 >>> 1 & 255;
          i26 = (HEAP32[5278108 + (i23 << 2) >> 2] | 0) + (HEAP32[5277084 + (i30 << 2) >> 2] | 0) >> 16;
          i30 = (HEAPU8[i1 + i27 | 0] | 0) + 227 | 0;
          HEAP8[i7 + i31 | 0] = HEAP8[5280356 + ((HEAP16[5279132 + (i23 << 1) >> 1] << 16 >> 16) + i30 | 0) | 0] | 0;
          HEAP8[i7 + (i31 | 1) | 0] = HEAP8[5280356 + (i26 + i30 | 0) | 0] | 0;
          HEAP8[i7 + (i31 + 2 | 0) | 0] = HEAP8[5280356 + (i30 + i29 | 0) | 0] | 0;
        }
        if (i17) {
          i29 = i25 + i18 | 0;
          i25 = i24 + i22 | 0;
          i24 = i16 << 1;
          i30 = i24 - 1 | 0;
          i31 = i30 * 3 & -1;
          i26 = i29 >>> 17 & 255;
          i23 = HEAP16[5276572 + (i26 << 1) >> 1] << 16 >> 16;
          i27 = i29 >>> 1 & 255;
          i29 = (HEAP32[5278108 + (i27 << 2) >> 2] | 0) + (HEAP32[5277084 + (i26 << 2) >> 2] | 0) >> 16;
          i26 = (HEAPU8[i2 + i30 | 0] | 0) + 227 | 0;
          HEAP8[i8 + i31 | 0] = HEAP8[5280356 + ((HEAP16[5279132 + (i27 << 1) >> 1] << 16 >> 16) + i26 | 0) | 0] | 0;
          HEAP8[i8 + (i31 + 1 | 0) | 0] = HEAP8[5280356 + (i29 + i26 | 0) | 0] | 0;
          HEAP8[i8 + (i31 + 2 | 0) | 0] = HEAP8[5280356 + (i26 + i23 | 0) | 0] | 0;
          i23 = i16 * 6 & -1;
          i26 = i25 >>> 17 & 255;
          i31 = HEAP16[5276572 + (i26 << 1) >> 1] << 16 >> 16;
          i29 = i25 >>> 1 & 255;
          i25 = (HEAP32[5278108 + (i29 << 2) >> 2] | 0) + (HEAP32[5277084 + (i26 << 2) >> 2] | 0) >> 16;
          i26 = (HEAPU8[i2 + i24 | 0] | 0) + 227 | 0;
          HEAP8[i8 + i23 | 0] = HEAP8[5280356 + ((HEAP16[5279132 + (i29 << 1) >> 1] << 16 >> 16) + i26 | 0) | 0] | 0;
          HEAP8[i8 + (i23 | 1) | 0] = HEAP8[5280356 + (i25 + i26 | 0) | 0] | 0;
          HEAP8[i8 + (i23 + 2 | 0) | 0] = HEAP8[5280356 + (i26 + i31 | 0) | 0] | 0;
        }
        i31 = i16 + 1 | 0;
        if ((i31 | 0) > (i11 | 0)) {
          i20 = i22;
          i21 = i19;
          break L2063;
        } else {
          i18 = i22;
          i15 = i19;
          i16 = i31;
        }
      }
    }
  } while (0);
  if ((i9 & 1 | 0) != 0) {
    return;
  }
  if (i14) {
    i14 = (i20 + 131074 | 0) + (i21 * 3 & -1) | 0;
    i9 = i10 * 3 & -1;
    i11 = i14 >>> 18 & 255;
    i5 = HEAP16[5276572 + (i11 << 1) >> 1] << 16 >> 16;
    i6 = i14 >>> 2 & 255;
    i14 = (HEAP32[5278108 + (i6 << 2) >> 2] | 0) + (HEAP32[5277084 + (i11 << 2) >> 2] | 0) >> 16;
    i11 = (HEAPU8[i1 + i10 | 0] | 0) + 227 | 0;
    HEAP8[i7 + i9 | 0] = HEAP8[5280356 + ((HEAP16[5279132 + (i6 << 1) >> 1] << 16 >> 16) + i11 | 0) | 0] | 0;
    HEAP8[i7 + (i9 + 1 | 0) | 0] = HEAP8[5280356 + (i14 + i11 | 0) | 0] | 0;
    HEAP8[i7 + (i9 + 2 | 0) | 0] = HEAP8[5280356 + (i11 + i5 | 0) | 0] | 0;
  }
  if (!i17) {
    return;
  }
  i17 = (i21 + 131074 | 0) + (i20 * 3 & -1) | 0;
  i20 = i10 * 3 & -1;
  i21 = i17 >>> 18 & 255;
  i5 = HEAP16[5276572 + (i21 << 1) >> 1] << 16 >> 16;
  i11 = i17 >>> 2 & 255;
  i17 = (HEAP32[5278108 + (i11 << 2) >> 2] | 0) + (HEAP32[5277084 + (i21 << 2) >> 2] | 0) >> 16;
  i21 = (HEAPU8[i2 + i10 | 0] | 0) + 227 | 0;
  HEAP8[i8 + i20 | 0] = HEAP8[5280356 + ((HEAP16[5279132 + (i11 << 1) >> 1] << 16 >> 16) + i21 | 0) | 0] | 0;
  HEAP8[i8 + (i20 + 1 | 0) | 0] = HEAP8[5280356 + (i17 + i21 | 0) | 0] | 0;
  HEAP8[i8 + (i20 + 2 | 0) | 0] = HEAP8[5280356 + (i21 + i5 | 0) | 0] | 0;
  return;
}
function _UpsampleBgraLinePair(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  i7 = i7 | 0;
  i8 = i8 | 0;
  i9 = i9 | 0;
  var i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
  i10 = i9 - 1 | 0;
  i11 = i10 >> 1;
  i12 = (HEAPU8[i4] | 0) << 16 | (HEAPU8[i3] | 0);
  i13 = (HEAPU8[i6] | 0) << 16 | (HEAPU8[i5] | 0);
  i14 = (i1 | 0) != 0;
  if (i14) {
    i15 = ((i12 * 3 & -1) + 131074 | 0) + i13 | 0;
    i16 = i15 >>> 18 & 255;
    i17 = HEAP16[5276572 + (i16 << 1) >> 1] << 16 >> 16;
    i18 = i15 >>> 2 & 255;
    i15 = (HEAP32[5278108 + (i18 << 2) >> 2] | 0) + (HEAP32[5277084 + (i16 << 2) >> 2] | 0) >> 16;
    i16 = (HEAPU8[i1] | 0) + 227 | 0;
    HEAP8[i7] = HEAP8[5280356 + ((HEAP16[5279132 + (i18 << 1) >> 1] << 16 >> 16) + i16 | 0) | 0] | 0;
    HEAP8[i7 + 1 | 0] = HEAP8[5280356 + (i15 + i16 | 0) | 0] | 0;
    HEAP8[i7 + 2 | 0] = HEAP8[5280356 + (i17 + i16 | 0) | 0] | 0;
    HEAP8[i7 + 3 | 0] = -1;
  }
  i16 = (i2 | 0) != 0;
  if (i16) {
    i17 = (i12 + 131074 | 0) + (i13 * 3 & -1) | 0;
    i15 = i17 >>> 18 & 255;
    i18 = HEAP16[5276572 + (i15 << 1) >> 1] << 16 >> 16;
    i19 = i17 >>> 2 & 255;
    i17 = (HEAP32[5278108 + (i19 << 2) >> 2] | 0) + (HEAP32[5277084 + (i15 << 2) >> 2] | 0) >> 16;
    i15 = (HEAPU8[i2] | 0) + 227 | 0;
    HEAP8[i8] = HEAP8[5280356 + ((HEAP16[5279132 + (i19 << 1) >> 1] << 16 >> 16) + i15 | 0) | 0] | 0;
    HEAP8[i8 + 1 | 0] = HEAP8[5280356 + (i17 + i15 | 0) | 0] | 0;
    HEAP8[i8 + 2 | 0] = HEAP8[5280356 + (i18 + i15 | 0) | 0] | 0;
    HEAP8[i8 + 3 | 0] = -1;
  }
  L2090 : do {
    if ((i11 | 0) < 1) {
      i20 = i13;
      i21 = i12;
    } else {
      i15 = i13;
      i18 = i12;
      i17 = 1;
      while (1) {
        i19 = (HEAPU8[i4 + i17 | 0] | 0) << 16 | (HEAPU8[i3 + i17 | 0] | 0);
        i22 = (HEAPU8[i6 + i17 | 0] | 0) << 16 | (HEAPU8[i5 + i17 | 0] | 0);
        i23 = (((i15 + 524296 | 0) + i18 | 0) + i19 | 0) + i22 | 0;
        i24 = (i23 + (i19 + i15 << 1) | 0) >>> 3;
        i25 = ((i22 + i18 << 1) + i23 | 0) >>> 3;
        if (i14) {
          i23 = i24 + i18 | 0;
          i26 = i25 + i19 | 0;
          i27 = i17 << 1;
          i28 = i27 - 1 | 0;
          i29 = i28 << 2;
          i30 = i23 >>> 17 & 255;
          i31 = HEAP16[5276572 + (i30 << 1) >> 1] << 16 >> 16;
          i32 = i23 >>> 1 & 255;
          i23 = (HEAP32[5278108 + (i32 << 2) >> 2] | 0) + (HEAP32[5277084 + (i30 << 2) >> 2] | 0) >> 16;
          i30 = (HEAPU8[i1 + i28 | 0] | 0) + 227 | 0;
          HEAP8[i7 + i29 | 0] = HEAP8[5280356 + ((HEAP16[5279132 + (i32 << 1) >> 1] << 16 >> 16) + i30 | 0) | 0] | 0;
          HEAP8[i7 + (i29 | 1) | 0] = HEAP8[5280356 + (i23 + i30 | 0) | 0] | 0;
          HEAP8[i7 + (i29 | 2) | 0] = HEAP8[5280356 + (i31 + i30 | 0) | 0] | 0;
          HEAP8[i7 + (i29 | 3) | 0] = -1;
          i29 = i17 << 3;
          i30 = i26 >>> 17 & 255;
          i31 = HEAP16[5276572 + (i30 << 1) >> 1] << 16 >> 16;
          i23 = i26 >>> 1 & 255;
          i26 = (HEAP32[5278108 + (i23 << 2) >> 2] | 0) + (HEAP32[5277084 + (i30 << 2) >> 2] | 0) >> 16;
          i30 = (HEAPU8[i1 + i27 | 0] | 0) + 227 | 0;
          HEAP8[i7 + i29 | 0] = HEAP8[5280356 + ((HEAP16[5279132 + (i23 << 1) >> 1] << 16 >> 16) + i30 | 0) | 0] | 0;
          HEAP8[i7 + (i29 | 1) | 0] = HEAP8[5280356 + (i26 + i30 | 0) | 0] | 0;
          HEAP8[i7 + (i29 | 2) | 0] = HEAP8[5280356 + (i31 + i30 | 0) | 0] | 0;
          HEAP8[i7 + (i29 | 3) | 0] = -1;
        }
        if (i16) {
          i29 = i25 + i15 | 0;
          i25 = i24 + i22 | 0;
          i24 = i17 << 1;
          i30 = i24 - 1 | 0;
          i31 = i30 << 2;
          i26 = i29 >>> 17 & 255;
          i23 = HEAP16[5276572 + (i26 << 1) >> 1] << 16 >> 16;
          i27 = i29 >>> 1 & 255;
          i29 = (HEAP32[5278108 + (i27 << 2) >> 2] | 0) + (HEAP32[5277084 + (i26 << 2) >> 2] | 0) >> 16;
          i26 = (HEAPU8[i2 + i30 | 0] | 0) + 227 | 0;
          HEAP8[i8 + i31 | 0] = HEAP8[5280356 + ((HEAP16[5279132 + (i27 << 1) >> 1] << 16 >> 16) + i26 | 0) | 0] | 0;
          HEAP8[i8 + (i31 | 1) | 0] = HEAP8[5280356 + (i29 + i26 | 0) | 0] | 0;
          HEAP8[i8 + (i31 | 2) | 0] = HEAP8[5280356 + (i23 + i26 | 0) | 0] | 0;
          HEAP8[i8 + (i31 | 3) | 0] = -1;
          i31 = i17 << 3;
          i26 = i25 >>> 17 & 255;
          i23 = HEAP16[5276572 + (i26 << 1) >> 1] << 16 >> 16;
          i29 = i25 >>> 1 & 255;
          i25 = (HEAP32[5278108 + (i29 << 2) >> 2] | 0) + (HEAP32[5277084 + (i26 << 2) >> 2] | 0) >> 16;
          i26 = (HEAPU8[i2 + i24 | 0] | 0) + 227 | 0;
          HEAP8[i8 + i31 | 0] = HEAP8[5280356 + ((HEAP16[5279132 + (i29 << 1) >> 1] << 16 >> 16) + i26 | 0) | 0] | 0;
          HEAP8[i8 + (i31 | 1) | 0] = HEAP8[5280356 + (i25 + i26 | 0) | 0] | 0;
          HEAP8[i8 + (i31 | 2) | 0] = HEAP8[5280356 + (i23 + i26 | 0) | 0] | 0;
          HEAP8[i8 + (i31 | 3) | 0] = -1;
        }
        i31 = i17 + 1 | 0;
        if ((i31 | 0) > (i11 | 0)) {
          i20 = i22;
          i21 = i19;
          break L2090;
        } else {
          i15 = i22;
          i18 = i19;
          i17 = i31;
        }
      }
    }
  } while (0);
  if ((i9 & 1 | 0) != 0) {
    return;
  }
  if (i14) {
    i14 = (i20 + 131074 | 0) + (i21 * 3 & -1) | 0;
    i9 = i10 << 2;
    i11 = i14 >>> 18 & 255;
    i5 = HEAP16[5276572 + (i11 << 1) >> 1] << 16 >> 16;
    i6 = i14 >>> 2 & 255;
    i14 = (HEAP32[5278108 + (i6 << 2) >> 2] | 0) + (HEAP32[5277084 + (i11 << 2) >> 2] | 0) >> 16;
    i11 = (HEAPU8[i1 + i10 | 0] | 0) + 227 | 0;
    HEAP8[i7 + i9 | 0] = HEAP8[5280356 + ((HEAP16[5279132 + (i6 << 1) >> 1] << 16 >> 16) + i11 | 0) | 0] | 0;
    HEAP8[i7 + (i9 | 1) | 0] = HEAP8[5280356 + (i14 + i11 | 0) | 0] | 0;
    HEAP8[i7 + (i9 | 2) | 0] = HEAP8[5280356 + (i5 + i11 | 0) | 0] | 0;
    HEAP8[i7 + (i9 | 3) | 0] = -1;
  }
  if (!i16) {
    return;
  }
  i16 = (i21 + 131074 | 0) + (i20 * 3 & -1) | 0;
  i20 = i10 << 2;
  i21 = i16 >>> 18 & 255;
  i9 = HEAP16[5276572 + (i21 << 1) >> 1] << 16 >> 16;
  i7 = i16 >>> 2 & 255;
  i16 = (HEAP32[5278108 + (i7 << 2) >> 2] | 0) + (HEAP32[5277084 + (i21 << 2) >> 2] | 0) >> 16;
  i21 = (HEAPU8[i2 + i10 | 0] | 0) + 227 | 0;
  HEAP8[i8 + i20 | 0] = HEAP8[5280356 + ((HEAP16[5279132 + (i7 << 1) >> 1] << 16 >> 16) + i21 | 0) | 0] | 0;
  HEAP8[i8 + (i20 | 1) | 0] = HEAP8[5280356 + (i16 + i21 | 0) | 0] | 0;
  HEAP8[i8 + (i20 | 2) | 0] = HEAP8[5280356 + (i9 + i21 | 0) | 0] | 0;
  HEAP8[i8 + (i20 | 3) | 0] = -1;
  return;
}
function _UpsampleArgbLinePair(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  i7 = i7 | 0;
  i8 = i8 | 0;
  i9 = i9 | 0;
  var i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
  i10 = i9 - 1 | 0;
  i11 = i10 >> 1;
  i12 = (HEAPU8[i4] | 0) << 16 | (HEAPU8[i3] | 0);
  i13 = (HEAPU8[i6] | 0) << 16 | (HEAPU8[i5] | 0);
  i14 = (i1 | 0) != 0;
  if (i14) {
    i15 = ((i12 * 3 & -1) + 131074 | 0) + i13 | 0;
    i16 = HEAP8[i1] | 0;
    HEAP8[i7] = -1;
    i17 = i15 >>> 18 & 255;
    i18 = i15 >>> 2 & 255;
    i15 = (HEAP32[5278108 + (i18 << 2) >> 2] | 0) + (HEAP32[5277084 + (i17 << 2) >> 2] | 0) >> 16;
    i19 = HEAP16[5279132 + (i18 << 1) >> 1] << 16 >> 16;
    i18 = (i16 & 255) + 227 | 0;
    HEAP8[i7 + 1 | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i17 << 1) >> 1] << 16 >> 16) + i18 | 0) | 0] | 0;
    HEAP8[i7 + 2 | 0] = HEAP8[5280356 + (i15 + i18 | 0) | 0] | 0;
    HEAP8[i7 + 3 | 0] = HEAP8[5280356 + (i19 + i18 | 0) | 0] | 0;
  }
  i18 = (i2 | 0) != 0;
  if (i18) {
    i19 = (i12 + 131074 | 0) + (i13 * 3 & -1) | 0;
    i15 = HEAP8[i2] | 0;
    HEAP8[i8] = -1;
    i17 = i19 >>> 18 & 255;
    i16 = i19 >>> 2 & 255;
    i19 = (HEAP32[5278108 + (i16 << 2) >> 2] | 0) + (HEAP32[5277084 + (i17 << 2) >> 2] | 0) >> 16;
    i20 = HEAP16[5279132 + (i16 << 1) >> 1] << 16 >> 16;
    i16 = (i15 & 255) + 227 | 0;
    HEAP8[i8 + 1 | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i17 << 1) >> 1] << 16 >> 16) + i16 | 0) | 0] | 0;
    HEAP8[i8 + 2 | 0] = HEAP8[5280356 + (i19 + i16 | 0) | 0] | 0;
    HEAP8[i8 + 3 | 0] = HEAP8[5280356 + (i20 + i16 | 0) | 0] | 0;
  }
  L2117 : do {
    if ((i11 | 0) < 1) {
      i21 = i13;
      i22 = i12;
    } else {
      i16 = i13;
      i20 = i12;
      i19 = 1;
      while (1) {
        i17 = (HEAPU8[i4 + i19 | 0] | 0) << 16 | (HEAPU8[i3 + i19 | 0] | 0);
        i15 = (HEAPU8[i6 + i19 | 0] | 0) << 16 | (HEAPU8[i5 + i19 | 0] | 0);
        i23 = (((i16 + 524296 | 0) + i20 | 0) + i17 | 0) + i15 | 0;
        i24 = (i23 + (i17 + i16 << 1) | 0) >>> 3;
        i25 = ((i15 + i20 << 1) + i23 | 0) >>> 3;
        if (i14) {
          i23 = i24 + i20 | 0;
          i26 = i25 + i17 | 0;
          i27 = i19 << 1;
          i28 = i27 - 1 | 0;
          i29 = HEAP8[i1 + i28 | 0] | 0;
          i30 = i28 << 2;
          HEAP8[i7 + i30 | 0] = -1;
          i28 = i23 >>> 17 & 255;
          i31 = i23 >>> 1 & 255;
          i23 = (HEAP32[5278108 + (i31 << 2) >> 2] | 0) + (HEAP32[5277084 + (i28 << 2) >> 2] | 0) >> 16;
          i32 = HEAP16[5279132 + (i31 << 1) >> 1] << 16 >> 16;
          i31 = (i29 & 255) + 227 | 0;
          HEAP8[i7 + (i30 | 1) | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i28 << 1) >> 1] << 16 >> 16) + i31 | 0) | 0] | 0;
          HEAP8[i7 + (i30 | 2) | 0] = HEAP8[5280356 + (i23 + i31 | 0) | 0] | 0;
          HEAP8[i7 + (i30 | 3) | 0] = HEAP8[5280356 + (i32 + i31 | 0) | 0] | 0;
          i31 = HEAP8[i1 + i27 | 0] | 0;
          i27 = i19 << 3;
          HEAP8[i7 + i27 | 0] = -1;
          i32 = i26 >>> 17 & 255;
          i30 = i26 >>> 1 & 255;
          i26 = (HEAP32[5278108 + (i30 << 2) >> 2] | 0) + (HEAP32[5277084 + (i32 << 2) >> 2] | 0) >> 16;
          i23 = HEAP16[5279132 + (i30 << 1) >> 1] << 16 >> 16;
          i30 = (i31 & 255) + 227 | 0;
          HEAP8[i7 + (i27 | 1) | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i32 << 1) >> 1] << 16 >> 16) + i30 | 0) | 0] | 0;
          HEAP8[i7 + (i27 | 2) | 0] = HEAP8[5280356 + (i26 + i30 | 0) | 0] | 0;
          HEAP8[i7 + (i27 | 3) | 0] = HEAP8[5280356 + (i23 + i30 | 0) | 0] | 0;
        }
        if (i18) {
          i30 = i25 + i16 | 0;
          i25 = i24 + i15 | 0;
          i24 = i19 << 1;
          i23 = i24 - 1 | 0;
          i27 = HEAP8[i2 + i23 | 0] | 0;
          i26 = i23 << 2;
          HEAP8[i8 + i26 | 0] = -1;
          i23 = i30 >>> 17 & 255;
          i32 = i30 >>> 1 & 255;
          i30 = (HEAP32[5278108 + (i32 << 2) >> 2] | 0) + (HEAP32[5277084 + (i23 << 2) >> 2] | 0) >> 16;
          i31 = HEAP16[5279132 + (i32 << 1) >> 1] << 16 >> 16;
          i32 = (i27 & 255) + 227 | 0;
          HEAP8[i8 + (i26 | 1) | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i23 << 1) >> 1] << 16 >> 16) + i32 | 0) | 0] | 0;
          HEAP8[i8 + (i26 | 2) | 0] = HEAP8[5280356 + (i30 + i32 | 0) | 0] | 0;
          HEAP8[i8 + (i26 | 3) | 0] = HEAP8[5280356 + (i31 + i32 | 0) | 0] | 0;
          i32 = HEAP8[i2 + i24 | 0] | 0;
          i24 = i19 << 3;
          HEAP8[i8 + i24 | 0] = -1;
          i31 = i25 >>> 17 & 255;
          i26 = i25 >>> 1 & 255;
          i25 = (HEAP32[5278108 + (i26 << 2) >> 2] | 0) + (HEAP32[5277084 + (i31 << 2) >> 2] | 0) >> 16;
          i30 = HEAP16[5279132 + (i26 << 1) >> 1] << 16 >> 16;
          i26 = (i32 & 255) + 227 | 0;
          HEAP8[i8 + (i24 | 1) | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i31 << 1) >> 1] << 16 >> 16) + i26 | 0) | 0] | 0;
          HEAP8[i8 + (i24 | 2) | 0] = HEAP8[5280356 + (i25 + i26 | 0) | 0] | 0;
          HEAP8[i8 + (i24 | 3) | 0] = HEAP8[5280356 + (i30 + i26 | 0) | 0] | 0;
        }
        i26 = i19 + 1 | 0;
        if ((i26 | 0) > (i11 | 0)) {
          i21 = i15;
          i22 = i17;
          break L2117;
        } else {
          i16 = i15;
          i20 = i17;
          i19 = i26;
        }
      }
    }
  } while (0);
  if ((i9 & 1 | 0) != 0) {
    return;
  }
  if (i14) {
    i14 = (i21 + 131074 | 0) + (i22 * 3 & -1) | 0;
    i9 = HEAP8[i1 + i10 | 0] | 0;
    i1 = i10 << 2;
    HEAP8[i7 + i1 | 0] = -1;
    i11 = i14 >>> 18 & 255;
    i5 = i14 >>> 2 & 255;
    i14 = (HEAP32[5278108 + (i5 << 2) >> 2] | 0) + (HEAP32[5277084 + (i11 << 2) >> 2] | 0) >> 16;
    i6 = HEAP16[5279132 + (i5 << 1) >> 1] << 16 >> 16;
    i5 = (i9 & 255) + 227 | 0;
    HEAP8[i7 + (i1 | 1) | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i11 << 1) >> 1] << 16 >> 16) + i5 | 0) | 0] | 0;
    HEAP8[i7 + (i1 | 2) | 0] = HEAP8[5280356 + (i14 + i5 | 0) | 0] | 0;
    HEAP8[i7 + (i1 | 3) | 0] = HEAP8[5280356 + (i6 + i5 | 0) | 0] | 0;
  }
  if (!i18) {
    return;
  }
  i18 = (i22 + 131074 | 0) + (i21 * 3 & -1) | 0;
  i21 = HEAP8[i2 + i10 | 0] | 0;
  i2 = i10 << 2;
  HEAP8[i8 + i2 | 0] = -1;
  i10 = i18 >>> 18 & 255;
  i22 = i18 >>> 2 & 255;
  i18 = (HEAP32[5278108 + (i22 << 2) >> 2] | 0) + (HEAP32[5277084 + (i10 << 2) >> 2] | 0) >> 16;
  i5 = HEAP16[5279132 + (i22 << 1) >> 1] << 16 >> 16;
  i22 = (i21 & 255) + 227 | 0;
  HEAP8[i8 + (i2 | 1) | 0] = HEAP8[5280356 + ((HEAP16[5276572 + (i10 << 1) >> 1] << 16 >> 16) + i22 | 0) | 0] | 0;
  HEAP8[i8 + (i2 | 2) | 0] = HEAP8[5280356 + (i18 + i22 | 0) | 0] | 0;
  HEAP8[i8 + (i2 | 3) | 0] = HEAP8[5280356 + (i5 + i22 | 0) | 0] | 0;
  return;
}
function _UpsampleRgba4444LinePair(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  i7 = i7 | 0;
  i8 = i8 | 0;
  i9 = i9 | 0;
  var i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
  i10 = i9 - 1 | 0;
  i11 = i10 >> 1;
  i12 = (HEAPU8[i4] | 0) << 16 | (HEAPU8[i3] | 0);
  i13 = (HEAPU8[i6] | 0) << 16 | (HEAPU8[i5] | 0);
  i14 = (i1 | 0) != 0;
  if (i14) {
    i15 = ((i12 * 3 & -1) + 131074 | 0) + i13 | 0;
    i16 = i15 >>> 18 & 255;
    i17 = i15 >>> 2 & 255;
    i15 = HEAP16[5279132 + (i17 << 1) >> 1] << 16 >> 16;
    i18 = (HEAPU8[i1] | 0) + 227 | 0;
    HEAP8[i7] = HEAP8[5279644 + (i18 + (HEAP16[5276572 + (i16 << 1) >> 1] << 16 >> 16) | 0) | 0] << 4 | HEAP8[5279644 + (((HEAP32[5278108 + (i17 << 2) >> 2] | 0) + (HEAP32[5277084 + (i16 << 2) >> 2] | 0) >> 16) + i18 | 0) | 0];
    HEAP8[i7 + 1 | 0] = HEAP8[5279644 + (i15 + i18 | 0) | 0] << 4 | 15;
  }
  i18 = (i2 | 0) != 0;
  if (i18) {
    i15 = (i12 + 131074 | 0) + (i13 * 3 & -1) | 0;
    i16 = i15 >>> 18 & 255;
    i17 = i15 >>> 2 & 255;
    i15 = HEAP16[5279132 + (i17 << 1) >> 1] << 16 >> 16;
    i19 = (HEAPU8[i2] | 0) + 227 | 0;
    HEAP8[i8] = HEAP8[5279644 + (i19 + (HEAP16[5276572 + (i16 << 1) >> 1] << 16 >> 16) | 0) | 0] << 4 | HEAP8[5279644 + (((HEAP32[5278108 + (i17 << 2) >> 2] | 0) + (HEAP32[5277084 + (i16 << 2) >> 2] | 0) >> 16) + i19 | 0) | 0];
    HEAP8[i8 + 1 | 0] = HEAP8[5279644 + (i15 + i19 | 0) | 0] << 4 | 15;
  }
  L2144 : do {
    if ((i11 | 0) < 1) {
      i20 = i13;
      i21 = i12;
    } else {
      i19 = i13;
      i15 = i12;
      i16 = 1;
      while (1) {
        i17 = (HEAPU8[i4 + i16 | 0] | 0) << 16 | (HEAPU8[i3 + i16 | 0] | 0);
        i22 = (HEAPU8[i6 + i16 | 0] | 0) << 16 | (HEAPU8[i5 + i16 | 0] | 0);
        i23 = (((i19 + 524296 | 0) + i15 | 0) + i17 | 0) + i22 | 0;
        i24 = (i23 + (i17 + i19 << 1) | 0) >>> 3;
        i25 = ((i22 + i15 << 1) + i23 | 0) >>> 3;
        if (i14) {
          i23 = i24 + i15 | 0;
          i26 = i25 + i17 | 0;
          i27 = i16 << 1;
          i28 = i27 - 1 | 0;
          i29 = i28 << 1;
          i30 = i23 >>> 17 & 255;
          i31 = i23 >>> 1 & 255;
          i23 = HEAP16[5279132 + (i31 << 1) >> 1] << 16 >> 16;
          i32 = (HEAPU8[i1 + i28 | 0] | 0) + 227 | 0;
          HEAP8[i7 + i29 | 0] = HEAP8[5279644 + (i32 + (HEAP16[5276572 + (i30 << 1) >> 1] << 16 >> 16) | 0) | 0] << 4 | HEAP8[5279644 + (((HEAP32[5278108 + (i31 << 2) >> 2] | 0) + (HEAP32[5277084 + (i30 << 2) >> 2] | 0) >> 16) + i32 | 0) | 0];
          HEAP8[i7 + (i29 | 1) | 0] = HEAP8[5279644 + (i23 + i32 | 0) | 0] << 4 | 15;
          i32 = i16 << 2;
          i23 = i26 >>> 17 & 255;
          i29 = i26 >>> 1 & 255;
          i26 = HEAP16[5279132 + (i29 << 1) >> 1] << 16 >> 16;
          i30 = (HEAPU8[i1 + i27 | 0] | 0) + 227 | 0;
          HEAP8[i7 + i32 | 0] = HEAP8[5279644 + (i30 + (HEAP16[5276572 + (i23 << 1) >> 1] << 16 >> 16) | 0) | 0] << 4 | HEAP8[5279644 + (((HEAP32[5278108 + (i29 << 2) >> 2] | 0) + (HEAP32[5277084 + (i23 << 2) >> 2] | 0) >> 16) + i30 | 0) | 0];
          HEAP8[i7 + (i32 | 1) | 0] = HEAP8[5279644 + (i26 + i30 | 0) | 0] << 4 | 15;
        }
        if (i18) {
          i30 = i25 + i19 | 0;
          i25 = i24 + i22 | 0;
          i24 = i16 << 1;
          i26 = i24 - 1 | 0;
          i32 = i26 << 1;
          i23 = i30 >>> 17 & 255;
          i29 = i30 >>> 1 & 255;
          i30 = HEAP16[5279132 + (i29 << 1) >> 1] << 16 >> 16;
          i27 = (HEAPU8[i2 + i26 | 0] | 0) + 227 | 0;
          HEAP8[i8 + i32 | 0] = HEAP8[5279644 + (i27 + (HEAP16[5276572 + (i23 << 1) >> 1] << 16 >> 16) | 0) | 0] << 4 | HEAP8[5279644 + (((HEAP32[5278108 + (i29 << 2) >> 2] | 0) + (HEAP32[5277084 + (i23 << 2) >> 2] | 0) >> 16) + i27 | 0) | 0];
          HEAP8[i8 + (i32 | 1) | 0] = HEAP8[5279644 + (i30 + i27 | 0) | 0] << 4 | 15;
          i27 = i16 << 2;
          i30 = i25 >>> 17 & 255;
          i32 = i25 >>> 1 & 255;
          i25 = HEAP16[5279132 + (i32 << 1) >> 1] << 16 >> 16;
          i23 = (HEAPU8[i2 + i24 | 0] | 0) + 227 | 0;
          HEAP8[i8 + i27 | 0] = HEAP8[5279644 + (i23 + (HEAP16[5276572 + (i30 << 1) >> 1] << 16 >> 16) | 0) | 0] << 4 | HEAP8[5279644 + (((HEAP32[5278108 + (i32 << 2) >> 2] | 0) + (HEAP32[5277084 + (i30 << 2) >> 2] | 0) >> 16) + i23 | 0) | 0];
          HEAP8[i8 + (i27 | 1) | 0] = HEAP8[5279644 + (i25 + i23 | 0) | 0] << 4 | 15;
        }
        i23 = i16 + 1 | 0;
        if ((i23 | 0) > (i11 | 0)) {
          i20 = i22;
          i21 = i17;
          break L2144;
        } else {
          i19 = i22;
          i15 = i17;
          i16 = i23;
        }
      }
    }
  } while (0);
  if ((i9 & 1 | 0) != 0) {
    return;
  }
  if (i14) {
    i14 = (i20 + 131074 | 0) + (i21 * 3 & -1) | 0;
    i9 = i10 << 1;
    i11 = i14 >>> 18 & 255;
    i5 = i14 >>> 2 & 255;
    i14 = HEAP16[5279132 + (i5 << 1) >> 1] << 16 >> 16;
    i6 = (HEAPU8[i1 + i10 | 0] | 0) + 227 | 0;
    HEAP8[i7 + i9 | 0] = HEAP8[5279644 + (i6 + (HEAP16[5276572 + (i11 << 1) >> 1] << 16 >> 16) | 0) | 0] << 4 | HEAP8[5279644 + (((HEAP32[5278108 + (i5 << 2) >> 2] | 0) + (HEAP32[5277084 + (i11 << 2) >> 2] | 0) >> 16) + i6 | 0) | 0];
    HEAP8[i7 + (i9 | 1) | 0] = HEAP8[5279644 + (i14 + i6 | 0) | 0] << 4 | 15;
  }
  if (!i18) {
    return;
  }
  i18 = (i21 + 131074 | 0) + (i20 * 3 & -1) | 0;
  i20 = i10 << 1;
  i21 = i18 >>> 18 & 255;
  i6 = i18 >>> 2 & 255;
  i18 = HEAP16[5279132 + (i6 << 1) >> 1] << 16 >> 16;
  i14 = (HEAPU8[i2 + i10 | 0] | 0) + 227 | 0;
  HEAP8[i8 + i20 | 0] = HEAP8[5279644 + (i14 + (HEAP16[5276572 + (i21 << 1) >> 1] << 16 >> 16) | 0) | 0] << 4 | HEAP8[5279644 + (((HEAP32[5278108 + (i6 << 2) >> 2] | 0) + (HEAP32[5277084 + (i21 << 2) >> 2] | 0) >> 16) + i14 | 0) | 0];
  HEAP8[i8 + (i20 | 1) | 0] = HEAP8[5279644 + (i18 + i14 | 0) | 0] << 4 | 15;
  return;
}
function _UpsampleRgb565LinePair(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  i7 = i7 | 0;
  i8 = i8 | 0;
  i9 = i9 | 0;
  var i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
  i10 = i9 - 1 | 0;
  i11 = i10 >> 1;
  i12 = (HEAPU8[i4] | 0) << 16 | (HEAPU8[i3] | 0);
  i13 = (HEAPU8[i6] | 0) << 16 | (HEAPU8[i5] | 0);
  i14 = (i1 | 0) != 0;
  if (i14) {
    i15 = ((i12 * 3 & -1) + 131074 | 0) + i13 | 0;
    i16 = i15 >>> 18 & 255;
    i17 = i15 >>> 2 & 255;
    i15 = HEAP16[5279132 + (i17 << 1) >> 1] << 16 >> 16;
    i18 = (HEAPU8[i1] | 0) + 227 | 0;
    i19 = HEAP8[5280356 + (((HEAP32[5278108 + (i17 << 2) >> 2] | 0) + (HEAP32[5277084 + (i16 << 2) >> 2] | 0) >> 16) + i18 | 0) | 0] | 0;
    HEAP8[i7] = (i19 & 255) >>> 5 | HEAP8[5280356 + (i18 + (HEAP16[5276572 + (i16 << 1) >> 1] << 16 >> 16) | 0) | 0] & -8;
    HEAP8[i7 + 1 | 0] = i19 << 3 & -32 | (HEAPU8[5280356 + (i15 + i18 | 0) | 0] | 0) >>> 3;
  }
  i18 = (i2 | 0) != 0;
  if (i18) {
    i15 = (i12 + 131074 | 0) + (i13 * 3 & -1) | 0;
    i19 = i15 >>> 18 & 255;
    i16 = i15 >>> 2 & 255;
    i15 = HEAP16[5279132 + (i16 << 1) >> 1] << 16 >> 16;
    i17 = (HEAPU8[i2] | 0) + 227 | 0;
    i20 = HEAP8[5280356 + (((HEAP32[5278108 + (i16 << 2) >> 2] | 0) + (HEAP32[5277084 + (i19 << 2) >> 2] | 0) >> 16) + i17 | 0) | 0] | 0;
    HEAP8[i8] = (i20 & 255) >>> 5 | HEAP8[5280356 + (i17 + (HEAP16[5276572 + (i19 << 1) >> 1] << 16 >> 16) | 0) | 0] & -8;
    HEAP8[i8 + 1 | 0] = i20 << 3 & -32 | (HEAPU8[5280356 + (i15 + i17 | 0) | 0] | 0) >>> 3;
  }
  L2171 : do {
    if ((i11 | 0) < 1) {
      i21 = i13;
      i22 = i12;
    } else {
      i17 = i13;
      i15 = i12;
      i20 = 1;
      while (1) {
        i19 = (HEAPU8[i4 + i20 | 0] | 0) << 16 | (HEAPU8[i3 + i20 | 0] | 0);
        i16 = (HEAPU8[i6 + i20 | 0] | 0) << 16 | (HEAPU8[i5 + i20 | 0] | 0);
        i23 = (((i17 + 524296 | 0) + i15 | 0) + i19 | 0) + i16 | 0;
        i24 = (i23 + (i19 + i17 << 1) | 0) >>> 3;
        i25 = ((i16 + i15 << 1) + i23 | 0) >>> 3;
        if (i14) {
          i23 = i24 + i15 | 0;
          i26 = i25 + i19 | 0;
          i27 = i20 << 1;
          i28 = i27 - 1 | 0;
          i29 = i28 << 1;
          i30 = i23 >>> 17 & 255;
          i31 = i23 >>> 1 & 255;
          i23 = HEAP16[5279132 + (i31 << 1) >> 1] << 16 >> 16;
          i32 = (HEAPU8[i1 + i28 | 0] | 0) + 227 | 0;
          i28 = HEAP8[5280356 + (((HEAP32[5278108 + (i31 << 2) >> 2] | 0) + (HEAP32[5277084 + (i30 << 2) >> 2] | 0) >> 16) + i32 | 0) | 0] | 0;
          HEAP8[i7 + i29 | 0] = (i28 & 255) >>> 5 | HEAP8[5280356 + (i32 + (HEAP16[5276572 + (i30 << 1) >> 1] << 16 >> 16) | 0) | 0] & -8;
          HEAP8[i7 + (i29 | 1) | 0] = i28 << 3 & -32 | (HEAPU8[5280356 + (i23 + i32 | 0) | 0] | 0) >>> 3;
          i32 = i20 << 2;
          i23 = i26 >>> 17 & 255;
          i28 = i26 >>> 1 & 255;
          i26 = HEAP16[5279132 + (i28 << 1) >> 1] << 16 >> 16;
          i29 = (HEAPU8[i1 + i27 | 0] | 0) + 227 | 0;
          i27 = HEAP8[5280356 + (((HEAP32[5278108 + (i28 << 2) >> 2] | 0) + (HEAP32[5277084 + (i23 << 2) >> 2] | 0) >> 16) + i29 | 0) | 0] | 0;
          HEAP8[i7 + i32 | 0] = (i27 & 255) >>> 5 | HEAP8[5280356 + (i29 + (HEAP16[5276572 + (i23 << 1) >> 1] << 16 >> 16) | 0) | 0] & -8;
          HEAP8[i7 + (i32 | 1) | 0] = i27 << 3 & -32 | (HEAPU8[5280356 + (i26 + i29 | 0) | 0] | 0) >>> 3;
        }
        if (i18) {
          i29 = i25 + i17 | 0;
          i25 = i24 + i16 | 0;
          i24 = i20 << 1;
          i26 = i24 - 1 | 0;
          i27 = i26 << 1;
          i32 = i29 >>> 17 & 255;
          i23 = i29 >>> 1 & 255;
          i29 = HEAP16[5279132 + (i23 << 1) >> 1] << 16 >> 16;
          i28 = (HEAPU8[i2 + i26 | 0] | 0) + 227 | 0;
          i26 = HEAP8[5280356 + (((HEAP32[5278108 + (i23 << 2) >> 2] | 0) + (HEAP32[5277084 + (i32 << 2) >> 2] | 0) >> 16) + i28 | 0) | 0] | 0;
          HEAP8[i8 + i27 | 0] = (i26 & 255) >>> 5 | HEAP8[5280356 + (i28 + (HEAP16[5276572 + (i32 << 1) >> 1] << 16 >> 16) | 0) | 0] & -8;
          HEAP8[i8 + (i27 | 1) | 0] = i26 << 3 & -32 | (HEAPU8[5280356 + (i29 + i28 | 0) | 0] | 0) >>> 3;
          i28 = i20 << 2;
          i29 = i25 >>> 17 & 255;
          i26 = i25 >>> 1 & 255;
          i25 = HEAP16[5279132 + (i26 << 1) >> 1] << 16 >> 16;
          i27 = (HEAPU8[i2 + i24 | 0] | 0) + 227 | 0;
          i24 = HEAP8[5280356 + (((HEAP32[5278108 + (i26 << 2) >> 2] | 0) + (HEAP32[5277084 + (i29 << 2) >> 2] | 0) >> 16) + i27 | 0) | 0] | 0;
          HEAP8[i8 + i28 | 0] = (i24 & 255) >>> 5 | HEAP8[5280356 + (i27 + (HEAP16[5276572 + (i29 << 1) >> 1] << 16 >> 16) | 0) | 0] & -8;
          HEAP8[i8 + (i28 | 1) | 0] = i24 << 3 & -32 | (HEAPU8[5280356 + (i25 + i27 | 0) | 0] | 0) >>> 3;
        }
        i27 = i20 + 1 | 0;
        if ((i27 | 0) > (i11 | 0)) {
          i21 = i16;
          i22 = i19;
          break L2171;
        } else {
          i17 = i16;
          i15 = i19;
          i20 = i27;
        }
      }
    }
  } while (0);
  if ((i9 & 1 | 0) != 0) {
    return;
  }
  if (i14) {
    i14 = (i21 + 131074 | 0) + (i22 * 3 & -1) | 0;
    i9 = i10 << 1;
    i11 = i14 >>> 18 & 255;
    i5 = i14 >>> 2 & 255;
    i14 = HEAP16[5279132 + (i5 << 1) >> 1] << 16 >> 16;
    i6 = (HEAPU8[i1 + i10 | 0] | 0) + 227 | 0;
    i1 = HEAP8[5280356 + (((HEAP32[5278108 + (i5 << 2) >> 2] | 0) + (HEAP32[5277084 + (i11 << 2) >> 2] | 0) >> 16) + i6 | 0) | 0] | 0;
    HEAP8[i7 + i9 | 0] = (i1 & 255) >>> 5 | HEAP8[5280356 + (i6 + (HEAP16[5276572 + (i11 << 1) >> 1] << 16 >> 16) | 0) | 0] & -8;
    HEAP8[i7 + (i9 | 1) | 0] = i1 << 3 & -32 | (HEAPU8[5280356 + (i14 + i6 | 0) | 0] | 0) >>> 3;
  }
  if (!i18) {
    return;
  }
  i18 = (i22 + 131074 | 0) + (i21 * 3 & -1) | 0;
  i21 = i10 << 1;
  i22 = i18 >>> 18 & 255;
  i6 = i18 >>> 2 & 255;
  i18 = HEAP16[5279132 + (i6 << 1) >> 1] << 16 >> 16;
  i14 = (HEAPU8[i2 + i10 | 0] | 0) + 227 | 0;
  i10 = HEAP8[5280356 + (((HEAP32[5278108 + (i6 << 2) >> 2] | 0) + (HEAP32[5277084 + (i22 << 2) >> 2] | 0) >> 16) + i14 | 0) | 0] | 0;
  HEAP8[i8 + i21 | 0] = (i10 & 255) >>> 5 | HEAP8[5280356 + (i14 + (HEAP16[5276572 + (i22 << 1) >> 1] << 16 >> 16) | 0) | 0] & -8;
  HEAP8[i8 + (i21 | 1) | 0] = i10 << 3 & -32 | (HEAPU8[5280356 + (i18 + i14 | 0) | 0] | 0) >>> 3;
  return;
}
function _DC4(i1) {
  i1 = i1 | 0;
  var i2 = 0;
  i2 = (((HEAPU8[i1 - 29 | 0] | 0) + (((HEAPU8[i1 - 30 | 0] | 0) + (((HEAPU8[i1 - 31 | 0] | 0) + (((HEAPU8[i1 - 32 | 0] | 0) + 4 | 0) + (HEAPU8[i1 - 1 | 0] | 0) | 0) | 0) + (HEAPU8[i1 + 31 | 0] | 0) | 0) | 0) + (HEAPU8[i1 + 63 | 0] | 0) | 0) | 0) + (HEAPU8[i1 + 95 | 0] | 0) | 0) >>> 3 & 255;
  _memset(i1 | 0, i2 | 0, 4);
  _memset(i1 + 32 | 0, i2 | 0, 4);
  _memset(i1 + 64 | 0, i2 | 0, 4);
  _memset(i1 + 96 | 0, i2 | 0, 4);
  return;
}
function _TM4(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
  i2 = (HEAPU8[i1 - 33 | 0] | 0) ^ 255;
  i3 = (HEAPU8[i1 - 1 | 0] | 0) + i2 | 0;
  i4 = HEAPU8[i1 - 32 | 0] | 0;
  HEAP8[i1] = HEAP8[5260868 + (i3 + i4 | 0) | 0] | 0;
  i5 = HEAPU8[i1 - 31 | 0] | 0;
  HEAP8[i1 + 1 | 0] = HEAP8[5260868 + (i3 + i5 | 0) | 0] | 0;
  i6 = HEAPU8[i1 - 30 | 0] | 0;
  HEAP8[i1 + 2 | 0] = HEAP8[5260868 + (i3 + i6 | 0) | 0] | 0;
  i7 = HEAPU8[i1 - 29 | 0] | 0;
  HEAP8[i1 + 3 | 0] = HEAP8[5260868 + (i3 + i7 | 0) | 0] | 0;
  i3 = (HEAPU8[i1 + 31 | 0] | 0) + i2 | 0;
  HEAP8[i1 + 32 | 0] = HEAP8[5260868 + (i3 + i4 | 0) | 0] | 0;
  HEAP8[i1 + 33 | 0] = HEAP8[5260868 + (i3 + i5 | 0) | 0] | 0;
  HEAP8[i1 + 34 | 0] = HEAP8[5260868 + (i3 + i6 | 0) | 0] | 0;
  HEAP8[i1 + 35 | 0] = HEAP8[5260868 + (i3 + i7 | 0) | 0] | 0;
  i3 = (HEAPU8[i1 + 63 | 0] | 0) + i2 | 0;
  HEAP8[i1 + 64 | 0] = HEAP8[5260868 + (i3 + i4 | 0) | 0] | 0;
  HEAP8[i1 + 65 | 0] = HEAP8[5260868 + (i3 + i5 | 0) | 0] | 0;
  HEAP8[i1 + 66 | 0] = HEAP8[5260868 + (i3 + i6 | 0) | 0] | 0;
  HEAP8[i1 + 67 | 0] = HEAP8[5260868 + (i3 + i7 | 0) | 0] | 0;
  i3 = (HEAPU8[i1 + 95 | 0] | 0) + i2 | 0;
  HEAP8[i1 + 96 | 0] = HEAP8[5260868 + (i3 + i4 | 0) | 0] | 0;
  HEAP8[i1 + 97 | 0] = HEAP8[5260868 + (i3 + i5 | 0) | 0] | 0;
  HEAP8[i1 + 98 | 0] = HEAP8[5260868 + (i3 + i6 | 0) | 0] | 0;
  HEAP8[i1 + 99 | 0] = HEAP8[5260868 + (i3 + i7 | 0) | 0] | 0;
  return;
}
function _VE4(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
  i2 = HEAPU8[i1 - 32 | 0] | 0;
  i3 = HEAPU8[i1 - 31 | 0] | 0;
  i4 = ((((HEAPU8[i1 - 33 | 0] | 0) + 2 | 0) + (i2 << 1) | 0) + i3 | 0) >>> 2 & 255;
  i5 = HEAPU8[i1 - 30 | 0] | 0;
  i6 = (((i2 + 2 | 0) + (i3 << 1) | 0) + i5 | 0) >>> 2 & 255;
  i2 = HEAPU8[i1 - 29 | 0] | 0;
  i7 = (((i3 + 2 | 0) + (i5 << 1) | 0) + i2 | 0) >>> 2 & 255;
  i3 = (((i5 + 2 | 0) + (i2 << 1) | 0) + (HEAPU8[i1 - 28 | 0] | 0) | 0) >>> 2 & 255;
  HEAP8[i1] = i4;
  HEAP8[i1 + 1 | 0] = i6;
  HEAP8[i1 + 2 | 0] = i7;
  HEAP8[i1 + 3 | 0] = i3;
  HEAP8[i1 + 32 | 0] = i4;
  HEAP8[i1 + 33 | 0] = i6;
  HEAP8[i1 + 34 | 0] = i7;
  HEAP8[i1 + 35 | 0] = i3;
  HEAP8[i1 + 64 | 0] = i4;
  HEAP8[i1 + 65 | 0] = i6;
  HEAP8[i1 + 66 | 0] = i7;
  HEAP8[i1 + 67 | 0] = i3;
  HEAP8[i1 + 96 | 0] = i4;
  HEAP8[i1 + 97 | 0] = i6;
  HEAP8[i1 + 98 | 0] = i7;
  HEAP8[i1 + 99 | 0] = i3;
  return;
}
function _HE4(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
  i2 = HEAPU8[i1 - 1 | 0] | 0;
  i3 = HEAPU8[i1 + 31 | 0] | 0;
  i4 = HEAPU8[i1 + 63 | 0] | 0;
  i5 = HEAPU8[i1 + 95 | 0] | 0;
  HEAP32[i1 >> 2] = Math_imul(((((HEAPU8[i1 - 33 | 0] | 0) + 2 | 0) + (i2 << 1) | 0) + i3 | 0) >>> 2, 16843009);
  HEAP32[i1 + 32 >> 2] = Math_imul((((i2 + 2 | 0) + (i3 << 1) | 0) + i4 | 0) >>> 2, 16843009);
  HEAP32[i1 + 64 >> 2] = Math_imul((((i3 + 2 | 0) + (i4 << 1) | 0) + i5 | 0) >>> 2, 16843009);
  HEAP32[i1 + 96 >> 2] = Math_imul((((i4 + 2 | 0) + i5 | 0) + (i5 << 1) | 0) >>> 2, 16843009);
  return;
}
function _RD4(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
  i2 = HEAPU8[i1 - 1 | 0] | 0;
  i3 = HEAPU8[i1 + 31 | 0] | 0;
  i4 = HEAPU8[i1 + 63 | 0] | 0;
  i5 = HEAPU8[i1 - 33 | 0] | 0;
  i6 = HEAPU8[i1 - 32 | 0] | 0;
  i7 = HEAPU8[i1 - 31 | 0] | 0;
  i8 = HEAPU8[i1 - 30 | 0] | 0;
  i9 = HEAPU8[i1 - 29 | 0] | 0;
  HEAP8[i1 + 96 | 0] = (((i3 + 2 | 0) + (i4 << 1) | 0) + (HEAPU8[i1 + 95 | 0] | 0) | 0) >>> 2 & 255;
  i10 = i2 + 2 | 0;
  i11 = ((i10 + (i3 << 1) | 0) + i4 | 0) >>> 2 & 255;
  HEAP8[i1 + 97 | 0] = i11;
  HEAP8[i1 + 64 | 0] = i11;
  i11 = ((((i2 << 1) + 2 | 0) + i3 | 0) + i5 | 0) >>> 2 & 255;
  HEAP8[i1 + 98 | 0] = i11;
  HEAP8[i1 + 65 | 0] = i11;
  HEAP8[i1 + 32 | 0] = i11;
  i11 = ((i10 + (i5 << 1) | 0) + i6 | 0) >>> 2 & 255;
  HEAP8[i1 + 99 | 0] = i11;
  HEAP8[i1 + 66 | 0] = i11;
  HEAP8[i1 + 33 | 0] = i11;
  HEAP8[i1] = i11;
  i11 = (((i5 + 2 | 0) + (i6 << 1) | 0) + i7 | 0) >>> 2 & 255;
  HEAP8[i1 + 67 | 0] = i11;
  HEAP8[i1 + 34 | 0] = i11;
  HEAP8[i1 + 1 | 0] = i11;
  i11 = (((i6 + 2 | 0) + (i7 << 1) | 0) + i8 | 0) >>> 2 & 255;
  HEAP8[i1 + 35 | 0] = i11;
  HEAP8[i1 + 2 | 0] = i11;
  HEAP8[i1 + 3 | 0] = (((i7 + 2 | 0) + (i8 << 1) | 0) + i9 | 0) >>> 2 & 255;
  return;
}
function _VR4(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
  i2 = HEAPU8[i1 - 1 | 0] | 0;
  i3 = HEAPU8[i1 + 31 | 0] | 0;
  i4 = HEAPU8[i1 + 63 | 0] | 0;
  i5 = HEAPU8[i1 - 33 | 0] | 0;
  i6 = HEAPU8[i1 - 32 | 0] | 0;
  i7 = HEAPU8[i1 - 31 | 0] | 0;
  i8 = HEAPU8[i1 - 30 | 0] | 0;
  i9 = HEAPU8[i1 - 29 | 0] | 0;
  i10 = ((i5 + 1 | 0) + i6 | 0) >>> 1 & 255;
  HEAP8[i1 + 65 | 0] = i10;
  HEAP8[i1] = i10;
  i10 = ((i6 + 1 | 0) + i7 | 0) >>> 1 & 255;
  HEAP8[i1 + 66 | 0] = i10;
  HEAP8[i1 + 1 | 0] = i10;
  i10 = ((i7 + 1 | 0) + i8 | 0) >>> 1 & 255;
  HEAP8[i1 + 67 | 0] = i10;
  HEAP8[i1 + 2 | 0] = i10;
  HEAP8[i1 + 3 | 0] = ((i8 + 1 | 0) + i9 | 0) >>> 1 & 255;
  i10 = i2 + 2 | 0;
  HEAP8[i1 + 96 | 0] = ((i10 + (i3 << 1) | 0) + i4 | 0) >>> 2 & 255;
  HEAP8[i1 + 64 | 0] = ((((i2 << 1) + 2 | 0) + i3 | 0) + i5 | 0) >>> 2 & 255;
  i3 = ((i10 + (i5 << 1) | 0) + i6 | 0) >>> 2 & 255;
  HEAP8[i1 + 97 | 0] = i3;
  HEAP8[i1 + 32 | 0] = i3;
  i3 = (((i5 + 2 | 0) + (i6 << 1) | 0) + i7 | 0) >>> 2 & 255;
  HEAP8[i1 + 98 | 0] = i3;
  HEAP8[i1 + 33 | 0] = i3;
  i3 = (((i6 + 2 | 0) + (i7 << 1) | 0) + i8 | 0) >>> 2 & 255;
  HEAP8[i1 + 99 | 0] = i3;
  HEAP8[i1 + 34 | 0] = i3;
  HEAP8[i1 + 35 | 0] = (((i7 + 2 | 0) + (i8 << 1) | 0) + i9 | 0) >>> 2 & 255;
  return;
}
function _LD4(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
  i2 = HEAPU8[i1 - 31 | 0] | 0;
  i3 = HEAPU8[i1 - 30 | 0] | 0;
  i4 = HEAPU8[i1 - 29 | 0] | 0;
  i5 = HEAPU8[i1 - 28 | 0] | 0;
  i6 = HEAPU8[i1 - 27 | 0] | 0;
  i7 = HEAPU8[i1 - 26 | 0] | 0;
  i8 = HEAPU8[i1 - 25 | 0] | 0;
  HEAP8[i1] = ((((HEAPU8[i1 - 32 | 0] | 0) + 2 | 0) + (i2 << 1) | 0) + i3 | 0) >>> 2 & 255;
  i9 = (((i2 + 2 | 0) + (i3 << 1) | 0) + i4 | 0) >>> 2 & 255;
  HEAP8[i1 + 32 | 0] = i9;
  HEAP8[i1 + 1 | 0] = i9;
  i9 = (((i3 + 2 | 0) + (i4 << 1) | 0) + i5 | 0) >>> 2 & 255;
  HEAP8[i1 + 64 | 0] = i9;
  HEAP8[i1 + 33 | 0] = i9;
  HEAP8[i1 + 2 | 0] = i9;
  i9 = (((i4 + 2 | 0) + (i5 << 1) | 0) + i6 | 0) >>> 2 & 255;
  HEAP8[i1 + 96 | 0] = i9;
  HEAP8[i1 + 65 | 0] = i9;
  HEAP8[i1 + 34 | 0] = i9;
  HEAP8[i1 + 3 | 0] = i9;
  i9 = (((i5 + 2 | 0) + (i6 << 1) | 0) + i7 | 0) >>> 2 & 255;
  HEAP8[i1 + 97 | 0] = i9;
  HEAP8[i1 + 66 | 0] = i9;
  HEAP8[i1 + 35 | 0] = i9;
  i9 = (((i6 + 2 | 0) + (i7 << 1) | 0) + i8 | 0) >>> 2 & 255;
  HEAP8[i1 + 98 | 0] = i9;
  HEAP8[i1 + 67 | 0] = i9;
  HEAP8[i1 + 99 | 0] = (((i7 + 2 | 0) + i8 | 0) + (i8 << 1) | 0) >>> 2 & 255;
  return;
}
function _VL4(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
  i2 = HEAPU8[i1 - 32 | 0] | 0;
  i3 = HEAPU8[i1 - 31 | 0] | 0;
  i4 = HEAPU8[i1 - 30 | 0] | 0;
  i5 = HEAPU8[i1 - 29 | 0] | 0;
  i6 = HEAPU8[i1 - 28 | 0] | 0;
  i7 = HEAPU8[i1 - 27 | 0] | 0;
  i8 = HEAPU8[i1 - 26 | 0] | 0;
  i9 = HEAPU8[i1 - 25 | 0] | 0;
  HEAP8[i1] = ((i2 + 1 | 0) + i3 | 0) >>> 1 & 255;
  i10 = ((i3 + 1 | 0) + i4 | 0) >>> 1 & 255;
  HEAP8[i1 + 64 | 0] = i10;
  HEAP8[i1 + 1 | 0] = i10;
  i10 = ((i4 + 1 | 0) + i5 | 0) >>> 1 & 255;
  HEAP8[i1 + 65 | 0] = i10;
  HEAP8[i1 + 2 | 0] = i10;
  i10 = ((i5 + 1 | 0) + i6 | 0) >>> 1 & 255;
  HEAP8[i1 + 66 | 0] = i10;
  HEAP8[i1 + 3 | 0] = i10;
  HEAP8[i1 + 32 | 0] = (((i2 + 2 | 0) + (i3 << 1) | 0) + i4 | 0) >>> 2 & 255;
  i2 = (((i3 + 2 | 0) + (i4 << 1) | 0) + i5 | 0) >>> 2 & 255;
  HEAP8[i1 + 96 | 0] = i2;
  HEAP8[i1 + 33 | 0] = i2;
  i2 = (((i4 + 2 | 0) + (i5 << 1) | 0) + i6 | 0) >>> 2 & 255;
  HEAP8[i1 + 97 | 0] = i2;
  HEAP8[i1 + 34 | 0] = i2;
  i2 = (((i5 + 2 | 0) + (i6 << 1) | 0) + i7 | 0) >>> 2 & 255;
  HEAP8[i1 + 98 | 0] = i2;
  HEAP8[i1 + 35 | 0] = i2;
  HEAP8[i1 + 67 | 0] = (((i6 + 2 | 0) + (i7 << 1) | 0) + i8 | 0) >>> 2 & 255;
  HEAP8[i1 + 99 | 0] = (((i7 + 2 | 0) + (i8 << 1) | 0) + i9 | 0) >>> 2 & 255;
  return;
}
function _HD4(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
  i2 = HEAPU8[i1 - 1 | 0] | 0;
  i3 = HEAPU8[i1 + 31 | 0] | 0;
  i4 = HEAPU8[i1 + 63 | 0] | 0;
  i5 = HEAPU8[i1 + 95 | 0] | 0;
  i6 = HEAPU8[i1 - 33 | 0] | 0;
  i7 = HEAPU8[i1 - 32 | 0] | 0;
  i8 = HEAPU8[i1 - 31 | 0] | 0;
  i9 = HEAPU8[i1 - 30 | 0] | 0;
  i10 = i2 + 1 | 0;
  i11 = (i10 + i6 | 0) >>> 1 & 255;
  HEAP8[i1 + 34 | 0] = i11;
  HEAP8[i1] = i11;
  i11 = (i10 + i3 | 0) >>> 1 & 255;
  HEAP8[i1 + 66 | 0] = i11;
  HEAP8[i1 + 32 | 0] = i11;
  i11 = ((i3 + 1 | 0) + i4 | 0) >>> 1 & 255;
  HEAP8[i1 + 98 | 0] = i11;
  HEAP8[i1 + 64 | 0] = i11;
  HEAP8[i1 + 96 | 0] = ((i4 + 1 | 0) + i5 | 0) >>> 1 & 255;
  HEAP8[i1 + 3 | 0] = (((i7 + 2 | 0) + (i8 << 1) | 0) + i9 | 0) >>> 2 & 255;
  HEAP8[i1 + 2 | 0] = (((i6 + 2 | 0) + (i7 << 1) | 0) + i8 | 0) >>> 2 & 255;
  i8 = i2 + 2 | 0;
  i9 = ((i8 + (i6 << 1) | 0) + i7 | 0) >>> 2 & 255;
  HEAP8[i1 + 35 | 0] = i9;
  HEAP8[i1 + 1 | 0] = i9;
  i9 = ((((i2 << 1) + 2 | 0) + i3 | 0) + i6 | 0) >>> 2 & 255;
  HEAP8[i1 + 67 | 0] = i9;
  HEAP8[i1 + 33 | 0] = i9;
  i9 = ((i8 + (i3 << 1) | 0) + i4 | 0) >>> 2 & 255;
  HEAP8[i1 + 99 | 0] = i9;
  HEAP8[i1 + 65 | 0] = i9;
  HEAP8[i1 + 97 | 0] = (((i3 + 2 | 0) + (i4 << 1) | 0) + i5 | 0) >>> 2 & 255;
  return;
}
function _TM16(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
  i2 = (HEAPU8[i1 - 33 | 0] | 0) ^ 255;
  i3 = 0;
  i4 = i1;
  while (1) {
    i5 = (HEAPU8[i4 - 1 | 0] | 0) + i2 | 0;
    i6 = 0;
    while (1) {
      HEAP8[i4 + i6 | 0] = HEAP8[5260868 + (i5 + (HEAPU8[i1 + (i6 - 32 | 0) | 0] | 0) | 0) | 0] | 0;
      i7 = i6 + 1 | 0;
      if ((i7 | 0) == 16) {
        break;
      } else {
        i6 = i7;
      }
    }
    i6 = i3 + 1 | 0;
    if ((i6 | 0) == 16) {
      break;
    } else {
      i3 = i6;
      i4 = i4 + 32 | 0;
    }
  }
  return;
}
function _HU4(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
  i2 = HEAPU8[i1 - 1 | 0] | 0;
  i3 = HEAPU8[i1 + 31 | 0] | 0;
  i4 = HEAPU8[i1 + 63 | 0] | 0;
  i5 = HEAP8[i1 + 95 | 0] | 0;
  i6 = i5 & 255;
  HEAP8[i1] = ((i2 + 1 | 0) + i3 | 0) >>> 1 & 255;
  i7 = ((i3 + 1 | 0) + i4 | 0) >>> 1 & 255;
  HEAP8[i1 + 32 | 0] = i7;
  HEAP8[i1 + 2 | 0] = i7;
  i7 = ((i4 + 1 | 0) + i6 | 0) >>> 1 & 255;
  HEAP8[i1 + 64 | 0] = i7;
  HEAP8[i1 + 34 | 0] = i7;
  HEAP8[i1 + 1 | 0] = (((i2 + 2 | 0) + (i3 << 1) | 0) + i4 | 0) >>> 2 & 255;
  i2 = (((i3 + 2 | 0) + (i4 << 1) | 0) + i6 | 0) >>> 2 & 255;
  HEAP8[i1 + 33 | 0] = i2;
  HEAP8[i1 + 3 | 0] = i2;
  i2 = (((i4 + 2 | 0) + i6 | 0) + (i6 << 1) | 0) >>> 2 & 255;
  HEAP8[i1 + 65 | 0] = i2;
  HEAP8[i1 + 35 | 0] = i2;
  HEAP8[i1 + 66 | 0] = i5;
  HEAP8[i1 + 67 | 0] = i5;
  _memset(i1 + 96 | 0, i5 | 0, 4);
  return;
}
function _DC16(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
  i2 = 16;
  i3 = 0;
  while (1) {
    i4 = ((HEAPU8[i1 + ((i3 << 5) - 1 | 0) | 0] | 0) + i2 | 0) + (HEAPU8[i1 + (i3 - 32 | 0) | 0] | 0) | 0;
    i5 = i3 + 1 | 0;
    if ((i5 | 0) == 16) {
      break;
    } else {
      i2 = i4;
      i3 = i5;
    }
  }
  i3 = i4 >>> 5 & 255;
  _memset(i1 | 0, i3 | 0, 16);
  _memset(i1 + 32 | 0, i3 | 0, 16);
  _memset(i1 + 64 | 0, i3 | 0, 16);
  _memset(i1 + 96 | 0, i3 | 0, 16);
  _memset(i1 + 128 | 0, i3 | 0, 16);
  _memset(i1 + 160 | 0, i3 | 0, 16);
  _memset(i1 + 192 | 0, i3 | 0, 16);
  _memset(i1 + 224 | 0, i3 | 0, 16);
  _memset(i1 + 256 | 0, i3 | 0, 16);
  _memset(i1 + 288 | 0, i3 | 0, 16);
  _memset(i1 + 320 | 0, i3 | 0, 16);
  _memset(i1 + 352 | 0, i3 | 0, 16);
  _memset(i1 + 384 | 0, i3 | 0, 16);
  _memset(i1 + 416 | 0, i3 | 0, 16);
  _memset(i1 + 448 | 0, i3 | 0, 16);
  _memset(i1 + 480 | 0, i3 | 0, 16);
  return;
}
function _VE16(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0;
  i2 = i1 - 32 | 0;
  HEAP8[i1] = HEAP8[i2] | 0;
  HEAP8[i1 + 1 | 0] = HEAP8[i2 + 1 | 0] | 0;
  HEAP8[i1 + 2 | 0] = HEAP8[i2 + 2 | 0] | 0;
  HEAP8[i1 + 3 | 0] = HEAP8[i2 + 3 | 0] | 0;
  HEAP8[i1 + 4 | 0] = HEAP8[i2 + 4 | 0] | 0;
  HEAP8[i1 + 5 | 0] = HEAP8[i2 + 5 | 0] | 0;
  HEAP8[i1 + 6 | 0] = HEAP8[i2 + 6 | 0] | 0;
  HEAP8[i1 + 7 | 0] = HEAP8[i2 + 7 | 0] | 0;
  HEAP8[i1 + 8 | 0] = HEAP8[i2 + 8 | 0] | 0;
  HEAP8[i1 + 9 | 0] = HEAP8[i2 + 9 | 0] | 0;
  HEAP8[i1 + 10 | 0] = HEAP8[i2 + 10 | 0] | 0;
  HEAP8[i1 + 11 | 0] = HEAP8[i2 + 11 | 0] | 0;
  HEAP8[i1 + 12 | 0] = HEAP8[i2 + 12 | 0] | 0;
  HEAP8[i1 + 13 | 0] = HEAP8[i2 + 13 | 0] | 0;
  HEAP8[i1 + 14 | 0] = HEAP8[i2 + 14 | 0] | 0;
  HEAP8[i1 + 15 | 0] = HEAP8[i2 + 15 | 0] | 0;
  i3 = i1 + 32 | 0;
  HEAP8[i3] = HEAP8[i2] | 0;
  HEAP8[i3 + 1 | 0] = HEAP8[i2 + 1 | 0] | 0;
  HEAP8[i3 + 2 | 0] = HEAP8[i2 + 2 | 0] | 0;
  HEAP8[i3 + 3 | 0] = HEAP8[i2 + 3 | 0] | 0;
  HEAP8[i3 + 4 | 0] = HEAP8[i2 + 4 | 0] | 0;
  HEAP8[i3 + 5 | 0] = HEAP8[i2 + 5 | 0] | 0;
  HEAP8[i3 + 6 | 0] = HEAP8[i2 + 6 | 0] | 0;
  HEAP8[i3 + 7 | 0] = HEAP8[i2 + 7 | 0] | 0;
  HEAP8[i3 + 8 | 0] = HEAP8[i2 + 8 | 0] | 0;
  HEAP8[i3 + 9 | 0] = HEAP8[i2 + 9 | 0] | 0;
  HEAP8[i3 + 10 | 0] = HEAP8[i2 + 10 | 0] | 0;
  HEAP8[i3 + 11 | 0] = HEAP8[i2 + 11 | 0] | 0;
  HEAP8[i3 + 12 | 0] = HEAP8[i2 + 12 | 0] | 0;
  HEAP8[i3 + 13 | 0] = HEAP8[i2 + 13 | 0] | 0;
  HEAP8[i3 + 14 | 0] = HEAP8[i2 + 14 | 0] | 0;
  HEAP8[i3 + 15 | 0] = HEAP8[i2 + 15 | 0] | 0;
  i3 = i1 + 64 | 0;
  HEAP8[i3] = HEAP8[i2] | 0;
  HEAP8[i3 + 1 | 0] = HEAP8[i2 + 1 | 0] | 0;
  HEAP8[i3 + 2 | 0] = HEAP8[i2 + 2 | 0] | 0;
  HEAP8[i3 + 3 | 0] = HEAP8[i2 + 3 | 0] | 0;
  HEAP8[i3 + 4 | 0] = HEAP8[i2 + 4 | 0] | 0;
  HEAP8[i3 + 5 | 0] = HEAP8[i2 + 5 | 0] | 0;
  HEAP8[i3 + 6 | 0] = HEAP8[i2 + 6 | 0] | 0;
  HEAP8[i3 + 7 | 0] = HEAP8[i2 + 7 | 0] | 0;
  HEAP8[i3 + 8 | 0] = HEAP8[i2 + 8 | 0] | 0;
  HEAP8[i3 + 9 | 0] = HEAP8[i2 + 9 | 0] | 0;
  HEAP8[i3 + 10 | 0] = HEAP8[i2 + 10 | 0] | 0;
  HEAP8[i3 + 11 | 0] = HEAP8[i2 + 11 | 0] | 0;
  HEAP8[i3 + 12 | 0] = HEAP8[i2 + 12 | 0] | 0;
  HEAP8[i3 + 13 | 0] = HEAP8[i2 + 13 | 0] | 0;
  HEAP8[i3 + 14 | 0] = HEAP8[i2 + 14 | 0] | 0;
  HEAP8[i3 + 15 | 0] = HEAP8[i2 + 15 | 0] | 0;
  i3 = i1 + 96 | 0;
  HEAP8[i3] = HEAP8[i2] | 0;
  HEAP8[i3 + 1 | 0] = HEAP8[i2 + 1 | 0] | 0;
  HEAP8[i3 + 2 | 0] = HEAP8[i2 + 2 | 0] | 0;
  HEAP8[i3 + 3 | 0] = HEAP8[i2 + 3 | 0] | 0;
  HEAP8[i3 + 4 | 0] = HEAP8[i2 + 4 | 0] | 0;
  HEAP8[i3 + 5 | 0] = HEAP8[i2 + 5 | 0] | 0;
  HEAP8[i3 + 6 | 0] = HEAP8[i2 + 6 | 0] | 0;
  HEAP8[i3 + 7 | 0] = HEAP8[i2 + 7 | 0] | 0;
  HEAP8[i3 + 8 | 0] = HEAP8[i2 + 8 | 0] | 0;
  HEAP8[i3 + 9 | 0] = HEAP8[i2 + 9 | 0] | 0;
  HEAP8[i3 + 10 | 0] = HEAP8[i2 + 10 | 0] | 0;
  HEAP8[i3 + 11 | 0] = HEAP8[i2 + 11 | 0] | 0;
  HEAP8[i3 + 12 | 0] = HEAP8[i2 + 12 | 0] | 0;
  HEAP8[i3 + 13 | 0] = HEAP8[i2 + 13 | 0] | 0;
  HEAP8[i3 + 14 | 0] = HEAP8[i2 + 14 | 0] | 0;
  HEAP8[i3 + 15 | 0] = HEAP8[i2 + 15 | 0] | 0;
  i3 = i1 + 128 | 0;
  HEAP8[i3] = HEAP8[i2] | 0;
  HEAP8[i3 + 1 | 0] = HEAP8[i2 + 1 | 0] | 0;
  HEAP8[i3 + 2 | 0] = HEAP8[i2 + 2 | 0] | 0;
  HEAP8[i3 + 3 | 0] = HEAP8[i2 + 3 | 0] | 0;
  HEAP8[i3 + 4 | 0] = HEAP8[i2 + 4 | 0] | 0;
  HEAP8[i3 + 5 | 0] = HEAP8[i2 + 5 | 0] | 0;
  HEAP8[i3 + 6 | 0] = HEAP8[i2 + 6 | 0] | 0;
  HEAP8[i3 + 7 | 0] = HEAP8[i2 + 7 | 0] | 0;
  HEAP8[i3 + 8 | 0] = HEAP8[i2 + 8 | 0] | 0;
  HEAP8[i3 + 9 | 0] = HEAP8[i2 + 9 | 0] | 0;
  HEAP8[i3 + 10 | 0] = HEAP8[i2 + 10 | 0] | 0;
  HEAP8[i3 + 11 | 0] = HEAP8[i2 + 11 | 0] | 0;
  HEAP8[i3 + 12 | 0] = HEAP8[i2 + 12 | 0] | 0;
  HEAP8[i3 + 13 | 0] = HEAP8[i2 + 13 | 0] | 0;
  HEAP8[i3 + 14 | 0] = HEAP8[i2 + 14 | 0] | 0;
  HEAP8[i3 + 15 | 0] = HEAP8[i2 + 15 | 0] | 0;
  i3 = i1 + 160 | 0;
  HEAP8[i3] = HEAP8[i2] | 0;
  HEAP8[i3 + 1 | 0] = HEAP8[i2 + 1 | 0] | 0;
  HEAP8[i3 + 2 | 0] = HEAP8[i2 + 2 | 0] | 0;
  HEAP8[i3 + 3 | 0] = HEAP8[i2 + 3 | 0] | 0;
  HEAP8[i3 + 4 | 0] = HEAP8[i2 + 4 | 0] | 0;
  HEAP8[i3 + 5 | 0] = HEAP8[i2 + 5 | 0] | 0;
  HEAP8[i3 + 6 | 0] = HEAP8[i2 + 6 | 0] | 0;
  HEAP8[i3 + 7 | 0] = HEAP8[i2 + 7 | 0] | 0;
  HEAP8[i3 + 8 | 0] = HEAP8[i2 + 8 | 0] | 0;
  HEAP8[i3 + 9 | 0] = HEAP8[i2 + 9 | 0] | 0;
  HEAP8[i3 + 10 | 0] = HEAP8[i2 + 10 | 0] | 0;
  HEAP8[i3 + 11 | 0] = HEAP8[i2 + 11 | 0] | 0;
  HEAP8[i3 + 12 | 0] = HEAP8[i2 + 12 | 0] | 0;
  HEAP8[i3 + 13 | 0] = HEAP8[i2 + 13 | 0] | 0;
  HEAP8[i3 + 14 | 0] = HEAP8[i2 + 14 | 0] | 0;
  HEAP8[i3 + 15 | 0] = HEAP8[i2 + 15 | 0] | 0;
  i3 = i1 + 192 | 0;
  HEAP8[i3] = HEAP8[i2] | 0;
  HEAP8[i3 + 1 | 0] = HEAP8[i2 + 1 | 0] | 0;
  HEAP8[i3 + 2 | 0] = HEAP8[i2 + 2 | 0] | 0;
  HEAP8[i3 + 3 | 0] = HEAP8[i2 + 3 | 0] | 0;
  HEAP8[i3 + 4 | 0] = HEAP8[i2 + 4 | 0] | 0;
  HEAP8[i3 + 5 | 0] = HEAP8[i2 + 5 | 0] | 0;
  HEAP8[i3 + 6 | 0] = HEAP8[i2 + 6 | 0] | 0;
  HEAP8[i3 + 7 | 0] = HEAP8[i2 + 7 | 0] | 0;
  HEAP8[i3 + 8 | 0] = HEAP8[i2 + 8 | 0] | 0;
  HEAP8[i3 + 9 | 0] = HEAP8[i2 + 9 | 0] | 0;
  HEAP8[i3 + 10 | 0] = HEAP8[i2 + 10 | 0] | 0;
  HEAP8[i3 + 11 | 0] = HEAP8[i2 + 11 | 0] | 0;
  HEAP8[i3 + 12 | 0] = HEAP8[i2 + 12 | 0] | 0;
  HEAP8[i3 + 13 | 0] = HEAP8[i2 + 13 | 0] | 0;
  HEAP8[i3 + 14 | 0] = HEAP8[i2 + 14 | 0] | 0;
  HEAP8[i3 + 15 | 0] = HEAP8[i2 + 15 | 0] | 0;
  i3 = i1 + 224 | 0;
  HEAP8[i3] = HEAP8[i2] | 0;
  HEAP8[i3 + 1 | 0] = HEAP8[i2 + 1 | 0] | 0;
  HEAP8[i3 + 2 | 0] = HEAP8[i2 + 2 | 0] | 0;
  HEAP8[i3 + 3 | 0] = HEAP8[i2 + 3 | 0] | 0;
  HEAP8[i3 + 4 | 0] = HEAP8[i2 + 4 | 0] | 0;
  HEAP8[i3 + 5 | 0] = HEAP8[i2 + 5 | 0] | 0;
  HEAP8[i3 + 6 | 0] = HEAP8[i2 + 6 | 0] | 0;
  HEAP8[i3 + 7 | 0] = HEAP8[i2 + 7 | 0] | 0;
  HEAP8[i3 + 8 | 0] = HEAP8[i2 + 8 | 0] | 0;
  HEAP8[i3 + 9 | 0] = HEAP8[i2 + 9 | 0] | 0;
  HEAP8[i3 + 10 | 0] = HEAP8[i2 + 10 | 0] | 0;
  HEAP8[i3 + 11 | 0] = HEAP8[i2 + 11 | 0] | 0;
  HEAP8[i3 + 12 | 0] = HEAP8[i2 + 12 | 0] | 0;
  HEAP8[i3 + 13 | 0] = HEAP8[i2 + 13 | 0] | 0;
  HEAP8[i3 + 14 | 0] = HEAP8[i2 + 14 | 0] | 0;
  HEAP8[i3 + 15 | 0] = HEAP8[i2 + 15 | 0] | 0;
  i3 = i1 + 256 | 0;
  HEAP8[i3] = HEAP8[i2] | 0;
  HEAP8[i3 + 1 | 0] = HEAP8[i2 + 1 | 0] | 0;
  HEAP8[i3 + 2 | 0] = HEAP8[i2 + 2 | 0] | 0;
  HEAP8[i3 + 3 | 0] = HEAP8[i2 + 3 | 0] | 0;
  HEAP8[i3 + 4 | 0] = HEAP8[i2 + 4 | 0] | 0;
  HEAP8[i3 + 5 | 0] = HEAP8[i2 + 5 | 0] | 0;
  HEAP8[i3 + 6 | 0] = HEAP8[i2 + 6 | 0] | 0;
  HEAP8[i3 + 7 | 0] = HEAP8[i2 + 7 | 0] | 0;
  HEAP8[i3 + 8 | 0] = HEAP8[i2 + 8 | 0] | 0;
  HEAP8[i3 + 9 | 0] = HEAP8[i2 + 9 | 0] | 0;
  HEAP8[i3 + 10 | 0] = HEAP8[i2 + 10 | 0] | 0;
  HEAP8[i3 + 11 | 0] = HEAP8[i2 + 11 | 0] | 0;
  HEAP8[i3 + 12 | 0] = HEAP8[i2 + 12 | 0] | 0;
  HEAP8[i3 + 13 | 0] = HEAP8[i2 + 13 | 0] | 0;
  HEAP8[i3 + 14 | 0] = HEAP8[i2 + 14 | 0] | 0;
  HEAP8[i3 + 15 | 0] = HEAP8[i2 + 15 | 0] | 0;
  i3 = i1 + 288 | 0;
  HEAP8[i3] = HEAP8[i2] | 0;
  HEAP8[i3 + 1 | 0] = HEAP8[i2 + 1 | 0] | 0;
  HEAP8[i3 + 2 | 0] = HEAP8[i2 + 2 | 0] | 0;
  HEAP8[i3 + 3 | 0] = HEAP8[i2 + 3 | 0] | 0;
  HEAP8[i3 + 4 | 0] = HEAP8[i2 + 4 | 0] | 0;
  HEAP8[i3 + 5 | 0] = HEAP8[i2 + 5 | 0] | 0;
  HEAP8[i3 + 6 | 0] = HEAP8[i2 + 6 | 0] | 0;
  HEAP8[i3 + 7 | 0] = HEAP8[i2 + 7 | 0] | 0;
  HEAP8[i3 + 8 | 0] = HEAP8[i2 + 8 | 0] | 0;
  HEAP8[i3 + 9 | 0] = HEAP8[i2 + 9 | 0] | 0;
  HEAP8[i3 + 10 | 0] = HEAP8[i2 + 10 | 0] | 0;
  HEAP8[i3 + 11 | 0] = HEAP8[i2 + 11 | 0] | 0;
  HEAP8[i3 + 12 | 0] = HEAP8[i2 + 12 | 0] | 0;
  HEAP8[i3 + 13 | 0] = HEAP8[i2 + 13 | 0] | 0;
  HEAP8[i3 + 14 | 0] = HEAP8[i2 + 14 | 0] | 0;
  HEAP8[i3 + 15 | 0] = HEAP8[i2 + 15 | 0] | 0;
  i3 = i1 + 320 | 0;
  HEAP8[i3] = HEAP8[i2] | 0;
  HEAP8[i3 + 1 | 0] = HEAP8[i2 + 1 | 0] | 0;
  HEAP8[i3 + 2 | 0] = HEAP8[i2 + 2 | 0] | 0;
  HEAP8[i3 + 3 | 0] = HEAP8[i2 + 3 | 0] | 0;
  HEAP8[i3 + 4 | 0] = HEAP8[i2 + 4 | 0] | 0;
  HEAP8[i3 + 5 | 0] = HEAP8[i2 + 5 | 0] | 0;
  HEAP8[i3 + 6 | 0] = HEAP8[i2 + 6 | 0] | 0;
  HEAP8[i3 + 7 | 0] = HEAP8[i2 + 7 | 0] | 0;
  HEAP8[i3 + 8 | 0] = HEAP8[i2 + 8 | 0] | 0;
  HEAP8[i3 + 9 | 0] = HEAP8[i2 + 9 | 0] | 0;
  HEAP8[i3 + 10 | 0] = HEAP8[i2 + 10 | 0] | 0;
  HEAP8[i3 + 11 | 0] = HEAP8[i2 + 11 | 0] | 0;
  HEAP8[i3 + 12 | 0] = HEAP8[i2 + 12 | 0] | 0;
  HEAP8[i3 + 13 | 0] = HEAP8[i2 + 13 | 0] | 0;
  HEAP8[i3 + 14 | 0] = HEAP8[i2 + 14 | 0] | 0;
  HEAP8[i3 + 15 | 0] = HEAP8[i2 + 15 | 0] | 0;
  i3 = i1 + 352 | 0;
  HEAP8[i3] = HEAP8[i2] | 0;
  HEAP8[i3 + 1 | 0] = HEAP8[i2 + 1 | 0] | 0;
  HEAP8[i3 + 2 | 0] = HEAP8[i2 + 2 | 0] | 0;
  HEAP8[i3 + 3 | 0] = HEAP8[i2 + 3 | 0] | 0;
  HEAP8[i3 + 4 | 0] = HEAP8[i2 + 4 | 0] | 0;
  HEAP8[i3 + 5 | 0] = HEAP8[i2 + 5 | 0] | 0;
  HEAP8[i3 + 6 | 0] = HEAP8[i2 + 6 | 0] | 0;
  HEAP8[i3 + 7 | 0] = HEAP8[i2 + 7 | 0] | 0;
  HEAP8[i3 + 8 | 0] = HEAP8[i2 + 8 | 0] | 0;
  HEAP8[i3 + 9 | 0] = HEAP8[i2 + 9 | 0] | 0;
  HEAP8[i3 + 10 | 0] = HEAP8[i2 + 10 | 0] | 0;
  HEAP8[i3 + 11 | 0] = HEAP8[i2 + 11 | 0] | 0;
  HEAP8[i3 + 12 | 0] = HEAP8[i2 + 12 | 0] | 0;
  HEAP8[i3 + 13 | 0] = HEAP8[i2 + 13 | 0] | 0;
  HEAP8[i3 + 14 | 0] = HEAP8[i2 + 14 | 0] | 0;
  HEAP8[i3 + 15 | 0] = HEAP8[i2 + 15 | 0] | 0;
  i3 = i1 + 384 | 0;
  HEAP8[i3] = HEAP8[i2] | 0;
  HEAP8[i3 + 1 | 0] = HEAP8[i2 + 1 | 0] | 0;
  HEAP8[i3 + 2 | 0] = HEAP8[i2 + 2 | 0] | 0;
  HEAP8[i3 + 3 | 0] = HEAP8[i2 + 3 | 0] | 0;
  HEAP8[i3 + 4 | 0] = HEAP8[i2 + 4 | 0] | 0;
  HEAP8[i3 + 5 | 0] = HEAP8[i2 + 5 | 0] | 0;
  HEAP8[i3 + 6 | 0] = HEAP8[i2 + 6 | 0] | 0;
  HEAP8[i3 + 7 | 0] = HEAP8[i2 + 7 | 0] | 0;
  HEAP8[i3 + 8 | 0] = HEAP8[i2 + 8 | 0] | 0;
  HEAP8[i3 + 9 | 0] = HEAP8[i2 + 9 | 0] | 0;
  HEAP8[i3 + 10 | 0] = HEAP8[i2 + 10 | 0] | 0;
  HEAP8[i3 + 11 | 0] = HEAP8[i2 + 11 | 0] | 0;
  HEAP8[i3 + 12 | 0] = HEAP8[i2 + 12 | 0] | 0;
  HEAP8[i3 + 13 | 0] = HEAP8[i2 + 13 | 0] | 0;
  HEAP8[i3 + 14 | 0] = HEAP8[i2 + 14 | 0] | 0;
  HEAP8[i3 + 15 | 0] = HEAP8[i2 + 15 | 0] | 0;
  i3 = i1 + 416 | 0;
  HEAP8[i3] = HEAP8[i2] | 0;
  HEAP8[i3 + 1 | 0] = HEAP8[i2 + 1 | 0] | 0;
  HEAP8[i3 + 2 | 0] = HEAP8[i2 + 2 | 0] | 0;
  HEAP8[i3 + 3 | 0] = HEAP8[i2 + 3 | 0] | 0;
  HEAP8[i3 + 4 | 0] = HEAP8[i2 + 4 | 0] | 0;
  HEAP8[i3 + 5 | 0] = HEAP8[i2 + 5 | 0] | 0;
  HEAP8[i3 + 6 | 0] = HEAP8[i2 + 6 | 0] | 0;
  HEAP8[i3 + 7 | 0] = HEAP8[i2 + 7 | 0] | 0;
  HEAP8[i3 + 8 | 0] = HEAP8[i2 + 8 | 0] | 0;
  HEAP8[i3 + 9 | 0] = HEAP8[i2 + 9 | 0] | 0;
  HEAP8[i3 + 10 | 0] = HEAP8[i2 + 10 | 0] | 0;
  HEAP8[i3 + 11 | 0] = HEAP8[i2 + 11 | 0] | 0;
  HEAP8[i3 + 12 | 0] = HEAP8[i2 + 12 | 0] | 0;
  HEAP8[i3 + 13 | 0] = HEAP8[i2 + 13 | 0] | 0;
  HEAP8[i3 + 14 | 0] = HEAP8[i2 + 14 | 0] | 0;
  HEAP8[i3 + 15 | 0] = HEAP8[i2 + 15 | 0] | 0;
  i3 = i1 + 448 | 0;
  HEAP8[i3] = HEAP8[i2] | 0;
  HEAP8[i3 + 1 | 0] = HEAP8[i2 + 1 | 0] | 0;
  HEAP8[i3 + 2 | 0] = HEAP8[i2 + 2 | 0] | 0;
  HEAP8[i3 + 3 | 0] = HEAP8[i2 + 3 | 0] | 0;
  HEAP8[i3 + 4 | 0] = HEAP8[i2 + 4 | 0] | 0;
  HEAP8[i3 + 5 | 0] = HEAP8[i2 + 5 | 0] | 0;
  HEAP8[i3 + 6 | 0] = HEAP8[i2 + 6 | 0] | 0;
  HEAP8[i3 + 7 | 0] = HEAP8[i2 + 7 | 0] | 0;
  HEAP8[i3 + 8 | 0] = HEAP8[i2 + 8 | 0] | 0;
  HEAP8[i3 + 9 | 0] = HEAP8[i2 + 9 | 0] | 0;
  HEAP8[i3 + 10 | 0] = HEAP8[i2 + 10 | 0] | 0;
  HEAP8[i3 + 11 | 0] = HEAP8[i2 + 11 | 0] | 0;
  HEAP8[i3 + 12 | 0] = HEAP8[i2 + 12 | 0] | 0;
  HEAP8[i3 + 13 | 0] = HEAP8[i2 + 13 | 0] | 0;
  HEAP8[i3 + 14 | 0] = HEAP8[i2 + 14 | 0] | 0;
  HEAP8[i3 + 15 | 0] = HEAP8[i2 + 15 | 0] | 0;
  i3 = i1 + 480 | 0;
  HEAP8[i3] = HEAP8[i2] | 0;
  HEAP8[i3 + 1 | 0] = HEAP8[i2 + 1 | 0] | 0;
  HEAP8[i3 + 2 | 0] = HEAP8[i2 + 2 | 0] | 0;
  HEAP8[i3 + 3 | 0] = HEAP8[i2 + 3 | 0] | 0;
  HEAP8[i3 + 4 | 0] = HEAP8[i2 + 4 | 0] | 0;
  HEAP8[i3 + 5 | 0] = HEAP8[i2 + 5 | 0] | 0;
  HEAP8[i3 + 6 | 0] = HEAP8[i2 + 6 | 0] | 0;
  HEAP8[i3 + 7 | 0] = HEAP8[i2 + 7 | 0] | 0;
  HEAP8[i3 + 8 | 0] = HEAP8[i2 + 8 | 0] | 0;
  HEAP8[i3 + 9 | 0] = HEAP8[i2 + 9 | 0] | 0;
  HEAP8[i3 + 10 | 0] = HEAP8[i2 + 10 | 0] | 0;
  HEAP8[i3 + 11 | 0] = HEAP8[i2 + 11 | 0] | 0;
  HEAP8[i3 + 12 | 0] = HEAP8[i2 + 12 | 0] | 0;
  HEAP8[i3 + 13 | 0] = HEAP8[i2 + 13 | 0] | 0;
  HEAP8[i3 + 14 | 0] = HEAP8[i2 + 14 | 0] | 0;
  HEAP8[i3 + 15 | 0] = HEAP8[i2 + 15 | 0] | 0;
  return;
}
function _DC8uv(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
  i2 = ((HEAPU8[i1 - 25 | 0] | 0) + (((HEAPU8[i1 - 26 | 0] | 0) + (((HEAPU8[i1 - 27 | 0] | 0) + (((HEAPU8[i1 - 28 | 0] | 0) + (((HEAPU8[i1 - 29 | 0] | 0) + (((HEAPU8[i1 - 30 | 0] | 0) + (((HEAPU8[i1 - 31 | 0] | 0) + (((HEAPU8[i1 - 32 | 0] | 0) + 8 | 0) + (HEAPU8[i1 - 1 | 0] | 0) | 0) | 0) + (HEAPU8[i1 + 31 | 0] | 0) | 0) | 0) + (HEAPU8[i1 + 63 | 0] | 0) | 0) | 0) + (HEAPU8[i1 + 95 | 0] | 0) | 0) | 0) + (HEAPU8[i1 + 127 | 0] | 0) | 0) | 0) + (HEAPU8[i1 + 159 | 0] | 0) | 0) | 0) + (HEAPU8[i1 + 191 | 0] | 0) | 0) | 0) + (HEAPU8[i1 + 223 | 0] | 0) >> 4;
  i3 = i2;
  i4 = (i2 | 0) < 0 ? -1 : 0;
  i2 = 16843009;
  i5 = 16843009;
  i6 = ~~((+(i3 >>> 0) + +(i4 | 0) * 4294967296.0) * (+(i2 >>> 0) + +(i5 | 0) * 4294967296.0)) >>> 0;
  i7 = Math_min(Math_floor((+(i3 >>> 0) + +(i4 | 0) * 4294967296.0) * (+(i2 >>> 0) + +(i5 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
  i5 = i1;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i7;
  i5 = i1 + 32 | 0;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i7;
  i5 = i1 + 64 | 0;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i7;
  i5 = i1 + 96 | 0;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i7;
  i5 = i1 + 128 | 0;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i7;
  i5 = i1 + 160 | 0;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i7;
  i5 = i1 + 192 | 0;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i7;
  i5 = i1 + 224 | 0;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i7;
  return;
}
function _TM8uv(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
  i2 = (HEAPU8[i1 - 33 | 0] | 0) ^ 255;
  i3 = i1 - 32 | 0;
  i4 = i1 - 31 | 0;
  i5 = i1 - 30 | 0;
  i6 = i1 - 29 | 0;
  i7 = i1 - 28 | 0;
  i8 = i1 - 27 | 0;
  i9 = i1 - 26 | 0;
  i10 = i1 - 25 | 0;
  i11 = 0;
  i12 = i1;
  while (1) {
    i1 = (HEAPU8[i12 - 1 | 0] | 0) + i2 | 0;
    HEAP8[i12] = HEAP8[5260868 + (i1 + (HEAPU8[i3] | 0) | 0) | 0] | 0;
    HEAP8[i12 + 1 | 0] = HEAP8[5260868 + (i1 + (HEAPU8[i4] | 0) | 0) | 0] | 0;
    HEAP8[i12 + 2 | 0] = HEAP8[5260868 + (i1 + (HEAPU8[i5] | 0) | 0) | 0] | 0;
    HEAP8[i12 + 3 | 0] = HEAP8[5260868 + (i1 + (HEAPU8[i6] | 0) | 0) | 0] | 0;
    HEAP8[i12 + 4 | 0] = HEAP8[5260868 + (i1 + (HEAPU8[i7] | 0) | 0) | 0] | 0;
    HEAP8[i12 + 5 | 0] = HEAP8[5260868 + (i1 + (HEAPU8[i8] | 0) | 0) | 0] | 0;
    HEAP8[i12 + 6 | 0] = HEAP8[5260868 + (i1 + (HEAPU8[i9] | 0) | 0) | 0] | 0;
    HEAP8[i12 + 7 | 0] = HEAP8[5260868 + (i1 + (HEAPU8[i10] | 0) | 0) | 0] | 0;
    i1 = i11 + 1 | 0;
    if ((i1 | 0) == 8) {
      break;
    } else {
      i11 = i1;
      i12 = i12 + 32 | 0;
    }
  }
  return;
}
function _VE8uv(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
  i2 = i1 - 32 | 0;
  i3 = i1;
  i4 = i2 | 0;
  i5 = HEAPU8[i4] | HEAPU8[i4 + 1 | 0] << 8 | HEAPU8[i4 + 2 | 0] << 16 | HEAPU8[i4 + 3 | 0] << 24 | 0;
  i4 = i2 + 4 | 0;
  i2 = HEAPU8[i4] | HEAPU8[i4 + 1 | 0] << 8 | HEAPU8[i4 + 2 | 0] << 16 | HEAPU8[i4 + 3 | 0] << 24 | 0;
  i4 = i3 | 0;
  tempBigInt = i5;
  HEAP8[i4] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i4 + 1 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i4 + 2 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i4 + 3 | 0] = tempBigInt & 255;
  i4 = i3 + 4 | 0;
  tempBigInt = i2;
  HEAP8[i4] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i4 + 1 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i4 + 2 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i4 + 3 | 0] = tempBigInt & 255;
  i4 = i1 + 32 | 0;
  i3 = i4 | 0;
  tempBigInt = i5;
  HEAP8[i3] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i3 + 1 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i3 + 2 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i3 + 3 | 0] = tempBigInt & 255;
  i3 = i4 + 4 | 0;
  tempBigInt = i2;
  HEAP8[i3] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i3 + 1 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i3 + 2 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i3 + 3 | 0] = tempBigInt & 255;
  i3 = i1 + 64 | 0;
  i4 = i3 | 0;
  tempBigInt = i5;
  HEAP8[i4] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i4 + 1 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i4 + 2 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i4 + 3 | 0] = tempBigInt & 255;
  i4 = i3 + 4 | 0;
  tempBigInt = i2;
  HEAP8[i4] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i4 + 1 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i4 + 2 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i4 + 3 | 0] = tempBigInt & 255;
  i4 = i1 + 96 | 0;
  i3 = i4 | 0;
  tempBigInt = i5;
  HEAP8[i3] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i3 + 1 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i3 + 2 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i3 + 3 | 0] = tempBigInt & 255;
  i3 = i4 + 4 | 0;
  tempBigInt = i2;
  HEAP8[i3] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i3 + 1 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i3 + 2 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i3 + 3 | 0] = tempBigInt & 255;
  i3 = i1 + 128 | 0;
  i4 = i3 | 0;
  tempBigInt = i5;
  HEAP8[i4] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i4 + 1 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i4 + 2 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i4 + 3 | 0] = tempBigInt & 255;
  i4 = i3 + 4 | 0;
  tempBigInt = i2;
  HEAP8[i4] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i4 + 1 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i4 + 2 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i4 + 3 | 0] = tempBigInt & 255;
  i4 = i1 + 160 | 0;
  i3 = i4 | 0;
  tempBigInt = i5;
  HEAP8[i3] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i3 + 1 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i3 + 2 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i3 + 3 | 0] = tempBigInt & 255;
  i3 = i4 + 4 | 0;
  tempBigInt = i2;
  HEAP8[i3] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i3 + 1 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i3 + 2 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i3 + 3 | 0] = tempBigInt & 255;
  i3 = i1 + 192 | 0;
  i4 = i3 | 0;
  tempBigInt = i5;
  HEAP8[i4] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i4 + 1 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i4 + 2 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i4 + 3 | 0] = tempBigInt & 255;
  i4 = i3 + 4 | 0;
  tempBigInt = i2;
  HEAP8[i4] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i4 + 1 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i4 + 2 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i4 + 3 | 0] = tempBigInt & 255;
  i4 = i1 + 224 | 0;
  i1 = i4 | 0;
  tempBigInt = i5;
  HEAP8[i1] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i1 + 1 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i1 + 2 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i1 + 3 | 0] = tempBigInt & 255;
  i1 = i4 + 4 | 0;
  tempBigInt = i2;
  HEAP8[i1] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i1 + 1 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i1 + 2 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[i1 + 3 | 0] = tempBigInt & 255;
  return;
}
function _DC8uvNoTop(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
  i2 = (HEAPU8[i1 + 223 | 0] | 0) + ((HEAPU8[i1 + 191 | 0] | 0) + ((HEAPU8[i1 + 159 | 0] | 0) + ((HEAPU8[i1 + 127 | 0] | 0) + ((HEAPU8[i1 + 95 | 0] | 0) + ((HEAPU8[i1 + 63 | 0] | 0) + ((HEAPU8[i1 + 31 | 0] | 0) + ((HEAPU8[i1 - 1 | 0] | 0) + 4 | 0) | 0) | 0) | 0) | 0) | 0) | 0) >> 3;
  i3 = i2;
  i4 = (i2 | 0) < 0 ? -1 : 0;
  i2 = 16843009;
  i5 = 16843009;
  i6 = ~~((+(i3 >>> 0) + +(i4 | 0) * 4294967296.0) * (+(i2 >>> 0) + +(i5 | 0) * 4294967296.0)) >>> 0;
  i7 = Math_min(Math_floor((+(i3 >>> 0) + +(i4 | 0) * 4294967296.0) * (+(i2 >>> 0) + +(i5 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
  i5 = i1;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i7;
  i5 = i1 + 32 | 0;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i7;
  i5 = i1 + 64 | 0;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i7;
  i5 = i1 + 96 | 0;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i7;
  i5 = i1 + 128 | 0;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i7;
  i5 = i1 + 160 | 0;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i7;
  i5 = i1 + 192 | 0;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i7;
  i5 = i1 + 224 | 0;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i7;
  return;
}
function _DC8uvNoLeft(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
  i2 = (HEAPU8[i1 - 25 | 0] | 0) + ((HEAPU8[i1 - 26 | 0] | 0) + ((HEAPU8[i1 - 27 | 0] | 0) + ((HEAPU8[i1 - 28 | 0] | 0) + ((HEAPU8[i1 - 29 | 0] | 0) + ((HEAPU8[i1 - 30 | 0] | 0) + ((HEAPU8[i1 - 31 | 0] | 0) + ((HEAPU8[i1 - 32 | 0] | 0) + 4 | 0) | 0) | 0) | 0) | 0) | 0) | 0) >> 3;
  i3 = i2;
  i4 = (i2 | 0) < 0 ? -1 : 0;
  i2 = 16843009;
  i5 = 16843009;
  i6 = ~~((+(i3 >>> 0) + +(i4 | 0) * 4294967296.0) * (+(i2 >>> 0) + +(i5 | 0) * 4294967296.0)) >>> 0;
  i7 = Math_min(Math_floor((+(i3 >>> 0) + +(i4 | 0) * 4294967296.0) * (+(i2 >>> 0) + +(i5 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
  i5 = i1;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i7;
  i5 = i1 + 32 | 0;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i7;
  i5 = i1 + 64 | 0;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i7;
  i5 = i1 + 96 | 0;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i7;
  i5 = i1 + 128 | 0;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i7;
  i5 = i1 + 160 | 0;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i7;
  i5 = i1 + 192 | 0;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i7;
  i5 = i1 + 224 | 0;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i7;
  return;
}
function _DC8uvNoTopLeft(i1) {
  i1 = i1 | 0;
  var i2 = 0;
  i2 = i1;
  HEAP32[i2 >> 2] = -2139062144;
  HEAP32[i2 + 4 >> 2] = -2139062144;
  i2 = i1 + 32 | 0;
  HEAP32[i2 >> 2] = -2139062144;
  HEAP32[i2 + 4 >> 2] = -2139062144;
  i2 = i1 + 64 | 0;
  HEAP32[i2 >> 2] = -2139062144;
  HEAP32[i2 + 4 >> 2] = -2139062144;
  i2 = i1 + 96 | 0;
  HEAP32[i2 >> 2] = -2139062144;
  HEAP32[i2 + 4 >> 2] = -2139062144;
  i2 = i1 + 128 | 0;
  HEAP32[i2 >> 2] = -2139062144;
  HEAP32[i2 + 4 >> 2] = -2139062144;
  i2 = i1 + 160 | 0;
  HEAP32[i2 >> 2] = -2139062144;
  HEAP32[i2 + 4 >> 2] = -2139062144;
  i2 = i1 + 192 | 0;
  HEAP32[i2 >> 2] = -2139062144;
  HEAP32[i2 + 4 >> 2] = -2139062144;
  i2 = i1 + 224 | 0;
  HEAP32[i2 >> 2] = -2139062144;
  HEAP32[i2 + 4 >> 2] = -2139062144;
  return;
}
function _TransformDC(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
  i3 = (i1 << 16 >> 16) + 4 >> 3;
  i1 = 0;
  while (1) {
    i4 = i1 << 5;
    i5 = i2 + i4 | 0;
    i6 = (HEAPU8[i5] | 0) + i3 | 0;
    if (i6 >>> 0 > 255) {
      i7 = (i6 >> 31 & -255) + 255 | 0;
    } else {
      i7 = i6;
    }
    HEAP8[i5] = i7 & 255;
    i5 = i2 + (i4 | 1) | 0;
    i6 = (HEAPU8[i5] | 0) + i3 | 0;
    if (i6 >>> 0 > 255) {
      i8 = (i6 >> 31 & -255) + 255 | 0;
    } else {
      i8 = i6;
    }
    HEAP8[i5] = i8 & 255;
    i5 = i2 + (i4 | 2) | 0;
    i6 = (HEAPU8[i5] | 0) + i3 | 0;
    if (i6 >>> 0 > 255) {
      i9 = (i6 >> 31 & -255) + 255 | 0;
    } else {
      i9 = i6;
    }
    HEAP8[i5] = i9 & 255;
    i5 = i2 + (i4 | 3) | 0;
    i4 = (HEAPU8[i5] | 0) + i3 | 0;
    if (i4 >>> 0 > 255) {
      i10 = (i4 >> 31 & -255) + 255 | 0;
    } else {
      i10 = i4;
    }
    HEAP8[i5] = i10 & 255;
    i5 = i1 + 1 | 0;
    if ((i5 | 0) == 4) {
      break;
    } else {
      i1 = i5;
    }
  }
  return;
}
function _HE16(i1) {
  i1 = i1 | 0;
  _memset(i1 | 0, HEAP8[i1 - 1 | 0] | 0, 16);
  _memset(i1 + 32 | 0, HEAP8[i1 + 31 | 0] | 0, 16);
  _memset(i1 + 64 | 0, HEAP8[i1 + 63 | 0] | 0, 16);
  _memset(i1 + 96 | 0, HEAP8[i1 + 95 | 0] | 0, 16);
  _memset(i1 + 128 | 0, HEAP8[i1 + 127 | 0] | 0, 16);
  _memset(i1 + 160 | 0, HEAP8[i1 + 159 | 0] | 0, 16);
  _memset(i1 + 192 | 0, HEAP8[i1 + 191 | 0] | 0, 16);
  _memset(i1 + 224 | 0, HEAP8[i1 + 223 | 0] | 0, 16);
  _memset(i1 + 256 | 0, HEAP8[i1 + 255 | 0] | 0, 16);
  _memset(i1 + 288 | 0, HEAP8[i1 + 287 | 0] | 0, 16);
  _memset(i1 + 320 | 0, HEAP8[i1 + 319 | 0] | 0, 16);
  _memset(i1 + 352 | 0, HEAP8[i1 + 351 | 0] | 0, 16);
  _memset(i1 + 384 | 0, HEAP8[i1 + 383 | 0] | 0, 16);
  _memset(i1 + 416 | 0, HEAP8[i1 + 415 | 0] | 0, 16);
  _memset(i1 + 448 | 0, HEAP8[i1 + 447 | 0] | 0, 16);
  _memset(i1 + 480 | 0, HEAP8[i1 + 479 | 0] | 0, 16);
  return;
}
function _DC16NoTop(i1) {
  i1 = i1 | 0;
  var i2 = 0;
  i2 = ((HEAPU8[i1 + 479 | 0] | 0) + ((HEAPU8[i1 + 447 | 0] | 0) + ((HEAPU8[i1 + 415 | 0] | 0) + ((HEAPU8[i1 + 383 | 0] | 0) + ((HEAPU8[i1 + 351 | 0] | 0) + ((HEAPU8[i1 + 319 | 0] | 0) + ((HEAPU8[i1 + 287 | 0] | 0) + ((HEAPU8[i1 + 255 | 0] | 0) + ((HEAPU8[i1 + 223 | 0] | 0) + ((HEAPU8[i1 + 191 | 0] | 0) + ((HEAPU8[i1 + 159 | 0] | 0) + ((HEAPU8[i1 + 127 | 0] | 0) + ((HEAPU8[i1 + 95 | 0] | 0) + ((HEAPU8[i1 + 63 | 0] | 0) + ((HEAPU8[i1 + 31 | 0] | 0) + ((HEAPU8[i1 - 1 | 0] | 0) + 8 | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) >>> 4 & 255;
  _memset(i1 | 0, i2 | 0, 16);
  _memset(i1 + 32 | 0, i2 | 0, 16);
  _memset(i1 + 64 | 0, i2 | 0, 16);
  _memset(i1 + 96 | 0, i2 | 0, 16);
  _memset(i1 + 128 | 0, i2 | 0, 16);
  _memset(i1 + 160 | 0, i2 | 0, 16);
  _memset(i1 + 192 | 0, i2 | 0, 16);
  _memset(i1 + 224 | 0, i2 | 0, 16);
  _memset(i1 + 256 | 0, i2 | 0, 16);
  _memset(i1 + 288 | 0, i2 | 0, 16);
  _memset(i1 + 320 | 0, i2 | 0, 16);
  _memset(i1 + 352 | 0, i2 | 0, 16);
  _memset(i1 + 384 | 0, i2 | 0, 16);
  _memset(i1 + 416 | 0, i2 | 0, 16);
  _memset(i1 + 448 | 0, i2 | 0, 16);
  _memset(i1 + 480 | 0, i2 | 0, 16);
  return;
}
function _DC16NoLeft(i1) {
  i1 = i1 | 0;
  var i2 = 0;
  i2 = ((HEAPU8[i1 - 17 | 0] | 0) + ((HEAPU8[i1 - 18 | 0] | 0) + ((HEAPU8[i1 - 19 | 0] | 0) + ((HEAPU8[i1 - 20 | 0] | 0) + ((HEAPU8[i1 - 21 | 0] | 0) + ((HEAPU8[i1 - 22 | 0] | 0) + ((HEAPU8[i1 - 23 | 0] | 0) + ((HEAPU8[i1 - 24 | 0] | 0) + ((HEAPU8[i1 - 25 | 0] | 0) + ((HEAPU8[i1 - 26 | 0] | 0) + ((HEAPU8[i1 - 27 | 0] | 0) + ((HEAPU8[i1 - 28 | 0] | 0) + ((HEAPU8[i1 - 29 | 0] | 0) + ((HEAPU8[i1 - 30 | 0] | 0) + ((HEAPU8[i1 - 31 | 0] | 0) + ((HEAPU8[i1 - 32 | 0] | 0) + 8 | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) >>> 4 & 255;
  _memset(i1 | 0, i2 | 0, 16);
  _memset(i1 + 32 | 0, i2 | 0, 16);
  _memset(i1 + 64 | 0, i2 | 0, 16);
  _memset(i1 + 96 | 0, i2 | 0, 16);
  _memset(i1 + 128 | 0, i2 | 0, 16);
  _memset(i1 + 160 | 0, i2 | 0, 16);
  _memset(i1 + 192 | 0, i2 | 0, 16);
  _memset(i1 + 224 | 0, i2 | 0, 16);
  _memset(i1 + 256 | 0, i2 | 0, 16);
  _memset(i1 + 288 | 0, i2 | 0, 16);
  _memset(i1 + 320 | 0, i2 | 0, 16);
  _memset(i1 + 352 | 0, i2 | 0, 16);
  _memset(i1 + 384 | 0, i2 | 0, 16);
  _memset(i1 + 416 | 0, i2 | 0, 16);
  _memset(i1 + 448 | 0, i2 | 0, 16);
  _memset(i1 + 480 | 0, i2 | 0, 16);
  return;
}
function _DC16NoTopLeft(i1) {
  i1 = i1 | 0;
  var i2 = 0;
  HEAP8[i1] = 128;
  HEAP8[i1 + 1 | 0] = 128;
  HEAP8[i1 + 2 | 0] = 128;
  HEAP8[i1 + 3 | 0] = 128;
  HEAP8[i1 + 4 | 0] = 128;
  HEAP8[i1 + 5 | 0] = 128;
  HEAP8[i1 + 6 | 0] = 128;
  HEAP8[i1 + 7 | 0] = 128;
  HEAP8[i1 + 8 | 0] = 128;
  HEAP8[i1 + 9 | 0] = 128;
  HEAP8[i1 + 10 | 0] = 128;
  HEAP8[i1 + 11 | 0] = 128;
  HEAP8[i1 + 12 | 0] = 128;
  HEAP8[i1 + 13 | 0] = 128;
  HEAP8[i1 + 14 | 0] = 128;
  HEAP8[i1 + 15 | 0] = 128;
  i2 = i1 + 32 | 0;
  HEAP8[i2] = 128;
  HEAP8[i2 + 1 | 0] = 128;
  HEAP8[i2 + 2 | 0] = 128;
  HEAP8[i2 + 3 | 0] = 128;
  HEAP8[i2 + 4 | 0] = 128;
  HEAP8[i2 + 5 | 0] = 128;
  HEAP8[i2 + 6 | 0] = 128;
  HEAP8[i2 + 7 | 0] = 128;
  HEAP8[i2 + 8 | 0] = 128;
  HEAP8[i2 + 9 | 0] = 128;
  HEAP8[i2 + 10 | 0] = 128;
  HEAP8[i2 + 11 | 0] = 128;
  HEAP8[i2 + 12 | 0] = 128;
  HEAP8[i2 + 13 | 0] = 128;
  HEAP8[i2 + 14 | 0] = 128;
  HEAP8[i2 + 15 | 0] = 128;
  i2 = i1 + 64 | 0;
  HEAP8[i2] = 128;
  HEAP8[i2 + 1 | 0] = 128;
  HEAP8[i2 + 2 | 0] = 128;
  HEAP8[i2 + 3 | 0] = 128;
  HEAP8[i2 + 4 | 0] = 128;
  HEAP8[i2 + 5 | 0] = 128;
  HEAP8[i2 + 6 | 0] = 128;
  HEAP8[i2 + 7 | 0] = 128;
  HEAP8[i2 + 8 | 0] = 128;
  HEAP8[i2 + 9 | 0] = 128;
  HEAP8[i2 + 10 | 0] = 128;
  HEAP8[i2 + 11 | 0] = 128;
  HEAP8[i2 + 12 | 0] = 128;
  HEAP8[i2 + 13 | 0] = 128;
  HEAP8[i2 + 14 | 0] = 128;
  HEAP8[i2 + 15 | 0] = 128;
  i2 = i1 + 96 | 0;
  HEAP8[i2] = 128;
  HEAP8[i2 + 1 | 0] = 128;
  HEAP8[i2 + 2 | 0] = 128;
  HEAP8[i2 + 3 | 0] = 128;
  HEAP8[i2 + 4 | 0] = 128;
  HEAP8[i2 + 5 | 0] = 128;
  HEAP8[i2 + 6 | 0] = 128;
  HEAP8[i2 + 7 | 0] = 128;
  HEAP8[i2 + 8 | 0] = 128;
  HEAP8[i2 + 9 | 0] = 128;
  HEAP8[i2 + 10 | 0] = 128;
  HEAP8[i2 + 11 | 0] = 128;
  HEAP8[i2 + 12 | 0] = 128;
  HEAP8[i2 + 13 | 0] = 128;
  HEAP8[i2 + 14 | 0] = 128;
  HEAP8[i2 + 15 | 0] = 128;
  i2 = i1 + 128 | 0;
  HEAP8[i2] = 128;
  HEAP8[i2 + 1 | 0] = 128;
  HEAP8[i2 + 2 | 0] = 128;
  HEAP8[i2 + 3 | 0] = 128;
  HEAP8[i2 + 4 | 0] = 128;
  HEAP8[i2 + 5 | 0] = 128;
  HEAP8[i2 + 6 | 0] = 128;
  HEAP8[i2 + 7 | 0] = 128;
  HEAP8[i2 + 8 | 0] = 128;
  HEAP8[i2 + 9 | 0] = 128;
  HEAP8[i2 + 10 | 0] = 128;
  HEAP8[i2 + 11 | 0] = 128;
  HEAP8[i2 + 12 | 0] = 128;
  HEAP8[i2 + 13 | 0] = 128;
  HEAP8[i2 + 14 | 0] = 128;
  HEAP8[i2 + 15 | 0] = 128;
  i2 = i1 + 160 | 0;
  HEAP8[i2] = 128;
  HEAP8[i2 + 1 | 0] = 128;
  HEAP8[i2 + 2 | 0] = 128;
  HEAP8[i2 + 3 | 0] = 128;
  HEAP8[i2 + 4 | 0] = 128;
  HEAP8[i2 + 5 | 0] = 128;
  HEAP8[i2 + 6 | 0] = 128;
  HEAP8[i2 + 7 | 0] = 128;
  HEAP8[i2 + 8 | 0] = 128;
  HEAP8[i2 + 9 | 0] = 128;
  HEAP8[i2 + 10 | 0] = 128;
  HEAP8[i2 + 11 | 0] = 128;
  HEAP8[i2 + 12 | 0] = 128;
  HEAP8[i2 + 13 | 0] = 128;
  HEAP8[i2 + 14 | 0] = 128;
  HEAP8[i2 + 15 | 0] = 128;
  i2 = i1 + 192 | 0;
  HEAP8[i2] = 128;
  HEAP8[i2 + 1 | 0] = 128;
  HEAP8[i2 + 2 | 0] = 128;
  HEAP8[i2 + 3 | 0] = 128;
  HEAP8[i2 + 4 | 0] = 128;
  HEAP8[i2 + 5 | 0] = 128;
  HEAP8[i2 + 6 | 0] = 128;
  HEAP8[i2 + 7 | 0] = 128;
  HEAP8[i2 + 8 | 0] = 128;
  HEAP8[i2 + 9 | 0] = 128;
  HEAP8[i2 + 10 | 0] = 128;
  HEAP8[i2 + 11 | 0] = 128;
  HEAP8[i2 + 12 | 0] = 128;
  HEAP8[i2 + 13 | 0] = 128;
  HEAP8[i2 + 14 | 0] = 128;
  HEAP8[i2 + 15 | 0] = 128;
  i2 = i1 + 224 | 0;
  HEAP8[i2] = 128;
  HEAP8[i2 + 1 | 0] = 128;
  HEAP8[i2 + 2 | 0] = 128;
  HEAP8[i2 + 3 | 0] = 128;
  HEAP8[i2 + 4 | 0] = 128;
  HEAP8[i2 + 5 | 0] = 128;
  HEAP8[i2 + 6 | 0] = 128;
  HEAP8[i2 + 7 | 0] = 128;
  HEAP8[i2 + 8 | 0] = 128;
  HEAP8[i2 + 9 | 0] = 128;
  HEAP8[i2 + 10 | 0] = 128;
  HEAP8[i2 + 11 | 0] = 128;
  HEAP8[i2 + 12 | 0] = 128;
  HEAP8[i2 + 13 | 0] = 128;
  HEAP8[i2 + 14 | 0] = 128;
  HEAP8[i2 + 15 | 0] = 128;
  i2 = i1 + 256 | 0;
  HEAP8[i2] = 128;
  HEAP8[i2 + 1 | 0] = 128;
  HEAP8[i2 + 2 | 0] = 128;
  HEAP8[i2 + 3 | 0] = 128;
  HEAP8[i2 + 4 | 0] = 128;
  HEAP8[i2 + 5 | 0] = 128;
  HEAP8[i2 + 6 | 0] = 128;
  HEAP8[i2 + 7 | 0] = 128;
  HEAP8[i2 + 8 | 0] = 128;
  HEAP8[i2 + 9 | 0] = 128;
  HEAP8[i2 + 10 | 0] = 128;
  HEAP8[i2 + 11 | 0] = 128;
  HEAP8[i2 + 12 | 0] = 128;
  HEAP8[i2 + 13 | 0] = 128;
  HEAP8[i2 + 14 | 0] = 128;
  HEAP8[i2 + 15 | 0] = 128;
  i2 = i1 + 288 | 0;
  HEAP8[i2] = 128;
  HEAP8[i2 + 1 | 0] = 128;
  HEAP8[i2 + 2 | 0] = 128;
  HEAP8[i2 + 3 | 0] = 128;
  HEAP8[i2 + 4 | 0] = 128;
  HEAP8[i2 + 5 | 0] = 128;
  HEAP8[i2 + 6 | 0] = 128;
  HEAP8[i2 + 7 | 0] = 128;
  HEAP8[i2 + 8 | 0] = 128;
  HEAP8[i2 + 9 | 0] = 128;
  HEAP8[i2 + 10 | 0] = 128;
  HEAP8[i2 + 11 | 0] = 128;
  HEAP8[i2 + 12 | 0] = 128;
  HEAP8[i2 + 13 | 0] = 128;
  HEAP8[i2 + 14 | 0] = 128;
  HEAP8[i2 + 15 | 0] = 128;
  i2 = i1 + 320 | 0;
  HEAP8[i2] = 128;
  HEAP8[i2 + 1 | 0] = 128;
  HEAP8[i2 + 2 | 0] = 128;
  HEAP8[i2 + 3 | 0] = 128;
  HEAP8[i2 + 4 | 0] = 128;
  HEAP8[i2 + 5 | 0] = 128;
  HEAP8[i2 + 6 | 0] = 128;
  HEAP8[i2 + 7 | 0] = 128;
  HEAP8[i2 + 8 | 0] = 128;
  HEAP8[i2 + 9 | 0] = 128;
  HEAP8[i2 + 10 | 0] = 128;
  HEAP8[i2 + 11 | 0] = 128;
  HEAP8[i2 + 12 | 0] = 128;
  HEAP8[i2 + 13 | 0] = 128;
  HEAP8[i2 + 14 | 0] = 128;
  HEAP8[i2 + 15 | 0] = 128;
  i2 = i1 + 352 | 0;
  HEAP8[i2] = 128;
  HEAP8[i2 + 1 | 0] = 128;
  HEAP8[i2 + 2 | 0] = 128;
  HEAP8[i2 + 3 | 0] = 128;
  HEAP8[i2 + 4 | 0] = 128;
  HEAP8[i2 + 5 | 0] = 128;
  HEAP8[i2 + 6 | 0] = 128;
  HEAP8[i2 + 7 | 0] = 128;
  HEAP8[i2 + 8 | 0] = 128;
  HEAP8[i2 + 9 | 0] = 128;
  HEAP8[i2 + 10 | 0] = 128;
  HEAP8[i2 + 11 | 0] = 128;
  HEAP8[i2 + 12 | 0] = 128;
  HEAP8[i2 + 13 | 0] = 128;
  HEAP8[i2 + 14 | 0] = 128;
  HEAP8[i2 + 15 | 0] = 128;
  i2 = i1 + 384 | 0;
  HEAP8[i2] = 128;
  HEAP8[i2 + 1 | 0] = 128;
  HEAP8[i2 + 2 | 0] = 128;
  HEAP8[i2 + 3 | 0] = 128;
  HEAP8[i2 + 4 | 0] = 128;
  HEAP8[i2 + 5 | 0] = 128;
  HEAP8[i2 + 6 | 0] = 128;
  HEAP8[i2 + 7 | 0] = 128;
  HEAP8[i2 + 8 | 0] = 128;
  HEAP8[i2 + 9 | 0] = 128;
  HEAP8[i2 + 10 | 0] = 128;
  HEAP8[i2 + 11 | 0] = 128;
  HEAP8[i2 + 12 | 0] = 128;
  HEAP8[i2 + 13 | 0] = 128;
  HEAP8[i2 + 14 | 0] = 128;
  HEAP8[i2 + 15 | 0] = 128;
  i2 = i1 + 416 | 0;
  HEAP8[i2] = 128;
  HEAP8[i2 + 1 | 0] = 128;
  HEAP8[i2 + 2 | 0] = 128;
  HEAP8[i2 + 3 | 0] = 128;
  HEAP8[i2 + 4 | 0] = 128;
  HEAP8[i2 + 5 | 0] = 128;
  HEAP8[i2 + 6 | 0] = 128;
  HEAP8[i2 + 7 | 0] = 128;
  HEAP8[i2 + 8 | 0] = 128;
  HEAP8[i2 + 9 | 0] = 128;
  HEAP8[i2 + 10 | 0] = 128;
  HEAP8[i2 + 11 | 0] = 128;
  HEAP8[i2 + 12 | 0] = 128;
  HEAP8[i2 + 13 | 0] = 128;
  HEAP8[i2 + 14 | 0] = 128;
  HEAP8[i2 + 15 | 0] = 128;
  i2 = i1 + 448 | 0;
  HEAP8[i2] = 128;
  HEAP8[i2 + 1 | 0] = 128;
  HEAP8[i2 + 2 | 0] = 128;
  HEAP8[i2 + 3 | 0] = 128;
  HEAP8[i2 + 4 | 0] = 128;
  HEAP8[i2 + 5 | 0] = 128;
  HEAP8[i2 + 6 | 0] = 128;
  HEAP8[i2 + 7 | 0] = 128;
  HEAP8[i2 + 8 | 0] = 128;
  HEAP8[i2 + 9 | 0] = 128;
  HEAP8[i2 + 10 | 0] = 128;
  HEAP8[i2 + 11 | 0] = 128;
  HEAP8[i2 + 12 | 0] = 128;
  HEAP8[i2 + 13 | 0] = 128;
  HEAP8[i2 + 14 | 0] = 128;
  HEAP8[i2 + 15 | 0] = 128;
  i2 = i1 + 480 | 0;
  HEAP8[i2] = 128;
  HEAP8[i2 + 1 | 0] = 128;
  HEAP8[i2 + 2 | 0] = 128;
  HEAP8[i2 + 3 | 0] = 128;
  HEAP8[i2 + 4 | 0] = 128;
  HEAP8[i2 + 5 | 0] = 128;
  HEAP8[i2 + 6 | 0] = 128;
  HEAP8[i2 + 7 | 0] = 128;
  HEAP8[i2 + 8 | 0] = 128;
  HEAP8[i2 + 9 | 0] = 128;
  HEAP8[i2 + 10 | 0] = 128;
  HEAP8[i2 + 11 | 0] = 128;
  HEAP8[i2 + 12 | 0] = 128;
  HEAP8[i2 + 13 | 0] = 128;
  HEAP8[i2 + 14 | 0] = 128;
  HEAP8[i2 + 15 | 0] = 128;
  return;
}
function _HE8uv(i1) {
  i1 = i1 | 0;
  _memset(i1 | 0, HEAP8[i1 - 1 | 0] | 0, 8);
  _memset(i1 + 32 | 0, HEAP8[i1 + 31 | 0] | 0, 8);
  _memset(i1 + 64 | 0, HEAP8[i1 + 63 | 0] | 0, 8);
  _memset(i1 + 96 | 0, HEAP8[i1 + 95 | 0] | 0, 8);
  _memset(i1 + 128 | 0, HEAP8[i1 + 127 | 0] | 0, 8);
  _memset(i1 + 160 | 0, HEAP8[i1 + 159 | 0] | 0, 8);
  _memset(i1 + 192 | 0, HEAP8[i1 + 191 | 0] | 0, 8);
  _memset(i1 + 224 | 0, HEAP8[i1 + 223 | 0] | 0, 8);
  return;
}
function _TransformDCUV(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
  i3 = HEAP16[i1 >> 1] | 0;
  L2244 : do {
    if (i3 << 16 >> 16 != 0) {
      i4 = (i3 << 16 >> 16) + 4 >> 3;
      i5 = 0;
      while (1) {
        i6 = i5 << 5;
        i7 = i2 + i6 | 0;
        i8 = (HEAPU8[i7] | 0) + i4 | 0;
        if (i8 >>> 0 > 255) {
          i9 = (i8 >> 31 & -255) + 255 | 0;
        } else {
          i9 = i8;
        }
        HEAP8[i7] = i9 & 255;
        i7 = i2 + (i6 | 1) | 0;
        i8 = (HEAPU8[i7] | 0) + i4 | 0;
        if (i8 >>> 0 > 255) {
          i10 = (i8 >> 31 & -255) + 255 | 0;
        } else {
          i10 = i8;
        }
        HEAP8[i7] = i10 & 255;
        i7 = i2 + (i6 | 2) | 0;
        i8 = (HEAPU8[i7] | 0) + i4 | 0;
        if (i8 >>> 0 > 255) {
          i11 = (i8 >> 31 & -255) + 255 | 0;
        } else {
          i11 = i8;
        }
        HEAP8[i7] = i11 & 255;
        i7 = i2 + (i6 | 3) | 0;
        i6 = (HEAPU8[i7] | 0) + i4 | 0;
        if (i6 >>> 0 > 255) {
          i12 = (i6 >> 31 & -255) + 255 | 0;
        } else {
          i12 = i6;
        }
        HEAP8[i7] = i12 & 255;
        i7 = i5 + 1 | 0;
        if ((i7 | 0) == 4) {
          break L2244;
        } else {
          i5 = i7;
        }
      }
    }
  } while (0);
  i12 = HEAP16[i1 + 32 >> 1] | 0;
  L2261 : do {
    if (i12 << 16 >> 16 != 0) {
      i11 = (i12 << 16 >> 16) + 4 >> 3;
      i10 = 0;
      while (1) {
        i9 = i10 << 5;
        i3 = i2 + (i9 | 4) | 0;
        i5 = (HEAPU8[i3] | 0) + i11 | 0;
        if (i5 >>> 0 > 255) {
          i13 = (i5 >> 31 & -255) + 255 | 0;
        } else {
          i13 = i5;
        }
        HEAP8[i3] = i13 & 255;
        i3 = i2 + (i9 | 5) | 0;
        i5 = (HEAPU8[i3] | 0) + i11 | 0;
        if (i5 >>> 0 > 255) {
          i14 = (i5 >> 31 & -255) + 255 | 0;
        } else {
          i14 = i5;
        }
        HEAP8[i3] = i14 & 255;
        i3 = i2 + (i9 | 6) | 0;
        i5 = (HEAPU8[i3] | 0) + i11 | 0;
        if (i5 >>> 0 > 255) {
          i15 = (i5 >> 31 & -255) + 255 | 0;
        } else {
          i15 = i5;
        }
        HEAP8[i3] = i15 & 255;
        i3 = i2 + (i9 | 7) | 0;
        i9 = (HEAPU8[i3] | 0) + i11 | 0;
        if (i9 >>> 0 > 255) {
          i16 = (i9 >> 31 & -255) + 255 | 0;
        } else {
          i16 = i9;
        }
        HEAP8[i3] = i16 & 255;
        i3 = i10 + 1 | 0;
        if ((i3 | 0) == 4) {
          break L2261;
        } else {
          i10 = i3;
        }
      }
    }
  } while (0);
  i16 = HEAP16[i1 + 64 >> 1] | 0;
  L2278 : do {
    if (i16 << 16 >> 16 != 0) {
      i15 = (i16 << 16 >> 16) + 4 >> 3;
      i14 = 0;
      while (1) {
        i13 = i14 << 5;
        i12 = i2 + (i13 + 128 | 0) | 0;
        i10 = (HEAPU8[i12] | 0) + i15 | 0;
        if (i10 >>> 0 > 255) {
          i17 = (i10 >> 31 & -255) + 255 | 0;
        } else {
          i17 = i10;
        }
        HEAP8[i12] = i17 & 255;
        i12 = i2 + ((i13 | 1) + 128 | 0) | 0;
        i10 = (HEAPU8[i12] | 0) + i15 | 0;
        if (i10 >>> 0 > 255) {
          i18 = (i10 >> 31 & -255) + 255 | 0;
        } else {
          i18 = i10;
        }
        HEAP8[i12] = i18 & 255;
        i12 = i2 + ((i13 | 2) + 128 | 0) | 0;
        i10 = (HEAPU8[i12] | 0) + i15 | 0;
        if (i10 >>> 0 > 255) {
          i19 = (i10 >> 31 & -255) + 255 | 0;
        } else {
          i19 = i10;
        }
        HEAP8[i12] = i19 & 255;
        i12 = i2 + ((i13 | 3) + 128 | 0) | 0;
        i13 = (HEAPU8[i12] | 0) + i15 | 0;
        if (i13 >>> 0 > 255) {
          i20 = (i13 >> 31 & -255) + 255 | 0;
        } else {
          i20 = i13;
        }
        HEAP8[i12] = i20 & 255;
        i12 = i14 + 1 | 0;
        if ((i12 | 0) == 4) {
          break L2278;
        } else {
          i14 = i12;
        }
      }
    }
  } while (0);
  i20 = HEAP16[i1 + 96 >> 1] | 0;
  if (i20 << 16 >> 16 == 0) {
    return;
  }
  i1 = (i20 << 16 >> 16) + 4 >> 3;
  i20 = 0;
  while (1) {
    i19 = i20 << 5;
    i18 = i2 + (i19 + 132 | 0) | 0;
    i17 = (HEAPU8[i18] | 0) + i1 | 0;
    if (i17 >>> 0 > 255) {
      i21 = (i17 >> 31 & -255) + 255 | 0;
    } else {
      i21 = i17;
    }
    HEAP8[i18] = i21 & 255;
    i18 = i2 + ((i19 | 1) + 132 | 0) | 0;
    i17 = (HEAPU8[i18] | 0) + i1 | 0;
    if (i17 >>> 0 > 255) {
      i22 = (i17 >> 31 & -255) + 255 | 0;
    } else {
      i22 = i17;
    }
    HEAP8[i18] = i22 & 255;
    i18 = i2 + ((i19 | 2) + 132 | 0) | 0;
    i17 = (HEAPU8[i18] | 0) + i1 | 0;
    if (i17 >>> 0 > 255) {
      i23 = (i17 >> 31 & -255) + 255 | 0;
    } else {
      i23 = i17;
    }
    HEAP8[i18] = i23 & 255;
    i18 = i2 + ((i19 | 3) + 132 | 0) | 0;
    i19 = (HEAPU8[i18] | 0) + i1 | 0;
    if (i19 >>> 0 > 255) {
      i24 = (i19 >> 31 & -255) + 255 | 0;
    } else {
      i24 = i19;
    }
    HEAP8[i18] = i24 & 255;
    i18 = i20 + 1 | 0;
    if ((i18 | 0) == 4) {
      break;
    } else {
      i20 = i18;
    }
  }
  return;
}
function _SimpleHFilter16(i1, i2, i3) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
  i4 = 0;
  while (1) {
    i5 = Math_imul(i4, i2);
    i6 = i1 + i5 | 0;
    i7 = HEAPU8[i1 + (i5 - 2 | 0) | 0] | 0;
    i8 = i1 + (i5 - 1 | 0) | 0;
    i9 = HEAPU8[i8] | 0;
    i10 = HEAPU8[i6] | 0;
    i11 = HEAPU8[i1 + (i5 + 1 | 0) | 0] | 0;
    i5 = i9 + 255 | 0;
    if ((((HEAPU8[5262404 + (i5 - i10 | 0) | 0] | 0) << 1) + (HEAPU8[5261892 + ((i7 + 255 | 0) - i11 | 0) | 0] | 0) | 0) <= (i3 | 0)) {
      i12 = (HEAP8[5243696 + ((i7 + 1020 | 0) - i11 | 0) | 0] << 24 >> 24) + ((i10 - i9 | 0) * 3 & -1) | 0;
      i9 = HEAP8[5243468 + ((i12 + 4 >> 3) + 112 | 0) | 0] << 24 >> 24;
      HEAP8[i8] = HEAP8[5260868 + ((HEAP8[5243468 + ((i12 + 3 >> 3) + 112 | 0) | 0] << 24 >> 24) + i5 | 0) | 0] | 0;
      HEAP8[i6] = HEAP8[5260868 + ((i10 + 255 | 0) - i9 | 0) | 0] | 0;
    }
    i9 = i4 + 1 | 0;
    if ((i9 | 0) == 16) {
      break;
    } else {
      i4 = i9;
    }
  }
  return;
}
function _needs_filter2(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
  i5 = HEAPU8[i1 + (i2 * -3 & -1) | 0] | 0;
  i6 = HEAPU8[i1 + (i2 * -2 & -1) | 0] | 0;
  i7 = HEAPU8[i1 + (-i2 | 0) | 0] | 0;
  i8 = HEAPU8[i1] | 0;
  i9 = HEAPU8[i1 + i2 | 0] | 0;
  i10 = HEAPU8[i1 + (i2 << 1) | 0] | 0;
  i11 = HEAPU8[i1 + (i2 * 3 & -1) | 0] | 0;
  i12 = i6 + 255 | 0;
  if ((((HEAPU8[5262404 + ((i7 + 255 | 0) - i8 | 0) | 0] | 0) << 1) + (HEAPU8[5261892 + (i12 - i9 | 0) | 0] | 0) | 0) > (i3 | 0)) {
    i13 = 0;
    return i13 | 0;
  }
  do {
    if ((HEAPU8[5262404 + ((i5 ^ 255) + (HEAPU8[i1 + (i2 * -4 & -1) | 0] | 0) | 0) | 0] | 0 | 0) > (i4 | 0)) {
      i14 = 0;
    } else {
      if ((HEAPU8[5262404 + ((i5 + 255 | 0) - i6 | 0) | 0] | 0 | 0) > (i4 | 0)) {
        i14 = 0;
        break;
      }
      if ((HEAPU8[5262404 + (i12 - i7 | 0) | 0] | 0 | 0) > (i4 | 0)) {
        i14 = 0;
        break;
      }
      if ((HEAPU8[5262404 + ((i10 ^ 255) + i11 | 0) | 0] | 0 | 0) > (i4 | 0)) {
        i14 = 0;
        break;
      }
      if ((HEAPU8[5262404 + ((i9 ^ 255) + i10 | 0) | 0] | 0 | 0) > (i4 | 0)) {
        i14 = 0;
        break;
      }
      i14 = (HEAPU8[5262404 + ((i8 ^ 255) + i9 | 0) | 0] | 0 | 0) <= (i4 | 0);
    }
  } while (0);
  i13 = i14 & 1;
  return i13 | 0;
}
function _FilterLoop24(i1, i2, i3, i4, i5, i6, i7) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  i7 = i7 | 0;
  var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
  if ((i4 | 0) <= 0) {
    return;
  }
  i8 = i2 * -2 & -1;
  i9 = -i2 | 0;
  i10 = i1;
  i1 = i4;
  while (1) {
    i4 = i1 - 1 | 0;
    L2338 : do {
      if ((_needs_filter2(i10, i2, i5, i6) | 0) != 0) {
        i11 = i10 + i8 | 0;
        i12 = HEAPU8[i11] | 0;
        i13 = i10 + i9 | 0;
        i14 = HEAPU8[i13] | 0;
        i15 = i12 + 255 | 0;
        do {
          if ((HEAPU8[5262404 + (i15 - i14 | 0) | 0] | 0 | 0) > (i7 | 0)) {
            i16 = HEAPU8[i10] | 0;
            i17 = i16;
            i18 = HEAPU8[i10 + i2 | 0] | 0;
            i19 = (i16 - i14 | 0) * 3 & -1;
          } else {
            i16 = i10 + i2 | 0;
            i20 = HEAPU8[i16] | 0;
            i21 = HEAPU8[i10] | 0;
            i22 = i20 + 255 | 0;
            i23 = (i21 - i14 | 0) * 3 & -1;
            if ((HEAPU8[5262404 + (i22 - i21 | 0) | 0] | 0 | 0) > (i7 | 0)) {
              i17 = i21;
              i18 = i20;
              i19 = i23;
              break;
            }
            i20 = HEAP8[5243468 + ((i23 + 4 >> 3) + 112 | 0) | 0] << 24 >> 24;
            i24 = HEAP8[5243468 + ((i23 + 3 >> 3) + 112 | 0) | 0] << 24 >> 24;
            i23 = i20 + 1 >> 1;
            HEAP8[i11] = HEAP8[5260868 + (i15 + i23 | 0) | 0] | 0;
            HEAP8[i13] = HEAP8[5260868 + ((i14 + 255 | 0) + i24 | 0) | 0] | 0;
            HEAP8[i10] = HEAP8[5260868 + ((i21 + 255 | 0) - i20 | 0) | 0] | 0;
            HEAP8[i16] = HEAP8[5260868 + (i22 - i23 | 0) | 0] | 0;
            break L2338;
          }
        } while (0);
        i15 = (HEAP8[5243696 + ((i12 + 1020 | 0) - i18 | 0) | 0] << 24 >> 24) + i19 | 0;
        i11 = HEAP8[5243468 + ((i15 + 4 >> 3) + 112 | 0) | 0] << 24 >> 24;
        HEAP8[i13] = HEAP8[5260868 + ((i14 + 255 | 0) + (HEAP8[5243468 + ((i15 + 3 >> 3) + 112 | 0) | 0] << 24 >> 24) | 0) | 0] | 0;
        HEAP8[i10] = HEAP8[5260868 + ((i17 + 255 | 0) - i11 | 0) | 0] | 0;
      }
    } while (0);
    if ((i4 | 0) > 0) {
      i10 = i10 + i3 | 0;
      i1 = i4;
    } else {
      break;
    }
  }
  return;
}
function _FilterLoop26(i1, i2, i3, i4, i5, i6, i7) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  i7 = i7 | 0;
  var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
  if ((i4 | 0) <= 0) {
    return;
  }
  i8 = i2 * -2 & -1;
  i9 = -i2 | 0;
  i10 = i2 * -3 & -1;
  i11 = i2 << 1;
  i12 = i1;
  i1 = i4;
  while (1) {
    i4 = i1 - 1 | 0;
    L2353 : do {
      if ((_needs_filter2(i12, i2, i5, i6) | 0) != 0) {
        i13 = i12 + i8 | 0;
        i14 = HEAPU8[i13] | 0;
        i15 = i12 + i9 | 0;
        i16 = HEAPU8[i15] | 0;
        i17 = i14 + 255 | 0;
        do {
          if ((HEAPU8[5262404 + (i17 - i16 | 0) | 0] | 0 | 0) > (i7 | 0)) {
            i18 = HEAP8[i12] | 0;
            i19 = HEAP8[i12 + i2 | 0] | 0;
          } else {
            i20 = i12 + i2 | 0;
            i21 = HEAP8[i20] | 0;
            i22 = HEAP8[i12] | 0;
            i23 = i21 & 255;
            i24 = i22 & 255;
            i25 = i23 + 255 | 0;
            if ((HEAPU8[5262404 + (i25 - i24 | 0) | 0] | 0 | 0) > (i7 | 0)) {
              i18 = i22;
              i19 = i21;
              break;
            }
            i21 = i12 + i10 | 0;
            i22 = i12 + i11 | 0;
            i26 = HEAPU8[i22] | 0;
            i27 = HEAP8[5243696 + ((((i24 - i16 | 0) * 3 & -1) + 1020 | 0) + (HEAP8[5243696 + ((i14 + 1020 | 0) - i23 | 0) | 0] << 24 >> 24) | 0) | 0] << 24 >> 24;
            i23 = (i27 * 27 & -1) + 63 >> 7;
            i28 = (i27 * 18 & -1) + 63 >> 7;
            i29 = (i27 * 9 & -1) + 63 >> 7;
            HEAP8[i21] = HEAP8[5260868 + (((HEAPU8[i21] | 0) + 255 | 0) + i29 | 0) | 0] | 0;
            HEAP8[i13] = HEAP8[5260868 + (i17 + i28 | 0) | 0] | 0;
            HEAP8[i15] = HEAP8[5260868 + ((i16 + 255 | 0) + i23 | 0) | 0] | 0;
            HEAP8[i12] = HEAP8[5260868 + ((i24 + 255 | 0) - i23 | 0) | 0] | 0;
            HEAP8[i20] = HEAP8[5260868 + (i25 - i28 | 0) | 0] | 0;
            HEAP8[i22] = HEAP8[5260868 + ((i26 + 255 | 0) - i29 | 0) | 0] | 0;
            break L2353;
          }
        } while (0);
        i17 = i18 & 255;
        i13 = ((i17 - i16 | 0) * 3 & -1) + (HEAP8[5243696 + ((i14 + 1020 | 0) - (i19 & 255) | 0) | 0] << 24 >> 24) | 0;
        i29 = HEAP8[5243468 + ((i13 + 4 >> 3) + 112 | 0) | 0] << 24 >> 24;
        HEAP8[i15] = HEAP8[5260868 + ((i16 + 255 | 0) + (HEAP8[5243468 + ((i13 + 3 >> 3) + 112 | 0) | 0] << 24 >> 24) | 0) | 0] | 0;
        HEAP8[i12] = HEAP8[5260868 + ((i17 + 255 | 0) - i29 | 0) | 0] | 0;
      }
    } while (0);
    if ((i4 | 0) > 0) {
      i12 = i12 + i3 | 0;
      i1 = i4;
    } else {
      break;
    }
  }
  return;
}
function _TransformOne(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
  i3 = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  i4 = i3 | 0;
  i5 = i4 | 0;
  i6 = HEAP16[i1 >> 1] << 16 >> 16;
  i7 = HEAP16[i1 + 16 >> 1] << 16 >> 16;
  i8 = i7 + i6 | 0;
  i9 = i6 - i7 | 0;
  i7 = HEAP16[i1 + 8 >> 1] << 16 >> 16;
  i6 = HEAP16[i1 + 24 >> 1] << 16 >> 16;
  i10 = ((i7 * 35468 & -1) >> 16) - ((i6 * 85627 & -1) >> 16) | 0;
  i11 = ((i6 * 35468 & -1) >> 16) + ((i7 * 85627 & -1) >> 16) | 0;
  i7 = i11 + i8 | 0;
  HEAP32[i5 >> 2] = i7;
  HEAP32[i4 + 4 >> 2] = i10 + i9 | 0;
  HEAP32[i4 + 8 >> 2] = i9 - i10 | 0;
  HEAP32[i4 + 12 >> 2] = i8 - i11 | 0;
  i11 = HEAP16[i1 + 2 >> 1] << 16 >> 16;
  i8 = HEAP16[i1 + 18 >> 1] << 16 >> 16;
  i10 = i8 + i11 | 0;
  i9 = i11 - i8 | 0;
  i8 = HEAP16[i1 + 10 >> 1] << 16 >> 16;
  i11 = HEAP16[i1 + 26 >> 1] << 16 >> 16;
  i6 = ((i8 * 35468 & -1) >> 16) - ((i11 * 85627 & -1) >> 16) | 0;
  i12 = ((i11 * 35468 & -1) >> 16) + ((i8 * 85627 & -1) >> 16) | 0;
  i8 = i12 + i10 | 0;
  HEAP32[i4 + 16 >> 2] = i8;
  HEAP32[i4 + 20 >> 2] = i6 + i9 | 0;
  HEAP32[i4 + 24 >> 2] = i9 - i6 | 0;
  HEAP32[i4 + 28 >> 2] = i10 - i12 | 0;
  i12 = HEAP16[i1 + 4 >> 1] << 16 >> 16;
  i10 = HEAP16[i1 + 20 >> 1] << 16 >> 16;
  i6 = i10 + i12 | 0;
  i9 = i12 - i10 | 0;
  i10 = HEAP16[i1 + 12 >> 1] << 16 >> 16;
  i12 = HEAP16[i1 + 28 >> 1] << 16 >> 16;
  i11 = ((i10 * 35468 & -1) >> 16) - ((i12 * 85627 & -1) >> 16) | 0;
  i13 = ((i12 * 35468 & -1) >> 16) + ((i10 * 85627 & -1) >> 16) | 0;
  HEAP32[i4 + 32 >> 2] = i13 + i6 | 0;
  HEAP32[i4 + 36 >> 2] = i11 + i9 | 0;
  HEAP32[i4 + 40 >> 2] = i9 - i11 | 0;
  HEAP32[i4 + 44 >> 2] = i6 - i13 | 0;
  i13 = HEAP16[i1 + 6 >> 1] << 16 >> 16;
  i6 = HEAP16[i1 + 22 >> 1] << 16 >> 16;
  i11 = i6 + i13 | 0;
  i9 = i13 - i6 | 0;
  i6 = HEAP16[i1 + 14 >> 1] << 16 >> 16;
  i13 = HEAP16[i1 + 30 >> 1] << 16 >> 16;
  i1 = ((i6 * 35468 & -1) >> 16) - ((i13 * 85627 & -1) >> 16) | 0;
  i10 = ((i13 * 35468 & -1) >> 16) + ((i6 * 85627 & -1) >> 16) | 0;
  HEAP32[i4 + 48 >> 2] = i10 + i11 | 0;
  HEAP32[i4 + 52 >> 2] = i1 + i9 | 0;
  HEAP32[i4 + 56 >> 2] = i9 - i1 | 0;
  HEAP32[i4 + 60 >> 2] = i11 - i10 | 0;
  i10 = 1;
  i11 = i5;
  i5 = i2;
  i2 = i7;
  i7 = i8;
  while (1) {
    i8 = i2 + 4 | 0;
    i4 = HEAP32[i11 + 32 >> 2] | 0;
    i1 = i8 + i4 | 0;
    i9 = i8 - i4 | 0;
    i4 = HEAP32[i11 + 48 >> 2] | 0;
    i8 = ((i7 * 35468 & -1) >> 16) - ((i4 * 85627 & -1) >> 16) | 0;
    i6 = ((i4 * 35468 & -1) >> 16) + ((i7 * 85627 & -1) >> 16) | 0;
    i4 = (i6 + i1 >> 3) + (HEAPU8[i5] | 0) | 0;
    if (i4 >>> 0 > 255) {
      i14 = (i4 >> 31 & -255) + 255 | 0;
    } else {
      i14 = i4;
    }
    HEAP8[i5] = i14 & 255;
    i4 = i5 + 1 | 0;
    i13 = (HEAPU8[i4] | 0) + (i8 + i9 >> 3) | 0;
    if (i13 >>> 0 > 255) {
      i15 = (i13 >> 31 & -255) + 255 | 0;
    } else {
      i15 = i13;
    }
    HEAP8[i4] = i15 & 255;
    i4 = i5 + 2 | 0;
    i13 = (HEAPU8[i4] | 0) + (i9 - i8 >> 3) | 0;
    if (i13 >>> 0 > 255) {
      i16 = (i13 >> 31 & -255) + 255 | 0;
    } else {
      i16 = i13;
    }
    HEAP8[i4] = i16 & 255;
    i4 = i5 + 3 | 0;
    i13 = (HEAPU8[i4] | 0) + (i1 - i6 >> 3) | 0;
    if (i13 >>> 0 > 255) {
      i17 = (i13 >> 31 & -255) + 255 | 0;
    } else {
      i17 = i13;
    }
    HEAP8[i4] = i17 & 255;
    i4 = i11 + 4 | 0;
    if ((i10 | 0) == 4) {
      break;
    }
    i13 = HEAP32[i11 + 20 >> 2] | 0;
    i10 = i10 + 1 | 0;
    i11 = i4;
    i5 = i5 + 32 | 0;
    i2 = HEAP32[i4 >> 2] | 0;
    i7 = i13;
  }
  STACKTOP = i3;
  return;
}
function _VP8LInverseTransform(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0;
  i6 = HEAP32[i1 >> 2] | 0;
  if ((i6 | 0) == 3) {
    i7 = i1 + 4 | 0;
    i8 = HEAP32[i7 >> 2] | 0;
    if ((i4 | 0) == (i5 | 0) & (i8 | 0) > 0) {
      i9 = i3 - i2 | 0;
      i10 = i1 + 8 | 0;
      i11 = HEAP32[i10 >> 2] | 0;
      i12 = Math_imul(i11, i9);
      i13 = Math_imul((((1 << i8) - 1 | 0) + i11 | 0) >>> (i8 >>> 0), i9);
      i9 = i5 + (i12 - i13 << 2) | 0;
      _memmove(i9, i5, i13 << 2);
      i13 = HEAP32[i7 >> 2] | 0;
      i7 = HEAP32[i10 >> 2] | 0;
      i10 = HEAP32[i1 + 16 >> 2] | 0;
      i12 = 8 >>> (i13 >>> 0);
      if ((i12 | 0) >= 8) {
        if ((i2 | 0) >= (i3 | 0)) {
          return;
        }
        i11 = (i7 | 0) > 0;
        i14 = i2;
        i15 = i5;
        i16 = i9;
        while (1) {
          if (i11) {
            i17 = i15;
            i18 = i16;
            i19 = 0;
            while (1) {
              HEAP32[i17 >> 2] = HEAP32[i10 + (((HEAP32[i18 >> 2] | 0) >>> 8 & 255) << 2) >> 2] | 0;
              i20 = i19 + 1 | 0;
              if ((i20 | 0) == (i7 | 0)) {
                break;
              } else {
                i17 = i17 + 4 | 0;
                i18 = i18 + 4 | 0;
                i19 = i20;
              }
            }
            i21 = i15 + (i7 << 2) | 0;
            i22 = i16 + (i7 << 2) | 0;
          } else {
            i21 = i15;
            i22 = i16;
          }
          i19 = i14 + 1 | 0;
          if ((i19 | 0) == (i3 | 0)) {
            break;
          } else {
            i14 = i19;
            i15 = i21;
            i16 = i22;
          }
        }
        return;
      }
      i22 = (1 << i13) - 1 | 0;
      i13 = (1 << i12) - 1 | 0;
      if ((i2 | 0) >= (i3 | 0)) {
        return;
      }
      i16 = (i7 | 0) > 0;
      i21 = i2;
      i15 = i5;
      i14 = i9;
      while (1) {
        if (i16) {
          i9 = i15;
          i11 = i14;
          i19 = 0;
          i18 = 0;
          while (1) {
            if ((i18 & i22 | 0) == 0) {
              i23 = (HEAP32[i11 >> 2] | 0) >>> 8 & 255;
              i24 = i11 + 4 | 0;
            } else {
              i23 = i19;
              i24 = i11;
            }
            HEAP32[i9 >> 2] = HEAP32[i10 + ((i23 & i13) << 2) >> 2] | 0;
            i17 = i18 + 1 | 0;
            if ((i17 | 0) == (i7 | 0)) {
              break;
            } else {
              i9 = i9 + 4 | 0;
              i11 = i24;
              i19 = i23 >>> (i12 >>> 0);
              i18 = i17;
            }
          }
          i25 = i15 + (i7 << 2) | 0;
          i26 = i24;
        } else {
          i25 = i15;
          i26 = i14;
        }
        i18 = i21 + 1 | 0;
        if ((i18 | 0) == (i3 | 0)) {
          break;
        } else {
          i21 = i18;
          i15 = i25;
          i14 = i26;
        }
      }
      return;
    } else {
      i26 = HEAP32[i1 + 8 >> 2] | 0;
      i14 = HEAP32[i1 + 16 >> 2] | 0;
      i25 = 8 >>> (i8 >>> 0);
      if ((i25 | 0) >= 8) {
        if ((i2 | 0) >= (i3 | 0)) {
          return;
        }
        i15 = (i26 | 0) > 0;
        i21 = i2;
        i24 = i5;
        i7 = i4;
        while (1) {
          if (i15) {
            i12 = i24;
            i23 = i7;
            i13 = 0;
            while (1) {
              HEAP32[i12 >> 2] = HEAP32[i14 + (((HEAP32[i23 >> 2] | 0) >>> 8 & 255) << 2) >> 2] | 0;
              i10 = i13 + 1 | 0;
              if ((i10 | 0) == (i26 | 0)) {
                break;
              } else {
                i12 = i12 + 4 | 0;
                i23 = i23 + 4 | 0;
                i13 = i10;
              }
            }
            i27 = i24 + (i26 << 2) | 0;
            i28 = i7 + (i26 << 2) | 0;
          } else {
            i27 = i24;
            i28 = i7;
          }
          i13 = i21 + 1 | 0;
          if ((i13 | 0) == (i3 | 0)) {
            break;
          } else {
            i21 = i13;
            i24 = i27;
            i7 = i28;
          }
        }
        return;
      }
      i28 = (1 << i8) - 1 | 0;
      i8 = (1 << i25) - 1 | 0;
      if ((i2 | 0) >= (i3 | 0)) {
        return;
      }
      i7 = (i26 | 0) > 0;
      i27 = i2;
      i24 = i5;
      i21 = i4;
      while (1) {
        if (i7) {
          i4 = i24;
          i15 = i21;
          i13 = 0;
          i23 = 0;
          while (1) {
            if ((i23 & i28 | 0) == 0) {
              i29 = (HEAP32[i15 >> 2] | 0) >>> 8 & 255;
              i30 = i15 + 4 | 0;
            } else {
              i29 = i13;
              i30 = i15;
            }
            HEAP32[i4 >> 2] = HEAP32[i14 + ((i29 & i8) << 2) >> 2] | 0;
            i12 = i23 + 1 | 0;
            if ((i12 | 0) == (i26 | 0)) {
              break;
            } else {
              i4 = i4 + 4 | 0;
              i15 = i30;
              i13 = i29 >>> (i25 >>> 0);
              i23 = i12;
            }
          }
          i31 = i24 + (i26 << 2) | 0;
          i32 = i30;
        } else {
          i31 = i24;
          i32 = i21;
        }
        i23 = i27 + 1 | 0;
        if ((i23 | 0) == (i3 | 0)) {
          break;
        } else {
          i27 = i23;
          i24 = i31;
          i21 = i32;
        }
      }
      return;
    }
  } else if ((i6 | 0) == 0) {
    i32 = i1 + 8 | 0;
    i21 = HEAP32[i32 >> 2] | 0;
    if ((i2 | 0) == 0) {
      i31 = HEAP32[i5 >> 2] | 0;
      i24 = i31 - 16777216 & -16711936 | i31 & 16711935;
      HEAP32[i5 >> 2] = i24;
      L2444 : do {
        if ((i21 | 0) > 1) {
          i31 = 1;
          i27 = i24;
          while (1) {
            i30 = i5 + (i31 << 2) | 0;
            i26 = HEAP32[i30 >> 2] | 0;
            i25 = (i26 & -16711936) + (i27 & -16711936) & -16711936 | (i26 & 16711935) + (i27 & 16711935) & 16711935;
            HEAP32[i30 >> 2] = i25;
            i30 = i31 + 1 | 0;
            if ((i30 | 0) == (i21 | 0)) {
              break L2444;
            } else {
              i31 = i30;
              i27 = i25;
            }
          }
        }
      } while (0);
      i33 = 1;
      i34 = i5 + (i21 << 2) | 0;
    } else {
      i33 = i2;
      i34 = i5;
    }
    i24 = HEAP32[i1 + 4 >> 2] | 0;
    i27 = 1 << i24;
    i31 = i27 - 1 | 0;
    i25 = ((i21 - 1 | 0) + i27 | 0) >>> (i24 >>> 0);
    i27 = HEAP32[i1 + 16 >> 2] | 0;
    i30 = -i21 | 0;
    i26 = (i21 | 0) > 1;
    i29 = i34;
    i34 = i27 + (Math_imul(i25, i33 >> i24) << 2) | 0;
    i24 = i33;
    L2449 : while (1) {
      i33 = i34 + 4 | 0;
      i27 = i29;
      i8 = i24;
      while (1) {
        if ((i8 | 0) >= (i3 | 0)) {
          break L2449;
        }
        i14 = HEAP32[i27 + (i30 << 2) >> 2] | 0;
        i28 = HEAP32[i27 >> 2] | 0;
        i7 = (i28 & -16711936) + (i14 & -16711936) & -16711936 | (i28 & 16711935) + (i14 & 16711935) & 16711935;
        HEAP32[i27 >> 2] = i7;
        L2454 : do {
          if (i26) {
            i14 = 1;
            i28 = i33;
            i23 = HEAP32[5247184 + (((HEAP32[i34 >> 2] | 0) >>> 8 & 15) << 2) >> 2] | 0;
            i13 = i7;
            while (1) {
              if ((i14 & i31 | 0) == 0) {
                i35 = HEAP32[5247184 + (((HEAP32[i28 >> 2] | 0) >>> 8 & 15) << 2) >> 2] | 0;
                i36 = i28 + 4 | 0;
              } else {
                i35 = i23;
                i36 = i28;
              }
              i15 = i27 + (i14 << 2) | 0;
              i4 = FUNCTION_TABLE_iii[i35 & 511](i13, i27 + (i14 - i21 << 2) | 0) | 0;
              i12 = HEAP32[i15 >> 2] | 0;
              i10 = (i12 & -16711936) + (i4 & -16711936) & -16711936 | (i12 & 16711935) + (i4 & 16711935) & 16711935;
              HEAP32[i15 >> 2] = i10;
              i15 = i14 + 1 | 0;
              if ((i15 | 0) == (i21 | 0)) {
                break L2454;
              } else {
                i14 = i15;
                i28 = i36;
                i23 = i35;
                i13 = i10;
              }
            }
          }
        } while (0);
        i37 = i27 + (i21 << 2) | 0;
        i38 = i8 + 1 | 0;
        if ((i38 & i31 | 0) == 0) {
          break;
        } else {
          i27 = i37;
          i8 = i38;
        }
      }
      i29 = i37;
      i34 = i34 + (i25 << 2) | 0;
      i24 = i38;
    }
    if ((HEAP32[i1 + 12 >> 2] | 0) == (i3 | 0)) {
      return;
    }
    i38 = HEAP32[i32 >> 2] | 0;
    _memcpy(i5 + (-i38 << 2) | 0, i5 + (Math_imul(i38, (i2 ^ -1) + i3 | 0) << 2) | 0, i38 << 2);
    return;
  } else if ((i6 | 0) == 2) {
    i38 = Math_imul(HEAP32[i1 + 8 >> 2] | 0, i3 - i2 | 0);
    i32 = i5 + (i38 << 2) | 0;
    if ((i38 | 0) > 0) {
      i39 = i5;
    } else {
      return;
    }
    while (1) {
      i38 = HEAP32[i39 >> 2] | 0;
      i24 = i38 >>> 8 & 255;
      i25 = i39 + 4 | 0;
      HEAP32[i39 >> 2] = (i24 << 16 | i24) + (i38 & 16711935) & 16711935 | i38 & -16711936;
      if (i25 >>> 0 < i32 >>> 0) {
        i39 = i25;
      } else {
        break;
      }
    }
    return;
  } else if ((i6 | 0) == 1) {
    i6 = HEAP32[i1 + 4 >> 2] | 0;
    i39 = HEAP32[i1 + 8 >> 2] | 0;
    i32 = HEAP32[i1 + 16 >> 2] | 0;
    i1 = 1 << i6;
    i25 = i1 - 1 | 0;
    i38 = ((i39 - 1 | 0) + i1 | 0) >>> (i6 >>> 0);
    i1 = (i39 | 0) > 0;
    i24 = i32 + (Math_imul(i38, i2 >> i6) << 2) | 0;
    i6 = i2;
    i2 = i5;
    L2475 : while (1) {
      i5 = i6;
      i32 = i2;
      while (1) {
        if ((i5 | 0) >= (i3 | 0)) {
          break L2475;
        }
        L2480 : do {
          if (i1) {
            i34 = 0;
            i37 = 0;
            i29 = 0;
            i31 = i24;
            i21 = 0;
            while (1) {
              if ((i21 & i25 | 0) == 0) {
                i35 = HEAP32[i31 >> 2] | 0;
                i40 = i31 + 4 | 0;
                i41 = i35 & 255;
                i42 = i35 >>> 8 & 255;
                i43 = i35 >>> 16 & 255;
              } else {
                i40 = i31;
                i41 = i29;
                i42 = i37;
                i43 = i34;
              }
              i35 = i32 + (i21 << 2) | 0;
              i36 = HEAP32[i35 >> 2] | 0;
              i26 = i36 >>> 8 << 24 >> 24;
              i30 = (Math_imul(i26, i41 << 24 >> 24) >>> 5) + (i36 >>> 16) | 0;
              i8 = (Math_imul(i26, i42 << 24 >> 24) >>> 5) + i36 | 0;
              HEAP32[i35 >> 2] = i30 << 16 & 16711680 | i36 & -16711936 | i8 + (Math_imul(i30 << 24 >> 24, i43 << 24 >> 24) >>> 5) & 255;
              i30 = i21 + 1 | 0;
              if ((i30 | 0) == (i39 | 0)) {
                break L2480;
              } else {
                i34 = i43;
                i37 = i42;
                i29 = i41;
                i31 = i40;
                i21 = i30;
              }
            }
          }
        } while (0);
        i44 = i32 + (i39 << 2) | 0;
        i45 = i5 + 1 | 0;
        if ((i45 & i25 | 0) == 0) {
          break;
        } else {
          i5 = i45;
          i32 = i44;
        }
      }
      i24 = i24 + (i38 << 2) | 0;
      i6 = i45;
      i2 = i44;
    }
    return;
  } else {
    return;
  }
}
function _Predictor0(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  return -16777216 | 0;
}
function _Predictor1(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  return i1 | 0;
}
function _Predictor2(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  return HEAP32[i2 >> 2] | 0;
}
function _Predictor7(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0;
  i3 = HEAP32[i2 >> 2] | 0;
  return ((i3 ^ i1) >>> 1 & 2139062143) + (i3 & i1) | 0;
}
function _Predictor3(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  return HEAP32[i2 + 4 >> 2] | 0;
}
function _Predictor4(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  return HEAP32[i2 - 4 >> 2] | 0;
}
function _Predictor5(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0;
  i3 = HEAP32[i2 >> 2] | 0;
  i4 = HEAP32[i2 + 4 >> 2] | 0;
  i2 = ((i4 ^ i1) >>> 1 & 2139062143) + (i4 & i1) | 0;
  return ((i2 ^ i3) >>> 1 & 2139062143) + (i2 & i3) | 0;
}
function _Predictor6(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0;
  i3 = HEAP32[i2 - 4 >> 2] | 0;
  return ((i3 ^ i1) >>> 1 & 2139062143) + (i3 & i1) | 0;
}
function _Predictor8(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0;
  i1 = HEAP32[i2 - 4 >> 2] | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  return ((i3 ^ i1) >>> 1 & 2139062143) + (i3 & i1) | 0;
}
function _Predictor9(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0;
  i1 = HEAP32[i2 >> 2] | 0;
  i3 = HEAP32[i2 + 4 >> 2] | 0;
  return ((i3 ^ i1) >>> 1 & 2139062143) + (i3 & i1) | 0;
}
function _Predictor10(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0;
  i3 = HEAP32[i2 - 4 >> 2] | 0;
  i4 = HEAP32[i2 >> 2] | 0;
  i5 = HEAP32[i2 + 4 >> 2] | 0;
  i2 = ((i3 ^ i1) >>> 1 & 2139062143) + (i3 & i1) | 0;
  i1 = ((i5 ^ i4) >>> 1 & 2139062143) + (i5 & i4) | 0;
  return ((i1 ^ i2) >>> 1 & 2139062143) + (i1 & i2) | 0;
}
function _Predictor11(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
  i3 = HEAP32[i2 >> 2] | 0;
  i4 = HEAP32[i2 - 4 >> 2] | 0;
  i2 = i4 >>> 24;
  i5 = (i1 >>> 24) - i2 | 0;
  i6 = (i3 >>> 24) - i2 | 0;
  i2 = i4 >>> 16 & 255;
  i7 = (i1 >>> 16 & 255) - i2 | 0;
  i8 = (i3 >>> 16 & 255) - i2 | 0;
  i2 = i4 >>> 8 & 255;
  i9 = (i1 >>> 8 & 255) - i2 | 0;
  i10 = (i3 >>> 8 & 255) - i2 | 0;
  i2 = i4 & 255;
  i4 = (i1 & 255) - i2 | 0;
  i11 = (i3 & 255) - i2 | 0;
  return ((((((((((i5 | 0) > -1 ? i5 : -i5 | 0) - ((i6 | 0) > -1 ? i6 : -i6 | 0) | 0) - ((i11 | 0) > -1 ? i11 : -i11 | 0) | 0) + ((i4 | 0) > -1 ? i4 : -i4 | 0) | 0) - ((i8 | 0) > -1 ? i8 : -i8 | 0) | 0) + ((i7 | 0) > -1 ? i7 : -i7 | 0) | 0) - ((i10 | 0) > -1 ? i10 : -i10 | 0) | 0) + ((i9 | 0) > -1 ? i9 : -i9 | 0) | 0) < 1 ? i3 : i1) | 0;
}
function _Predictor12(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
  i3 = HEAP32[i2 >> 2] | 0;
  i4 = HEAP32[i2 - 4 >> 2] | 0;
  i2 = ((i3 >>> 24) + (i1 >>> 24) | 0) - (i4 >>> 24) | 0;
  if (i2 >>> 0 < 256) {
    i5 = i2;
  } else {
    i5 = i2 >>> 24 ^ 255;
  }
  i2 = ((i3 >>> 16 & 255) + (i1 >>> 16 & 255) | 0) - (i4 >>> 16 & 255) | 0;
  if (i2 >>> 0 < 256) {
    i6 = i2;
  } else {
    i6 = i2 >>> 24 ^ 255;
  }
  i2 = ((i3 >>> 8 & 255) + (i1 >>> 8 & 255) | 0) - (i4 >>> 8 & 255) | 0;
  if (i2 >>> 0 < 256) {
    i7 = i2;
  } else {
    i7 = i2 >>> 24 ^ 255;
  }
  i2 = ((i3 & 255) + (i1 & 255) | 0) - (i4 & 255) | 0;
  if (i2 >>> 0 < 256) {
    i8 = i2;
    i9 = i5 << 24;
    i10 = i6 << 16;
    i11 = i10 | i9;
    i12 = i7 << 8;
    i13 = i11 | i12;
    i14 = i13 | i8;
    return i14 | 0;
  }
  i8 = i2 >>> 24 ^ 255;
  i9 = i5 << 24;
  i10 = i6 << 16;
  i11 = i10 | i9;
  i12 = i7 << 8;
  i13 = i11 | i12;
  i14 = i13 | i8;
  return i14 | 0;
}
function _Predictor13(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
  i3 = HEAP32[i2 >> 2] | 0;
  i4 = HEAP32[i2 - 4 >> 2] | 0;
  i2 = ((i3 ^ i1) >>> 1 & 2139062143) + (i3 & i1) | 0;
  i1 = i2 >>> 24;
  i3 = i1 + ((i1 - (i4 >>> 24) | 0) / 2 & -1) | 0;
  if (i3 >>> 0 < 256) {
    i5 = i3;
  } else {
    i5 = i3 >>> 24 ^ 255;
  }
  i3 = i2 >>> 16 & 255;
  i1 = ((i3 - (i4 >>> 16 & 255) | 0) / 2 & -1) + i3 | 0;
  if (i1 >>> 0 < 256) {
    i6 = i1;
  } else {
    i6 = i1 >>> 24 ^ 255;
  }
  i1 = i2 >>> 8 & 255;
  i3 = ((i1 - (i4 >>> 8 & 255) | 0) / 2 & -1) + i1 | 0;
  if (i3 >>> 0 < 256) {
    i7 = i3;
  } else {
    i7 = i3 >>> 24 ^ 255;
  }
  i3 = i2 & 255;
  i2 = ((i3 - (i4 & 255) | 0) / 2 & -1) + i3 | 0;
  if (i2 >>> 0 < 256) {
    i8 = i2;
    i9 = i5 << 24;
    i10 = i6 << 16;
    i11 = i10 | i9;
    i12 = i7 << 8;
    i13 = i11 | i12;
    i14 = i13 | i8;
    return i14 | 0;
  }
  i8 = i2 >>> 24 ^ 255;
  i9 = i5 << 24;
  i10 = i6 << 16;
  i11 = i10 | i9;
  i12 = i7 << 8;
  i13 = i11 | i12;
  i14 = i13 | i8;
  return i14 | 0;
}
function _WebPRescalerImportRow(i1, i2, i3) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0;
  i4 = HEAP32[i1 + 4 >> 2] | 0;
  i5 = Math_imul(HEAP32[i1 + 52 >> 2] | 0, i4);
  L2531 : do {
    if ((HEAP32[i1 >> 2] | 0) == 0) {
      if ((i5 | 0) <= (i3 | 0)) {
        break;
      }
      i6 = i1 + 36 | 0;
      i7 = i1 + 40 | 0;
      i8 = i1 + 72 | 0;
      i9 = i1 + 12 | 0;
      i10 = 0;
      i11 = 0;
      i12 = i3;
      i13 = i3;
      while (1) {
        i14 = (HEAP32[i6 >> 2] | 0) + i10 | 0;
        i15 = HEAPU8[i2 + i13 | 0] | 0;
        i16 = HEAP32[i7 >> 2] | 0;
        L2544 : do {
          if ((i14 | 0) > 0) {
            i17 = i14;
            i18 = i11;
            i19 = i13;
            i20 = i15;
            while (1) {
              i21 = i20 + i18 | 0;
              i22 = i19 + i4 | 0;
              i23 = i17 - i16 | 0;
              i24 = HEAPU8[i2 + i22 | 0] | 0;
              if ((i23 | 0) > 0) {
                i17 = i23;
                i18 = i21;
                i19 = i22;
                i20 = i24;
              } else {
                i25 = i23;
                i26 = i21;
                i27 = i22;
                i28 = i24;
                break L2544;
              }
            }
          } else {
            i25 = i14;
            i26 = i11;
            i27 = i13;
            i28 = i15;
          }
        } while (0);
        i15 = Math_imul(i28, -i25 | 0);
        i14 = Math_imul(i16, i28 + i26 | 0) - i15 | 0;
        HEAP32[(HEAP32[i8 >> 2] | 0) + (i12 << 2) >> 2] = i14;
        i14 = i15;
        i20 = (i15 | 0) < 0 ? -1 : 0;
        i15 = HEAP32[i9 >> 2] | 0;
        i19 = i15;
        i18 = (i15 | 0) < 0 ? -1 : 0;
        i15 = ~~((+(i19 >>> 0) + +(i18 | 0) * 4294967296.0) * (+(i14 >>> 0) + +(i20 | 0) * 4294967296.0)) >>> 0;
        i17 = Math_min(Math_floor((+(i19 >>> 0) + +(i18 | 0) * 4294967296.0) * (+(i14 >>> 0) + +(i20 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
        i20 = 536870912;
        i14 = 0;
        i18 = Math_min(Math_floor((+(i15 >>> 0) + +(i17 | 0) * 4294967296.0 + (+(i20 >>> 0) + +(i14 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
        i19 = i12 + i4 | 0;
        if ((i19 | 0) < (i5 | 0)) {
          i10 = i25;
          i11 = ~~(+(i15 >>> 0) + +(i17 | 0) * 4294967296.0 + (+(i20 >>> 0) + +(i14 | 0) * 4294967296.0)) >>> 0 >>> 30 | i18 << 2;
          i12 = i19;
          i13 = i27 + i4 | 0;
        } else {
          break L2531;
        }
      }
    } else {
      i13 = HEAPU8[i2 + i3 | 0] | 0;
      if ((i5 | 0) <= (i3 | 0)) {
        break;
      }
      i12 = i1 + 36 | 0;
      i11 = i1 + 72 | 0;
      i10 = i1 + 40 | 0;
      i9 = 0;
      i8 = i3;
      i7 = i3;
      i6 = i13;
      i19 = i13;
      while (1) {
        if ((i9 | 0) < 0) {
          i13 = i7 + i4 | 0;
          i18 = HEAP32[i12 >> 2] | 0;
          i29 = HEAPU8[i2 + i13 | 0] | 0;
          i30 = i19;
          i31 = i13;
          i32 = i18 + i9 | 0;
          i33 = i18;
        } else {
          i29 = i19;
          i30 = i6;
          i31 = i7;
          i32 = i9;
          i33 = HEAP32[i12 >> 2] | 0;
        }
        i18 = Math_imul(i33, i29);
        i13 = i18 + Math_imul(i30 - i29 | 0, i32) | 0;
        HEAP32[(HEAP32[i11 >> 2] | 0) + (i8 << 2) >> 2] = i13;
        i13 = i8 + i4 | 0;
        if ((i13 | 0) < (i5 | 0)) {
          i9 = i32 - (HEAP32[i10 >> 2] | 0) | 0;
          i8 = i13;
          i7 = i31;
          i6 = i30;
          i19 = i29;
        } else {
          break L2531;
        }
      }
    }
  } while (0);
  if ((i5 | 0) <= (i3 | 0)) {
    return;
  }
  i29 = i1 + 72 | 0;
  i30 = i1 + 68 | 0;
  i1 = i3;
  while (1) {
    i3 = (HEAP32[i30 >> 2] | 0) + (i1 << 2) | 0;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + (HEAP32[(HEAP32[i29 >> 2] | 0) + (i1 << 2) >> 2] | 0) | 0;
    i3 = i1 + i4 | 0;
    if ((i3 | 0) < (i5 | 0)) {
      i1 = i3;
    } else {
      break;
    }
  }
  return;
}
function _VP8LConvertFromBGRA(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
  if ((i3 | 0) == 5) {
    i5 = i1 + (i2 << 2) | 0;
    if ((i2 | 0) > 0) {
      i6 = i4;
      i7 = i1;
    } else {
      return;
    }
    while (1) {
      i8 = i7 + 4 | 0;
      i9 = HEAP32[i7 >> 2] | 0;
      HEAP8[i6] = (i9 >>> 16 & 240 | i9 >>> 12 & 15) & 255;
      HEAP8[i6 + 1 | 0] = (i9 & 240 | i9 >>> 28) & 255;
      if (i8 >>> 0 < i5 >>> 0) {
        i6 = i6 + 2 | 0;
        i7 = i8;
      } else {
        break;
      }
    }
    return;
  } else if ((i3 | 0) == 2) {
    i7 = i1 + (i2 << 2) | 0;
    if ((i2 | 0) > 0) {
      i10 = i4;
      i11 = i1;
    } else {
      return;
    }
    while (1) {
      i6 = i11 + 4 | 0;
      i5 = HEAP32[i11 >> 2] | 0;
      HEAP8[i10] = i5 & 255;
      HEAP8[i10 + 1 | 0] = i5 >>> 8 & 255;
      HEAP8[i10 + 2 | 0] = i5 >>> 16 & 255;
      if (i6 >>> 0 < i7 >>> 0) {
        i10 = i10 + 3 | 0;
        i11 = i6;
      } else {
        break;
      }
    }
    return;
  } else if ((i3 | 0) == 8) {
    _memcpy(i4, i1, i2 << 2);
    i11 = (i2 | 0) > 0;
    i10 = 1;
    while (1) {
      i7 = i10 - 1 | 0;
      L2572 : do {
        if (i11) {
          i6 = 0;
          while (1) {
            i5 = i6 << 2;
            i8 = HEAP8[i4 + (i5 | 3) | 0] | 0;
            if (i8 << 24 >> 24 != -1) {
              i9 = (i8 & 255) * 32897 & -1;
              i8 = i4 + i5 | 0;
              HEAP8[i8] = Math_imul(HEAPU8[i8] | 0, i9) >>> 23 & 255;
              i8 = i4 + (i5 | 1) | 0;
              HEAP8[i8] = Math_imul(HEAPU8[i8] | 0, i9) >>> 23 & 255;
              i8 = i4 + (i5 | 2) | 0;
              HEAP8[i8] = Math_imul(HEAPU8[i8] | 0, i9) >>> 23 & 255;
            }
            i9 = i6 + 1 | 0;
            if ((i9 | 0) == (i2 | 0)) {
              break L2572;
            } else {
              i6 = i9;
            }
          }
        }
      } while (0);
      if ((i7 | 0) > 0) {
        i10 = i7;
      } else {
        break;
      }
    }
    return;
  } else if ((i3 | 0) == 6) {
    i10 = i1 + (i2 << 2) | 0;
    if ((i2 | 0) > 0) {
      i12 = i4;
      i13 = i1;
    } else {
      return;
    }
    while (1) {
      i11 = i13 + 4 | 0;
      i6 = HEAP32[i13 >> 2] | 0;
      HEAP8[i12] = (i6 >>> 16 & 248 | i6 >>> 13 & 7) & 255;
      HEAP8[i12 + 1 | 0] = (i6 >>> 5 & 224 | i6 >>> 3 & 31) & 255;
      if (i11 >>> 0 < i10 >>> 0) {
        i12 = i12 + 2 | 0;
        i13 = i11;
      } else {
        break;
      }
    }
    return;
  } else if ((i3 | 0) == 9) {
    i13 = i1 + (i2 << 2) | 0;
    i12 = (i2 | 0) > 0;
    L2588 : do {
      if (i12) {
        i10 = i4;
        i11 = i1;
        while (1) {
          i6 = i11 + 4 | 0;
          i9 = HEAP32[i11 >> 2] | 0;
          HEAP8[i10] = i9 >>> 24 & 255;
          HEAP8[i10 + 1 | 0] = i9 >>> 16 & 255;
          HEAP8[i10 + 2 | 0] = i9 >>> 8 & 255;
          HEAP8[i10 + 3 | 0] = i9 & 255;
          if (i6 >>> 0 < i13 >>> 0) {
            i10 = i10 + 4 | 0;
            i11 = i6;
          } else {
            i14 = 1;
            break L2588;
          }
        }
      } else {
        i14 = 1;
      }
    } while (0);
    while (1) {
      i13 = i14 - 1 | 0;
      L2593 : do {
        if (i12) {
          i11 = 0;
          while (1) {
            i10 = i11 << 2;
            i7 = HEAP8[i4 + i10 | 0] | 0;
            if (i7 << 24 >> 24 != -1) {
              i6 = (i7 & 255) * 32897 & -1;
              i7 = i10 | 1;
              i9 = i4 + i7 | 0;
              HEAP8[i9] = Math_imul(HEAPU8[i9] | 0, i6) >>> 23 & 255;
              i9 = i4 + (i7 + 1 | 0) | 0;
              HEAP8[i9] = Math_imul(HEAPU8[i9] | 0, i6) >>> 23 & 255;
              i9 = i4 + (i10 | 3) | 0;
              HEAP8[i9] = Math_imul(HEAPU8[i9] | 0, i6) >>> 23 & 255;
            }
            i6 = i11 + 1 | 0;
            if ((i6 | 0) == (i2 | 0)) {
              break L2593;
            } else {
              i11 = i6;
            }
          }
        }
      } while (0);
      if ((i13 | 0) > 0) {
        i14 = i13;
      } else {
        break;
      }
    }
    return;
  } else if ((i3 | 0) == 0) {
    i14 = i1 + (i2 << 2) | 0;
    if ((i2 | 0) > 0) {
      i15 = i4;
      i16 = i1;
    } else {
      return;
    }
    while (1) {
      i12 = i16 + 4 | 0;
      i11 = HEAP32[i16 >> 2] | 0;
      HEAP8[i15] = i11 >>> 16 & 255;
      HEAP8[i15 + 1 | 0] = i11 >>> 8 & 255;
      HEAP8[i15 + 2 | 0] = i11 & 255;
      if (i12 >>> 0 < i14 >>> 0) {
        i15 = i15 + 3 | 0;
        i16 = i12;
      } else {
        break;
      }
    }
    return;
  } else if ((i3 | 0) == 1) {
    i16 = i1 + (i2 << 2) | 0;
    if ((i2 | 0) > 0) {
      i17 = i4;
      i18 = i1;
    } else {
      return;
    }
    while (1) {
      i15 = i18 + 4 | 0;
      i14 = HEAP32[i18 >> 2] | 0;
      HEAP8[i17] = i14 >>> 16 & 255;
      HEAP8[i17 + 1 | 0] = i14 >>> 8 & 255;
      HEAP8[i17 + 2 | 0] = i14 & 255;
      HEAP8[i17 + 3 | 0] = i14 >>> 24 & 255;
      if (i15 >>> 0 < i16 >>> 0) {
        i17 = i17 + 4 | 0;
        i18 = i15;
      } else {
        break;
      }
    }
    return;
  } else if ((i3 | 0) == 7) {
    i18 = i1 + (i2 << 2) | 0;
    i17 = (i2 | 0) > 0;
    L2614 : do {
      if (i17) {
        i16 = i4;
        i15 = i1;
        while (1) {
          i14 = i15 + 4 | 0;
          i12 = HEAP32[i15 >> 2] | 0;
          HEAP8[i16] = i12 >>> 16 & 255;
          HEAP8[i16 + 1 | 0] = i12 >>> 8 & 255;
          HEAP8[i16 + 2 | 0] = i12 & 255;
          HEAP8[i16 + 3 | 0] = i12 >>> 24 & 255;
          if (i14 >>> 0 < i18 >>> 0) {
            i16 = i16 + 4 | 0;
            i15 = i14;
          } else {
            i19 = 1;
            break L2614;
          }
        }
      } else {
        i19 = 1;
      }
    } while (0);
    while (1) {
      i18 = i19 - 1 | 0;
      L2619 : do {
        if (i17) {
          i15 = 0;
          while (1) {
            i16 = i15 << 2;
            i13 = HEAP8[i4 + (i16 | 3) | 0] | 0;
            if (i13 << 24 >> 24 != -1) {
              i14 = (i13 & 255) * 32897 & -1;
              i13 = i4 + i16 | 0;
              HEAP8[i13] = Math_imul(HEAPU8[i13] | 0, i14) >>> 23 & 255;
              i13 = i4 + (i16 | 1) | 0;
              HEAP8[i13] = Math_imul(HEAPU8[i13] | 0, i14) >>> 23 & 255;
              i13 = i4 + (i16 | 2) | 0;
              HEAP8[i13] = Math_imul(HEAPU8[i13] | 0, i14) >>> 23 & 255;
            }
            i14 = i15 + 1 | 0;
            if ((i14 | 0) == (i2 | 0)) {
              break L2619;
            } else {
              i15 = i14;
            }
          }
        }
      } while (0);
      if ((i18 | 0) > 0) {
        i19 = i18;
      } else {
        break;
      }
    }
    return;
  } else if ((i3 | 0) == 3) {
    _memcpy(i4, i1, i2 << 2);
    return;
  } else if ((i3 | 0) == 10) {
    i19 = i1 + (i2 << 2) | 0;
    i17 = (i2 | 0) > 0;
    L2630 : do {
      if (i17) {
        i15 = i4;
        i14 = i1;
        while (1) {
          i13 = i14 + 4 | 0;
          i16 = HEAP32[i14 >> 2] | 0;
          HEAP8[i15] = (i16 >>> 16 & 240 | i16 >>> 12 & 15) & 255;
          HEAP8[i15 + 1 | 0] = (i16 & 240 | i16 >>> 28) & 255;
          if (i13 >>> 0 < i19 >>> 0) {
            i15 = i15 + 2 | 0;
            i14 = i13;
          } else {
            i20 = 1;
            break L2630;
          }
        }
      } else {
        i20 = 1;
      }
    } while (0);
    while (1) {
      i19 = i20 - 1 | 0;
      L2635 : do {
        if (i17) {
          i14 = 0;
          while (1) {
            i15 = i14 << 1;
            i18 = i4 + (i15 | 1) | 0;
            i13 = HEAP8[i18] | 0;
            i16 = i13 & 15;
            i12 = (i16 & 255) * 4369 & -1;
            i11 = i4 + i15 | 0;
            i15 = HEAP8[i11] | 0;
            i6 = Math_imul((i15 & -16 | (i15 & 255) >>> 4) & 255, i12) >>> 16 & 255;
            i9 = Math_imul((i15 & 15 | i15 << 4) & 255, i12) >>> 20;
            i15 = Math_imul((i13 & -16 | (i13 & 255) >>> 4) & 255, i12) >>> 16 & 255;
            HEAP8[i11] = i6 & -16 | i9 & 15;
            HEAP8[i18] = i15 & -16 | i16;
            i16 = i14 + 1 | 0;
            if ((i16 | 0) == (i2 | 0)) {
              break L2635;
            } else {
              i14 = i16;
            }
          }
        }
      } while (0);
      if ((i19 | 0) > 0) {
        i20 = i19;
      } else {
        break;
      }
    }
    return;
  } else if ((i3 | 0) == 4) {
    i3 = i1 + (i2 << 2) | 0;
    if ((i2 | 0) > 0) {
      i21 = i4;
      i22 = i1;
    } else {
      return;
    }
    while (1) {
      i1 = i22 + 4 | 0;
      i4 = HEAP32[i22 >> 2] | 0;
      HEAP8[i21] = i4 >>> 24 & 255;
      HEAP8[i21 + 1 | 0] = i4 >>> 16 & 255;
      HEAP8[i21 + 2 | 0] = i4 >>> 8 & 255;
      HEAP8[i21 + 3 | 0] = i4 & 255;
      if (i1 >>> 0 < i3 >>> 0) {
        i21 = i21 + 4 | 0;
        i22 = i1;
      } else {
        break;
      }
    }
    return;
  } else {
    return;
  }
}
function _width() {
  return HEAP32[1311522] | 0;
}
function _height() {
  return HEAP32[1311523] | 0;
}
function _format() {
  return HEAP32[1311524] | 0;
}
function _WebPRescalerExport(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
  i2 = i1 + 24 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) >= 1) {
    i4 = 0;
    return i4 | 0;
  }
  i5 = i1 + 60 | 0;
  i6 = i1 + 68 | 0;
  i7 = i1 + 72 | 0;
  i8 = i1 + 52 | 0;
  i9 = i1 + 4 | 0;
  i10 = i1 + 8 | 0;
  i11 = i1 + 16 | 0;
  i12 = i1 + 28 | 0;
  i13 = i1 + 64 | 0;
  i1 = 0;
  i14 = i3;
  while (1) {
    if ((i14 | 0) >= 1) {
      break;
    }
    i3 = HEAP32[i5 >> 2] | 0;
    i15 = HEAP32[i6 >> 2] | 0;
    i16 = HEAP32[i7 >> 2] | 0;
    i17 = Math_imul(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0);
    if ((i17 | 0) > 0) {
      i18 = Math_imul(HEAP32[i10 >> 2] | 0, -i14 | 0);
      i19 = i18;
      i20 = (i18 | 0) < 0 ? -1 : 0;
      i18 = 0;
      while (1) {
        i21 = HEAP32[i16 + (i18 << 2) >> 2] | 0;
        i22 = i21;
        i23 = (i21 | 0) < 0 ? -1 : 0;
        i21 = ~~((+(i22 >>> 0) + +(i23 | 0) * 4294967296.0) * (+(i19 >>> 0) + +(i20 | 0) * 4294967296.0)) >>> 0;
        i24 = Math_min(Math_floor((+(i22 >>> 0) + +(i23 | 0) * 4294967296.0) * (+(i19 >>> 0) + +(i20 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
        i23 = 536870912;
        i22 = 0;
        i25 = Math_min(Math_floor((+(i21 >>> 0) + +(i24 | 0) * 4294967296.0 + (+(i23 >>> 0) + +(i22 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
        i26 = ~~(+(i21 >>> 0) + +(i24 | 0) * 4294967296.0 + (+(i23 >>> 0) + +(i22 | 0) * 4294967296.0)) >>> 0 >>> 30 | i25 << 2;
        i25 = i15 + (i18 << 2) | 0;
        i22 = (HEAP32[i25 >> 2] | 0) - i26 | 0;
        i23 = i22;
        i24 = (i22 | 0) < 0 ? -1 : 0;
        i22 = HEAP32[i11 >> 2] | 0;
        i21 = HEAP32[i11 + 4 >> 2] | 0;
        i27 = ~~((+(i23 >>> 0) + +(i24 | 0) * 4294967296.0) * (+(i22 >>> 0) + +(i21 | 0) * 4294967296.0)) >>> 0;
        i28 = Math_min(Math_floor((+(i23 >>> 0) + +(i24 | 0) * 4294967296.0) * (+(i22 >>> 0) + +(i21 | 0) * 4294967296.0) / 4294967296.0), 4294967295.0) >>> 0;
        i21 = 536870912;
        i22 = 0;
        i24 = Math_min(Math_floor((+(i27 >>> 0) + +(i28 | 0) * 4294967296.0 + (+(i21 >>> 0) + +(i22 | 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
        i23 = ~~(+(i27 >>> 0) + +(i28 | 0) * 4294967296.0 + (+(i21 >>> 0) + +(i22 | 0) * 4294967296.0)) >>> 0 >>> 30 | i24 << 2;
        if (i23 >>> 0 > 255) {
          i29 = (i23 >> 31 & -255) + 255 | 0;
        } else {
          i29 = i23;
        }
        HEAP8[i3 + i18 | 0] = i29 & 255;
        HEAP32[i25 >> 2] = i26;
        i26 = i18 + 1 | 0;
        if ((i26 | 0) == (i17 | 0)) {
          break;
        } else {
          i18 = i26;
        }
      }
      i30 = HEAP32[i2 >> 2] | 0;
      i31 = HEAP32[i5 >> 2] | 0;
    } else {
      i30 = i14;
      i31 = i3;
    }
    i18 = (HEAP32[i12 >> 2] | 0) + i30 | 0;
    HEAP32[i2 >> 2] = i18;
    HEAP32[i5 >> 2] = i31 + (HEAP32[i13 >> 2] | 0) | 0;
    i17 = i1 + 1 | 0;
    if ((i18 | 0) < 1) {
      i1 = i17;
      i14 = i18;
    } else {
      i4 = i17;
      i32 = 1899;
      break;
    }
  }
  if ((i32 | 0) == 1899) {
    return i4 | 0;
  }
  i4 = i1 + 1 | 0;
  return i4 | 0;
}
function _VP8GetValue(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
  if ((i2 | 0) <= 0) {
    i3 = 0;
    return i3 | 0;
  }
  i4 = i1 + 12 | 0;
  i5 = i1 + 20 | 0;
  i6 = i1 | 0;
  i7 = i1 + 4 | 0;
  i8 = i1 + 16 | 0;
  i9 = i1 + 8 | 0;
  i1 = 0;
  i10 = i2;
  i2 = HEAP32[i4 >> 2] | 0;
  i11 = HEAP32[i5 >> 2] | 0;
  while (1) {
    i12 = i10 - 1 | 0;
    i13 = i2 >>> 8 << 7 | 255;
    do {
      if ((i11 | 0) > 0) {
        i14 = HEAP32[i6 >> 2] | 0;
        i15 = i14 + 1 | 0;
        i16 = HEAP32[i7 >> 2] | 0;
        if (i15 >>> 0 <= i16 >>> 0) {
          i17 = HEAP8[i14] | 0;
          HEAP32[i6 >> 2] = i15;
          HEAP32[i8 >> 2] = (i17 & 255) << i11 | HEAP32[i8 >> 2];
          i17 = i11 - 8 | 0;
          HEAP32[i5 >> 2] = i17;
          i18 = i17;
          break;
        }
        if (i14 >>> 0 < i16 >>> 0) {
          HEAP32[i6 >> 2] = i15;
          HEAP32[i8 >> 2] = (HEAPU8[i14] | 0) << i11 | HEAP32[i8 >> 2];
          i14 = i11 - 8 | 0;
          HEAP32[i5 >> 2] = i14;
          i18 = i14;
          break;
        } else {
          HEAP32[i9 >> 2] = 1;
          i18 = i11;
          break;
        }
      } else {
        i18 = i11;
      }
    } while (0);
    i14 = HEAP32[i8 >> 2] | 0;
    if (i14 >>> 0 > i13 >>> 0) {
      i15 = i13 + 1 | 0;
      i16 = i2 - i15 | 0;
      HEAP32[i4 >> 2] = i16;
      i17 = i14 - i15 | 0;
      HEAP32[i8 >> 2] = i17;
      i19 = 1;
      i20 = i16;
      i21 = i17;
    } else {
      HEAP32[i4 >> 2] = i13;
      i19 = 0;
      i20 = i13;
      i21 = i14;
    }
    if (i20 >>> 0 < 32512) {
      i14 = i20 >>> 8;
      i17 = HEAPU8[i14 + 5246928 | 0] | 0;
      i16 = HEAP32[5246416 + (i14 << 2) >> 2] | 0;
      HEAP32[i4 >> 2] = i16;
      HEAP32[i8 >> 2] = i21 << i17;
      i14 = i17 + i18 | 0;
      HEAP32[i5 >> 2] = i14;
      i22 = i16;
      i23 = i14;
    } else {
      i22 = i20;
      i23 = i18;
    }
    i14 = i19 << i12 | i1;
    if ((i12 | 0) > 0) {
      i1 = i14;
      i10 = i12;
      i2 = i22;
      i11 = i23;
    } else {
      i3 = i14;
      break;
    }
  }
  return i3 | 0;
}
function _VP8LReadBits(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
  i3 = i1 + 24 | 0;
  if (!((HEAP32[i3 >> 2] | 0) == 0 & (i2 | 0) < 25)) {
    HEAP32[i1 + 28 >> 2] = 1;
    i4 = 0;
    return i4 | 0;
  }
  i5 = i1 + 16 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  i7 = HEAP32[i1 + 12 >> 2] | 0;
  i8 = i1 + 20 | 0;
  i9 = HEAP32[i8 >> 2] | 0;
  i10 = i9 + i2 | 0;
  do {
    if ((i6 | 0) == (i7 | 0) & (i10 | 0) > 63) {
      HEAP32[i3 >> 2] = 1;
      if ((i10 | 0) > 64) {
        i4 = 0;
      } else {
        break;
      }
      return i4 | 0;
    }
  } while (0);
  i3 = i1 | 0;
  i11 = HEAP32[i3 >> 2] | 0;
  i12 = HEAP32[i3 + 4 >> 2] | 0;
  Runtime_bitshift64(i11 | 0, i12 | 0, 2, i9 | 0);
  i9 = HEAP32[tempDoublePtr >> 2] | 0, i13 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  i13 = i9 & HEAP32[5247524 + (i2 << 2) >> 2];
  HEAP32[i8 >> 2] = i10;
  if ((i10 | 0) <= 39) {
    i4 = i13;
    return i4 | 0;
  }
  i2 = i6 + 5 | 0;
  if (i2 >>> 0 < i7 >>> 0) {
    i9 = i12 >>> 8 | 0 << 24;
    i14 = 0 >>> 8 | 0 << 24;
    i15 = i3 | 0;
    HEAP32[i15 >> 2] = i9;
    i16 = i3 + 4 | 0;
    HEAP32[i16 >> 2] = i14;
    i17 = HEAP32[i1 + 8 >> 2] | 0;
    i18 = HEAPU8[i17 + i6 | 0] | 0;
    i19 = i18 << 24 | 0 >>> 8 | i9 | (0 << 8 | 0 >>> 24) | (0 << 16 | 0 >>> 16) | (0 << 24 | 0 >>> 8);
    i9 = 0 << 24 | i18 >>> 8 | i14 | (HEAPU8[i17 + (i6 + 1 | 0) | 0] | 0) | ((HEAPU8[i17 + (i6 + 2 | 0) | 0] | 0) << 8 | 0 >>> 24) | ((HEAPU8[i17 + (i6 + 3 | 0) | 0] | 0) << 16 | 0 >>> 16) | ((HEAPU8[i17 + (i6 + 4 | 0) | 0] | 0) << 24 | 0 >>> 8);
    HEAP32[i3 >> 2] = i19;
    HEAP32[i3 + 4 >> 2] = i9;
    HEAP32[i5 >> 2] = i2;
    i17 = i10 - 40 | 0;
    HEAP32[i8 >> 2] = i17;
    i20 = i17;
    i21 = i2;
    i22 = i9;
    i23 = i19;
  } else {
    i20 = i10;
    i21 = i6;
    i22 = i12;
    i23 = i11;
  }
  if ((i20 | 0) <= 7) {
    i4 = i13;
    return i4 | 0;
  }
  i11 = i1 + 8 | 0;
  i1 = i21;
  i21 = i20;
  i20 = i22;
  i22 = i23;
  while (1) {
    if (i1 >>> 0 >= i7 >>> 0) {
      i4 = i13;
      i24 = 1936;
      break;
    }
    i23 = i22 >>> 8 | i20 << 24;
    i12 = i20 >>> 8 | 0 << 24;
    i15 = i3 | 0;
    HEAP32[i15 >> 2] = i23;
    i16 = i3 + 4 | 0;
    HEAP32[i16 >> 2] = i12;
    i6 = 0 << 24 | 0 >>> 8 | i23;
    i23 = (HEAPU8[(HEAP32[i11 >> 2] | 0) + i1 | 0] | 0) << 24 | 0 >>> 8 | i12;
    HEAP32[i3 >> 2] = i6;
    HEAP32[i3 + 4 >> 2] = i23;
    i12 = i1 + 1 | 0;
    HEAP32[i5 >> 2] = i12;
    i10 = i21 - 8 | 0;
    HEAP32[i8 >> 2] = i10;
    if ((i10 | 0) > 7) {
      i1 = i12;
      i21 = i10;
      i20 = i23;
      i22 = i6;
    } else {
      i4 = i13;
      i24 = 1932;
      break;
    }
  }
  if ((i24 | 0) == 1932) {
    return i4 | 0;
  } else if ((i24 | 0) == 1936) {
    return i4 | 0;
  }
  return 0;
}
function _HuffmanTreeBuildImplicit(i1, i2, i3) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0;
  i4 = STACKTOP;
  STACKTOP = STACKTOP + 128 | 0;
  i5 = i4 | 0;
  i6 = i4 + 64 | 0;
  if ((i3 | 0) > 0) {
    i7 = 0;
    i8 = 0;
    i9 = 0;
  } else {
    i10 = 0;
    STACKTOP = i4;
    return i10 | 0;
  }
  while (1) {
    i11 = (HEAP32[i2 + (i9 << 2) >> 2] | 0) > 0;
    i12 = (i11 & 1) + i7 | 0;
    i13 = i11 ? i9 : i8;
    i11 = i9 + 1 | 0;
    if ((i11 | 0) == (i3 | 0)) {
      break;
    } else {
      i7 = i12;
      i8 = i13;
      i9 = i11;
    }
  }
  if ((i12 | 0) == 0) {
    i10 = 0;
    STACKTOP = i4;
    return i10 | 0;
  }
  i9 = (i12 << 1) - 1 | 0;
  i8 = i1 + 4 | 0;
  HEAP32[i8 >> 2] = i9;
  i7 = i9;
  i11 = (i9 | 0) < 0 ? -1 : 0;
  i9 = i7 << 3 | 0 >>> 29;
  i14 = i11 << 3 | i7 >>> 29;
  i15 = 0;
  i16 = 256;
  i17 = ~~Math_floor((+(i15 >>> 0) + +(i16 >>> 0) * 4294967296.0) / (+(i7 >>> 0) + +(i11 >>> 0) * 4294967296.0)) >>> 0;
  i18 = Math_min(Math_floor(Math_floor((+(i15 >>> 0) + +(i16 >>> 0) * 4294967296.0) / (+(i7 >>> 0) + +(i11 >>> 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
  i11 = 0;
  do {
    if (!(i18 >>> 0 < i11 >>> 0 | i18 >>> 0 == i11 >>> 0 & i17 >>> 0 < 8 >>> 0)) {
      if (!((i9 | 0) == (i9 & -8 | 0) & (i14 | 0) == (i14 & 0 | 0))) {
        break;
      }
      i7 = _malloc(i9) | 0;
      i16 = i1 | 0;
      HEAP32[i16 >> 2] = i7;
      if ((i7 | 0) == 0) {
        i10 = 0;
        STACKTOP = i4;
        return i10 | 0;
      }
      HEAP32[i7 + 4 >> 2] = -1;
      i7 = i1 + 8 | 0;
      HEAP32[i7 >> 2] = 1;
      if ((i12 | 0) == 1) {
        if (!((i13 | 0) > -1 & (i13 | 0) < (i3 | 0))) {
          if ((i1 | 0) == 0) {
            i10 = 0;
            STACKTOP = i4;
            return i10 | 0;
          }
          _free(HEAP32[i16 >> 2] | 0);
          HEAP32[i16 >> 2] = 0;
          HEAP32[i8 >> 2] = 0;
          HEAP32[i7 >> 2] = 0;
          i10 = 0;
          STACKTOP = i4;
          return i10 | 0;
        }
        i15 = HEAP32[i16 >> 2] | 0;
        i19 = i15 + 4 | 0;
        i20 = HEAP32[i19 >> 2] | 0;
        do {
          if ((i20 | 0) > -1) {
            if ((i20 | 0) == 0) {
              break;
            } else {
              i10 = 0;
            }
            STACKTOP = i4;
            return i10 | 0;
          } else {
            HEAP32[i19 >> 2] = 0;
          }
        } while (0);
        HEAP32[i15 >> 2] = i13;
        i10 = 1;
        STACKTOP = i4;
        return i10 | 0;
      }
      i19 = i3;
      i20 = (i3 | 0) < 0 ? -1 : 0;
      i21 = i19 << 2 | 0 >>> 30;
      i22 = i20 << 2 | i19 >>> 30;
      do {
        if ((i3 | 0) == 0) {
          i23 = 1955;
        } else {
          i24 = 0;
          i25 = 256;
          i26 = ~~Math_floor((+(i24 >>> 0) + +(i25 >>> 0) * 4294967296.0) / (+(i19 >>> 0) + +(i20 >>> 0) * 4294967296.0)) >>> 0;
          i27 = Math_min(Math_floor(Math_floor((+(i24 >>> 0) + +(i25 >>> 0) * 4294967296.0) / (+(i19 >>> 0) + +(i20 >>> 0) * 4294967296.0)) / 4294967296.0), 4294967295.0) >>> 0;
          i25 = 0;
          if (i27 >>> 0 < i25 >>> 0 | i27 >>> 0 == i25 >>> 0 & i26 >>> 0 < 4 >>> 0) {
            i23 = 1984;
            break;
          }
          if ((i21 | 0) == (i21 & -4 | 0) & (i22 | 0) == (i22 & 0 | 0)) {
            i23 = 1955;
            break;
          } else {
            i23 = 1984;
            break;
          }
        }
      } while (0);
      do {
        if ((i23 | 0) == 1955) {
          i22 = _malloc(i21) | 0;
          i20 = i22;
          if ((i22 | 0) == 0) {
            i23 = 1984;
            break;
          }
          i19 = i5;
          i15 = i6;
          HEAP32[i19 >> 2] = 0;
          HEAP32[i19 + 4 >> 2] = 0;
          HEAP32[i19 + 8 >> 2] = 0;
          HEAP32[i19 + 12 >> 2] = 0;
          HEAP32[i19 + 16 >> 2] = 0;
          HEAP32[i19 + 20 >> 2] = 0;
          HEAP32[i19 + 24 >> 2] = 0;
          HEAP32[i19 + 28 >> 2] = 0;
          HEAP32[i19 + 32 >> 2] = 0;
          HEAP32[i19 + 36 >> 2] = 0;
          HEAP32[i19 + 40 >> 2] = 0;
          HEAP32[i19 + 44 >> 2] = 0;
          HEAP32[i19 + 48 >> 2] = 0;
          HEAP32[i19 + 52 >> 2] = 0;
          HEAP32[i19 + 56 >> 2] = 0;
          HEAP32[i19 + 60 >> 2] = 0;
          HEAP32[i15 >> 2] = 0;
          HEAP32[i15 + 4 >> 2] = 0;
          HEAP32[i15 + 8 >> 2] = 0;
          HEAP32[i15 + 12 >> 2] = 0;
          HEAP32[i15 + 16 >> 2] = 0;
          HEAP32[i15 + 20 >> 2] = 0;
          HEAP32[i15 + 24 >> 2] = 0;
          HEAP32[i15 + 28 >> 2] = 0;
          HEAP32[i15 + 32 >> 2] = 0;
          HEAP32[i15 + 36 >> 2] = 0;
          HEAP32[i15 + 40 >> 2] = 0;
          HEAP32[i15 + 44 >> 2] = 0;
          HEAP32[i15 + 48 >> 2] = 0;
          HEAP32[i15 + 52 >> 2] = 0;
          HEAP32[i15 + 56 >> 2] = 0;
          HEAP32[i15 + 60 >> 2] = 0;
          i15 = 0;
          i19 = 0;
          while (1) {
            i26 = HEAP32[i2 + (i15 << 2) >> 2] | 0;
            i28 = (i26 | 0) > (i19 | 0) ? i26 : i19;
            i26 = i15 + 1 | 0;
            if ((i26 | 0) == (i3 | 0)) {
              break;
            } else {
              i15 = i26;
              i19 = i28;
            }
          }
          if ((i28 | 0) > 15) {
            _free(i22);
            i23 = 1984;
            break;
          } else {
            i29 = 0;
          }
          while (1) {
            i19 = i5 + (HEAP32[i2 + (i29 << 2) >> 2] << 2) | 0;
            HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1 | 0;
            i19 = i29 + 1 | 0;
            if ((i19 | 0) == (i3 | 0)) {
              break;
            } else {
              i29 = i19;
            }
          }
          HEAP32[i5 >> 2] = 0;
          HEAP32[i6 >> 2] = -1;
          L2761 : do {
            if ((i28 | 0) < 1) {
              i30 = 0;
            } else {
              i19 = i28 + 1 | 0;
              i15 = 1;
              i26 = 0;
              i25 = 0;
              while (1) {
                i27 = i25 + i26 << 1;
                HEAP32[i6 + (i15 << 2) >> 2] = i27;
                i24 = i15 + 1 | 0;
                if ((i24 | 0) == (i19 | 0)) {
                  i30 = 0;
                  break L2761;
                }
                i31 = HEAP32[i5 + (i15 << 2) >> 2] | 0;
                i15 = i24;
                i26 = i27;
                i25 = i31;
              }
            }
          } while (0);
          while (1) {
            i25 = HEAP32[i2 + (i30 << 2) >> 2] | 0;
            if ((i25 | 0) > 0) {
              i26 = i6 + (i25 << 2) | 0;
              i25 = HEAP32[i26 >> 2] | 0;
              HEAP32[i26 >> 2] = i25 + 1 | 0;
              HEAP32[i20 + (i30 << 2) >> 2] = i25;
            } else {
              HEAP32[i20 + (i30 << 2) >> 2] = -1;
            }
            i25 = i30 + 1 | 0;
            if ((i25 | 0) == (i3 | 0)) {
              i32 = 0;
              break;
            } else {
              i30 = i25;
            }
          }
          L2772 : while (1) {
            i25 = HEAP32[i2 + (i32 << 2) >> 2] | 0;
            if ((i25 | 0) > 0) {
              i26 = HEAP32[i20 + (i32 << 2) >> 2] | 0;
              i15 = HEAP32[i16 >> 2] | 0;
              i19 = i15 + (HEAP32[i8 >> 2] << 3) | 0;
              i31 = i15;
              i15 = i25;
              while (1) {
                i25 = i15 - 1 | 0;
                if (i31 >>> 0 >= i19 >>> 0) {
                  i23 = 1981;
                  break L2772;
                }
                i27 = i31 + 4 | 0;
                i24 = HEAP32[i27 >> 2] | 0;
                if ((i24 | 0) > -1) {
                  if ((i24 | 0) == 0) {
                    i23 = 1981;
                    break L2772;
                  } else {
                    i33 = i24;
                  }
                } else {
                  i24 = HEAP32[i7 >> 2] | 0;
                  if ((i24 | 0) == (HEAP32[i8 >> 2] | 0)) {
                    i23 = 1981;
                    break L2772;
                  }
                  i34 = HEAP32[i16 >> 2] | 0;
                  HEAP32[i27 >> 2] = (i34 + (i24 << 3) | 0) - i31 >> 3;
                  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 2 | 0;
                  HEAP32[i34 + (i24 << 3) + 4 >> 2] = -1;
                  HEAP32[i34 + (i24 + 1 << 3) + 4 >> 2] = -1;
                  i33 = HEAP32[i27 >> 2] | 0;
                }
                i35 = i33 + (i26 >>> (i25 >>> 0) & 1) | 0;
                i36 = i31 + (i35 << 3) | 0;
                if ((i25 | 0) > 0) {
                  i31 = i36;
                  i15 = i25;
                } else {
                  break;
                }
              }
              i15 = i31 + (i35 << 3) + 4 | 0;
              i26 = HEAP32[i15 >> 2] | 0;
              if ((i26 | 0) > -1) {
                if ((i26 | 0) != 0) {
                  i23 = 1981;
                  break;
                }
              } else {
                HEAP32[i15 >> 2] = 0;
              }
              HEAP32[i36 >> 2] = i32;
            }
            i15 = i32 + 1 | 0;
            if ((i15 | 0) < (i3 | 0)) {
              i32 = i15;
            } else {
              break;
            }
          }
          if ((i23 | 0) == 1981) {
            _free(i22);
            i23 = 1984;
            break;
          }
          _free(i22);
          i20 = (HEAP32[i7 >> 2] | 0) == (HEAP32[i8 >> 2] | 0);
          i15 = i20 & 1;
          if (i20) {
            i10 = i15;
          } else {
            i37 = i15;
            break;
          }
          STACKTOP = i4;
          return i10 | 0;
        }
      } while (0);
      do {
        if ((i23 | 0) == 1984) {
          if ((i1 | 0) == 0) {
            i10 = 0;
          } else {
            i37 = 0;
            break;
          }
          STACKTOP = i4;
          return i10 | 0;
        }
      } while (0);
      _free(HEAP32[i16 >> 2] | 0);
      HEAP32[i16 >> 2] = 0;
      HEAP32[i8 >> 2] = 0;
      HEAP32[i7 >> 2] = 0;
      i10 = i37;
      STACKTOP = i4;
      return i10 | 0;
    }
  } while (0);
  HEAP32[i1 >> 2] = 0;
  i10 = 0;
  STACKTOP = i4;
  return i10 | 0;
}
function _HorizontalUnfilter(i1, i2, i3, i4, i5, i6) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
  if ((i3 | 0) <= 0) {
    return;
  }
  i7 = Math_imul(i2 - 1 | 0, i4);
  i2 = (i7 | 0) > 0;
  i8 = (i4 | 0) > 0;
  i9 = i1;
  i1 = 0;
  i10 = i6;
  while (1) {
    L2807 : do {
      if ((i1 | 0) == 0) {
        _memcpy(i10, i9, i4);
      } else {
        if (i8) {
          i11 = 0;
        } else {
          break;
        }
        while (1) {
          HEAP8[i10 + i11 | 0] = (HEAP8[i10 + (i11 - i5 | 0) | 0] | 0) + (HEAP8[i9 + i11 | 0] | 0) & 255;
          i6 = i11 + 1 | 0;
          if ((i6 | 0) == (i4 | 0)) {
            break L2807;
          } else {
            i11 = i6;
          }
        }
      }
    } while (0);
    L2813 : do {
      if (i2) {
        i6 = 0;
        while (1) {
          i12 = i6 + i4 | 0;
          HEAP8[i10 + i12 | 0] = (HEAP8[i10 + i6 | 0] | 0) + (HEAP8[i9 + i12 | 0] | 0) & 255;
          i12 = i6 + 1 | 0;
          if ((i12 | 0) == (i7 | 0)) {
            break L2813;
          } else {
            i6 = i12;
          }
        }
      }
    } while (0);
    i6 = i1 + 1 | 0;
    if ((i6 | 0) == (i3 | 0)) {
      break;
    } else {
      i9 = i9 + i5 | 0;
      i1 = i6;
      i10 = i10 + i5 | 0;
    }
  }
  return;
}
function _VerticalUnfilter(i1, i2, i3, i4, i5, i6) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
  _memcpy(i6, i1, i4);
  i7 = Math_imul(i2 - 1 | 0, i4);
  L2819 : do {
    if ((i7 | 0) > 0) {
      i8 = 0;
      while (1) {
        i9 = i8 + i4 | 0;
        HEAP8[i6 + i9 | 0] = (HEAP8[i6 + i8 | 0] | 0) + (HEAP8[i1 + i9 | 0] | 0) & 255;
        i9 = i8 + 1 | 0;
        if ((i9 | 0) == (i7 | 0)) {
          break L2819;
        } else {
          i8 = i9;
        }
      }
    }
  } while (0);
  if ((i3 | 0) <= 1) {
    return;
  }
  i7 = Math_imul(i4, i2);
  i2 = (i7 | 0) > 0;
  i4 = i1;
  i1 = 1;
  i8 = i6;
  while (1) {
    i6 = i4 + i5 | 0;
    i9 = i8 + i5 | 0;
    L2828 : do {
      if (i2) {
        i10 = 0;
        while (1) {
          i11 = i10 + i5 | 0;
          HEAP8[i8 + i11 | 0] = (HEAP8[i8 + i10 | 0] | 0) + (HEAP8[i4 + i11 | 0] | 0) & 255;
          i11 = i10 + 1 | 0;
          if ((i11 | 0) == (i7 | 0)) {
            break L2828;
          } else {
            i10 = i11;
          }
        }
      }
    } while (0);
    i10 = i1 + 1 | 0;
    if ((i10 | 0) == (i3 | 0)) {
      break;
    } else {
      i4 = i6;
      i1 = i10;
      i8 = i9;
    }
  }
  return;
}
function _GradientUnfilter(i1, i2, i3, i4, i5, i6) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
  _memcpy(i6, i1, i4);
  i7 = Math_imul(i2 - 1 | 0, i4);
  L2834 : do {
    if ((i7 | 0) > 0) {
      i8 = 0;
      while (1) {
        i9 = i8 + i4 | 0;
        HEAP8[i6 + i9 | 0] = (HEAP8[i6 + i8 | 0] | 0) + (HEAP8[i1 + i9 | 0] | 0) & 255;
        i9 = i8 + 1 | 0;
        if ((i9 | 0) == (i7 | 0)) {
          break L2834;
        } else {
          i8 = i9;
        }
      }
    }
  } while (0);
  if ((i3 | 0) <= 1) {
    return;
  }
  i7 = (i4 | 0) > 0;
  i8 = Math_imul(i4, i2);
  i2 = (i8 | 0) > (i4 | 0);
  i9 = i5 - i4 | 0;
  i10 = i6;
  i11 = i6;
  i6 = 1;
  i12 = i1;
  while (1) {
    i1 = i11 + i5 | 0;
    i13 = i12 + i5 | 0;
    i14 = i10 + i5 | 0;
    L2843 : do {
      if (i7) {
        i15 = 0;
        while (1) {
          i16 = i15 + i5 | 0;
          HEAP8[i10 + i16 | 0] = (HEAP8[i11 + i15 | 0] | 0) + (HEAP8[i12 + i16 | 0] | 0) & 255;
          i16 = i15 + 1 | 0;
          if ((i16 | 0) == (i4 | 0)) {
            break L2843;
          } else {
            i15 = i16;
          }
        }
      }
    } while (0);
    L2847 : do {
      if (i2) {
        i15 = i4;
        while (1) {
          i16 = ((HEAPU8[i11 + i15 | 0] | 0) + (HEAPU8[i11 + (i9 + i15 | 0) | 0] | 0) | 0) - (HEAPU8[i11 + (i15 - i4 | 0) | 0] | 0) | 0;
          if ((i16 | 0) < 0) {
            i17 = 0;
          } else {
            i17 = (i16 | 0) > 255 ? 255 : i16;
          }
          i16 = i15 + i5 | 0;
          HEAP8[i10 + i16 | 0] = (HEAPU8[i12 + i16 | 0] | 0) + i17 & 255;
          i16 = i15 + 1 | 0;
          if ((i16 | 0) == (i8 | 0)) {
            break L2847;
          } else {
            i15 = i16;
          }
        }
      }
    } while (0);
    i15 = i6 + 1 | 0;
    if ((i15 | 0) == (i3 | 0)) {
      break;
    } else {
      i10 = i14;
      i11 = i1;
      i6 = i15;
      i12 = i13;
    }
  }
  return;
}
function __ZN14ImageFormatJPG11init_sourceEP22jpeg_decompress_struct(i1) {
  i1 = i1 | 0;
  return;
}
function __ZN14ImageFormatJPG11term_sourceEP22jpeg_decompress_struct(i1) {
  i1 = i1 | 0;
  return;
}
function _main(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0;
  i3 = STACKTOP;
  STACKTOP = STACKTOP + 1600 | 0;
  i4 = i3 | 0;
  i5 = i3 + 4 | 0;
  i6 = i3 + 8 | 0;
  i7 = i3 + 12 | 0;
  i8 = i3 + 356 | 0;
  i9 = i3 + 440 | 0;
  i10 = i3 + 784 | 0;
  i11 = i3 + 868 | 0;
  i12 = i3 + 908 | 0;
  i13 = i3 + 948 | 0;
  i14 = i3 + 1576 | 0;
  i15 = i3 + 1584 | 0;
  i16 = i3 + 1592 | 0;
  i17 = i3 + 1596 | 0;
  _puts(5243140) | 0;
  if ((i1 | 0) != 2) {
    _printf(5274208, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = i1, tempInt) | 0) | 0;
    i18 = 1;
    STACKTOP = i3;
    return i18 | 0;
  }
  i1 = HEAP32[i2 + 4 >> 2] | 0;
  L2862 : do {
    if ((_strstr(i1 | 0, 5270984) | 0) == 0) {
      if ((_strstr(i1 | 0, 5270820) | 0) != 0) {
        i19 = 2040;
        break;
      }
      do {
        if ((_strstr(i1 | 0, 5270720) | 0) == 0) {
          if ((_strstr(i1 | 0, 5270536) | 0) != 0) {
            break;
          }
          do {
            if ((_strstr(i1 | 0, 5270400) | 0) == 0) {
              if ((_strstr(i1 | 0, 5270228) | 0) != 0) {
                break;
              }
              do {
                if ((_strstr(i1 | 0, 5269948) | 0) == 0) {
                  if ((_strstr(i1 | 0, 5269900) | 0) != 0) {
                    break;
                  }
                  _printf(5269704, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = i1, tempInt) | 0) | 0;
                  i20 = 0;
                  break L2862;
                }
              } while (0);
              i2 = i6;
              _puts(5243168) | 0;
              i21 = _fopen(i1 | 0, 5272684) | 0;
              if ((i21 | 0) == 0) {
                _printf(5271244, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = i1, tempInt) | 0) | 0;
                i20 = 0;
                break L2862;
              }
              _fread(i5 | 0, 1, 1, i21 | 0) | 0;
              i22 = HEAP8[i5] | 0;
              _fread(i5 | 0, 1, 1, i21 | 0) | 0;
              _fread(i5 | 0, 1, 1, i21 | 0) | 0;
              i23 = HEAP8[i5] | 0;
              _fread(i2 | 0, 2, 1, i21 | 0) | 0;
              _fread(i2 | 0, 2, 1, i21 | 0) | 0;
              _fread(i5 | 0, 1, 1, i21 | 0) | 0;
              _fread(i2 | 0, 2, 1, i21 | 0) | 0;
              _fread(i2 | 0, 2, 1, i21 | 0) | 0;
              _fread(i2 | 0, 2, 1, i21 | 0) | 0;
              i24 = HEAP16[i6 >> 1] | 0;
              _fread(i2 | 0, 2, 1, i21 | 0) | 0;
              i2 = HEAP16[i6 >> 1] | 0;
              _fread(i5 | 0, 1, 1, i21 | 0) | 0;
              i25 = HEAP8[i5] | 0;
              _fread(i5 | 0, 1, 1, i21 | 0) | 0;
              i26 = HEAP8[i5] | 0;
              _fseek(i21 | 0, i22 & 255 | 0, 1) | 0;
              i22 = i24 & 65535;
              HEAP32[1311522] = i22;
              i24 = i2 & 65535;
              HEAP32[1311523] = i24;
              i27 = (i25 & 255) >>> 3;
              HEAP32[1311524] = i27;
              i25 = Math_imul(Math_imul(i22, i27), i24);
              i28 = __Znaj((i25 | 0) > -1 ? i25 : -1) | 0;
              _memset(i28 | 0, 0, i25 | 0);
              i29 = Math_imul(i24, i22);
              L2878 : do {
                if (i23 << 24 >> 24 == 10) {
                  if ((i29 | 0) == 0) {
                    break;
                  }
                  i30 = -i27 | 0;
                  i31 = i28;
                  i32 = 0;
                  while (1) {
                    HEAP8[i4] = 0;
                    if ((_fread(i4 | 0, 1, 1, i21 | 0) | 0) != 1) {
                      break L2878;
                    }
                    i33 = HEAP8[i4] | 0;
                    i34 = i33 & 255;
                    L2885 : do {
                      if ((i34 & 128 | 0) == 0) {
                        i35 = i34 + 1 | 0;
                        _fread(i31 | 0, i27 | 0, i35 | 0, i21 | 0) | 0;
                        i35 = HEAP8[i4] | 0;
                        i36 = i31 + Math_imul((i35 & 255) + 1 | 0, i27) | 0;
                        i37 = i35;
                      } else {
                        HEAP8[i4] = i33 ^ -128;
                        _fread(i31 | 0, i27 | 0, 1, i21 | 0) | 0;
                        i35 = i31 + i27 | 0;
                        i38 = HEAP8[i4] | 0;
                        if ((Math_imul(i38 & 255, i27) | 0) == 0) {
                          i36 = i35;
                          i37 = i38;
                          break;
                        } else {
                          i39 = i35;
                          i40 = 0;
                        }
                        while (1) {
                          HEAP8[i39] = HEAP8[i39 + i30 | 0] | 0;
                          i35 = i39 + 1 | 0;
                          i38 = i40 + 1 | 0;
                          i41 = HEAP8[i4] | 0;
                          if ((i38 | 0) < (Math_imul(i41 & 255, i27) | 0)) {
                            i39 = i35;
                            i40 = i38;
                          } else {
                            i36 = i35;
                            i37 = i41;
                            break L2885;
                          }
                        }
                      }
                    } while (0);
                    i33 = (i32 + 1 | 0) + (i37 & 255) | 0;
                    if (i33 >>> 0 < i29 >>> 0) {
                      i31 = i36;
                      i32 = i33;
                    } else {
                      break L2878;
                    }
                  }
                } else {
                  _fread(i28 | 0, i27 | 0, i29 | 0, i21 | 0) | 0;
                }
              } while (0);
              i29 = HEAP32[1311524] | 0;
              L2892 : do {
                if ((i25 | 0) != 0) {
                  i27 = 0;
                  i23 = i28;
                  while (1) {
                    i32 = HEAP8[i23] | 0;
                    i31 = i23 + 2 | 0;
                    HEAP8[i23] = HEAP8[i31] | 0;
                    HEAP8[i31] = i32;
                    i32 = i27 + i29 | 0;
                    if (i32 >>> 0 < i25 >>> 0) {
                      i27 = i32;
                      i23 = i23 + i29 | 0;
                    } else {
                      break L2892;
                    }
                  }
                }
              } while (0);
              L2896 : do {
                if ((i26 & 32) << 24 >> 24 == 0) {
                  i23 = i24 >>> 1;
                  if ((i2 & 65535) <= 1) {
                    break;
                  }
                  i27 = Math_imul(i29, i22);
                  i32 = i24 - 1 | 0;
                  i31 = (i27 | 0) > 0;
                  i30 = 0;
                  while (1) {
                    L2901 : do {
                      if (i31) {
                        i33 = Math_imul(i32 - i30 | 0, i27);
                        i34 = i28 + Math_imul(i30, i27) | 0;
                        i41 = i28 + i33 | 0;
                        i33 = 0;
                        while (1) {
                          i35 = HEAP8[i41] | 0;
                          HEAP8[i41] = HEAP8[i34] | 0;
                          HEAP8[i34] = i35;
                          i35 = i33 + 1 | 0;
                          if ((i35 | 0) == (i27 | 0)) {
                            break L2901;
                          } else {
                            i34 = i34 + 1 | 0;
                            i41 = i41 + 1 | 0;
                            i33 = i35;
                          }
                        }
                      }
                    } while (0);
                    i33 = i30 + 1 | 0;
                    if ((i33 | 0) < (i23 | 0)) {
                      i30 = i33;
                    } else {
                      break L2896;
                    }
                  }
                }
              } while (0);
              _fclose(i21 | 0) | 0;
              i24 = _fopen(5267920, 5267164) | 0;
              if ((i24 | 0) != 0) {
                _fwrite(i28 | 0, i25 | 0, 1, i24 | 0) | 0;
                _fclose(i24 | 0) | 0;
              }
              if ((i28 | 0) == 0) {
                i20 = 1;
                break L2862;
              }
              _free(i28);
              i20 = 1;
              break L2862;
            }
          } while (0);
          i24 = i12;
          _puts(5243192) | 0;
          i22 = _fopen(i1 | 0, 5272684) | 0;
          if ((i22 | 0) == 0) {
            _printf(5274552, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = i1, tempInt) | 0) | 0;
            i20 = 0;
            break L2862;
          }
          HEAP32[1311522] = 0;
          HEAP32[1311523] = 0;
          HEAP32[1311524] = 0;
          _fseek(i22 | 0, 0, 2) | 0;
          i29 = _ftell(i22 | 0) | 0;
          _fseek(i22 | 0, 0, 0) | 0;
          i2 = __Znaj((i29 | 0) > -1 ? i29 : -1) | 0;
          _fread(i2 | 0, i29 | 0, 1, i22 | 0) | 0;
          _fclose(i22 | 0) | 0;
          i22 = i11;
          if ((i2 | 0) == 0) {
            _printf(5273380, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = i1, tempInt) | 0) | 0;
            i20 = 0;
            break L2862;
          }
          HEAP32[i22 >> 2] = 0;
          HEAP32[i22 + 4 >> 2] = 0;
          HEAP32[i22 + 8 >> 2] = 0;
          HEAP32[i22 + 12 >> 2] = 0;
          HEAP32[i22 + 16 >> 2] = 0;
          HEAP32[i22 + 20 >> 2] = 0;
          HEAP32[i22 + 24 >> 2] = 0;
          HEAP32[i22 + 28 >> 2] = 0;
          HEAP32[i22 + 32 >> 2] = 0;
          HEAP32[i22 + 36 >> 2] = 0;
          i22 = i11 | 0;
          i26 = i11 + 4 | 0;
          if ((_ParseHeadersInternal(i2, i29, i22, i26, i11 + 8 | 0, 0) | 0) != 0) {
            _printf(5273380, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = i1, tempInt) | 0) | 0;
            _free(i2);
            i20 = 0;
            break L2862;
          }
          i30 = HEAP32[i22 >> 2] | 0;
          HEAP32[1311522] = i30;
          i22 = HEAP32[i26 >> 2] | 0;
          HEAP32[1311523] = i22;
          HEAP32[i24 >> 2] = 0;
          HEAP32[i24 + 4 >> 2] = 0;
          HEAP32[i24 + 8 >> 2] = 0;
          HEAP32[i24 + 12 >> 2] = 0;
          HEAP32[i24 + 16 >> 2] = 0;
          HEAP32[i24 + 20 >> 2] = 0;
          HEAP32[i24 + 24 >> 2] = 0;
          HEAP32[i24 + 28 >> 2] = 0;
          HEAP32[i24 + 32 >> 2] = 0;
          HEAP32[i24 + 36 >> 2] = 0;
          i24 = i12 + 8 | 0;
          i26 = _ParseHeadersInternal(i2, i29, i12 | 0, i12 + 4 | 0, i24, 0) | 0;
          i23 = (i26 | 0) == 7 ? 3 : i26;
          if ((i23 | 0) != 0) {
            _printf(5272404, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = i1, HEAP32[tempInt + 4 >> 2] = i23, tempInt) | 0) | 0;
            _free(i2);
            i20 = 0;
            break L2862;
          }
          i23 = (HEAP32[i24 >> 2] | 0) != 0 ? 4 : 3;
          HEAP32[1311524] = i23;
          i24 = Math_imul(Math_imul(i22, i30), i23);
          i23 = __Znaj((i24 | 0) > -1 ? i24 : -1) | 0;
          _memset(i23 | 0, 0, i24 | 0);
          i30 = HEAP32[1311524] | 0;
          i22 = Math_imul(HEAP32[1311522] | 0, i30);
          do {
            if ((i30 | 0) == 3) {
              i26 = i9;
              i27 = i10;
              if ((i23 | 0) == 0) {
                _printf(5272024, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = i1, tempInt) | 0) | 0;
                _free(i2);
                i20 = 0;
                break L2862;
              }
              HEAP32[i27 >> 2] = 0;
              HEAP32[i27 + 4 >> 2] = 0;
              HEAP32[i27 + 8 >> 2] = 0;
              HEAP32[i27 + 12 >> 2] = 0;
              HEAP32[i27 + 16 >> 2] = 0;
              HEAP32[i27 + 20 >> 2] = 0;
              HEAP32[i27 + 24 >> 2] = 0;
              HEAP32[i27 + 28 >> 2] = 0;
              HEAP32[i27 + 32 >> 2] = 0;
              HEAP32[i27 + 36 >> 2] = 0;
              HEAP32[i27 + 40 >> 2] = 0;
              HEAP32[i27 + 44 >> 2] = 0;
              HEAP32[i27 + 48 >> 2] = 0;
              HEAP32[i27 + 52 >> 2] = 0;
              HEAP32[i27 + 56 >> 2] = 0;
              HEAP32[i27 + 60 >> 2] = 0;
              HEAP32[i27 + 64 >> 2] = 0;
              HEAP32[i27 + 68 >> 2] = 0;
              HEAP32[i27 + 72 >> 2] = 0;
              HEAP32[i27 + 76 >> 2] = 0;
              HEAP32[i27 + 80 >> 2] = 0;
              HEAP32[i26 >> 2] = 0;
              HEAP32[i26 + 4 >> 2] = 0;
              HEAP32[i26 + 8 >> 2] = 0;
              HEAP32[i26 + 12 >> 2] = 0;
              HEAP32[i26 + 16 >> 2] = 0;
              HEAP32[i26 + 20 >> 2] = 0;
              HEAP32[i26 + 24 >> 2] = 0;
              HEAP32[i26 + 28 >> 2] = 0;
              HEAP32[i26 + 32 >> 2] = 0;
              HEAP32[i26 + 36 >> 2] = 0;
              HEAP32[i26 + 40 >> 2] = 0;
              HEAP32[i26 + 44 >> 2] = 0;
              HEAP32[i26 + 48 >> 2] = 0;
              HEAP32[i26 + 52 >> 2] = 0;
              HEAP32[i26 + 56 >> 2] = 0;
              HEAP32[i26 + 60 >> 2] = 0;
              HEAP32[i26 + 64 >> 2] = 0;
              HEAP32[i26 + 68 >> 2] = 0;
              HEAP32[i26 + 72 >> 2] = 0;
              HEAP32[i26 + 76 >> 2] = 0;
              HEAP32[i26 + 80 >> 2] = 0;
              HEAP32[i26 + 84 >> 2] = 0;
              HEAP32[i26 + 88 >> 2] = 0;
              HEAP32[i26 + 92 >> 2] = 0;
              HEAP32[i26 + 96 >> 2] = 0;
              HEAP32[i26 + 100 >> 2] = 0;
              HEAP32[i26 + 104 >> 2] = 0;
              HEAP32[i26 + 108 >> 2] = 0;
              HEAP32[i26 + 112 >> 2] = 0;
              HEAP32[i26 + 116 >> 2] = 0;
              HEAP32[i26 + 120 >> 2] = 0;
              HEAP32[i26 + 124 >> 2] = 0;
              HEAP32[i26 + 128 >> 2] = 0;
              HEAP32[i26 + 132 >> 2] = 0;
              HEAP32[i26 + 136 >> 2] = 0;
              HEAP32[i26 + 140 >> 2] = 0;
              HEAP32[i26 + 144 >> 2] = 0;
              HEAP32[i26 + 148 >> 2] = 0;
              HEAP32[i26 + 152 >> 2] = 0;
              HEAP32[i26 + 156 >> 2] = 0;
              HEAP32[i26 + 160 >> 2] = 0;
              HEAP32[i26 + 164 >> 2] = 0;
              HEAP32[i26 + 168 >> 2] = 0;
              HEAP32[i26 + 172 >> 2] = 0;
              HEAP32[i26 + 176 >> 2] = 0;
              HEAP32[i26 + 180 >> 2] = 0;
              HEAP32[i26 + 184 >> 2] = 0;
              HEAP32[i26 + 188 >> 2] = 0;
              HEAP32[i26 + 192 >> 2] = 0;
              HEAP32[i26 + 196 >> 2] = 0;
              HEAP32[i26 + 200 >> 2] = 0;
              HEAP32[i26 + 204 >> 2] = 0;
              HEAP32[i26 + 208 >> 2] = 0;
              HEAP32[i26 + 212 >> 2] = 0;
              HEAP32[i26 + 216 >> 2] = 0;
              HEAP32[i26 + 220 >> 2] = 0;
              HEAP32[i26 + 224 >> 2] = 0;
              HEAP32[i26 + 228 >> 2] = 0;
              HEAP32[i26 + 232 >> 2] = 0;
              HEAP32[i26 + 236 >> 2] = 0;
              HEAP32[i26 + 240 >> 2] = 0;
              HEAP32[i26 + 244 >> 2] = 0;
              HEAP32[i26 + 248 >> 2] = 0;
              HEAP32[i26 + 252 >> 2] = 0;
              HEAP32[i26 + 256 >> 2] = 0;
              HEAP32[i26 + 260 >> 2] = 0;
              HEAP32[i26 + 264 >> 2] = 0;
              HEAP32[i26 + 268 >> 2] = 0;
              HEAP32[i26 + 272 >> 2] = 0;
              HEAP32[i26 + 276 >> 2] = 0;
              HEAP32[i26 + 280 >> 2] = 0;
              HEAP32[i26 + 284 >> 2] = 0;
              HEAP32[i26 + 288 >> 2] = 0;
              HEAP32[i26 + 292 >> 2] = 0;
              HEAP32[i26 + 296 >> 2] = 0;
              HEAP32[i26 + 300 >> 2] = 0;
              HEAP32[i26 + 304 >> 2] = 0;
              HEAP32[i26 + 308 >> 2] = 0;
              HEAP32[i26 + 312 >> 2] = 0;
              HEAP32[i26 + 316 >> 2] = 0;
              HEAP32[i26 + 320 >> 2] = 0;
              HEAP32[i26 + 324 >> 2] = 0;
              HEAP32[i26 + 328 >> 2] = 0;
              HEAP32[i26 + 332 >> 2] = 0;
              HEAP32[i26 + 336 >> 2] = 0;
              HEAP32[i26 + 340 >> 2] = 0;
              HEAP32[i9 >> 2] = i10;
              HEAP32[i10 >> 2] = 0;
              HEAP32[i10 + 16 >> 2] = i23;
              HEAP32[i10 + 20 >> 2] = i22;
              HEAP32[i10 + 24 >> 2] = i24;
              HEAP32[i10 + 12 >> 2] = 1;
              if ((_DecodeInto(i2, i29, i9) | 0) == 0) {
                break;
              }
              _printf(5272024, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = i1, tempInt) | 0) | 0;
              _free(i2);
              _free(i23);
              i20 = 0;
              break L2862;
            } else {
              i26 = i7;
              i27 = i8;
              if ((i23 | 0) == 0) {
                _printf(5271724, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = i1, tempInt) | 0) | 0;
                _free(i2);
                i20 = 0;
                break L2862;
              }
              HEAP32[i27 >> 2] = 0;
              HEAP32[i27 + 4 >> 2] = 0;
              HEAP32[i27 + 8 >> 2] = 0;
              HEAP32[i27 + 12 >> 2] = 0;
              HEAP32[i27 + 16 >> 2] = 0;
              HEAP32[i27 + 20 >> 2] = 0;
              HEAP32[i27 + 24 >> 2] = 0;
              HEAP32[i27 + 28 >> 2] = 0;
              HEAP32[i27 + 32 >> 2] = 0;
              HEAP32[i27 + 36 >> 2] = 0;
              HEAP32[i27 + 40 >> 2] = 0;
              HEAP32[i27 + 44 >> 2] = 0;
              HEAP32[i27 + 48 >> 2] = 0;
              HEAP32[i27 + 52 >> 2] = 0;
              HEAP32[i27 + 56 >> 2] = 0;
              HEAP32[i27 + 60 >> 2] = 0;
              HEAP32[i27 + 64 >> 2] = 0;
              HEAP32[i27 + 68 >> 2] = 0;
              HEAP32[i27 + 72 >> 2] = 0;
              HEAP32[i27 + 76 >> 2] = 0;
              HEAP32[i27 + 80 >> 2] = 0;
              HEAP32[i26 >> 2] = 0;
              HEAP32[i26 + 4 >> 2] = 0;
              HEAP32[i26 + 8 >> 2] = 0;
              HEAP32[i26 + 12 >> 2] = 0;
              HEAP32[i26 + 16 >> 2] = 0;
              HEAP32[i26 + 20 >> 2] = 0;
              HEAP32[i26 + 24 >> 2] = 0;
              HEAP32[i26 + 28 >> 2] = 0;
              HEAP32[i26 + 32 >> 2] = 0;
              HEAP32[i26 + 36 >> 2] = 0;
              HEAP32[i26 + 40 >> 2] = 0;
              HEAP32[i26 + 44 >> 2] = 0;
              HEAP32[i26 + 48 >> 2] = 0;
              HEAP32[i26 + 52 >> 2] = 0;
              HEAP32[i26 + 56 >> 2] = 0;
              HEAP32[i26 + 60 >> 2] = 0;
              HEAP32[i26 + 64 >> 2] = 0;
              HEAP32[i26 + 68 >> 2] = 0;
              HEAP32[i26 + 72 >> 2] = 0;
              HEAP32[i26 + 76 >> 2] = 0;
              HEAP32[i26 + 80 >> 2] = 0;
              HEAP32[i26 + 84 >> 2] = 0;
              HEAP32[i26 + 88 >> 2] = 0;
              HEAP32[i26 + 92 >> 2] = 0;
              HEAP32[i26 + 96 >> 2] = 0;
              HEAP32[i26 + 100 >> 2] = 0;
              HEAP32[i26 + 104 >> 2] = 0;
              HEAP32[i26 + 108 >> 2] = 0;
              HEAP32[i26 + 112 >> 2] = 0;
              HEAP32[i26 + 116 >> 2] = 0;
              HEAP32[i26 + 120 >> 2] = 0;
              HEAP32[i26 + 124 >> 2] = 0;
              HEAP32[i26 + 128 >> 2] = 0;
              HEAP32[i26 + 132 >> 2] = 0;
              HEAP32[i26 + 136 >> 2] = 0;
              HEAP32[i26 + 140 >> 2] = 0;
              HEAP32[i26 + 144 >> 2] = 0;
              HEAP32[i26 + 148 >> 2] = 0;
              HEAP32[i26 + 152 >> 2] = 0;
              HEAP32[i26 + 156 >> 2] = 0;
              HEAP32[i26 + 160 >> 2] = 0;
              HEAP32[i26 + 164 >> 2] = 0;
              HEAP32[i26 + 168 >> 2] = 0;
              HEAP32[i26 + 172 >> 2] = 0;
              HEAP32[i26 + 176 >> 2] = 0;
              HEAP32[i26 + 180 >> 2] = 0;
              HEAP32[i26 + 184 >> 2] = 0;
              HEAP32[i26 + 188 >> 2] = 0;
              HEAP32[i26 + 192 >> 2] = 0;
              HEAP32[i26 + 196 >> 2] = 0;
              HEAP32[i26 + 200 >> 2] = 0;
              HEAP32[i26 + 204 >> 2] = 0;
              HEAP32[i26 + 208 >> 2] = 0;
              HEAP32[i26 + 212 >> 2] = 0;
              HEAP32[i26 + 216 >> 2] = 0;
              HEAP32[i26 + 220 >> 2] = 0;
              HEAP32[i26 + 224 >> 2] = 0;
              HEAP32[i26 + 228 >> 2] = 0;
              HEAP32[i26 + 232 >> 2] = 0;
              HEAP32[i26 + 236 >> 2] = 0;
              HEAP32[i26 + 240 >> 2] = 0;
              HEAP32[i26 + 244 >> 2] = 0;
              HEAP32[i26 + 248 >> 2] = 0;
              HEAP32[i26 + 252 >> 2] = 0;
              HEAP32[i26 + 256 >> 2] = 0;
              HEAP32[i26 + 260 >> 2] = 0;
              HEAP32[i26 + 264 >> 2] = 0;
              HEAP32[i26 + 268 >> 2] = 0;
              HEAP32[i26 + 272 >> 2] = 0;
              HEAP32[i26 + 276 >> 2] = 0;
              HEAP32[i26 + 280 >> 2] = 0;
              HEAP32[i26 + 284 >> 2] = 0;
              HEAP32[i26 + 288 >> 2] = 0;
              HEAP32[i26 + 292 >> 2] = 0;
              HEAP32[i26 + 296 >> 2] = 0;
              HEAP32[i26 + 300 >> 2] = 0;
              HEAP32[i26 + 304 >> 2] = 0;
              HEAP32[i26 + 308 >> 2] = 0;
              HEAP32[i26 + 312 >> 2] = 0;
              HEAP32[i26 + 316 >> 2] = 0;
              HEAP32[i26 + 320 >> 2] = 0;
              HEAP32[i26 + 324 >> 2] = 0;
              HEAP32[i26 + 328 >> 2] = 0;
              HEAP32[i26 + 332 >> 2] = 0;
              HEAP32[i26 + 336 >> 2] = 0;
              HEAP32[i26 + 340 >> 2] = 0;
              HEAP32[i7 >> 2] = i8;
              HEAP32[i8 >> 2] = 1;
              HEAP32[i8 + 16 >> 2] = i23;
              HEAP32[i8 + 20 >> 2] = i22;
              HEAP32[i8 + 24 >> 2] = i24;
              HEAP32[i8 + 12 >> 2] = 1;
              if ((_DecodeInto(i2, i29, i7) | 0) == 0) {
                break;
              }
              _printf(5271724, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = i1, tempInt) | 0) | 0;
              _free(i2);
              _free(i23);
              i20 = 0;
              break L2862;
            }
          } while (0);
          i29 = _fopen(5267920, 5267164) | 0;
          if ((i29 | 0) != 0) {
            _fwrite(i23 | 0, i24 | 0, 1, i29 | 0) | 0;
            _fclose(i29 | 0) | 0;
          }
          _free(i2);
          if ((i23 | 0) == 0) {
            i20 = 1;
            break L2862;
          }
          _free(i23);
          i20 = 1;
          break L2862;
        }
      } while (0);
      i29 = i15 | 0;
      _puts(5243216) | 0;
      i22 = _fopen(i1 | 0, 5272684) | 0;
      if ((i22 | 0) == 0) {
        _printf(5270036, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = i1, tempInt) | 0) | 0;
        i20 = 0;
        break;
      }
      HEAP32[1311522] = 0;
      HEAP32[1311523] = 0;
      HEAP32[1311524] = 0;
      _fread(i29 | 0, 1, 8, i22 | 0) | 0;
      HEAP32[i14 >> 2] = 1196314761;
      HEAP32[i14 + 4 >> 2] = 169478669;
      if ((_memcmp(i29, i14, 8) | 0) != 0) {
        _fclose(i22 | 0) | 0;
        i20 = 0;
        break;
      }
      i29 = _png_create_read_struct_2() | 0;
      HEAP32[i16 >> 2] = i29;
      if ((i29 | 0) == 0) {
        _fclose(i22 | 0) | 0;
        i20 = 0;
        break;
      }
      i30 = HEAP32[i29 + 548 >> 2] | 0;
      i26 = HEAP32[i29 + 544 >> 2] | 0;
      do {
        if ((i30 | 0) == 0) {
          i29 = _malloc(240) | 0;
          if ((i29 | 0) == 0) {
            i19 = 2054;
            break;
          }
          _memset(i29 | 0, 0, 240);
          i42 = i29;
          break;
        } else {
          HEAP32[i13 + 544 >> 2] = i26;
          i29 = FUNCTION_TABLE_iii[i30 & 511](i13, 240) | 0;
          if ((i29 | 0) == 0) {
            i19 = 2054;
            break;
          }
          _memset(i29 | 0, 0, 240);
          i42 = i29;
          break;
        }
      } while (0);
      if ((i19 | 0) == 2054) {
        HEAP32[i17 >> 2] = 0;
        _png_destroy_read_struct(i16, 0);
        _fclose(i22 | 0) | 0;
        i20 = 0;
        break;
      }
      HEAP32[i42 >> 2] = 0;
      HEAP32[i42 + 4 >> 2] = 0;
      HEAP32[i42 + 8 >> 2] = 0;
      HEAP32[i42 + 12 >> 2] = 0;
      HEAP32[i42 + 16 >> 2] = 0;
      HEAP32[i42 + 20 >> 2] = 0;
      HEAP32[i42 + 24 >> 2] = 0;
      HEAP32[i42 + 28 >> 2] = 0;
      HEAP32[i42 + 32 >> 2] = 0;
      HEAP32[i42 + 36 >> 2] = 0;
      HEAP32[i42 + 40 >> 2] = 0;
      HEAP32[i42 + 44 >> 2] = 0;
      HEAP32[i42 + 48 >> 2] = 0;
      HEAP32[i42 + 52 >> 2] = 0;
      HEAP32[i42 + 56 >> 2] = 0;
      HEAP32[i42 + 60 >> 2] = 0;
      HEAP32[i42 + 64 >> 2] = 0;
      HEAP32[i42 + 68 >> 2] = 0;
      HEAP32[i42 + 72 >> 2] = 0;
      HEAP32[i42 + 76 >> 2] = 0;
      HEAP32[i42 + 80 >> 2] = 0;
      HEAP32[i42 + 84 >> 2] = 0;
      HEAP32[i42 + 88 >> 2] = 0;
      HEAP32[i42 + 92 >> 2] = 0;
      HEAP32[i42 + 96 >> 2] = 0;
      HEAP32[i42 + 100 >> 2] = 0;
      HEAP32[i42 + 104 >> 2] = 0;
      HEAP32[i42 + 108 >> 2] = 0;
      HEAP32[i42 + 112 >> 2] = 0;
      HEAP32[i42 + 116 >> 2] = 0;
      HEAP32[i42 + 120 >> 2] = 0;
      HEAP32[i42 + 124 >> 2] = 0;
      HEAP32[i42 + 128 >> 2] = 0;
      HEAP32[i42 + 132 >> 2] = 0;
      HEAP32[i42 + 136 >> 2] = 0;
      HEAP32[i42 + 140 >> 2] = 0;
      HEAP32[i42 + 144 >> 2] = 0;
      HEAP32[i42 + 148 >> 2] = 0;
      HEAP32[i42 + 152 >> 2] = 0;
      HEAP32[i42 + 156 >> 2] = 0;
      HEAP32[i42 + 160 >> 2] = 0;
      HEAP32[i42 + 164 >> 2] = 0;
      HEAP32[i42 + 168 >> 2] = 0;
      HEAP32[i42 + 172 >> 2] = 0;
      HEAP32[i42 + 176 >> 2] = 0;
      HEAP32[i42 + 180 >> 2] = 0;
      HEAP32[i42 + 184 >> 2] = 0;
      HEAP32[i42 + 188 >> 2] = 0;
      HEAP32[i42 + 192 >> 2] = 0;
      HEAP32[i42 + 196 >> 2] = 0;
      HEAP32[i42 + 200 >> 2] = 0;
      HEAP32[i42 + 204 >> 2] = 0;
      HEAP32[i42 + 208 >> 2] = 0;
      HEAP32[i42 + 212 >> 2] = 0;
      HEAP32[i42 + 216 >> 2] = 0;
      HEAP32[i42 + 220 >> 2] = 0;
      HEAP32[i42 + 224 >> 2] = 0;
      HEAP32[i42 + 228 >> 2] = 0;
      HEAP32[i42 + 232 >> 2] = 0;
      HEAP32[i42 + 236 >> 2] = 0;
      HEAP32[i17 >> 2] = i42;
      i30 = HEAP32[i16 >> 2] | 0;
      do {
        if ((i30 | 0) == 0) {
          i43 = 0;
        } else {
          HEAP32[i30 + 64 >> 2] = i22;
          HEAP32[i30 + 60 >> 2] = 280;
          i26 = i30 + 56 | 0;
          do {
            if ((HEAP32[i26 >> 2] | 0) != 0) {
              HEAP32[i26 >> 2] = 0;
              i29 = HEAP32[i30 + 48 >> 2] | 0;
              if ((i29 | 0) == 0) {
                i27 = HEAP32[_stderr >> 2] | 0;
                _fprintf(i27 | 0, 5273152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5269636, tempInt) | 0) | 0;
                i27 = HEAP32[_stderr >> 2] | 0;
                _fputc(10, i27 | 0) | 0;
                break;
              } else {
                FUNCTION_TABLE_vii[i29 & 511](i30, 5269636);
                break;
              }
            }
          } while (0);
          HEAP32[i30 + 308 >> 2] = 0;
          i26 = HEAP32[i16 >> 2] | 0;
          if ((i26 | 0) == 0) {
            i43 = 0;
            break;
          }
          HEAP8[i26 + 276 | 0] = 8;
          i43 = HEAP32[i16 >> 2] | 0;
        }
      } while (0);
      i30 = HEAP32[i17 >> 2] | 0;
      _png_read_info(i43, i30);
      i26 = HEAP32[i16 >> 2] | 0;
      i23 = (i26 | 0) == 0;
      do {
        if (i23 | (i30 | 0) == 0) {
          i44 = 0;
          i45 = 0;
          i46 = 0;
          i19 = 2066;
        } else {
          i2 = HEAP32[i30 >> 2] | 0;
          i24 = HEAP32[i30 + 4 >> 2] | 0;
          i29 = HEAP8[i30 + 24 | 0] | 0;
          i27 = i29 & 255;
          i32 = HEAPU8[i30 + 29 | 0] | 0;
          i31 = HEAPU8[i30 + 25 | 0] | 0;
          if ((i31 | 0) == 3) {
            i33 = i26 + 92 | 0;
            HEAP32[i33 >> 2] = HEAP32[i33 >> 2] | 33558528;
            i33 = i26 + 88 | 0;
            HEAP32[i33 >> 2] = HEAP32[i33 >> 2] & -65;
            i47 = i27;
            i48 = 3;
            i49 = i24;
            i50 = i2;
            break;
          } else if ((i31 | 0) == 0) {
            if ((i29 & 255) < 8) {
              i44 = i2;
              i45 = i24;
              i46 = i32;
              i19 = 2066;
              break;
            } else {
              i47 = 8;
              i48 = i32;
              i49 = i24;
              i50 = i2;
              break;
            }
          } else {
            i47 = i27;
            i48 = i32;
            i49 = i24;
            i50 = i2;
            break;
          }
        }
      } while (0);
      do {
        if ((i19 | 0) == 2066) {
          if (i23) {
            i47 = 8;
            i48 = i46;
            i49 = i45;
            i50 = i44;
            break;
          }
          i30 = i26 + 92 | 0;
          HEAP32[i30 >> 2] = HEAP32[i30 >> 2] | 4096;
          i30 = i26 + 88 | 0;
          HEAP32[i30 >> 2] = HEAP32[i30 >> 2] & -65;
          i47 = 8;
          i48 = i46;
          i49 = i45;
          i50 = i44;
        }
      } while (0);
      i26 = HEAP32[i16 >> 2] | 0;
      i23 = HEAP32[i17 >> 2] | 0;
      do {
        if ((i26 | 0) == 0 | (i23 | 0) == 0) {
          i51 = i48;
        } else {
          if ((HEAP32[i23 + 8 >> 2] & 16 | 0) == 0) {
            i51 = i48;
            break;
          }
          i30 = i26 + 92 | 0;
          HEAP32[i30 >> 2] = HEAP32[i30 >> 2] | 33558528;
          i30 = i26 + 88 | 0;
          HEAP32[i30 >> 2] = HEAP32[i30 >> 2] & -65;
          i51 = i48 + 1 | 0;
        }
      } while (0);
      do {
        if ((i47 | 0) == 16) {
          i26 = HEAP32[i16 >> 2] | 0;
          if ((i26 | 0) == 0) {
            break;
          }
          i23 = i26 + 92 | 0;
          HEAP32[i23 >> 2] = HEAP32[i23 >> 2] & -1537 | 1024;
        }
      } while (0);
      i23 = _llvm_umul_with_overflow_i32(i49 | 0, 4) | 0;
      i26 = __Znaj(tempRet0 ? -1 : i23) | 0;
      i23 = i26;
      HEAP32[1311522] = i50;
      HEAP32[1311523] = i49;
      i30 = Math_imul(i51, i47) >>> 3;
      HEAP32[1311524] = i30;
      i2 = Math_imul(Math_imul(i50, i30), i49);
      i30 = __Znaj((i2 | 0) > -1 ? i2 : -1) | 0;
      _memset(i30 | 0, 0, i2 + 1 | 0);
      i2 = Math_imul(HEAP32[1311524] | 0, HEAP32[1311522] | 0);
      do {
        if ((i49 | 0) == 0) {
          _png_read_image(HEAP32[i16 >> 2] | 0, i23);
          if ((i26 | 0) == 0) {
            break;
          } else {
            i19 = 2079;
            break;
          }
        } else {
          i24 = i49 - 1 | 0;
          i32 = 0;
          while (1) {
            HEAP32[i23 + (i32 << 2) >> 2] = i30 + Math_imul(i2, i24 - i32 | 0) | 0;
            i27 = i32 + 1 | 0;
            if ((i27 | 0) == (i49 | 0)) {
              break;
            } else {
              i32 = i27;
            }
          }
          _png_read_image(HEAP32[i16 >> 2] | 0, i23);
          i19 = 2079;
          break;
        }
      } while (0);
      if ((i19 | 0) == 2079) {
        _free(i26);
      }
      _png_destroy_read_struct(i16, i17);
      i23 = HEAP32[1311523] | 0;
      i2 = (i23 | 0) / 2 & -1;
      L2994 : do {
        if ((i23 | 0) > 1) {
          i32 = Math_imul(HEAP32[1311522] | 0, HEAP32[1311524] | 0);
          i24 = i23 - 1 | 0;
          i27 = (i32 | 0) > 0;
          i29 = 0;
          while (1) {
            L2998 : do {
              if (i27) {
                i31 = Math_imul(i24 - i29 | 0, i32);
                i33 = i30 + Math_imul(i29, i32) | 0;
                i41 = i30 + i31 | 0;
                i31 = 0;
                while (1) {
                  i34 = HEAP8[i41] | 0;
                  HEAP8[i41] = HEAP8[i33] | 0;
                  HEAP8[i33] = i34;
                  i34 = i31 + 1 | 0;
                  if ((i34 | 0) == (i32 | 0)) {
                    break L2998;
                  } else {
                    i33 = i33 + 1 | 0;
                    i41 = i41 + 1 | 0;
                    i31 = i34;
                  }
                }
              }
            } while (0);
            i28 = i29 + 1 | 0;
            if ((i28 | 0) < (i2 | 0)) {
              i29 = i28;
            } else {
              break L2994;
            }
          }
        }
      } while (0);
      i2 = _fopen(5267920, 5267164) | 0;
      if ((i2 | 0) != 0) {
        i23 = Math_imul(HEAP32[1311523] | 0, HEAP32[1311522] | 0);
        i26 = Math_imul(i23, HEAP32[1311524] | 0);
        _fwrite(i30 | 0, i26 | 0, 1, i2 | 0) | 0;
        _fclose(i2 | 0) | 0;
      }
      if ((i30 | 0) != 0) {
        _free(i30);
      }
      _fclose(i22 | 0) | 0;
      i20 = 1;
      break;
    } else {
      i19 = 2040;
    }
  } while (0);
  if ((i19 | 0) == 2040) {
    i20 = __ZN14ImageFormatJPG4loadEPKcRiS2_S2_(i1) | 0;
  }
  i18 = (i20 | 0) == 0 & 1;
  STACKTOP = i3;
  return i18 | 0;
}
function __ZN14ImageFormatPNG18file_read_functionEP14png_struct_defPhj(i1, i2, i3) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  var i4 = 0;
  if ((i1 | 0) == 0) {
    i4 = 0;
  } else {
    i4 = HEAP32[i1 + 64 >> 2] | 0;
  }
  _fread(i2 | 0, 1, i3 | 0, i4 | 0) | 0;
  return;
}
function __ZN14ImageFormatJPG14output_messageEP18jpeg_common_struct(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0;
  i2 = STACKTOP;
  STACKTOP = STACKTOP + 200 | 0;
  i3 = i2 | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 511](i1, i3);
  _printf(5266180, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = i3, tempInt) | 0) | 0;
  STACKTOP = i2;
  return;
}
function __ZN14ImageFormatJPG22file_fill_input_bufferEP22jpeg_decompress_struct(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
  i2 = HEAP32[i1 + 24 >> 2] | 0;
  i3 = i2 + 28 | 0;
  i4 = i3;
  i5 = i2 + 4124 | 0;
  i6 = _fread(i4 | 0, 1, 4096, HEAP32[i5 >> 2] | 0) | 0;
  if ((i6 | 0) != 0) {
    i7 = i6;
    i8 = i2 | 0;
    HEAP32[i8 >> 2] = i4;
    i9 = i2 + 4 | 0;
    HEAP32[i9 >> 2] = i7;
    return 1;
  }
  i6 = i1 | 0;
  if ((_ftell(HEAP32[i5 >> 2] | 0) | 0) == 0) {
    HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] = 42;
    i5 = i1;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 511](i5);
    i10 = i5;
  } else {
    i10 = i1;
  }
  HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] = 120;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] & 511](i10, -1);
  HEAP8[i4] = -1;
  HEAP8[i3 + 1 | 0] = -39;
  i7 = 2;
  i8 = i2 | 0;
  HEAP32[i8 >> 2] = i4;
  i9 = i2 + 4 | 0;
  HEAP32[i9 >> 2] = i7;
  return 1;
}
function __ZN14ImageFormatJPG10error_exitEP18jpeg_common_struct(i1) {
  i1 = i1 | 0;
  var i2 = 0;
  i2 = HEAP32[i1 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[i2 + 8 >> 2] & 511](i1);
  _longjmp(i2 + 132 | 0, 1);
}
function __ZN14ImageFormatJPG20file_skip_input_dataEP22jpeg_decompress_structl(i1, i2) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
  i3 = i1 + 24 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i2 | 0) <= 0) {
    return;
  }
  i5 = i4 + 4 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  L3033 : do {
    if ((i6 | 0) < (i2 | 0)) {
      i7 = i1 | 0;
      i8 = i1;
      i9 = i2;
      i10 = i6;
      i11 = i4;
      while (1) {
        i12 = i9 - i10 | 0;
        i13 = i11 + 28 | 0;
        i14 = i13;
        i15 = i13;
        i13 = i11 + 4124 | 0;
        i16 = _fread(i15 | 0, 1, 4096, HEAP32[i13 >> 2] | 0) | 0;
        if ((i16 | 0) == 0) {
          if ((_ftell(HEAP32[i13 >> 2] | 0) | 0) == 0) {
            HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] = 42;
            FUNCTION_TABLE_vi[HEAP32[HEAP32[i7 >> 2] >> 2] & 511](i8);
          }
          HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] = 120;
          FUNCTION_TABLE_vii[HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] & 511](i8, -1);
          HEAP8[i15] = -1;
          HEAP8[i14 + 1 | 0] = -39;
          i17 = 2;
        } else {
          i17 = i16;
        }
        HEAP32[i11 >> 2] = i15;
        HEAP32[i11 + 4 >> 2] = i17;
        i15 = HEAP32[i5 >> 2] | 0;
        if ((i12 | 0) <= (i15 | 0)) {
          i18 = i12;
          i19 = i15;
          break L3033;
        }
        i9 = i12;
        i10 = i15;
        i11 = HEAP32[i3 >> 2] | 0;
      }
    } else {
      i18 = i2;
      i19 = i6;
    }
  } while (0);
  i6 = i4 | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i18 | 0;
  HEAP32[i5 >> 2] = i19 - i18 | 0;
  return;
}



function __ZN14ImageFormatJPG4loadEPKcRiS2_S2_(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, i150 = 0, i151 = 0, i152 = 0, i153 = 0, i154 = 0, i155 = 0, i156 = 0, i157 = 0, i158 = 0, i159 = 0, i160 = 0, i161 = 0, i162 = 0, i163 = 0, i164 = 0, i165 = 0, i166 = 0, i167 = 0, i168 = 0, i169 = 0, i170 = 0, i171 = 0, i172 = 0, i173 = 0, i174 = 0, i175 = 0, i176 = 0, i177 = 0, i178 = 0, i179 = 0, i180 = 0, i181 = 0, i182 = 0, i183 = 0, i184 = 0, i185 = 0, i186 = 0, i187 = 0, i188 = 0, i189 = 0, i190 = 0, i191 = 0, i192 = 0, i193 = 0, i194 = 0, i195 = 0, i196 = 0, i197 = 0, i198 = 0, i199 = 0, i200 = 0, i201 = 0, i202 = 0, i203 = 0, i204 = 0, i205 = 0, i206 = 0, i207 = 0, i208 = 0, i209 = 0, i210 = 0, i211 = 0, i212 = 0, i213 = 0, i214 = 0, i215 = 0, i216 = 0, i217 = 0, i218 = 0, i219 = 0, i220 = 0, i221 = 0, i222 = 0, i223 = 0, i224 = 0, i225 = 0, i226 = 0, i227 = 0, i228 = 0, i229 = 0, i230 = 0, i231 = 0, i232 = 0, i233 = 0, i234 = 0, i235 = 0, i236 = 0, i237 = 0, i238 = 0, i239 = 0, i240 = 0, i241 = 0, i242 = 0, i243 = 0, i244 = 0, i245 = 0, i246 = 0, i247 = 0, i248 = 0, i249 = 0, i250 = 0, i251 = 0, i252 = 0, i253 = 0, i254 = 0, i255 = 0, i256 = 0, i257 = 0, i258 = 0, i259 = 0, i260 = 0, i261 = 0, i262 = 0, i263 = 0, i264 = 0, i265 = 0, i266 = 0, i267 = 0, i268 = 0, i269 = 0, i270 = 0, i271 = 0, i272 = 0, i273 = 0, i274 = 0, i275 = 0, i276 = 0, i277 = 0, i278 = 0, i279 = 0, i280 = 0, i281 = 0, i282 = 0, i283 = 0, i284 = 0, i285 = 0, i286 = 0, i287 = 0, i288 = 0, i289 = 0, i290 = 0, i291 = 0, i292 = 0, i293 = 0, i294 = 0, i295 = 0, i296 = 0, i297 = 0, i298 = 0, i299 = 0, i300 = 0, i301 = 0, i302 = 0, i303 = 0, i304 = 0, i305 = 0, i306 = 0, i307 = 0, i308 = 0, i309 = 0, i310 = 0, i311 = 0, i312 = 0, i313 = 0, i314 = 0, i315 = 0, i316 = 0, i317 = 0, i318 = 0, i319 = 0, i320 = 0, i321 = 0, i322 = 0, i323 = 0, i324 = 0, i325 = 0, i326 = 0, i327 = 0, i328 = 0, i329 = 0, i330 = 0, i331 = 0, i332 = 0, i333 = 0, i334 = 0, i335 = 0, i336 = 0, i337 = 0, i338 = 0, i339 = 0, i340 = 0, i341 = 0, i342 = 0, i343 = 0, i344 = 0, i345 = 0, i346 = 0, i347 = 0, i348 = 0, i349 = 0, i350 = 0, i351 = 0, i352 = 0, i353 = 0, i354 = 0, i355 = 0, i356 = 0, i357 = 0, i358 = 0, i359 = 0, i360 = 0, i361 = 0, i362 = 0, i363 = 0, i364 = 0, i365 = 0, i366 = 0, i367 = 0, i368 = 0, i369 = 0, i370 = 0, i371 = 0, i372 = 0, i373 = 0, i374 = 0, i375 = 0, i376 = 0, i377 = 0, i378 = 0, i379 = 0, i380 = 0, i381 = 0, i382 = 0, i383 = 0, i384 = 0, i385 = 0, i386 = 0, i387 = 0, i388 = 0, i389 = 0, i390 = 0, i391 = 0, i392 = 0, i393 = 0, i394 = 0, i395 = 0, i396 = 0, i397 = 0, i398 = 0, i399 = 0, i400 = 0, i401 = 0, i402 = 0, i403 = 0, i404 = 0, i405 = 0, i406 = 0, i407 = 0, i408 = 0, i409 = 0, i410 = 0, i411 = 0, i412 = 0, i413 = 0, i414 = 0, i415 = 0, i416 = 0, i417 = 0, i418 = 0, i419 = 0, i420 = 0, i421 = 0, i422 = 0, i423 = 0, i424 = 0, i425 = 0, i426 = 0, i427 = 0, i428 = 0, i429 = 0, i430 = 0, i431 = 0, i432 = 0, i433 = 0, i434 = 0, i435 = 0, i436 = 0, i437 = 0, i438 = 0, i439 = 0, i440 = 0, i441 = 0, i442 = 0, i443 = 0, i444 = 0, i445 = 0, i446 = 0, i447 = 0, i448 = 0, i449 = 0, i450 = 0, i451 = 0, i452 = 0, i453 = 0, i454 = 0, i455 = 0, i456 = 0, i457 = 0, i458 = 0, i459 = 0, i460 = 0, i461 = 0, i462 = 0, i463 = 0, i464 = 0, i465 = 0, i466 = 0, i467 = 0, i468 = 0, i469 = 0, i470 = 0, i471 = 0, i472 = 0, i473 = 0, i474 = 0, i475 = 0, i476 = 0, i477 = 0, i478 = 0, i479 = 0, i480 = 0, i481 = 0, i482 = 0, i483 = 0, i484 = 0, i485 = 0, i486 = 0, i487 = 0, i488 = 0, i489 = 0, i490 = 0, i491 = 0, i492 = 0, i493 = 0, i494 = 0, i495 = 0, i496 = 0, i497 = 0, i498 = 0, i499 = 0, i500 = 0, i501 = 0, i502 = 0, i503 = 0, i504 = 0, i505 = 0, i506 = 0, i507 = 0, i508 = 0, i509 = 0, i510 = 0, i511 = 0, i512 = 0, i513 = 0, i514 = 0, i515 = 0, i516 = 0, i517 = 0, i518 = 0, i519 = 0, i520 = 0, i521 = 0, i522 = 0, i523 = 0, i524 = 0, i525 = 0, i526 = 0, i527 = 0, i528 = 0, i529 = 0, i530 = 0, i531 = 0, i532 = 0, i533 = 0, i534 = 0, i535 = 0, i536 = 0, i537 = 0, i538 = 0, i539 = 0, i540 = 0, i541 = 0, i542 = 0, i543 = 0, i544 = 0, i545 = 0, i546 = 0, i547 = 0, i548 = 0, i549 = 0, i550 = 0, i551 = 0, i552 = 0, i553 = 0, i554 = 0, i555 = 0, i556 = 0, i557 = 0, i558 = 0, i559 = 0, i560 = 0, i561 = 0, i562 = 0, i563 = 0, i564 = 0, i565 = 0, i566 = 0, i567 = 0, i568 = 0, i569 = 0, i570 = 0, i571 = 0, i572 = 0, i573 = 0, i574 = 0, i575 = 0, i576 = 0, i577 = 0, i578 = 0, i579 = 0, i580 = 0, i581 = 0, i582 = 0, i583 = 0, i584 = 0, i585 = 0, i586 = 0, i587 = 0, i588 = 0, i589 = 0, i590 = 0, i591 = 0, i592 = 0, i593 = 0, i594 = 0, i595 = 0, i596 = 0, i597 = 0, i598 = 0, i599 = 0, i600 = 0, i601 = 0, i602 = 0, i603 = 0, i604 = 0, i605 = 0, i606 = 0, i607 = 0, i608 = 0, i609 = 0, i610 = 0, i611 = 0, i612 = 0, i613 = 0, i614 = 0, i615 = 0, i616 = 0, i617 = 0, i618 = 0, i619 = 0, i620 = 0, i621 = 0, i622 = 0, i623 = 0, i624 = 0, i625 = 0, i626 = 0, i627 = 0, i628 = 0, i629 = 0, i630 = 0, i631 = 0, i632 = 0, i633 = 0, i634 = 0, i635 = 0, i636 = 0, i637 = 0, i638 = 0, i639 = 0, i640 = 0, i641 = 0, i642 = 0, i643 = 0, i644 = 0, i645 = 0, i646 = 0, i647 = 0, i648 = 0, i649 = 0, i650 = 0, i651 = 0, i652 = 0, i653 = 0, i654 = 0, i655 = 0, i656 = 0, i657 = 0, i658 = 0, i659 = 0, i660 = 0, i661 = 0, i662 = 0, i663 = 0, i664 = 0, i665 = 0, i666 = 0, i667 = 0, i668 = 0, i669 = 0, i670 = 0, i671 = 0, i672 = 0, i673 = 0, i674 = 0, i675 = 0, i676 = 0, i677 = 0, i678 = 0, i679 = 0, i680 = 0, i681 = 0, i682 = 0, i683 = 0, i684 = 0, i685 = 0, i686 = 0, i687 = 0, i688 = 0, i689 = 0, i690 = 0, i691 = 0, i692 = 0, i693 = 0, i694 = 0, i695 = 0, i696 = 0, i697 = 0, i698 = 0, i699 = 0, i700 = 0, i701 = 0, i702 = 0, i703 = 0, i704 = 0, i705 = 0, i706 = 0, i707 = 0, i708 = 0, i709 = 0, i710 = 0, i711 = 0, i712 = 0, i713 = 0, i714 = 0, i715 = 0, i716 = 0, i717 = 0, i718 = 0, i719 = 0, i720 = 0, i721 = 0, i722 = 0, i723 = 0, i724 = 0, i725 = 0, i726 = 0, i727 = 0, i728 = 0, i729 = 0, i730 = 0, i731 = 0, i732 = 0, i733 = 0, i734 = 0, i735 = 0, i736 = 0, i737 = 0, i738 = 0, i739 = 0, i740 = 0, i741 = 0, i742 = 0, i743 = 0, i744 = 0, i745 = 0, i746 = 0, i747 = 0, i748 = 0, i749 = 0, i750 = 0, i751 = 0, i752 = 0, i753 = 0, i754 = 0, i755 = 0, i756 = 0, i757 = 0, i758 = 0, i759 = 0, i760 = 0, i761 = 0, i762 = 0, i763 = 0, i764 = 0, i765 = 0, i766 = 0, i767 = 0, i768 = 0, i769 = 0, i770 = 0, i771 = 0, i772 = 0, i773 = 0, i774 = 0, i775 = 0, i776 = 0, i777 = 0, i778 = 0, i779 = 0, i780 = 0, i781 = 0, i782 = 0, i783 = 0, i784 = 0, i785 = 0, i786 = 0, i787 = 0, i788 = 0, i789 = 0, i790 = 0, i791 = 0, i792 = 0, i793 = 0, i794 = 0, i795 = 0, i796 = 0, i797 = 0, i798 = 0, i799 = 0, i800 = 0, i801 = 0, i802 = 0, i803 = 0, i804 = 0, i805 = 0, i806 = 0, i807 = 0, i808 = 0, i809 = 0, i810 = 0, i811 = 0, i812 = 0, i813 = 0, i814 = 0, i815 = 0, i816 = 0, i817 = 0, i818 = 0, i819 = 0, i820 = 0, i821 = 0, i822 = 0, i823 = 0, i824 = 0, i825 = 0, i826 = 0, i827 = 0, i828 = 0, i829 = 0, i830 = 0, i831 = 0, i832 = 0, i833 = 0, i834 = 0, i835 = 0, i836 = 0, i837 = 0, i838 = 0, i839 = 0, i840 = 0, i841 = 0, i842 = 0, i843 = 0, i844 = 0, i845 = 0, i846 = 0, i847 = 0, i848 = 0, i849 = 0, i850 = 0, i851 = 0, i852 = 0, i853 = 0, i854 = 0, i855 = 0, i856 = 0, i857 = 0, i858 = 0, i859 = 0, i860 = 0, i861 = 0, i862 = 0, i863 = 0, i864 = 0, i865 = 0, i866 = 0, i867 = 0, i868 = 0, i869 = 0, i870 = 0, i871 = 0, i872 = 0, i873 = 0, i874 = 0, i875 = 0, i876 = 0, i877 = 0, i878 = 0, i879 = 0, i880 = 0, i881 = 0, i882 = 0, i883 = 0, i884 = 0, i885 = 0, i886 = 0, i887 = 0, i888 = 0, i889 = 0, i890 = 0, i891 = 0, i892 = 0, i893 = 0, i894 = 0, i895 = 0, i896 = 0, i897 = 0, i898 = 0, i899 = 0, i900 = 0, i901 = 0, i902 = 0, i903 = 0, i904 = 0, i905 = 0, i906 = 0, i907 = 0, i908 = 0, i909 = 0, i910 = 0, i911 = 0, i912 = 0, i913 = 0, i914 = 0, i915 = 0, i916 = 0, i917 = 0, i918 = 0, i919 = 0, i920 = 0, i921 = 0, i922 = 0, i923 = 0, i924 = 0, i925 = 0, i926 = 0, i927 = 0, i928 = 0, i929 = 0, i930 = 0, i931 = 0, i932 = 0, i933 = 0, i934 = 0, i935 = 0, i936 = 0, i937 = 0, i938 = 0, i939 = 0, i940 = 0, i941 = 0, i942 = 0, i943 = 0, i944 = 0, i945 = 0, i946 = 0, i947 = 0, i948 = 0, i949 = 0, i950 = 0, i951 = 0, i952 = 0, i953 = 0, i954 = 0, i955 = 0, i956 = 0, i957 = 0, i958 = 0, i959 = 0, i960 = 0, i961 = 0, i962 = 0, i963 = 0, i964 = 0, i965 = 0, i966 = 0, i967 = 0, i968 = 0, i969 = 0, i970 = 0, i971 = 0, i972 = 0, i973 = 0, i974 = 0, i975 = 0, i976 = 0, i977 = 0, i978 = 0, i979 = 0, i980 = 0, i981 = 0, i982 = 0, i983 = 0, i984 = 0, i985 = 0, i986 = 0, i987 = 0, i988 = 0, i989 = 0, i990 = 0, i991 = 0, i992 = 0, i993 = 0, i994 = 0, i995 = 0, i996 = 0, i997 = 0, i998 = 0, i999 = 0, i1000 = 0, i1001 = 0, i1002 = 0, i1003 = 0, i1004 = 0, i1005 = 0, i1006 = 0, i1007 = 0, i1008 = 0, i1009 = 0, i1010 = 0, i1011 = 0, i1012 = 0, i1013 = 0, i1014 = 0, i1015 = 0, i1016 = 0, i1017 = 0, i1018 = 0, i1019 = 0, i1020 = 0, i1021 = 0, i1022 = 0, i1023 = 0, i1024 = 0, i1025 = 0, i1026 = 0, i1027 = 0, i1028 = 0, i1029 = 0, i1030 = 0, i1031 = 0, i1032 = 0, i1033 = 0, i1034 = 0, i1035 = 0, i1036 = 0, i1037 = 0, i1038 = 0, i1039 = 0, i1040 = 0, i1041 = 0, i1042 = 0, i1043 = 0, i1044 = 0, i1045 = 0, i1046 = 0, i1047 = 0, i1048 = 0, i1049 = 0, i1050 = 0, i1051 = 0, i1052 = 0, i1053 = 0, i1054 = 0, i1055 = 0, i1056 = 0, i1057 = 0, i1058 = 0, i1059 = 0, i1060 = 0, i1061 = 0, i1062 = 0, i1063 = 0, i1064 = 0, i1065 = 0, i1066 = 0, i1067 = 0, i1068 = 0, i1069 = 0, i1070 = 0, i1071 = 0, i1072 = 0, i1073 = 0, i1074 = 0, i1075 = 0, i1076 = 0, i1077 = 0, i1078 = 0, i1079 = 0, i1080 = 0, i1081 = 0, i1082 = 0, i1083 = 0, i1084 = 0, i1085 = 0, i1086 = 0, i1087 = 0, i1088 = 0, i1089 = 0, i1090 = 0, i1091 = 0, i1092 = 0, i1093 = 0, i1094 = 0, i1095 = 0, i1096 = 0, i1097 = 0, i1098 = 0, i1099 = 0, i1100 = 0, i1101 = 0, i1102 = 0, i1103 = 0, i1104 = 0, i1105 = 0, i1106 = 0, i1107 = 0, i1108 = 0, i1109 = 0, i1110 = 0, i1111 = 0, i1112 = 0, i1113 = 0, i1114 = 0, i1115 = 0, i1116 = 0, i1117 = 0, i1118 = 0, i1119 = 0, i1120 = 0, i1121 = 0, i1122 = 0, i1123 = 0, i1124 = 0, i1125 = 0, i1126 = 0, i1127 = 0, i1128 = 0, i1129 = 0, i1130 = 0, i1131 = 0, i1132 = 0, i1133 = 0, i1134 = 0, i1135 = 0, i1136 = 0, i1137 = 0, i1138 = 0, i1139 = 0, i1140 = 0, i1141 = 0, i1142 = 0, i1143 = 0, i1144 = 0, i1145 = 0, i1146 = 0, i1147 = 0, i1148 = 0, i1149 = 0, i1150 = 0, i1151 = 0, i1152 = 0, i1153 = 0, i1154 = 0, i1155 = 0, i1156 = 0, i1157 = 0, i1158 = 0, i1159 = 0, i1160 = 0, i1161 = 0, i1162 = 0, i1163 = 0, i1164 = 0, i1165 = 0, i1166 = 0, i1167 = 0, i1168 = 0, i1169 = 0, i1170 = 0, i1171 = 0, i1172 = 0, i1173 = 0, i1174 = 0, i1175 = 0, i1176 = 0, i1177 = 0, i1178 = 0, i1179 = 0, i1180 = 0, i1181 = 0, i1182 = 0, i1183 = 0, i1184 = 0, i1185 = 0, i1186 = 0, i1187 = 0, i1188 = 0, i1189 = 0, i1190 = 0, i1191 = 0, i1192 = 0, i1193 = 0, i1194 = 0, i1195 = 0, i1196 = 0, i1197 = 0, i1198 = 0, i1199 = 0, i1200 = 0, i1201 = 0, i1202 = 0, i1203 = 0, i1204 = 0, i1205 = 0, i1206 = 0, i1207 = 0, i1208 = 0, i1209 = 0, i1210 = 0, i1211 = 0, i1212 = 0, i1213 = 0, i1214 = 0, i1215 = 0, i1216 = 0, i1217 = 0, i1218 = 0, i1219 = 0, i1220 = 0, i1221 = 0, i1222 = 0, i1223 = 0, i1224 = 0, i1225 = 0, i1226 = 0, i1227 = 0, i1228 = 0, i1229 = 0, i1230 = 0, i1231 = 0, i1232 = 0, i1233 = 0, i1234 = 0, i1235 = 0, i1236 = 0, i1237 = 0, i1238 = 0, i1239 = 0, i1240 = 0, i1241 = 0, i1242 = 0, i1243 = 0, i1244 = 0, i1245 = 0, i1246 = 0, i1247 = 0, i1248 = 0, i1249 = 0, i1250 = 0, i1251 = 0, i1252 = 0, i1253 = 0, i1254 = 0, i1255 = 0, i1256 = 0, i1257 = 0, i1258 = 0, i1259 = 0, i1260 = 0, i1261 = 0, i1262 = 0, i1263 = 0, i1264 = 0, i1265 = 0, i1266 = 0, i1267 = 0, i1268 = 0, i1269 = 0, i1270 = 0, i1271 = 0, i1272 = 0, i1273 = 0, i1274 = 0, i1275 = 0, i1276 = 0, i1277 = 0, i1278 = 0, i1279 = 0, i1280 = 0, i1281 = 0, i1282 = 0, i1283 = 0, i1284 = 0, i1285 = 0, i1286 = 0, i1287 = 0, i1288 = 0, i1289 = 0, i1290 = 0, i1291 = 0, i1292 = 0, i1293 = 0, i1294 = 0, i1295 = 0, i1296 = 0, i1297 = 0, i1298 = 0, i1299 = 0, i1300 = 0, i1301 = 0, i1302 = 0, i1303 = 0, i1304 = 0, i1305 = 0, i1306 = 0, i1307 = 0, i1308 = 0, i1309 = 0, i1310 = 0, i1311 = 0, i1312 = 0, i1313 = 0, i1314 = 0, i1315 = 0, i1316 = 0, i1317 = 0, i1318 = 0, i1319 = 0, i1320 = 0, i1321 = 0, i1322 = 0, i1323 = 0, i1324 = 0, i1325 = 0, i1326 = 0, i1327 = 0, i1328 = 0, i1329 = 0, i1330 = 0, i1331 = 0, i1332 = 0, i1333 = 0, i1334 = 0, i1335 = 0, i1336 = 0, i1337 = 0, i1338 = 0, i1339 = 0, i1340 = 0, i1341 = 0, i1342 = 0, i1343 = 0, i1344 = 0, i1345 = 0, i1346 = 0, i1347 = 0, i1348 = 0, i1349 = 0, i1350 = 0, i1351 = 0, i1352 = 0, i1353 = 0, i1354 = 0, i1355 = 0, i1356 = 0, i1357 = 0, i1358 = 0, i1359 = 0, i1360 = 0, i1361 = 0, i1362 = 0, i1363 = 0, i1364 = 0, i1365 = 0, i1366 = 0, i1367 = 0, i1368 = 0, i1369 = 0, i1370 = 0, i1371 = 0, i1372 = 0, i1373 = 0, i1374 = 0, i1375 = 0, i1376 = 0, i1377 = 0, i1378 = 0, i1379 = 0, i1380 = 0, i1381 = 0, i1382 = 0, i1383 = 0, i1384 = 0, i1385 = 0, i1386 = 0, i1387 = 0, i1388 = 0, i1389 = 0, i1390 = 0, i1391 = 0, i1392 = 0, i1393 = 0, i1394 = 0, i1395 = 0, i1396 = 0, i1397 = 0, i1398 = 0, i1399 = 0, i1400 = 0, i1401 = 0, i1402 = 0, i1403 = 0, i1404 = 0, i1405 = 0, i1406 = 0, i1407 = 0, i1408 = 0, i1409 = 0, i1410 = 0, i1411 = 0, i1412 = 0, i1413 = 0, i1414 = 0, i1415 = 0, i1416 = 0, i1417 = 0, i1418 = 0, i1419 = 0, i1420 = 0, i1421 = 0, i1422 = 0, i1423 = 0, i1424 = 0, i1425 = 0, i1426 = 0, i1427 = 0, i1428 = 0, i1429 = 0, i1430 = 0, i1431 = 0, i1432 = 0, i1433 = 0, i1434 = 0, i1435 = 0, i1436 = 0, i1437 = 0, i1438 = 0, i1439 = 0, i1440 = 0, i1441 = 0, i1442 = 0, i1443 = 0, i1444 = 0, i1445 = 0, i1446 = 0, i1447 = 0, i1448 = 0, i1449 = 0, i1450 = 0, i1451 = 0, i1452 = 0, i1453 = 0, i1454 = 0, i1455 = 0, i1456 = 0, i1457 = 0, i1458 = 0, i1459 = 0, i1460 = 0, i1461 = 0, i1462 = 0, i1463 = 0, i1464 = 0, i1465 = 0, i1466 = 0, i1467 = 0, i1468 = 0, i1469 = 0, i1470 = 0, i1471 = 0, i1472 = 0, i1473 = 0, i1474 = 0, i1475 = 0, i1476 = 0, i1477 = 0, i1478 = 0, i1479 = 0, i1480 = 0, i1481 = 0, i1482 = 0, i1483 = 0, i1484 = 0, i1485 = 0, i1486 = 0, i1487 = 0, i1488 = 0, i1489 = 0, i1490 = 0, i1491 = 0, i1492 = 0, i1493 = 0, i1494 = 0, i1495 = 0, i1496 = 0, i1497 = 0, i1498 = 0, i1499 = 0, i1500 = 0, i1501 = 0, i1502 = 0, i1503 = 0, i1504 = 0, i1505 = 0, i1506 = 0, i1507 = 0, i1508 = 0, i1509 = 0, i1510 = 0, i1511 = 0, i1512 = 0, i1513 = 0, i1514 = 0, i1515 = 0, i1516 = 0, i1517 = 0, i1518 = 0, i1519 = 0, i1520 = 0, i1521 = 0, i1522 = 0, i1523 = 0, i1524 = 0, i1525 = 0, i1526 = 0, i1527 = 0, i1528 = 0, i1529 = 0, i1530 = 0, i1531 = 0, i1532 = 0, i1533 = 0, i1534 = 0, i1535 = 0, i1536 = 0, i1537 = 0, i1538 = 0, i1539 = 0, i1540 = 0, i1541 = 0, i1542 = 0, i1543 = 0, i1544 = 0, i1545 = 0, i1546 = 0, i1547 = 0, i1548 = 0, i1549 = 0, i1550 = 0, i1551 = 0, i1552 = 0, i1553 = 0, i1554 = 0, i1555 = 0, i1556 = 0, i1557 = 0, i1558 = 0, i1559 = 0, i1560 = 0, i1561 = 0, i1562 = 0, i1563 = 0, i1564 = 0, i1565 = 0, i1566 = 0, i1567 = 0, i1568 = 0, i1569 = 0, i1570 = 0, i1571 = 0, i1572 = 0, i1573 = 0, i1574 = 0, i1575 = 0, i1576 = 0, i1577 = 0, i1578 = 0, i1579 = 0, i1580 = 0, i1581 = 0, i1582 = 0, i1583 = 0, i1584 = 0, i1585 = 0, i1586 = 0, i1587 = 0, i1588 = 0, i1589 = 0, i1590 = 0, i1591 = 0, i1592 = 0, i1593 = 0, i1594 = 0, i1595 = 0, i1596 = 0, i1597 = 0, i1598 = 0, i1599 = 0, i1600 = 0, i1601 = 0, i1602 = 0, i1603 = 0, i1604 = 0, i1605 = 0, i1606 = 0, i1607 = 0, i1608 = 0, i1609 = 0, i1610 = 0, i1611 = 0, i1612 = 0, i1613 = 0, i1614 = 0, i1615 = 0, i1616 = 0, i1617 = 0, i1618 = 0, i1619 = 0, i1620 = 0, i1621 = 0, i1622 = 0, i1623 = 0, i1624 = 0, i1625 = 0, i1626 = 0, i1627 = 0, i1628 = 0, i1629 = 0, i1630 = 0, i1631 = 0, i1632 = 0, i1633 = 0, i1634 = 0, i1635 = 0, i1636 = 0, i1637 = 0, i1638 = 0, i1639 = 0, i1640 = 0, i1641 = 0, i1642 = 0, i1643 = 0, i1644 = 0, i1645 = 0, i1646 = 0, i1647 = 0, i1648 = 0, i1649 = 0, i1650 = 0, i1651 = 0, i1652 = 0, i1653 = 0, i1654 = 0, i1655 = 0, i1656 = 0, i1657 = 0, i1658 = 0, i1659 = 0, i1660 = 0, i1661 = 0, i1662 = 0, i1663 = 0, i1664 = 0, i1665 = 0, i1666 = 0, i1667 = 0, i1668 = 0, i1669 = 0, i1670 = 0, i1671 = 0, i1672 = 0, i1673 = 0, i1674 = 0, i1675 = 0, i1676 = 0, i1677 = 0, i1678 = 0, i1679 = 0, i1680 = 0, i1681 = 0, i1682 = 0, i1683 = 0, i1684 = 0, i1685 = 0, i1686 = 0, i1687 = 0, i1688 = 0, i1689 = 0, i1690 = 0, i1691 = 0, i1692 = 0, i1693 = 0, i1694 = 0, i1695 = 0, i1696 = 0, i1697 = 0, i1698 = 0, i1699 = 0, i1700 = 0, i1701 = 0, i1702 = 0, i1703 = 0, i1704 = 0, i1705 = 0, i1706 = 0, i1707 = 0, i1708 = 0, i1709 = 0, i1710 = 0, i1711 = 0, i1712 = 0, i1713 = 0, i1714 = 0, i1715 = 0, i1716 = 0, i1717 = 0, i1718 = 0, i1719 = 0, i1720 = 0, i1721 = 0, i1722 = 0, i1723 = 0, i1724 = 0, i1725 = 0, i1726 = 0, i1727 = 0, i1728 = 0, i1729 = 0, i1730 = 0, i1731 = 0, i1732 = 0, i1733 = 0, i1734 = 0, i1735 = 0, i1736 = 0, i1737 = 0, i1738 = 0, i1739 = 0, i1740 = 0, i1741 = 0, i1742 = 0, i1743 = 0, i1744 = 0, i1745 = 0, i1746 = 0, i1747 = 0, i1748 = 0, i1749 = 0, i1750 = 0, i1751 = 0, i1752 = 0, i1753 = 0, i1754 = 0, i1755 = 0, i1756 = 0, i1757 = 0, i1758 = 0, i1759 = 0, i1760 = 0, i1761 = 0, i1762 = 0, i1763 = 0, i1764 = 0, i1765 = 0, i1766 = 0, i1767 = 0, i1768 = 0, i1769 = 0, i1770 = 0, i1771 = 0, i1772 = 0, i1773 = 0, i1774 = 0, i1775 = 0, i1776 = 0, i1777 = 0, i1778 = 0, i1779 = 0, i1780 = 0, i1781 = 0, i1782 = 0, i1783 = 0, i1784 = 0, i1785 = 0, i1786 = 0, i1787 = 0, i1788 = 0, i1789 = 0, i1790 = 0, i1791 = 0, i1792 = 0, i1793 = 0, i1794 = 0, i1795 = 0, i1796 = 0, i1797 = 0, i1798 = 0, i1799 = 0, i1800 = 0, i1801 = 0, i1802 = 0, i1803 = 0, i1804 = 0, i1805 = 0, i1806 = 0, i1807 = 0, i1808 = 0, i1809 = 0, i1810 = 0, i1811 = 0, i1812 = 0, i1813 = 0, i1814 = 0, i1815 = 0, i1816 = 0, i1817 = 0, i1818 = 0, i1819 = 0, i1820 = 0, i1821 = 0, i1822 = 0, i1823 = 0, i1824 = 0, i1825 = 0, i1826 = 0, i1827 = 0, i1828 = 0, i1829 = 0, i1830 = 0, i1831 = 0, i1832 = 0, i1833 = 0, i1834 = 0, i1835 = 0, i1836 = 0, i1837 = 0, i1838 = 0, i1839 = 0, i1840 = 0, i1841 = 0, i1842 = 0, i1843 = 0, i1844 = 0, i1845 = 0, i1846 = 0, i1847 = 0, i1848 = 0, i1849 = 0, i1850 = 0, i1851 = 0, i1852 = 0, i1853 = 0, i1854 = 0, i1855 = 0, i1856 = 0, i1857 = 0, i1858 = 0, i1859 = 0, i1860 = 0, i1861 = 0, i1862 = 0, i1863 = 0, i1864 = 0, i1865 = 0, i1866 = 0, i1867 = 0, i1868 = 0, i1869 = 0, i1870 = 0, i1871 = 0, i1872 = 0, i1873 = 0, i1874 = 0, i1875 = 0, i1876 = 0, i1877 = 0, i1878 = 0, i1879 = 0, i1880 = 0, i1881 = 0, i1882 = 0, i1883 = 0, i1884 = 0, i1885 = 0, i1886 = 0, i1887 = 0, i1888 = 0, i1889 = 0, i1890 = 0, i1891 = 0, i1892 = 0, i1893 = 0, i1894 = 0, i1895 = 0, i1896 = 0, i1897 = 0, i1898 = 0, i1899 = 0, i1900 = 0, i1901 = 0, i1902 = 0, i1903 = 0, i1904 = 0, i1905 = 0, i1906 = 0, i1907 = 0, i1908 = 0, i1909 = 0, i1910 = 0, i1911 = 0, i1912 = 0, i1913 = 0, i1914 = 0, i1915 = 0, i1916 = 0, i1917 = 0, i1918 = 0, i1919 = 0, i1920 = 0, i1921 = 0, i1922 = 0, i1923 = 0, i1924 = 0, i1925 = 0, i1926 = 0, i1927 = 0, i1928 = 0, i1929 = 0, i1930 = 0, i1931 = 0, i1932 = 0, i1933 = 0, i1934 = 0, i1935 = 0, i1936 = 0, i1937 = 0, i1938 = 0, i1939 = 0, i1940 = 0, i1941 = 0, i1942 = 0, i1943 = 0, i1944 = 0, i1945 = 0, i1946 = 0, i1947 = 0, i1948 = 0, i1949 = 0, i1950 = 0, i1951 = 0, i1952 = 0, i1953 = 0, i1954 = 0, i1955 = 0, i1956 = 0, i1957 = 0, i1958 = 0, i1959 = 0, i1960 = 0, i1961 = 0, i1962 = 0, i1963 = 0, i1964 = 0, i1965 = 0, i1966 = 0, i1967 = 0, i1968 = 0, i1969 = 0, i1970 = 0, i1971 = 0, i1972 = 0, i1973 = 0, i1974 = 0, i1975 = 0, i1976 = 0, i1977 = 0, i1978 = 0, i1979 = 0, i1980 = 0;
  i2 = STACKTOP;
  STACKTOP = STACKTOP + 644 | 0;
  i3 = 2;
  i4 = {};
  i5 = {
    "4": (function(value) {
      i3 = 334;
      i6 = value;
    }),
    dummy: 0
  };
  while (1) try {
    switch (i3 | 0) {
     case 2:
      i7 = i2 | 0;
      i8 = i2 + 4 | 0;
      i9 = i2 + 176 | 0;
      i10 = i2 + 640 | 0;
      i11 = _puts(5243240) | 0;
      i12 = _fopen(i1 | 0, 5272684) | 0;
      i13 = (i12 | 0) == 0;
      if (i13) {
        i3 = 3;
        break;
      } else {
        i3 = 4;
        break;
      }
     case 3:
      i14 = _printf(5264360, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = i1, tempInt) | 0) | 0;
      i15 = 0;
      i3 = 333;
      break;
     case 4:
      HEAP32[1311522] = 0;
      HEAP32[1311523] = 0;
      HEAP32[1311524] = 0;
      i16 = i8 | 0;
      i17 = i8 + 4 | 0;
      HEAP32[i17 >> 2] = 54;
      i18 = i8 + 8 | 0;
      i19 = i8 + 12 | 0;
      HEAP32[i19 >> 2] = 102;
      i20 = i8 + 16 | 0;
      HEAP32[i20 >> 2] = 368;
      i21 = i8 + 104 | 0;
      HEAP32[i21 >> 2] = 0;
      i22 = i8 + 108 | 0;
      HEAP32[i22 >> 2] = 0;
      i23 = i8 + 20 | 0;
      HEAP32[i23 >> 2] = 0;
      i24 = i8 + 112 | 0;
      HEAP32[i24 >> 2] = 5248860;
      i25 = i8 + 116 | 0;
      HEAP32[i25 >> 2] = 123;
      i26 = i8 + 120 | 0;
      HEAP32[i26 >> 2] = 0;
      i27 = i8 + 124 | 0;
      HEAP32[i27 >> 2] = 0;
      i28 = i8 + 128 | 0;
      HEAP32[i28 >> 2] = 0;
      i29 = i8 | 0;
      i30 = i9 | 0;
      HEAP32[i30 >> 2] = i29;
      HEAP32[i16 >> 2] = 32;
      HEAP32[i18 >> 2] = 98;
      i31 = i8 + 132 | 0;
      i6 = (tempInt = setjmpId++, i4[tempInt] = 1, setjmpLabels[tempInt] = i3, HEAP32[i31 >> 2] = tempInt, 0);
      i3 = 334;
      break;
     case 334:
      i32 = (i6 | 0) == 0;
      if (i32) {
        i3 = 8;
        break;
      } else {
        i3 = 5;
        break;
      }
     case 5:
      i33 = _printf(5263532, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = i1, tempInt) | 0) | 0;
      i34 = i9 + 4 | 0;
      i35 = HEAP32[i34 >> 2] | 0;
      i36 = (i35 | 0) == 0;
      if (i36) {
        i3 = 7;
        break;
      } else {
        i3 = 6;
        break;
      }
     case 6:
      i37 = i9;
      i38 = i35 + 40 | 0;
      i39 = HEAP32[i38 >> 2] | 0;
      i40 = i39;
      FUNCTION_TABLE_vi[i40 & 511](i37);
      i3 = 7;
      break;
     case 7:
      HEAP32[i34 >> 2] = 0;
      i41 = i9 + 20 | 0;
      HEAP32[i41 >> 2] = 0;
      i42 = _fclose(i12 | 0) | 0;
      i15 = 0;
      i3 = 333;
      break;
     case 8:
      i43 = i9;
      i44 = i9 + 4 | 0;
      i45 = i9;
      i46 = HEAP32[i45 >> 2] | 0;
      i47 = i9 + 12 | 0;
      i48 = HEAP32[i47 >> 2] | 0;
      i49 = i9;
      HEAP32[i49 >> 2] = 0;
      HEAP32[i49 + 4 >> 2] = 0;
      HEAP32[i49 + 8 >> 2] = 0;
      HEAP32[i49 + 12 >> 2] = 0;
      HEAP32[i49 + 16 >> 2] = 0;
      HEAP32[i49 + 20 >> 2] = 0;
      HEAP32[i49 + 24 >> 2] = 0;
      HEAP32[i49 + 28 >> 2] = 0;
      HEAP32[i49 + 32 >> 2] = 0;
      HEAP32[i49 + 36 >> 2] = 0;
      HEAP32[i49 + 40 >> 2] = 0;
      HEAP32[i49 + 44 >> 2] = 0;
      HEAP32[i49 + 48 >> 2] = 0;
      HEAP32[i49 + 52 >> 2] = 0;
      HEAP32[i49 + 56 >> 2] = 0;
      HEAP32[i49 + 60 >> 2] = 0;
      HEAP32[i49 + 64 >> 2] = 0;
      HEAP32[i49 + 68 >> 2] = 0;
      HEAP32[i49 + 72 >> 2] = 0;
      HEAP32[i49 + 76 >> 2] = 0;
      HEAP32[i49 + 80 >> 2] = 0;
      HEAP32[i49 + 84 >> 2] = 0;
      HEAP32[i49 + 88 >> 2] = 0;
      HEAP32[i49 + 92 >> 2] = 0;
      HEAP32[i49 + 96 >> 2] = 0;
      HEAP32[i49 + 100 >> 2] = 0;
      HEAP32[i49 + 104 >> 2] = 0;
      HEAP32[i49 + 108 >> 2] = 0;
      HEAP32[i49 + 112 >> 2] = 0;
      HEAP32[i49 + 116 >> 2] = 0;
      HEAP32[i49 + 120 >> 2] = 0;
      HEAP32[i49 + 124 >> 2] = 0;
      HEAP32[i49 + 128 >> 2] = 0;
      HEAP32[i49 + 132 >> 2] = 0;
      HEAP32[i49 + 136 >> 2] = 0;
      HEAP32[i49 + 140 >> 2] = 0;
      HEAP32[i49 + 144 >> 2] = 0;
      HEAP32[i49 + 148 >> 2] = 0;
      HEAP32[i49 + 152 >> 2] = 0;
      HEAP32[i49 + 156 >> 2] = 0;
      HEAP32[i49 + 160 >> 2] = 0;
      HEAP32[i49 + 164 >> 2] = 0;
      HEAP32[i49 + 168 >> 2] = 0;
      HEAP32[i49 + 172 >> 2] = 0;
      HEAP32[i49 + 176 >> 2] = 0;
      HEAP32[i49 + 180 >> 2] = 0;
      HEAP32[i49 + 184 >> 2] = 0;
      HEAP32[i49 + 188 >> 2] = 0;
      HEAP32[i49 + 192 >> 2] = 0;
      HEAP32[i49 + 196 >> 2] = 0;
      HEAP32[i49 + 200 >> 2] = 0;
      HEAP32[i49 + 204 >> 2] = 0;
      HEAP32[i49 + 208 >> 2] = 0;
      HEAP32[i49 + 212 >> 2] = 0;
      HEAP32[i49 + 216 >> 2] = 0;
      HEAP32[i49 + 220 >> 2] = 0;
      HEAP32[i49 + 224 >> 2] = 0;
      HEAP32[i49 + 228 >> 2] = 0;
      HEAP32[i49 + 232 >> 2] = 0;
      HEAP32[i49 + 236 >> 2] = 0;
      HEAP32[i49 + 240 >> 2] = 0;
      HEAP32[i49 + 244 >> 2] = 0;
      HEAP32[i49 + 248 >> 2] = 0;
      HEAP32[i49 + 252 >> 2] = 0;
      HEAP32[i49 + 256 >> 2] = 0;
      HEAP32[i49 + 260 >> 2] = 0;
      HEAP32[i49 + 264 >> 2] = 0;
      HEAP32[i49 + 268 >> 2] = 0;
      HEAP32[i49 + 272 >> 2] = 0;
      HEAP32[i49 + 276 >> 2] = 0;
      HEAP32[i49 + 280 >> 2] = 0;
      HEAP32[i49 + 284 >> 2] = 0;
      HEAP32[i49 + 288 >> 2] = 0;
      HEAP32[i49 + 292 >> 2] = 0;
      HEAP32[i49 + 296 >> 2] = 0;
      HEAP32[i49 + 300 >> 2] = 0;
      HEAP32[i49 + 304 >> 2] = 0;
      HEAP32[i49 + 308 >> 2] = 0;
      HEAP32[i49 + 312 >> 2] = 0;
      HEAP32[i49 + 316 >> 2] = 0;
      HEAP32[i49 + 320 >> 2] = 0;
      HEAP32[i49 + 324 >> 2] = 0;
      HEAP32[i49 + 328 >> 2] = 0;
      HEAP32[i49 + 332 >> 2] = 0;
      HEAP32[i49 + 336 >> 2] = 0;
      HEAP32[i49 + 340 >> 2] = 0;
      HEAP32[i49 + 344 >> 2] = 0;
      HEAP32[i49 + 348 >> 2] = 0;
      HEAP32[i49 + 352 >> 2] = 0;
      HEAP32[i49 + 356 >> 2] = 0;
      HEAP32[i49 + 360 >> 2] = 0;
      HEAP32[i49 + 364 >> 2] = 0;
      HEAP32[i49 + 368 >> 2] = 0;
      HEAP32[i49 + 372 >> 2] = 0;
      HEAP32[i49 + 376 >> 2] = 0;
      HEAP32[i49 + 380 >> 2] = 0;
      HEAP32[i49 + 384 >> 2] = 0;
      HEAP32[i49 + 388 >> 2] = 0;
      HEAP32[i49 + 392 >> 2] = 0;
      HEAP32[i49 + 396 >> 2] = 0;
      HEAP32[i49 + 400 >> 2] = 0;
      HEAP32[i49 + 404 >> 2] = 0;
      HEAP32[i49 + 408 >> 2] = 0;
      HEAP32[i49 + 412 >> 2] = 0;
      HEAP32[i49 + 416 >> 2] = 0;
      HEAP32[i49 + 420 >> 2] = 0;
      HEAP32[i49 + 424 >> 2] = 0;
      HEAP32[i49 + 428 >> 2] = 0;
      HEAP32[i49 + 432 >> 2] = 0;
      HEAP32[i49 + 436 >> 2] = 0;
      HEAP32[i49 + 440 >> 2] = 0;
      HEAP32[i49 + 444 >> 2] = 0;
      HEAP32[i49 + 448 >> 2] = 0;
      HEAP32[i49 + 452 >> 2] = 0;
      HEAP32[i49 + 456 >> 2] = 0;
      HEAP32[i49 + 460 >> 2] = 0;
      i50 = i46;
      HEAP32[i30 >> 2] = i50;
      HEAP32[i47 >> 2] = i48;
      i51 = i9 + 16 | 0;
      HEAP32[i51 >> 2] = 1;
      HEAP32[i44 >> 2] = 0;
      i52 = _malloc(84) | 0;
      i53 = (i52 | 0) == 0;
      i54 = i9;
      if (i53) {
        i3 = 9;
        break;
      } else {
        i3 = 10;
        break;
      }
     case 9:
      i55 = HEAP32[i30 >> 2] | 0;
      i56 = i55 + 20 | 0;
      HEAP32[i56 >> 2] = 54;
      i57 = HEAP32[i30 >> 2] | 0;
      i58 = i57 + 24 | 0;
      HEAP32[i58 >> 2] = 0;
      i59 = HEAP32[i30 >> 2] | 0;
      i60 = i59;
      i61 = HEAP32[i60 >> 2] | 0;
      FUNCTION_TABLE_vi[i61 & 511](i54);
      i3 = 10;
      break;
     case 10:
      i62 = i52;
      HEAP32[i62 >> 2] = 106;
      i63 = i52 + 4 | 0;
      i64 = i63;
      HEAP32[i64 >> 2] = 312;
      i65 = i52 + 8 | 0;
      i66 = i65;
      HEAP32[i66 >> 2] = 330;
      i67 = i52 + 12 | 0;
      i68 = i67;
      HEAP32[i68 >> 2] = 56;
      i69 = i52 + 16 | 0;
      i70 = i69;
      HEAP32[i70 >> 2] = 350;
      i71 = i52 + 20 | 0;
      i72 = i71;
      HEAP32[i72 >> 2] = 344;
      i73 = i52 + 24 | 0;
      i74 = i73;
      HEAP32[i74 >> 2] = 334;
      i75 = i52 + 28 | 0;
      i76 = i75;
      HEAP32[i76 >> 2] = 260;
      i77 = i52 + 32 | 0;
      i78 = i77;
      HEAP32[i78 >> 2] = 166;
      i79 = i52 + 36 | 0;
      i80 = i79;
      HEAP32[i80 >> 2] = 46;
      i81 = i52 + 40 | 0;
      i82 = i81;
      HEAP32[i82 >> 2] = 22;
      i83 = i52 + 48 | 0;
      i84 = i83;
      HEAP32[i84 >> 2] = 1e9;
      i85 = i52 + 44 | 0;
      i86 = i85;
      HEAP32[i86 >> 2] = 0;
      i87 = i52 + 52 | 0;
      i88 = i52 + 76 | 0;
      i89 = i88;
      HEAP32[i87 >> 2] = 0;
      HEAP32[i87 + 4 >> 2] = 0;
      HEAP32[i87 + 8 >> 2] = 0;
      HEAP32[i87 + 12 >> 2] = 0;
      HEAP32[i87 + 16 >> 2] = 0;
      HEAP32[i87 + 20 >> 2] = 0;
      HEAP32[i89 >> 2] = 84;
      i90 = i52;
      HEAP32[i44 >> 2] = i90;
      i91 = i9 + 8 | 0;
      HEAP32[i91 >> 2] = 0;
      i92 = i9 + 24 | 0;
      HEAP32[i92 >> 2] = 0;
      i93 = i9 + 164 | 0;
      i94 = i9 + 304 | 0;
      HEAP32[i94 >> 2] = 0;
      i95 = i52;
      i96 = i93;
      HEAP32[i96 >> 2] = 0;
      HEAP32[i96 + 4 >> 2] = 0;
      HEAP32[i96 + 8 >> 2] = 0;
      HEAP32[i96 + 12 >> 2] = 0;
      HEAP32[i96 + 16 >> 2] = 0;
      HEAP32[i96 + 20 >> 2] = 0;
      HEAP32[i96 + 24 >> 2] = 0;
      HEAP32[i96 + 28 >> 2] = 0;
      HEAP32[i96 + 32 >> 2] = 0;
      HEAP32[i96 + 36 >> 2] = 0;
      HEAP32[i96 + 40 >> 2] = 0;
      HEAP32[i96 + 44 >> 2] = 0;
      i97 = HEAP32[i95 >> 2] | 0;
      i98 = i9;
      i99 = FUNCTION_TABLE_iiii[i97 & 511](i98, 0, 172) | 0;
      i100 = i9 + 440 | 0;
      i101 = i99;
      HEAP32[i100 >> 2] = i101;
      i102 = i99;
      HEAP32[i102 >> 2] = 338;
      i103 = i99 + 4 | 0;
      i104 = i103;
      HEAP32[i104 >> 2] = 124;
      i105 = i99 + 8 | 0;
      i106 = i105;
      HEAP32[i106 >> 2] = 272;
      i107 = i99 + 28 | 0;
      i108 = i107;
      HEAP32[i108 >> 2] = 318;
      i109 = i99 + 96 | 0;
      i110 = i109;
      HEAP32[i110 >> 2] = 0;
      i111 = i99 + 32 | 0;
      i112 = i99 + 100 | 0;
      i113 = i112;
      HEAP32[i113 >> 2] = 0;
      i114 = i99 + 36 | 0;
      i115 = i114;
      HEAP32[i115 >> 2] = 318;
      i116 = i99 + 104 | 0;
      i117 = i116;
      HEAP32[i117 >> 2] = 0;
      i118 = i99 + 40 | 0;
      i119 = i118;
      HEAP32[i119 >> 2] = 318;
      i120 = i99 + 108 | 0;
      i121 = i120;
      HEAP32[i121 >> 2] = 0;
      i122 = i99 + 44 | 0;
      i123 = i122;
      HEAP32[i123 >> 2] = 318;
      i124 = i99 + 112 | 0;
      i125 = i124;
      HEAP32[i125 >> 2] = 0;
      i126 = i99 + 48 | 0;
      i127 = i126;
      HEAP32[i127 >> 2] = 318;
      i128 = i99 + 116 | 0;
      i129 = i128;
      HEAP32[i129 >> 2] = 0;
      i130 = i99 + 52 | 0;
      i131 = i130;
      HEAP32[i131 >> 2] = 318;
      i132 = i99 + 120 | 0;
      i133 = i132;
      HEAP32[i133 >> 2] = 0;
      i134 = i99 + 56 | 0;
      i135 = i134;
      HEAP32[i135 >> 2] = 318;
      i136 = i99 + 124 | 0;
      i137 = i136;
      HEAP32[i137 >> 2] = 0;
      i138 = i99 + 60 | 0;
      i139 = i138;
      HEAP32[i139 >> 2] = 318;
      i140 = i99 + 128 | 0;
      i141 = i140;
      HEAP32[i141 >> 2] = 0;
      i142 = i99 + 64 | 0;
      i143 = i142;
      HEAP32[i143 >> 2] = 318;
      i144 = i99 + 132 | 0;
      i145 = i144;
      HEAP32[i145 >> 2] = 0;
      i146 = i99 + 68 | 0;
      i147 = i146;
      HEAP32[i147 >> 2] = 318;
      i148 = i99 + 136 | 0;
      i149 = i148;
      HEAP32[i149 >> 2] = 0;
      i150 = i99 + 72 | 0;
      i151 = i150;
      HEAP32[i151 >> 2] = 318;
      i152 = i99 + 140 | 0;
      i153 = i152;
      HEAP32[i153 >> 2] = 0;
      i154 = i99 + 76 | 0;
      i155 = i154;
      HEAP32[i155 >> 2] = 318;
      i156 = i99 + 144 | 0;
      i157 = i156;
      HEAP32[i157 >> 2] = 0;
      i158 = i99 + 80 | 0;
      i159 = i158;
      HEAP32[i159 >> 2] = 318;
      i160 = i99 + 148 | 0;
      i161 = i160;
      HEAP32[i161 >> 2] = 0;
      i162 = i99 + 84 | 0;
      i163 = i162;
      HEAP32[i163 >> 2] = 318;
      i164 = i99 + 152 | 0;
      i165 = i164;
      HEAP32[i165 >> 2] = 0;
      i166 = i99 + 156 | 0;
      i167 = i166;
      HEAP32[i167 >> 2] = 0;
      i168 = i99 + 92 | 0;
      i169 = i168;
      HEAP32[i169 >> 2] = 318;
      i170 = i99 + 160 | 0;
      i171 = i170;
      HEAP32[i171 >> 2] = 0;
      i172 = i111;
      HEAP32[i172 >> 2] = 332;
      i173 = i99 + 88 | 0;
      i174 = i173;
      HEAP32[i174 >> 2] = 332;
      i175 = HEAP32[i100 >> 2] | 0;
      i176 = i9 + 216 | 0;
      HEAP32[i176 >> 2] = 0;
      i177 = i9 + 144 | 0;
      HEAP32[i177 >> 2] = 0;
      i178 = i9 + 416 | 0;
      HEAP32[i178 >> 2] = 0;
      i179 = i175 + 12 | 0;
      HEAP32[i179 >> 2] = 0;
      i180 = i175 + 16 | 0;
      HEAP32[i180 >> 2] = 0;
      i181 = i175 + 24 | 0;
      HEAP32[i181 >> 2] = 0;
      i182 = i175 + 164 | 0;
      HEAP32[i182 >> 2] = 0;
      i183 = HEAP32[i44 >> 2] | 0;
      i184 = i183;
      i185 = HEAP32[i184 >> 2] | 0;
      i186 = i9;
      i187 = FUNCTION_TABLE_iiii[i185 & 511](i186, 0, 28) | 0;
      i188 = i9 + 436 | 0;
      i189 = i187;
      HEAP32[i188 >> 2] = i189;
      i190 = i187;
      HEAP32[i190 >> 2] = 248;
      i191 = i187 + 4 | 0;
      i192 = i191;
      HEAP32[i192 >> 2] = 214;
      i193 = i187 + 8 | 0;
      i194 = i193;
      HEAP32[i194 >> 2] = 242;
      i195 = i187 + 12 | 0;
      i196 = i195;
      HEAP32[i196 >> 2] = 262;
      i197 = i187 + 16 | 0;
      i198 = i197;
      HEAP32[i198 >> 2] = 0;
      i199 = i187 + 20 | 0;
      i200 = i199;
      HEAP32[i200 >> 2] = 0;
      i201 = i187 + 24 | 0;
      i202 = i201;
      HEAP32[i202 >> 2] = 1;
      i203 = i9 + 20 | 0;
      HEAP32[i203 >> 2] = 200;
      i204 = HEAP32[i44 >> 2] | 0;
      i205 = i204 | 0;
      i206 = HEAP32[i205 >> 2] | 0;
      i207 = FUNCTION_TABLE_iiii[i206 & 511](i54, 0, 4128) | 0;
      i208 = i207;
      HEAP32[i92 >> 2] = i208;
      i209 = i207 + 8 | 0;
      i210 = i209;
      HEAP32[i210 >> 2] = 374;
      i211 = i207 + 12 | 0;
      i212 = i211;
      HEAP32[i212 >> 2] = 328;
      i213 = i207 + 16 | 0;
      i214 = i213;
      HEAP32[i214 >> 2] = 152;
      i215 = i207 + 20 | 0;
      i216 = i215;
      HEAP32[i216 >> 2] = 252;
      i217 = i207 + 24 | 0;
      i218 = i217;
      HEAP32[i218 >> 2] = 140;
      i219 = i207 + 4 | 0;
      i220 = i219;
      HEAP32[i220 >> 2] = 0;
      i221 = i207;
      HEAP32[i221 >> 2] = 0;
      i222 = i207 + 4124 | 0;
      i223 = i222;
      HEAP32[i223 >> 2] = i12;
      i224 = HEAP32[i203 >> 2] | 0;
      i225 = i224 - 200 | 0;
      i226 = i225 >>> 0 < 2;
      if (i226) {
        i227 = i224;
        i3 = 12;
        break;
      } else {
        i3 = 11;
        break;
      }
     case 11:
      i228 = HEAP32[i45 >> 2] | 0;
      i229 = i228 + 20 | 0;
      HEAP32[i229 >> 2] = 20;
      i230 = HEAP32[i203 >> 2] | 0;
      i231 = HEAP32[i45 >> 2] | 0;
      i232 = i231 + 24 | 0;
      HEAP32[i232 >> 2] = i230;
      i233 = HEAP32[i45 >> 2] | 0;
      i234 = i233 | 0;
      i235 = HEAP32[i234 >> 2] | 0;
      i236 = i9;
      FUNCTION_TABLE_vi[i235 & 511](i236);
      i237 = HEAP32[i203 >> 2] | 0;
      i227 = i237;
      i3 = 12;
      break;
     case 12:
      if ((i227 | 0) == 200) {
        i3 = 13;
        break;
      } else if ((i227 | 0) == 201) {
        i3 = 14;
        break;
      } else if ((i227 | 0) == 203 | (i227 | 0) == 204 | (i227 | 0) == 205 | (i227 | 0) == 206 | (i227 | 0) == 207 | (i227 | 0) == 208 | (i227 | 0) == 210) {
        i3 = 39;
        break;
      } else if ((i227 | 0) == 202) {
        i3 = 46;
        break;
      } else {
        i3 = 40;
        break;
      }
     case 13:
      i238 = HEAP32[i188 >> 2] | 0;
      i239 = i238 + 4 | 0;
      i240 = HEAP32[i239 >> 2] | 0;
      i241 = i240;
      FUNCTION_TABLE_vi[i241 & 511](i43);
      i242 = HEAP32[i92 >> 2] | 0;
      i243 = i242 + 8 | 0;
      i244 = HEAP32[i243 >> 2] | 0;
      i245 = i244;
      FUNCTION_TABLE_vi[i245 & 511](i43);
      HEAP32[i203 >> 2] = 201;
      i3 = 14;
      break;
     case 14:
      i246 = HEAP32[i188 >> 2] | 0;
      i247 = i246;
      i248 = HEAP32[i247 >> 2] | 0;
      i249 = FUNCTION_TABLE_ii[i248 & 511](i43) | 0;
      i250 = (i249 | 0) == 1;
      if (i250) {
        i3 = 15;
        break;
      } else {
        i251 = i249;
        i3 = 41;
        break;
      }
     case 15:
      i252 = i9 + 36 | 0;
      i253 = HEAP32[i252 >> 2] | 0;
      if ((i253 | 0) == 1) {
        i3 = 16;
        break;
      } else if ((i253 | 0) == 3) {
        i3 = 17;
        break;
      } else if ((i253 | 0) == 4) {
        i3 = 30;
        break;
      } else {
        i3 = 37;
        break;
      }
     case 16:
      i254 = i9 + 40 | 0;
      HEAP32[i254 >> 2] = 1;
      i255 = i9 + 44 | 0;
      HEAP32[i255 >> 2] = 1;
      i3 = 38;
      break;
     case 17:
      i256 = i9 + 280 | 0;
      i257 = HEAP32[i256 >> 2] | 0;
      i258 = (i257 | 0) == 0;
      if (i258) {
        i3 = 19;
        break;
      } else {
        i3 = 18;
        break;
      }
     case 18:
      i259 = i9 + 40 | 0;
      HEAP32[i259 >> 2] = 3;
      i3 = 29;
      break;
     case 19:
      i260 = i9 + 292 | 0;
      i261 = HEAP32[i260 >> 2] | 0;
      i262 = (i261 | 0) == 0;
      if (i262) {
        i3 = 24;
        break;
      } else {
        i3 = 20;
        break;
      }
     case 20:
      i263 = i9 + 296 | 0;
      i264 = HEAP8[i263] | 0;
      i265 = i264 & 255;
      if ((i265 | 0) == 0) {
        i3 = 21;
        break;
      } else if ((i265 | 0) == 1) {
        i3 = 22;
        break;
      } else {
        i3 = 23;
        break;
      }
     case 21:
      i266 = i9 + 40 | 0;
      HEAP32[i266 >> 2] = 2;
      i3 = 29;
      break;
     case 22:
      i267 = i9 + 40 | 0;
      HEAP32[i267 >> 2] = 3;
      i3 = 29;
      break;
     case 23:
      i268 = HEAP32[i45 >> 2] | 0;
      i269 = i268 + 20 | 0;
      HEAP32[i269 >> 2] = 114;
      i270 = HEAP8[i263] | 0;
      i271 = i270 & 255;
      i272 = HEAP32[i45 >> 2] | 0;
      i273 = i272 + 24 | 0;
      HEAP32[i273 >> 2] = i271;
      i274 = HEAP32[i45 >> 2] | 0;
      i275 = i274 + 4 | 0;
      i276 = HEAP32[i275 >> 2] | 0;
      i277 = i9;
      FUNCTION_TABLE_vii[i276 & 511](i277, -1);
      i278 = i9 + 40 | 0;
      HEAP32[i278 >> 2] = 3;
      i3 = 29;
      break;
     case 24:
      i279 = HEAP32[i176 >> 2] | 0;
      i280 = i279 | 0;
      i281 = HEAP32[i280 >> 2] | 0;
      i282 = i279 + 84 | 0;
      i283 = HEAP32[i282 >> 2] | 0;
      i284 = i279 + 168 | 0;
      i285 = HEAP32[i284 >> 2] | 0;
      i286 = (i281 | 0) == 1;
      i287 = (i283 | 0) == 2;
      i288 = i286 & i287;
      i289 = (i285 | 0) == 3;
      i290 = i288 & i289;
      if (i290) {
        i3 = 25;
        break;
      } else {
        i3 = 26;
        break;
      }
     case 25:
      i291 = i9 + 40 | 0;
      HEAP32[i291 >> 2] = 3;
      i3 = 29;
      break;
     case 26:
      i292 = (i281 | 0) == 82;
      i293 = (i283 | 0) == 71;
      i294 = i292 & i293;
      i295 = (i285 | 0) == 66;
      i296 = i294 & i295;
      if (i296) {
        i3 = 27;
        break;
      } else {
        i3 = 28;
        break;
      }
     case 27:
      i297 = i9 + 40 | 0;
      HEAP32[i297 >> 2] = 2;
      i3 = 29;
      break;
     case 28:
      i298 = HEAP32[i45 >> 2] | 0;
      i299 = i298 + 24 | 0;
      HEAP32[i299 >> 2] = i281;
      i300 = i298 + 28 | 0;
      HEAP32[i300 >> 2] = i283;
      i301 = i298 + 32 | 0;
      HEAP32[i301 >> 2] = i285;
      i302 = HEAP32[i45 >> 2] | 0;
      i303 = i302 + 20 | 0;
      HEAP32[i303 >> 2] = 111;
      i304 = HEAP32[i45 >> 2] | 0;
      i305 = i304 + 4 | 0;
      i306 = HEAP32[i305 >> 2] | 0;
      i307 = i9;
      FUNCTION_TABLE_vii[i306 & 511](i307, 1);
      i308 = i9 + 40 | 0;
      HEAP32[i308 >> 2] = 3;
      i3 = 29;
      break;
     case 29:
      i309 = i9 + 44 | 0;
      HEAP32[i309 >> 2] = 2;
      i3 = 38;
      break;
     case 30:
      i310 = i9 + 292 | 0;
      i311 = HEAP32[i310 >> 2] | 0;
      i312 = (i311 | 0) == 0;
      if (i312) {
        i3 = 35;
        break;
      } else {
        i3 = 31;
        break;
      }
     case 31:
      i313 = i9 + 296 | 0;
      i314 = HEAP8[i313] | 0;
      i315 = i314 & 255;
      if ((i315 | 0) == 0) {
        i3 = 32;
        break;
      } else if ((i315 | 0) == 2) {
        i3 = 33;
        break;
      } else {
        i3 = 34;
        break;
      }
     case 32:
      i316 = i9 + 40 | 0;
      HEAP32[i316 >> 2] = 4;
      i3 = 36;
      break;
     case 33:
      i317 = i9 + 40 | 0;
      HEAP32[i317 >> 2] = 5;
      i3 = 36;
      break;
     case 34:
      i318 = HEAP32[i45 >> 2] | 0;
      i319 = i318 + 20 | 0;
      HEAP32[i319 >> 2] = 114;
      i320 = HEAP8[i313] | 0;
      i321 = i320 & 255;
      i322 = HEAP32[i45 >> 2] | 0;
      i323 = i322 + 24 | 0;
      HEAP32[i323 >> 2] = i321;
      i324 = HEAP32[i45 >> 2] | 0;
      i325 = i324 + 4 | 0;
      i326 = HEAP32[i325 >> 2] | 0;
      i327 = i9;
      FUNCTION_TABLE_vii[i326 & 511](i327, -1);
      i328 = i9 + 40 | 0;
      HEAP32[i328 >> 2] = 5;
      i3 = 36;
      break;
     case 35:
      i329 = i9 + 40 | 0;
      HEAP32[i329 >> 2] = 4;
      i3 = 36;
      break;
     case 36:
      i330 = i9 + 44 | 0;
      HEAP32[i330 >> 2] = 4;
      i3 = 38;
      break;
     case 37:
      i331 = i9 + 40 | 0;
      HEAP32[i331 >> 2] = 0;
      i332 = i9 + 44 | 0;
      HEAP32[i332 >> 2] = 0;
      i3 = 38;
      break;
     case 38:
      i333 = i9 + 48 | 0;
      HEAP32[i333 >> 2] = 1;
      i334 = i9 + 52 | 0;
      HEAP32[i334 >> 2] = 1;
      i335 = i9 + 56 | 0;
      HEAPF32[tempDoublePtr >> 2] = 1.0;
      HEAP32[i335 >> 2] = HEAP32[tempDoublePtr >> 2] | 0;
      HEAP32[i335 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2] | 0;
      i336 = i9 + 64 | 0;
      HEAP32[i336 >> 2] = 0;
      i337 = i9 + 68 | 0;
      HEAP32[i337 >> 2] = 0;
      i338 = i9 + 72 | 0;
      HEAP32[i338 >> 2] = 0;
      i339 = i9 + 76 | 0;
      HEAP32[i339 >> 2] = 1;
      i340 = i9 + 80 | 0;
      HEAP32[i340 >> 2] = 1;
      i341 = i9 + 84 | 0;
      HEAP32[i341 >> 2] = 0;
      i342 = i9 + 88 | 0;
      HEAP32[i342 >> 2] = 2;
      i343 = i9 + 92 | 0;
      HEAP32[i343 >> 2] = 1;
      i344 = i9 + 96 | 0;
      HEAP32[i344 >> 2] = 256;
      i345 = i9 + 136 | 0;
      HEAP32[i345 >> 2] = 0;
      i346 = i9 + 100 | 0;
      HEAP32[i346 >> 2] = 0;
      i347 = i9 + 104 | 0;
      HEAP32[i347 >> 2] = 0;
      i348 = i9 + 108 | 0;
      HEAP32[i348 >> 2] = 0;
      HEAP32[i203 >> 2] = 202;
      i349 = i9;
      i350 = i349;
      i3 = 48;
      break;
     case 39:
      i351 = HEAP32[i188 >> 2] | 0;
      i352 = i351;
      i353 = HEAP32[i352 >> 2] | 0;
      i354 = FUNCTION_TABLE_ii[i353 & 511](i43) | 0;
      i251 = i354;
      i3 = 41;
      break;
     case 40:
      i355 = HEAP32[i45 >> 2] | 0;
      i356 = i355 + 20 | 0;
      HEAP32[i356 >> 2] = 20;
      i357 = HEAP32[i203 >> 2] | 0;
      i358 = HEAP32[i45 >> 2] | 0;
      i359 = i358 + 24 | 0;
      HEAP32[i359 >> 2] = i357;
      i360 = HEAP32[i45 >> 2] | 0;
      i361 = i360 | 0;
      i362 = HEAP32[i361 >> 2] | 0;
      i363 = i9;
      FUNCTION_TABLE_vi[i362 & 511](i363);
      i3 = 46;
      break;
     case 41:
      i364 = (i251 | 0) == 2;
      if (i364) {
        i3 = 42;
        break;
      } else {
        i3 = 46;
        break;
      }
     case 42:
      i365 = HEAP32[i45 >> 2] | 0;
      i366 = i365 + 20 | 0;
      HEAP32[i366 >> 2] = 51;
      i367 = HEAP32[i45 >> 2] | 0;
      i368 = i367 | 0;
      i369 = HEAP32[i368 >> 2] | 0;
      i370 = i9;
      FUNCTION_TABLE_vi[i369 & 511](i370);
      i371 = HEAP32[i44 >> 2] | 0;
      i372 = (i371 | 0) == 0;
      if (i372) {
        i3 = 46;
        break;
      } else {
        i3 = 43;
        break;
      }
     case 43:
      i373 = i371 + 36 | 0;
      i374 = HEAP32[i373 >> 2] | 0;
      FUNCTION_TABLE_vii[i374 & 511](i54, 1);
      i375 = HEAP32[i51 >> 2] | 0;
      i376 = (i375 | 0) == 0;
      if (i376) {
        i3 = 45;
        break;
      } else {
        i3 = 44;
        break;
      }
     case 44:
      HEAP32[i203 >> 2] = 200;
      HEAP32[i94 >> 2] = 0;
      i3 = 46;
      break;
     case 45:
      HEAP32[i203 >> 2] = 100;
      i377 = i9;
      i378 = i377;
      i3 = 293;
      break;
     case 46:
      i379 = HEAP32[i203 >> 2] | 0;
      i380 = i9;
      if ((i379 | 0) == 204) {
        i3 = 47;
        break;
      } else if ((i379 | 0) == 202) {
        i350 = i380;
        i3 = 48;
        break;
      } else if ((i379 | 0) == 203) {
        i381 = i380;
        i3 = 282;
        break;
      } else {
        i378 = i380;
        i3 = 293;
        break;
      }
     case 47:
      i382 = i9 + 420 | 0;
      i383 = i380;
      i384 = i382;
      i3 = 296;
      break;
     case 48:
      i385 = i9;
      i386 = HEAP32[i44 >> 2] | 0;
      i387 = i386;
      i388 = HEAP32[i387 >> 2] | 0;
      i389 = i9;
      i390 = FUNCTION_TABLE_iiii[i388 & 511](i389, 1, 28) | 0;
      i391 = i9 + 420 | 0;
      i392 = i390;
      HEAP32[i391 >> 2] = i392;
      i393 = i390;
      HEAP32[i393 >> 2] = 160;
      i394 = i390 + 4 | 0;
      i395 = i394;
      HEAP32[i395 >> 2] = 134;
      i396 = i390 + 8 | 0;
      i397 = i396;
      HEAP32[i397 >> 2] = 0;
      i398 = HEAP32[i391 >> 2] | 0;
      i399 = HEAP32[i203 >> 2] | 0;
      i400 = (i399 | 0) == 202;
      if (i400) {
        i3 = 50;
        break;
      } else {
        i3 = 49;
        break;
      }
     case 49:
      i401 = i9;
      i402 = HEAP32[i401 >> 2] | 0;
      i403 = i402 + 20 | 0;
      HEAP32[i403 >> 2] = 20;
      i404 = HEAP32[i203 >> 2] | 0;
      i405 = HEAP32[i401 >> 2] | 0;
      i406 = i405 + 24 | 0;
      HEAP32[i406 >> 2] = i404;
      i407 = HEAP32[i401 >> 2] | 0;
      i408 = i407 | 0;
      i409 = HEAP32[i408 >> 2] | 0;
      FUNCTION_TABLE_vi[i409 & 511](i389);
      i3 = 50;
      break;
     case 50:
      i410 = i9 + 48 | 0;
      i411 = HEAP32[i410 >> 2] | 0;
      i412 = i411 << 3;
      i413 = i9 + 52 | 0;
      i414 = HEAP32[i413 >> 2] | 0;
      i415 = i412 >>> 0 > i414 >>> 0;
      if (i415) {
        i3 = 52;
        break;
      } else {
        i3 = 51;
        break;
      }
     case 51:
      i416 = i9 + 28 | 0;
      i417 = HEAP32[i416 >> 2] | 0;
      i418 = i417 + 7 | 0;
      i419 = (i418 | 0) / 8 & -1;
      i420 = i9 + 112 | 0;
      HEAP32[i420 >> 2] = i419;
      i421 = i9 + 32 | 0;
      i422 = HEAP32[i421 >> 2] | 0;
      i423 = i422 + 7 | 0;
      i424 = (i423 | 0) / 8 & -1;
      i425 = i9 + 116 | 0;
      HEAP32[i425 >> 2] = i424;
      i426 = i9 + 316 | 0;
      HEAP32[i426 >> 2] = 1;
      i427 = 1;
      i3 = 57;
      break;
     case 52:
      i428 = i411 << 2;
      i429 = i428 >>> 0 > i414 >>> 0;
      if (i429) {
        i3 = 54;
        break;
      } else {
        i3 = 53;
        break;
      }
     case 53:
      i430 = i9 + 28 | 0;
      i431 = HEAP32[i430 >> 2] | 0;
      i432 = i431 + 3 | 0;
      i433 = (i432 | 0) / 4 & -1;
      i434 = i9 + 112 | 0;
      HEAP32[i434 >> 2] = i433;
      i435 = i9 + 32 | 0;
      i436 = HEAP32[i435 >> 2] | 0;
      i437 = i436 + 3 | 0;
      i438 = (i437 | 0) / 4 & -1;
      i439 = i9 + 116 | 0;
      HEAP32[i439 >> 2] = i438;
      i440 = i9 + 316 | 0;
      HEAP32[i440 >> 2] = 2;
      i427 = 2;
      i3 = 57;
      break;
     case 54:
      i441 = i411 << 1;
      i442 = i441 >>> 0 > i414 >>> 0;
      i443 = i9 + 28 | 0;
      i444 = HEAP32[i443 >> 2] | 0;
      if (i442) {
        i3 = 56;
        break;
      } else {
        i3 = 55;
        break;
      }
     case 55:
      i445 = i444 + 1 | 0;
      i446 = (i445 | 0) / 2 & -1;
      i447 = i9 + 112 | 0;
      HEAP32[i447 >> 2] = i446;
      i448 = i9 + 32 | 0;
      i449 = HEAP32[i448 >> 2] | 0;
      i450 = i449 + 1 | 0;
      i451 = (i450 | 0) / 2 & -1;
      i452 = i9 + 116 | 0;
      HEAP32[i452 >> 2] = i451;
      i453 = i9 + 316 | 0;
      HEAP32[i453 >> 2] = 4;
      i427 = 4;
      i3 = 57;
      break;
     case 56:
      i454 = i9 + 112 | 0;
      HEAP32[i454 >> 2] = i444;
      i455 = i9 + 32 | 0;
      i456 = HEAP32[i455 >> 2] | 0;
      i457 = i9 + 116 | 0;
      HEAP32[i457 >> 2] = i456;
      i458 = i9 + 316 | 0;
      HEAP32[i458 >> 2] = 8;
      i427 = 8;
      i3 = 57;
      break;
     case 57:
      i459 = i9 + 36 | 0;
      i460 = HEAP32[i459 >> 2] | 0;
      i461 = (i460 | 0) > 0;
      if (i461) {
        i3 = 58;
        break;
      } else {
        i462 = i460;
        i3 = 69;
        break;
      }
     case 58:
      i463 = HEAP32[i176 >> 2] | 0;
      i464 = i9 + 316 | 0;
      i465 = i9 + 308 | 0;
      i466 = i9 + 312 | 0;
      i467 = 1;
      i468 = i463;
      i469 = i427;
      i3 = 59;
      break;
     case 59:
      i470 = i468 + 8 | 0;
      i471 = i468 + 12 | 0;
      i472 = HEAP32[i465 >> 2] | 0;
      i473 = Math_imul(i469, i472);
      i474 = HEAP32[i466 >> 2] | 0;
      i475 = Math_imul(i474, i469);
      i476 = i469;
      i3 = 60;
      break;
     case 60:
      i477 = (i476 | 0) < 8;
      if (i477) {
        i3 = 61;
        break;
      } else {
        i3 = 63;
        break;
      }
     case 61:
      i478 = HEAP32[i470 >> 2] | 0;
      i479 = i476 << 1;
      i480 = Math_imul(i479, i478);
      i481 = (i480 | 0) > (i473 | 0);
      if (i481) {
        i3 = 63;
        break;
      } else {
        i3 = 62;
        break;
      }
     case 62:
      i482 = HEAP32[i471 >> 2] | 0;
      i483 = Math_imul(i479, i482);
      i484 = (i483 | 0) > (i475 | 0);
      if (i484) {
        i3 = 63;
        break;
      } else {
        i476 = i479;
        i3 = 60;
        break;
      }
     case 63:
      i485 = i468 + 36 | 0;
      HEAP32[i485 >> 2] = i476;
      i486 = HEAP32[i459 >> 2] | 0;
      i487 = (i467 | 0) < (i486 | 0);
      if (i487) {
        i3 = 64;
        break;
      } else {
        i3 = 65;
        break;
      }
     case 64:
      i488 = i468 + 84 | 0;
      i489 = HEAP32[i464 >> 2] | 0;
      i490 = i467 + 1 | 0;
      i467 = i490;
      i468 = i488;
      i469 = i489;
      i3 = 59;
      break;
     case 65:
      i491 = (i486 | 0) > 0;
      if (i491) {
        i3 = 66;
        break;
      } else {
        i462 = i486;
        i3 = 69;
        break;
      }
     case 66:
      i492 = HEAP32[i176 >> 2] | 0;
      i493 = i9 + 28 | 0;
      i494 = i9 + 32 | 0;
      i495 = 1;
      i496 = i492;
      i3 = 67;
      break;
     case 67:
      i497 = HEAP32[i493 >> 2] | 0;
      i498 = i496 + 8 | 0;
      i499 = HEAP32[i498 >> 2] | 0;
      i500 = i496 + 36 | 0;
      i501 = HEAP32[i500 >> 2] | 0;
      i502 = Math_imul(i499, i497);
      i503 = Math_imul(i502, i501);
      i504 = HEAP32[i465 >> 2] | 0;
      i505 = i504 << 3;
      i506 = i503 - 1 | 0;
      i507 = i506 + i505 | 0;
      i508 = (i507 | 0) / (i505 | 0) & -1;
      i509 = i496 + 40 | 0;
      HEAP32[i509 >> 2] = i508;
      i510 = HEAP32[i494 >> 2] | 0;
      i511 = i496 + 12 | 0;
      i512 = HEAP32[i511 >> 2] | 0;
      i513 = Math_imul(i512, i510);
      i514 = Math_imul(i513, i501);
      i515 = HEAP32[i466 >> 2] | 0;
      i516 = i515 << 3;
      i517 = i514 - 1 | 0;
      i518 = i517 + i516 | 0;
      i519 = (i518 | 0) / (i516 | 0) & -1;
      i520 = i496 + 44 | 0;
      HEAP32[i520 >> 2] = i519;
      i521 = HEAP32[i459 >> 2] | 0;
      i522 = (i495 | 0) < (i521 | 0);
      if (i522) {
        i3 = 68;
        break;
      } else {
        i462 = i521;
        i3 = 69;
        break;
      }
     case 68:
      i523 = i496 + 84 | 0;
      i524 = i495 + 1 | 0;
      i495 = i524;
      i496 = i523;
      i3 = 67;
      break;
     case 69:
      i525 = i9 + 44 | 0;
      i526 = HEAP32[i525 >> 2] | 0;
      if ((i526 | 0) == 1) {
        i3 = 70;
        break;
      } else if ((i526 | 0) == 2 | (i526 | 0) == 3) {
        i3 = 71;
        break;
      } else if ((i526 | 0) == 4 | (i526 | 0) == 5) {
        i3 = 72;
        break;
      } else {
        i3 = 73;
        break;
      }
     case 70:
      i527 = i9 + 120 | 0;
      HEAP32[i527 >> 2] = 1;
      i528 = 1;
      i3 = 74;
      break;
     case 71:
      i529 = i9 + 120 | 0;
      HEAP32[i529 >> 2] = 3;
      i528 = 3;
      i3 = 74;
      break;
     case 72:
      i530 = i9 + 120 | 0;
      HEAP32[i530 >> 2] = 4;
      i528 = 4;
      i3 = 74;
      break;
     case 73:
      i531 = i9 + 120 | 0;
      HEAP32[i531 >> 2] = i462;
      i528 = i462;
      i3 = 74;
      break;
     case 74:
      i532 = i9 + 84 | 0;
      i533 = HEAP32[i532 >> 2] | 0;
      i534 = (i533 | 0) == 0;
      i535 = i534 ? i528 : 1;
      i536 = i9 + 124 | 0;
      HEAP32[i536 >> 2] = i535;
      i537 = i9 + 76 | 0;
      i538 = HEAP32[i537 >> 2] | 0;
      i539 = (i538 | 0) == 0;
      if (i539) {
        i3 = 75;
        break;
      } else {
        i3 = 87;
        break;
      }
     case 75:
      i540 = i9 + 300 | 0;
      i541 = HEAP32[i540 >> 2] | 0;
      i542 = (i541 | 0) == 0;
      if (i542) {
        i3 = 76;
        break;
      } else {
        i3 = 87;
        break;
      }
     case 76:
      i543 = i9 + 40 | 0;
      i544 = HEAP32[i543 >> 2] | 0;
      i545 = (i544 | 0) == 3;
      i546 = (i462 | 0) == 3;
      i547 = i545 & i546;
      i548 = (i526 | 0) == 2;
      i549 = i547 & i548;
      i550 = (i528 | 0) == 3;
      i551 = i549 & i550;
      if (i551) {
        i3 = 77;
        break;
      } else {
        i3 = 87;
        break;
      }
     case 77:
      i552 = HEAP32[i176 >> 2] | 0;
      i553 = i552 + 8 | 0;
      i554 = HEAP32[i553 >> 2] | 0;
      i555 = (i554 | 0) == 2;
      if (i555) {
        i3 = 78;
        break;
      } else {
        i3 = 87;
        break;
      }
     case 78:
      i556 = i552 + 92 | 0;
      i557 = HEAP32[i556 >> 2] | 0;
      i558 = (i557 | 0) == 1;
      if (i558) {
        i3 = 79;
        break;
      } else {
        i3 = 87;
        break;
      }
     case 79:
      i559 = i552 + 176 | 0;
      i560 = HEAP32[i559 >> 2] | 0;
      i561 = (i560 | 0) == 1;
      if (i561) {
        i3 = 80;
        break;
      } else {
        i3 = 87;
        break;
      }
     case 80:
      i562 = i552 + 12 | 0;
      i563 = HEAP32[i562 >> 2] | 0;
      i564 = (i563 | 0) > 2;
      if (i564) {
        i3 = 87;
        break;
      } else {
        i3 = 81;
        break;
      }
     case 81:
      i565 = i552 + 96 | 0;
      i566 = HEAP32[i565 >> 2] | 0;
      i567 = (i566 | 0) == 1;
      if (i567) {
        i3 = 82;
        break;
      } else {
        i3 = 87;
        break;
      }
     case 82:
      i568 = i552 + 180 | 0;
      i569 = HEAP32[i568 >> 2] | 0;
      i570 = (i569 | 0) == 1;
      if (i570) {
        i3 = 83;
        break;
      } else {
        i3 = 87;
        break;
      }
     case 83:
      i571 = i552 + 36 | 0;
      i572 = HEAP32[i571 >> 2] | 0;
      i573 = i9 + 316 | 0;
      i574 = HEAP32[i573 >> 2] | 0;
      i575 = (i572 | 0) == (i574 | 0);
      if (i575) {
        i3 = 84;
        break;
      } else {
        i3 = 87;
        break;
      }
     case 84:
      i576 = i552 + 120 | 0;
      i577 = HEAP32[i576 >> 2] | 0;
      i578 = (i577 | 0) == (i572 | 0);
      if (i578) {
        i3 = 85;
        break;
      } else {
        i3 = 87;
        break;
      }
     case 85:
      i579 = i552 + 204 | 0;
      i580 = HEAP32[i579 >> 2] | 0;
      i581 = (i580 | 0) == (i572 | 0);
      if (i581) {
        i3 = 86;
        break;
      } else {
        i3 = 87;
        break;
      }
     case 86:
      i582 = i9 + 312 | 0;
      i583 = HEAP32[i582 >> 2] | 0;
      i584 = i9 + 128 | 0;
      HEAP32[i584 >> 2] = i583;
      i3 = 88;
      break;
     case 87:
      i585 = i9 + 128 | 0;
      HEAP32[i585 >> 2] = 1;
      i3 = 88;
      break;
     case 88:
      i586 = HEAP32[i44 >> 2] | 0;
      i587 = i586;
      i588 = HEAP32[i587 >> 2] | 0;
      i589 = FUNCTION_TABLE_iiii[i588 & 511](i389, 1, 1408) | 0;
      i590 = i589 + 256 | 0;
      i591 = i9 + 324 | 0;
      HEAP32[i591 >> 2] = i590;
      _memset(i589 | 0, 0, 256);
      i592 = 0;
      i3 = 89;
      break;
     case 89:
      i593 = i592 & 255;
      i594 = i592 + 256 | 0;
      i595 = i589 + i594 | 0;
      HEAP8[i595] = i593;
      i596 = i592 + 1 | 0;
      i597 = (i596 | 0) == 256;
      if (i597) {
        i3 = 90;
        break;
      } else {
        i592 = i596;
        i3 = 89;
        break;
      }
     case 90:
      i598 = i589 + 512 | 0;
      _memset(i598 | 0, -1 | 0, 384);
      i599 = i589 + 896 | 0;
      _memset(i599 | 0, 0, 384);
      i600 = i589 + 1280 | 0;
      i601 = HEAP32[i591 >> 2] | 0;
      _memcpy(i600, i601, 128);
      i602 = i9 + 120 | 0;
      i603 = i398 + 12 | 0;
      i604 = i603;
      i605 = i603 | 0;
      HEAP32[i605 >> 2] = 0;
      i606 = HEAP32[i537 >> 2] | 0;
      i607 = (i606 | 0) == 0;
      if (i607) {
        i3 = 91;
        break;
      } else {
        i608 = 0;
        i3 = 105;
        break;
      }
     case 91:
      i609 = i9 + 300 | 0;
      i610 = HEAP32[i609 >> 2] | 0;
      i611 = (i610 | 0) == 0;
      if (i611) {
        i3 = 92;
        break;
      } else {
        i608 = 0;
        i3 = 105;
        break;
      }
     case 92:
      i612 = i9 + 40 | 0;
      i613 = HEAP32[i612 >> 2] | 0;
      i614 = (i613 | 0) == 3;
      if (i614) {
        i3 = 93;
        break;
      } else {
        i608 = 0;
        i3 = 105;
        break;
      }
     case 93:
      i615 = HEAP32[i459 >> 2] | 0;
      i616 = (i615 | 0) == 3;
      if (i616) {
        i3 = 94;
        break;
      } else {
        i608 = 0;
        i3 = 105;
        break;
      }
     case 94:
      i617 = HEAP32[i525 >> 2] | 0;
      i618 = (i617 | 0) == 2;
      if (i618) {
        i3 = 95;
        break;
      } else {
        i608 = 0;
        i3 = 105;
        break;
      }
     case 95:
      i619 = HEAP32[i602 >> 2] | 0;
      i620 = (i619 | 0) == 3;
      if (i620) {
        i3 = 96;
        break;
      } else {
        i608 = 0;
        i3 = 105;
        break;
      }
     case 96:
      i621 = HEAP32[i176 >> 2] | 0;
      i622 = i621 + 8 | 0;
      i623 = HEAP32[i622 >> 2] | 0;
      i624 = (i623 | 0) == 2;
      if (i624) {
        i3 = 97;
        break;
      } else {
        i608 = 0;
        i3 = 105;
        break;
      }
     case 97:
      i625 = i621 + 92 | 0;
      i626 = HEAP32[i625 >> 2] | 0;
      i627 = (i626 | 0) == 1;
      if (i627) {
        i3 = 98;
        break;
      } else {
        i608 = 0;
        i3 = 105;
        break;
      }
     case 98:
      i628 = i621 + 176 | 0;
      i629 = HEAP32[i628 >> 2] | 0;
      i630 = (i629 | 0) == 1;
      if (i630) {
        i3 = 99;
        break;
      } else {
        i608 = 0;
        i3 = 105;
        break;
      }
     case 99:
      i631 = i621 + 12 | 0;
      i632 = HEAP32[i631 >> 2] | 0;
      i633 = (i632 | 0) > 2;
      if (i633) {
        i608 = 0;
        i3 = 105;
        break;
      } else {
        i3 = 100;
        break;
      }
     case 100:
      i634 = i621 + 96 | 0;
      i635 = HEAP32[i634 >> 2] | 0;
      i636 = (i635 | 0) == 1;
      if (i636) {
        i3 = 101;
        break;
      } else {
        i608 = 0;
        i3 = 105;
        break;
      }
     case 101:
      i637 = i621 + 180 | 0;
      i638 = HEAP32[i637 >> 2] | 0;
      i639 = (i638 | 0) == 1;
      if (i639) {
        i3 = 102;
        break;
      } else {
        i608 = 0;
        i3 = 105;
        break;
      }
     case 102:
      i640 = i621 + 36 | 0;
      i641 = HEAP32[i640 >> 2] | 0;
      i642 = i9 + 316 | 0;
      i643 = HEAP32[i642 >> 2] | 0;
      i644 = (i641 | 0) == (i643 | 0);
      if (i644) {
        i3 = 103;
        break;
      } else {
        i608 = 0;
        i3 = 105;
        break;
      }
     case 103:
      i645 = i621 + 120 | 0;
      i646 = HEAP32[i645 >> 2] | 0;
      i647 = (i646 | 0) == (i641 | 0);
      if (i647) {
        i3 = 104;
        break;
      } else {
        i608 = 0;
        i3 = 105;
        break;
      }
     case 104:
      i648 = i621 + 204 | 0;
      i649 = HEAP32[i648 >> 2] | 0;
      i650 = (i649 | 0) == (i641 | 0);
      i651 = i650 & 1;
      i652 = i651;
      i608 = i652;
      i3 = 105;
      break;
     case 105:
      i653 = i398 + 16 | 0;
      i654 = i653;
      HEAP32[i653 >> 2] = i608;
      i655 = i398 + 20 | 0;
      HEAP32[i655 >> 2] = 0;
      i656 = i398 + 24 | 0;
      HEAP32[i656 >> 2] = 0;
      i657 = HEAP32[i532 >> 2] | 0;
      i658 = (i657 | 0) == 0;
      if (i658) {
        i3 = 108;
        break;
      } else {
        i3 = 106;
        break;
      }
     case 106:
      i659 = i9 + 64 | 0;
      i660 = HEAP32[i659 >> 2] | 0;
      i661 = (i660 | 0) == 0;
      if (i661) {
        i3 = 107;
        break;
      } else {
        i3 = 109;
        break;
      }
     case 107:
      i662 = i9 + 100 | 0;
      HEAP32[i662 >> 2] = 0;
      i663 = i9 + 104 | 0;
      HEAP32[i663 >> 2] = 0;
      i664 = i9 + 108 | 0;
      HEAP32[i664 >> 2] = 0;
      i3 = 109;
      break;
     case 108:
      i665 = i9 + 100 | 0;
      HEAP32[i665 >> 2] = 0;
      i666 = i9 + 104 | 0;
      HEAP32[i666 >> 2] = 0;
      i667 = i9 + 108 | 0;
      HEAP32[i667 >> 2] = 0;
      i668 = i9 + 68 | 0;
      i669 = i668;
      i3 = 173;
      break;
     case 109:
      i670 = i9 + 68 | 0;
      i671 = HEAP32[i670 >> 2] | 0;
      i672 = (i671 | 0) == 0;
      if (i672) {
        i3 = 111;
        break;
      } else {
        i3 = 110;
        break;
      }
     case 110:
      i673 = i9;
      i674 = HEAP32[i673 >> 2] | 0;
      i675 = i674 + 20 | 0;
      HEAP32[i675 >> 2] = 47;
      i676 = HEAP32[i673 >> 2] | 0;
      i677 = i676 | 0;
      i678 = HEAP32[i677 >> 2] | 0;
      FUNCTION_TABLE_vi[i678 & 511](i389);
      i3 = 111;
      break;
     case 111:
      i679 = HEAP32[i602 >> 2] | 0;
      i680 = (i679 | 0) == 3;
      if (i680) {
        i3 = 113;
        break;
      } else {
        i3 = 112;
        break;
      }
     case 112:
      i681 = i9 + 100 | 0;
      HEAP32[i681 >> 2] = 1;
      i682 = i9 + 104 | 0;
      HEAP32[i682 >> 2] = 0;
      i683 = i9 + 108 | 0;
      HEAP32[i683 >> 2] = 0;
      i684 = i9 + 136 | 0;
      HEAP32[i684 >> 2] = 0;
      i3 = 118;
      break;
     case 113:
      i685 = i9 + 136 | 0;
      i686 = HEAP32[i685 >> 2] | 0;
      i687 = (i686 | 0) == 0;
      if (i687) {
        i3 = 115;
        break;
      } else {
        i3 = 114;
        break;
      }
     case 114:
      i688 = i9 + 104 | 0;
      HEAP32[i688 >> 2] = 1;
      i3 = 118;
      break;
     case 115:
      i689 = i9 + 92 | 0;
      i690 = HEAP32[i689 >> 2] | 0;
      i691 = (i690 | 0) == 0;
      if (i691) {
        i3 = 117;
        break;
      } else {
        i3 = 116;
        break;
      }
     case 116:
      i692 = i9 + 108 | 0;
      HEAP32[i692 >> 2] = 1;
      i3 = 118;
      break;
     case 117:
      i693 = i9 + 100 | 0;
      HEAP32[i693 >> 2] = 1;
      i3 = 118;
      break;
     case 118:
      i694 = i9 + 100 | 0;
      i695 = HEAP32[i694 >> 2] | 0;
      i696 = (i695 | 0) == 0;
      if (i696) {
        i3 = 157;
        break;
      } else {
        i3 = 119;
        break;
      }
     case 119:
      i697 = HEAP32[i44 >> 2] | 0;
      i698 = i697;
      i699 = HEAP32[i698 >> 2] | 0;
      i700 = FUNCTION_TABLE_iiii[i699 & 511](i389, 1, 88) | 0;
      i701 = i9 + 460 | 0;
      i702 = i700;
      HEAP32[i701 >> 2] = i702;
      i703 = i700;
      HEAP32[i703 >> 2] = 376;
      i704 = i700 + 8 | 0;
      i705 = i704;
      HEAP32[i705 >> 2] = 216;
      i706 = i700 + 12 | 0;
      i707 = i706;
      HEAP32[i707 >> 2] = 394;
      i708 = i700 + 68 | 0;
      i709 = i708;
      HEAP32[i709 >> 2] = 0;
      i710 = i700 + 52 | 0;
      i711 = i710;
      HEAP32[i711 >> 2] = 0;
      i712 = HEAP32[i602 >> 2] | 0;
      i713 = (i712 | 0) > 4;
      if (i713) {
        i3 = 120;
        break;
      } else {
        i3 = 121;
        break;
      }
     case 120:
      i714 = i9;
      i715 = HEAP32[i714 >> 2] | 0;
      i716 = i715 + 20 | 0;
      HEAP32[i716 >> 2] = 55;
      i717 = HEAP32[i714 >> 2] | 0;
      i718 = i717 + 24 | 0;
      HEAP32[i718 >> 2] = 4;
      i719 = HEAP32[i714 >> 2] | 0;
      i720 = i719 | 0;
      i721 = HEAP32[i720 >> 2] | 0;
      FUNCTION_TABLE_vi[i721 & 511](i389);
      i3 = 121;
      break;
     case 121:
      i722 = i9 + 96 | 0;
      i723 = HEAP32[i722 >> 2] | 0;
      i724 = (i723 | 0) > 256;
      if (i724) {
        i3 = 122;
        break;
      } else {
        i725 = i723;
        i3 = 123;
        break;
      }
     case 122:
      i726 = i9;
      i727 = HEAP32[i726 >> 2] | 0;
      i728 = i727 + 20 | 0;
      HEAP32[i728 >> 2] = 57;
      i729 = HEAP32[i726 >> 2] | 0;
      i730 = i729 + 24 | 0;
      HEAP32[i730 >> 2] = 256;
      i731 = HEAP32[i726 >> 2] | 0;
      i732 = i731 | 0;
      i733 = HEAP32[i732 >> 2] | 0;
      FUNCTION_TABLE_vi[i733 & 511](i389);
      i734 = HEAP32[i722 >> 2] | 0;
      i725 = i734;
      i3 = 123;
      break;
     case 123:
      i735 = HEAP32[i701 >> 2] | 0;
      i736 = i735 + 32 | 0;
      i737 = HEAP32[i602 >> 2] | 0;
      i738 = (i737 | 0) > 1;
      i739 = 1;
      i3 = 124;
      break;
     case 124:
      i740 = i739 + 1 | 0;
      if (i738) {
        i741 = 1;
        i742 = i740;
        i3 = 125;
        break;
      } else {
        i743 = i740;
        i3 = 126;
        break;
      }
     case 125:
      i744 = Math_imul(i742, i740);
      i745 = i741 + 1 | 0;
      i746 = (i745 | 0) == (i737 | 0);
      if (i746) {
        i743 = i744;
        i3 = 126;
        break;
      } else {
        i741 = i745;
        i742 = i744;
        i3 = 125;
        break;
      }
     case 126:
      i747 = (i743 | 0) > (i725 | 0);
      if (i747) {
        i3 = 127;
        break;
      } else {
        i739 = i740;
        i3 = 124;
        break;
      }
     case 127:
      i748 = i736;
      i749 = i736;
      i750 = (i739 | 0) < 2;
      if (i750) {
        i3 = 128;
        break;
      } else {
        i3 = 129;
        break;
      }
     case 128:
      i751 = i9;
      i752 = HEAP32[i751 >> 2] | 0;
      i753 = i752 + 20 | 0;
      HEAP32[i753 >> 2] = 56;
      i754 = HEAP32[i751 >> 2] | 0;
      i755 = i754 + 24 | 0;
      HEAP32[i755 >> 2] = i743;
      i756 = HEAP32[i751 >> 2] | 0;
      i757 = i756 | 0;
      i758 = HEAP32[i757 >> 2] | 0;
      FUNCTION_TABLE_vi[i758 & 511](i389);
      i3 = 129;
      break;
     case 129:
      i759 = (i737 | 0) > 0;
      if (i759) {
        i760 = 0;
        i761 = 1;
        i3 = 130;
        break;
      } else {
        i762 = 0;
        i763 = 1;
        i764 = 0;
        i3 = 136;
        break;
      }
     case 130:
      i765 = i749 + (i760 << 2) | 0;
      HEAP32[i765 >> 2] = i739;
      i766 = Math_imul(i761, i739);
      i767 = i760 + 1 | 0;
      i768 = (i767 | 0) == (i737 | 0);
      if (i768) {
        i762 = 0;
        i763 = i766;
        i764 = 0;
        i3 = 136;
        break;
      } else {
        i760 = i767;
        i761 = i766;
        i3 = 130;
        break;
      }
     case 131:
      i769 = (i770 | 0) < (i737 | 0);
      if (i769) {
        i3 = 132;
        break;
      } else {
        i3 = 137;
        break;
      }
     case 132:
      if (i771) {
        i3 = 133;
        break;
      } else {
        i772 = i770;
        i3 = 134;
        break;
      }
     case 133:
      i773 = 5243456 + (i770 << 2) | 0;
      i774 = HEAP32[i773 >> 2] | 0;
      i772 = i774;
      i3 = 134;
      break;
     case 134:
      i775 = i749 + (i772 << 2) | 0;
      i776 = HEAP32[i775 >> 2] | 0;
      i777 = (i763 | 0) / (i776 | 0) & -1;
      i778 = i776 + 1 | 0;
      i779 = Math_imul(i777, i778);
      i780 = (i779 | 0) > (i725 | 0);
      if (i780) {
        i3 = 137;
        break;
      } else {
        i3 = 135;
        break;
      }
     case 135:
      HEAP32[i775 >> 2] = i778;
      i781 = i770 + 1 | 0;
      i762 = 1;
      i763 = i779;
      i764 = i781;
      i3 = 136;
      break;
     case 136:
      i782 = HEAP32[i525 >> 2] | 0;
      i771 = (i782 | 0) == 2;
      i783 = i762;
      i770 = i764;
      i3 = 131;
      break;
     case 137:
      i784 = (i783 | 0) == 0;
      if (i784) {
        i3 = 138;
        break;
      } else {
        i783 = 0;
        i770 = 0;
        i3 = 131;
        break;
      }
     case 138:
      i785 = HEAP32[i602 >> 2] | 0;
      i786 = (i785 | 0) == 3;
      i787 = i9;
      i788 = HEAP32[i787 >> 2] | 0;
      if (i786) {
        i3 = 139;
        break;
      } else {
        i3 = 140;
        break;
      }
     case 139:
      i789 = i788 + 24 | 0;
      HEAP32[i789 >> 2] = i763;
      i790 = HEAP32[i749 >> 2] | 0;
      i791 = i788 + 28 | 0;
      HEAP32[i791 >> 2] = i790;
      i792 = i735 + 36 | 0;
      i793 = i792;
      i794 = HEAP32[i793 >> 2] | 0;
      i795 = i788 + 32 | 0;
      HEAP32[i795 >> 2] = i794;
      i796 = i735 + 40 | 0;
      i797 = i796;
      i798 = HEAP32[i797 >> 2] | 0;
      i799 = i788 + 36 | 0;
      HEAP32[i799 >> 2] = i798;
      i800 = HEAP32[i787 >> 2] | 0;
      i801 = i800 + 20 | 0;
      HEAP32[i801 >> 2] = 94;
      i802 = HEAP32[i787 >> 2] | 0;
      i803 = i802 + 4 | 0;
      i804 = HEAP32[i803 >> 2] | 0;
      FUNCTION_TABLE_vii[i804 & 511](i389, 1);
      i3 = 141;
      break;
     case 140:
      i805 = i788 + 20 | 0;
      HEAP32[i805 >> 2] = 95;
      i806 = HEAP32[i787 >> 2] | 0;
      i807 = i806 + 24 | 0;
      HEAP32[i807 >> 2] = i763;
      i808 = HEAP32[i787 >> 2] | 0;
      i809 = i808 + 4 | 0;
      i810 = HEAP32[i809 >> 2] | 0;
      FUNCTION_TABLE_vii[i810 & 511](i389, 1);
      i3 = 141;
      break;
     case 141:
      i811 = HEAP32[i44 >> 2] | 0;
      i812 = i811 + 8 | 0;
      i813 = HEAP32[i812 >> 2] | 0;
      i814 = i813;
      i815 = HEAP32[i602 >> 2] | 0;
      i816 = FUNCTION_TABLE_iiiii[i814 & 511](i389, 1, i763, i815) | 0;
      i817 = HEAP32[i602 >> 2] | 0;
      i818 = (i817 | 0) > 0;
      if (i818) {
        i819 = i763;
        i820 = 0;
        i821 = i817;
        i3 = 142;
        break;
      } else {
        i3 = 152;
        break;
      }
     case 142:
      i822 = i748 + (i820 << 2) | 0;
      i823 = HEAP32[i822 >> 2] | 0;
      i824 = (i819 | 0) / (i823 | 0) & -1;
      i825 = (i823 | 0) > 0;
      if (i825) {
        i3 = 143;
        break;
      } else {
        i826 = i821;
        i3 = 151;
        break;
      }
     case 143:
      i827 = i823 - 1 | 0;
      i828 = (i827 | 0) / 2 & -1;
      i829 = (i824 | 0) > 0;
      i830 = i816 + (i820 << 2) | 0;
      i831 = 0;
      i3 = 144;
      break;
     case 144:
      i832 = Math_imul(i831, i824);
      i833 = (i832 | 0) < (i763 | 0);
      if (i833) {
        i3 = 145;
        break;
      } else {
        i3 = 149;
        break;
      }
     case 145:
      i834 = i831 * 255 & -1;
      i835 = i834 + i828 | 0;
      i836 = (i835 | 0) / (i827 | 0) & -1;
      i837 = i836 & 255;
      i838 = i832;
      i3 = 146;
      break;
     case 146:
      if (i829) {
        i839 = 0;
        i3 = 147;
        break;
      } else {
        i3 = 148;
        break;
      }
     case 147:
      i840 = i839 + i838 | 0;
      i841 = HEAP32[i830 >> 2] | 0;
      i842 = i841 + i840 | 0;
      HEAP8[i842] = i837;
      i843 = i839 + 1 | 0;
      i844 = (i843 | 0) == (i824 | 0);
      if (i844) {
        i3 = 148;
        break;
      } else {
        i839 = i843;
        i3 = 147;
        break;
      }
     case 148:
      i845 = i838 + i819 | 0;
      i846 = (i845 | 0) < (i763 | 0);
      if (i846) {
        i838 = i845;
        i3 = 146;
        break;
      } else {
        i3 = 149;
        break;
      }
     case 149:
      i847 = i831 + 1 | 0;
      i848 = (i847 | 0) == (i823 | 0);
      if (i848) {
        i3 = 150;
        break;
      } else {
        i831 = i847;
        i3 = 144;
        break;
      }
     case 150:
      i849 = HEAP32[i602 >> 2] | 0;
      i826 = i849;
      i3 = 151;
      break;
     case 151:
      i850 = i820 + 1 | 0;
      i851 = (i850 | 0) < (i826 | 0);
      if (i851) {
        i819 = i824;
        i820 = i850;
        i821 = i826;
        i3 = 142;
        break;
      } else {
        i3 = 152;
        break;
      }
     case 152:
      i852 = i735 + 16 | 0;
      i853 = i816;
      HEAP32[i852 >> 2] = i853;
      i854 = i735 + 20 | 0;
      i855 = i763;
      HEAP32[i854 >> 2] = i855;
      _create_colorindex(i385);
      i856 = i9 + 88 | 0;
      i857 = HEAP32[i856 >> 2] | 0;
      i858 = (i857 | 0) == 2;
      if (i858) {
        i3 = 153;
        break;
      } else {
        i3 = 156;
        break;
      }
     case 153:
      i859 = i9 + 112 | 0;
      i860 = HEAP32[i859 >> 2] | 0;
      i861 = i860 << 1;
      i862 = i861 + 4 | 0;
      i863 = HEAP32[i602 >> 2] | 0;
      i864 = (i863 | 0) > 0;
      if (i864) {
        i3 = 154;
        break;
      } else {
        i3 = 156;
        break;
      }
     case 154:
      i865 = HEAP32[i701 >> 2] | 0;
      i866 = i865 + 68 | 0;
      i867 = i866;
      i868 = 0;
      i3 = 155;
      break;
     case 155:
      i869 = HEAP32[i44 >> 2] | 0;
      i870 = i869 + 4 | 0;
      i871 = HEAP32[i870 >> 2] | 0;
      i872 = i871;
      i873 = FUNCTION_TABLE_iiii[i872 & 511](i389, 1, i862) | 0;
      i874 = i873;
      i875 = i867 + (i868 << 2) | 0;
      HEAP32[i875 >> 2] = i874;
      i876 = i868 + 1 | 0;
      i877 = HEAP32[i602 >> 2] | 0;
      i878 = (i876 | 0) < (i877 | 0);
      if (i878) {
        i868 = i876;
        i3 = 155;
        break;
      } else {
        i3 = 156;
        break;
      }
     case 156:
      i879 = HEAP32[i701 >> 2] | 0;
      i880 = i879;
      HEAP32[i655 >> 2] = i880;
      i3 = 157;
      break;
     case 157:
      i881 = i9 + 108 | 0;
      i882 = HEAP32[i881 >> 2] | 0;
      i883 = (i882 | 0) == 0;
      if (i883) {
        i3 = 158;
        break;
      } else {
        i3 = 159;
        break;
      }
     case 158:
      i884 = i9 + 104 | 0;
      i885 = HEAP32[i884 >> 2] | 0;
      i886 = (i885 | 0) == 0;
      if (i886) {
        i669 = i670;
        i3 = 173;
        break;
      } else {
        i3 = 159;
        break;
      }
     case 159:
      i887 = HEAP32[i44 >> 2] | 0;
      i888 = i887;
      i889 = HEAP32[i888 >> 2] | 0;
      i890 = FUNCTION_TABLE_iiii[i889 & 511](i389, 1, 44) | 0;
      i891 = i9 + 460 | 0;
      i892 = i890;
      HEAP32[i891 >> 2] = i892;
      i893 = i890;
      HEAP32[i893 >> 2] = 36;
      i894 = i890 + 12 | 0;
      i895 = i894;
      HEAP32[i895 >> 2] = 176;
      i896 = i890 + 32 | 0;
      i897 = i896;
      HEAP32[i897 >> 2] = 0;
      i898 = i890 + 40 | 0;
      i899 = i898;
      HEAP32[i899 >> 2] = 0;
      i900 = HEAP32[i602 >> 2] | 0;
      i901 = (i900 | 0) == 3;
      if (i901) {
        i3 = 161;
        break;
      } else {
        i3 = 160;
        break;
      }
     case 160:
      i902 = i9;
      i903 = HEAP32[i902 >> 2] | 0;
      i904 = i903 + 20 | 0;
      HEAP32[i904 >> 2] = 47;
      i905 = HEAP32[i902 >> 2] | 0;
      i906 = i905 | 0;
      i907 = HEAP32[i906 >> 2] | 0;
      FUNCTION_TABLE_vi[i907 & 511](i389);
      i3 = 161;
      break;
     case 161:
      i908 = HEAP32[i44 >> 2] | 0;
      i909 = i908;
      i910 = HEAP32[i909 >> 2] | 0;
      i911 = FUNCTION_TABLE_iiii[i910 & 511](i389, 1, 128) | 0;
      i912 = i911;
      i913 = i890 + 24 | 0;
      i914 = i913;
      HEAP32[i914 >> 2] = i912;
      i915 = 0;
      i3 = 162;
      break;
     case 162:
      i916 = HEAP32[i44 >> 2] | 0;
      i917 = i916 + 4 | 0;
      i918 = HEAP32[i917 >> 2] | 0;
      i919 = i918;
      i920 = FUNCTION_TABLE_iiii[i919 & 511](i389, 1, 4096) | 0;
      i921 = i920;
      i922 = HEAP32[i914 >> 2] | 0;
      i923 = i922 + (i915 << 2) | 0;
      HEAP32[i923 >> 2] = i921;
      i924 = i915 + 1 | 0;
      i925 = (i924 | 0) == 32;
      if (i925) {
        i3 = 163;
        break;
      } else {
        i915 = i924;
        i3 = 162;
        break;
      }
     case 163:
      i926 = i890 + 28 | 0;
      i927 = i926;
      HEAP32[i927 >> 2] = 1;
      i928 = HEAP32[i881 >> 2] | 0;
      i929 = (i928 | 0) == 0;
      if (i929) {
        i3 = 169;
        break;
      } else {
        i3 = 164;
        break;
      }
     case 164:
      i930 = i9 + 96 | 0;
      i931 = HEAP32[i930 >> 2] | 0;
      i932 = (i931 | 0) < 8;
      if (i932) {
        i3 = 165;
        break;
      } else {
        i3 = 166;
        break;
      }
     case 165:
      i933 = i9;
      i934 = HEAP32[i933 >> 2] | 0;
      i935 = i934 + 20 | 0;
      HEAP32[i935 >> 2] = 56;
      i936 = HEAP32[i933 >> 2] | 0;
      i937 = i936 + 24 | 0;
      HEAP32[i937 >> 2] = 8;
      i938 = HEAP32[i933 >> 2] | 0;
      i939 = i938 | 0;
      i940 = HEAP32[i939 >> 2] | 0;
      FUNCTION_TABLE_vi[i940 & 511](i389);
      i3 = 168;
      break;
     case 166:
      i941 = (i931 | 0) > 256;
      if (i941) {
        i3 = 167;
        break;
      } else {
        i3 = 168;
        break;
      }
     case 167:
      i942 = i9;
      i943 = HEAP32[i942 >> 2] | 0;
      i944 = i943 + 20 | 0;
      HEAP32[i944 >> 2] = 57;
      i945 = HEAP32[i942 >> 2] | 0;
      i946 = i945 + 24 | 0;
      HEAP32[i946 >> 2] = 256;
      i947 = HEAP32[i942 >> 2] | 0;
      i948 = i947 | 0;
      i949 = HEAP32[i948 >> 2] | 0;
      FUNCTION_TABLE_vi[i949 & 511](i389);
      i3 = 168;
      break;
     case 168:
      i950 = HEAP32[i44 >> 2] | 0;
      i951 = i950 + 8 | 0;
      i952 = HEAP32[i951 >> 2] | 0;
      i953 = i952;
      i954 = FUNCTION_TABLE_iiiii[i953 & 511](i389, 1, i931, 3) | 0;
      i955 = i890 + 16 | 0;
      i956 = i955;
      HEAP32[i956 >> 2] = i954;
      i957 = i890 + 20 | 0;
      i958 = i957;
      HEAP32[i958 >> 2] = i931;
      i3 = 170;
      break;
     case 169:
      i959 = i890 + 16 | 0;
      i960 = i959;
      HEAP32[i960 >> 2] = 0;
      i3 = 170;
      break;
     case 170:
      i961 = i9 + 88 | 0;
      i962 = HEAP32[i961 >> 2] | 0;
      i963 = (i962 | 0) == 0;
      if (i963) {
        i3 = 172;
        break;
      } else {
        i3 = 171;
        break;
      }
     case 171:
      HEAP32[i961 >> 2] = 2;
      i964 = HEAP32[i44 >> 2] | 0;
      i965 = i964 + 4 | 0;
      i966 = HEAP32[i965 >> 2] | 0;
      i967 = i966;
      i968 = i9 + 112 | 0;
      i969 = HEAP32[i968 >> 2] | 0;
      i970 = i969 * 6 & -1;
      i971 = i970 + 12 | 0;
      i972 = FUNCTION_TABLE_iiii[i967 & 511](i389, 1, i971) | 0;
      i973 = i972;
      HEAP32[i897 >> 2] = i973;
      _init_error_limit(i385);
      i3 = 172;
      break;
     case 172:
      i974 = HEAP32[i891 >> 2] | 0;
      i975 = i974;
      HEAP32[i656 >> 2] = i975;
      i669 = i670;
      i3 = 173;
      break;
     case 173:
      i976 = HEAP32[i669 >> 2] | 0;
      i977 = (i976 | 0) == 0;
      if (i977) {
        i3 = 174;
        break;
      } else {
        i3 = 240;
        break;
      }
     case 174:
      i978 = HEAP32[i654 >> 2] | 0;
      i979 = (i978 | 0) == 0;
      i980 = HEAP32[i44 >> 2] | 0;
      i981 = i980;
      i982 = HEAP32[i981 >> 2] | 0;
      if (i979) {
        i3 = 180;
        break;
      } else {
        i3 = 175;
        break;
      }
     case 175:
      i983 = FUNCTION_TABLE_iiii[i982 & 511](i389, 1, 48) | 0;
      i984 = i9 + 452 | 0;
      i985 = i983;
      HEAP32[i984 >> 2] = i985;
      i986 = i983;
      HEAP32[i986 >> 2] = 342;
      i987 = i983 + 8 | 0;
      i988 = i987;
      HEAP32[i988 >> 2] = 0;
      i989 = i9 + 112 | 0;
      i990 = HEAP32[i989 >> 2] | 0;
      i991 = HEAP32[i602 >> 2] | 0;
      i992 = Math_imul(i991, i990);
      i993 = i983 + 40 | 0;
      i994 = i993;
      HEAP32[i994 >> 2] = i992;
      i995 = i9 + 312 | 0;
      i996 = HEAP32[i995 >> 2] | 0;
      i997 = (i996 | 0) == 2;
      i998 = i983 + 4 | 0;
      i999 = i998;
      if (i997) {
        i3 = 176;
        break;
      } else {
        i3 = 177;
        break;
      }
     case 176:
      HEAP32[i999 >> 2] = 256;
      i1000 = i983 + 12 | 0;
      i1001 = i1000;
      HEAP32[i1001 >> 2] = 90;
      i1002 = HEAP32[i44 >> 2] | 0;
      i1003 = i1002 + 4 | 0;
      i1004 = HEAP32[i1003 >> 2] | 0;
      i1005 = i1004;
      i1006 = FUNCTION_TABLE_iiii[i1005 & 511](i389, 1, i992) | 0;
      i1007 = i983 + 32 | 0;
      i1008 = i1007;
      HEAP32[i1008 >> 2] = i1006;
      i3 = 178;
      break;
     case 177:
      HEAP32[i999 >> 2] = 240;
      i1009 = i983 + 12 | 0;
      i1010 = i1009;
      HEAP32[i1010 >> 2] = 382;
      i1011 = i983 + 32 | 0;
      i1012 = i1011;
      HEAP32[i1012 >> 2] = 0;
      i3 = 178;
      break;
     case 178:
      i1013 = HEAP32[i984 >> 2] | 0;
      i1014 = HEAP32[i44 >> 2] | 0;
      i1015 = i1014;
      i1016 = HEAP32[i1015 >> 2] | 0;
      i1017 = FUNCTION_TABLE_iiii[i1016 & 511](i389, 1, 1024) | 0;
      i1018 = i1013 + 16 | 0;
      i1019 = i1017;
      HEAP32[i1018 >> 2] = i1019;
      i1020 = HEAP32[i44 >> 2] | 0;
      i1021 = i1020;
      i1022 = HEAP32[i1021 >> 2] | 0;
      i1023 = FUNCTION_TABLE_iiii[i1022 & 511](i389, 1, 1024) | 0;
      i1024 = i1013 + 20 | 0;
      i1025 = i1024;
      i1026 = i1023;
      HEAP32[i1024 >> 2] = i1026;
      i1027 = HEAP32[i44 >> 2] | 0;
      i1028 = i1027;
      i1029 = HEAP32[i1028 >> 2] | 0;
      i1030 = FUNCTION_TABLE_iiii[i1029 & 511](i389, 1, 1024) | 0;
      i1031 = i1013 + 24 | 0;
      i1032 = i1031;
      i1033 = i1031 | 0;
      i1034 = i1030;
      HEAP32[i1033 >> 2] = i1034;
      i1035 = HEAP32[i44 >> 2] | 0;
      i1036 = i1035;
      i1037 = HEAP32[i1036 >> 2] | 0;
      i1038 = FUNCTION_TABLE_iiii[i1037 & 511](i389, 1, 1024) | 0;
      i1039 = i1013 + 28 | 0;
      i1040 = i1038;
      HEAP32[i1039 >> 2] = i1040;
      i1041 = 0;
      i1042 = -128;
      i3 = 179;
      break;
     case 179:
      i1043 = i1042 * 91881 & -1;
      i1044 = i1043 + 32768 | 0;
      i1045 = i1044 >> 16;
      i1046 = HEAP32[i1018 >> 2] | 0;
      i1047 = i1046;
      i1048 = i1047 + (i1041 << 2) | 0;
      HEAP32[i1048 >> 2] = i1045;
      i1049 = i1042 * 116130 & -1;
      i1050 = i1049 + 32768 | 0;
      i1051 = i1050 >> 16;
      i1052 = HEAP32[i1025 >> 2] | 0;
      i1053 = i1052 + (i1041 << 2) | 0;
      HEAP32[i1053 >> 2] = i1051;
      i1054 = i1042 * -46802 & -1;
      i1055 = HEAP32[i1032 >> 2] | 0;
      i1056 = i1055 + (i1041 << 2) | 0;
      HEAP32[i1056 >> 2] = i1054;
      i1057 = i1042 * -22554 & -1;
      i1058 = i1057 + 32768 | 0;
      i1059 = HEAP32[i1039 >> 2] | 0;
      i1060 = i1059;
      i1061 = i1060 + (i1041 << 2) | 0;
      HEAP32[i1061 >> 2] = i1058;
      i1062 = i1041 + 1 | 0;
      i1063 = i1042 + 1 | 0;
      i1064 = (i1062 | 0) == 256;
      if (i1064) {
        i3 = 236;
        break;
      } else {
        i1041 = i1062;
        i1042 = i1063;
        i3 = 179;
        break;
      }
     case 180:
      i1065 = FUNCTION_TABLE_iiii[i982 & 511](i389, 1, 24) | 0;
      i1066 = i9 + 456 | 0;
      i1067 = i1065;
      HEAP32[i1066 >> 2] = i1067;
      i1068 = i1065;
      HEAP32[i1068 >> 2] = 372;
      i1069 = i9 + 40 | 0;
      i1070 = HEAP32[i1069 >> 2] | 0;
      if ((i1070 | 0) == 1) {
        i3 = 181;
        break;
      } else if ((i1070 | 0) == 2 | (i1070 | 0) == 3) {
        i3 = 183;
        break;
      } else if ((i1070 | 0) == 4 | (i1070 | 0) == 5) {
        i3 = 185;
        break;
      } else {
        i3 = 187;
        break;
      }
     case 181:
      i1071 = HEAP32[i459 >> 2] | 0;
      i1072 = (i1071 | 0) == 1;
      if (i1072) {
        i3 = 189;
        break;
      } else {
        i3 = 182;
        break;
      }
     case 182:
      i1073 = i9;
      i1074 = HEAP32[i1073 >> 2] | 0;
      i1075 = i1074 + 20 | 0;
      HEAP32[i1075 >> 2] = 10;
      i1076 = HEAP32[i1073 >> 2] | 0;
      i1077 = i1076 | 0;
      i1078 = HEAP32[i1077 >> 2] | 0;
      FUNCTION_TABLE_vi[i1078 & 511](i389);
      i3 = 189;
      break;
     case 183:
      i1079 = HEAP32[i459 >> 2] | 0;
      i1080 = (i1079 | 0) == 3;
      if (i1080) {
        i3 = 189;
        break;
      } else {
        i3 = 184;
        break;
      }
     case 184:
      i1081 = i9;
      i1082 = HEAP32[i1081 >> 2] | 0;
      i1083 = i1082 + 20 | 0;
      HEAP32[i1083 >> 2] = 10;
      i1084 = HEAP32[i1081 >> 2] | 0;
      i1085 = i1084 | 0;
      i1086 = HEAP32[i1085 >> 2] | 0;
      FUNCTION_TABLE_vi[i1086 & 511](i389);
      i3 = 189;
      break;
     case 185:
      i1087 = HEAP32[i459 >> 2] | 0;
      i1088 = (i1087 | 0) == 4;
      if (i1088) {
        i3 = 189;
        break;
      } else {
        i3 = 186;
        break;
      }
     case 186:
      i1089 = i9;
      i1090 = HEAP32[i1089 >> 2] | 0;
      i1091 = i1090 + 20 | 0;
      HEAP32[i1091 >> 2] = 10;
      i1092 = HEAP32[i1089 >> 2] | 0;
      i1093 = i1092 | 0;
      i1094 = HEAP32[i1093 >> 2] | 0;
      FUNCTION_TABLE_vi[i1094 & 511](i389);
      i3 = 189;
      break;
     case 187:
      i1095 = HEAP32[i459 >> 2] | 0;
      i1096 = (i1095 | 0) < 1;
      if (i1096) {
        i3 = 188;
        break;
      } else {
        i3 = 189;
        break;
      }
     case 188:
      i1097 = i9;
      i1098 = HEAP32[i1097 >> 2] | 0;
      i1099 = i1098 + 20 | 0;
      HEAP32[i1099 >> 2] = 10;
      i1100 = HEAP32[i1097 >> 2] | 0;
      i1101 = i1100 | 0;
      i1102 = HEAP32[i1101 >> 2] | 0;
      FUNCTION_TABLE_vi[i1102 & 511](i389);
      i3 = 189;
      break;
     case 189:
      i1103 = HEAP32[i525 >> 2] | 0;
      if ((i1103 | 0) == 1) {
        i3 = 190;
        break;
      } else if ((i1103 | 0) == 2) {
        i3 = 194;
        break;
      } else if ((i1103 | 0) == 4) {
        i3 = 200;
        break;
      } else {
        i3 = 205;
        break;
      }
     case 190:
      HEAP32[i602 >> 2] = 1;
      i1104 = HEAP32[i1069 >> 2] | 0;
      if ((i1104 | 0) == 1 | (i1104 | 0) == 3) {
        i3 = 191;
        break;
      } else {
        i3 = 193;
        break;
      }
     case 191:
      i1105 = i1065 + 4 | 0;
      i1106 = i1105;
      HEAP32[i1106 >> 2] = 10;
      i1107 = HEAP32[i459 >> 2] | 0;
      i1108 = (i1107 | 0) > 1;
      if (i1108) {
        i1109 = 1;
        i3 = 192;
        break;
      } else {
        i3 = 208;
        break;
      }
     case 192:
      i1110 = HEAP32[i176 >> 2] | 0;
      i1111 = i1110 + (i1109 * 84 & -1) + 48 | 0;
      HEAP32[i1111 >> 2] = 0;
      i1112 = i1109 + 1 | 0;
      i1113 = HEAP32[i459 >> 2] | 0;
      i1114 = (i1112 | 0) < (i1113 | 0);
      if (i1114) {
        i1109 = i1112;
        i3 = 192;
        break;
      } else {
        i3 = 208;
        break;
      }
     case 193:
      i1115 = i9;
      i1116 = HEAP32[i1115 >> 2] | 0;
      i1117 = i1116 + 20 | 0;
      HEAP32[i1117 >> 2] = 27;
      i1118 = HEAP32[i1115 >> 2] | 0;
      i1119 = i1118 | 0;
      i1120 = HEAP32[i1119 >> 2] | 0;
      FUNCTION_TABLE_vi[i1120 & 511](i389);
      i3 = 208;
      break;
     case 194:
      HEAP32[i602 >> 2] = 3;
      i1121 = HEAP32[i1069 >> 2] | 0;
      if ((i1121 | 0) == 3) {
        i3 = 195;
        break;
      } else if ((i1121 | 0) == 1) {
        i3 = 197;
        break;
      } else if ((i1121 | 0) == 2) {
        i3 = 198;
        break;
      } else {
        i3 = 199;
        break;
      }
     case 195:
      i1122 = i1065 + 4 | 0;
      i1123 = i1122;
      HEAP32[i1123 >> 2] = 340;
      i1124 = HEAP32[i1066 >> 2] | 0;
      i1125 = HEAP32[i44 >> 2] | 0;
      i1126 = i1125;
      i1127 = HEAP32[i1126 >> 2] | 0;
      i1128 = FUNCTION_TABLE_iiii[i1127 & 511](i389, 1, 1024) | 0;
      i1129 = i1124 + 8 | 0;
      i1130 = i1129;
      i1131 = i1129 | 0;
      i1132 = i1128;
      HEAP32[i1131 >> 2] = i1132;
      i1133 = HEAP32[i44 >> 2] | 0;
      i1134 = i1133;
      i1135 = HEAP32[i1134 >> 2] | 0;
      i1136 = FUNCTION_TABLE_iiii[i1135 & 511](i389, 1, 1024) | 0;
      i1137 = i1124 + 12 | 0;
      i1138 = i1136;
      HEAP32[i1137 >> 2] = i1138;
      i1139 = HEAP32[i44 >> 2] | 0;
      i1140 = i1139;
      i1141 = HEAP32[i1140 >> 2] | 0;
      i1142 = FUNCTION_TABLE_iiii[i1141 & 511](i389, 1, 1024) | 0;
      i1143 = i1124 + 16 | 0;
      i1144 = i1143;
      i1145 = i1143 | 0;
      i1146 = i1142;
      HEAP32[i1145 >> 2] = i1146;
      i1147 = HEAP32[i44 >> 2] | 0;
      i1148 = i1147;
      i1149 = HEAP32[i1148 >> 2] | 0;
      i1150 = FUNCTION_TABLE_iiii[i1149 & 511](i389, 1, 1024) | 0;
      i1151 = i1124 + 20 | 0;
      i1152 = i1150;
      HEAP32[i1151 >> 2] = i1152;
      i1153 = 0;
      i1154 = -128;
      i3 = 196;
      break;
     case 196:
      i1155 = i1154 * 91881 & -1;
      i1156 = i1155 + 32768 | 0;
      i1157 = i1156 >> 16;
      i1158 = HEAP32[i1130 >> 2] | 0;
      i1159 = i1158 + (i1153 << 2) | 0;
      HEAP32[i1159 >> 2] = i1157;
      i1160 = i1154 * 116130 & -1;
      i1161 = i1160 + 32768 | 0;
      i1162 = i1161 >> 16;
      i1163 = HEAP32[i1137 >> 2] | 0;
      i1164 = i1163;
      i1165 = i1164 + (i1153 << 2) | 0;
      HEAP32[i1165 >> 2] = i1162;
      i1166 = i1154 * -46802 & -1;
      i1167 = HEAP32[i1144 >> 2] | 0;
      i1168 = i1167 + (i1153 << 2) | 0;
      HEAP32[i1168 >> 2] = i1166;
      i1169 = i1154 * -22554 & -1;
      i1170 = i1169 + 32768 | 0;
      i1171 = HEAP32[i1151 >> 2] | 0;
      i1172 = i1171;
      i1173 = i1172 + (i1153 << 2) | 0;
      HEAP32[i1173 >> 2] = i1170;
      i1174 = i1153 + 1 | 0;
      i1175 = i1154 + 1 | 0;
      i1176 = (i1174 | 0) == 256;
      if (i1176) {
        i3 = 208;
        break;
      } else {
        i1153 = i1174;
        i1154 = i1175;
        i3 = 196;
        break;
      }
     case 197:
      i1177 = i1065 + 4 | 0;
      i1178 = i1177;
      HEAP32[i1178 >> 2] = 14;
      i3 = 208;
      break;
     case 198:
      i1179 = i1065 + 4 | 0;
      i1180 = i1179;
      HEAP32[i1180 >> 2] = 206;
      i3 = 208;
      break;
     case 199:
      i1181 = i9;
      i1182 = HEAP32[i1181 >> 2] | 0;
      i1183 = i1182 + 20 | 0;
      HEAP32[i1183 >> 2] = 27;
      i1184 = HEAP32[i1181 >> 2] | 0;
      i1185 = i1184 | 0;
      i1186 = HEAP32[i1185 >> 2] | 0;
      FUNCTION_TABLE_vi[i1186 & 511](i389);
      i3 = 208;
      break;
     case 200:
      HEAP32[i602 >> 2] = 4;
      i1187 = HEAP32[i1069 >> 2] | 0;
      if ((i1187 | 0) == 5) {
        i3 = 201;
        break;
      } else if ((i1187 | 0) == 4) {
        i3 = 203;
        break;
      } else {
        i3 = 204;
        break;
      }
     case 201:
      i1188 = i1065 + 4 | 0;
      i1189 = i1188;
      HEAP32[i1189 >> 2] = 326;
      i1190 = HEAP32[i1066 >> 2] | 0;
      i1191 = HEAP32[i44 >> 2] | 0;
      i1192 = i1191;
      i1193 = HEAP32[i1192 >> 2] | 0;
      i1194 = FUNCTION_TABLE_iiii[i1193 & 511](i389, 1, 1024) | 0;
      i1195 = i1190 + 8 | 0;
      i1196 = i1195;
      i1197 = i1195 | 0;
      i1198 = i1194;
      HEAP32[i1197 >> 2] = i1198;
      i1199 = HEAP32[i44 >> 2] | 0;
      i1200 = i1199;
      i1201 = HEAP32[i1200 >> 2] | 0;
      i1202 = FUNCTION_TABLE_iiii[i1201 & 511](i389, 1, 1024) | 0;
      i1203 = i1190 + 12 | 0;
      i1204 = i1202;
      HEAP32[i1203 >> 2] = i1204;
      i1205 = HEAP32[i44 >> 2] | 0;
      i1206 = i1205;
      i1207 = HEAP32[i1206 >> 2] | 0;
      i1208 = FUNCTION_TABLE_iiii[i1207 & 511](i389, 1, 1024) | 0;
      i1209 = i1190 + 16 | 0;
      i1210 = i1209;
      i1211 = i1209 | 0;
      i1212 = i1208;
      HEAP32[i1211 >> 2] = i1212;
      i1213 = HEAP32[i44 >> 2] | 0;
      i1214 = i1213;
      i1215 = HEAP32[i1214 >> 2] | 0;
      i1216 = FUNCTION_TABLE_iiii[i1215 & 511](i389, 1, 1024) | 0;
      i1217 = i1190 + 20 | 0;
      i1218 = i1216;
      HEAP32[i1217 >> 2] = i1218;
      i1219 = 0;
      i1220 = -128;
      i3 = 202;
      break;
     case 202:
      i1221 = i1220 * 91881 & -1;
      i1222 = i1221 + 32768 | 0;
      i1223 = i1222 >> 16;
      i1224 = HEAP32[i1196 >> 2] | 0;
      i1225 = i1224 + (i1219 << 2) | 0;
      HEAP32[i1225 >> 2] = i1223;
      i1226 = i1220 * 116130 & -1;
      i1227 = i1226 + 32768 | 0;
      i1228 = i1227 >> 16;
      i1229 = HEAP32[i1203 >> 2] | 0;
      i1230 = i1229;
      i1231 = i1230 + (i1219 << 2) | 0;
      HEAP32[i1231 >> 2] = i1228;
      i1232 = i1220 * -46802 & -1;
      i1233 = HEAP32[i1210 >> 2] | 0;
      i1234 = i1233 + (i1219 << 2) | 0;
      HEAP32[i1234 >> 2] = i1232;
      i1235 = i1220 * -22554 & -1;
      i1236 = i1235 + 32768 | 0;
      i1237 = HEAP32[i1217 >> 2] | 0;
      i1238 = i1237;
      i1239 = i1238 + (i1219 << 2) | 0;
      HEAP32[i1239 >> 2] = i1236;
      i1240 = i1219 + 1 | 0;
      i1241 = i1220 + 1 | 0;
      i1242 = (i1240 | 0) == 256;
      if (i1242) {
        i3 = 208;
        break;
      } else {
        i1219 = i1240;
        i1220 = i1241;
        i3 = 202;
        break;
      }
     case 203:
      i1243 = i1065 + 4 | 0;
      i1244 = i1243;
      HEAP32[i1244 >> 2] = 206;
      i3 = 208;
      break;
     case 204:
      i1245 = i9;
      i1246 = HEAP32[i1245 >> 2] | 0;
      i1247 = i1246 + 20 | 0;
      HEAP32[i1247 >> 2] = 27;
      i1248 = HEAP32[i1245 >> 2] | 0;
      i1249 = i1248 | 0;
      i1250 = HEAP32[i1249 >> 2] | 0;
      FUNCTION_TABLE_vi[i1250 & 511](i389);
      i3 = 208;
      break;
     case 205:
      i1251 = HEAP32[i1069 >> 2] | 0;
      i1252 = (i1103 | 0) == (i1251 | 0);
      if (i1252) {
        i3 = 206;
        break;
      } else {
        i3 = 207;
        break;
      }
     case 206:
      i1253 = HEAP32[i459 >> 2] | 0;
      HEAP32[i602 >> 2] = i1253;
      i1254 = i1065 + 4 | 0;
      i1255 = i1254;
      HEAP32[i1255 >> 2] = 206;
      i3 = 208;
      break;
     case 207:
      i1256 = i9;
      i1257 = HEAP32[i1256 >> 2] | 0;
      i1258 = i1257 + 20 | 0;
      HEAP32[i1258 >> 2] = 27;
      i1259 = HEAP32[i1256 >> 2] | 0;
      i1260 = i1259 | 0;
      i1261 = HEAP32[i1260 >> 2] | 0;
      FUNCTION_TABLE_vi[i1261 & 511](i389);
      i3 = 208;
      break;
     case 208:
      i1262 = HEAP32[i532 >> 2] | 0;
      i1263 = (i1262 | 0) == 0;
      i1264 = HEAP32[i602 >> 2] | 0;
      i1265 = i1263 ? i1264 : 1;
      HEAP32[i536 >> 2] = i1265;
      i1266 = HEAP32[i44 >> 2] | 0;
      i1267 = i1266;
      i1268 = HEAP32[i1267 >> 2] | 0;
      i1269 = FUNCTION_TABLE_iiii[i1268 & 511](i389, 1, 160) | 0;
      i1270 = i9 + 452 | 0;
      i1271 = i1269;
      HEAP32[i1270 >> 2] = i1271;
      i1272 = i1269;
      HEAP32[i1272 >> 2] = 20;
      i1273 = i1269 + 4 | 0;
      i1274 = i1273;
      HEAP32[i1274 >> 2] = 308;
      i1275 = i1269 + 8 | 0;
      i1276 = i1275;
      HEAP32[i1276 >> 2] = 0;
      i1277 = i9 + 300 | 0;
      i1278 = HEAP32[i1277 >> 2] | 0;
      i1279 = (i1278 | 0) == 0;
      if (i1279) {
        i3 = 210;
        break;
      } else {
        i3 = 209;
        break;
      }
     case 209:
      i1280 = i9;
      i1281 = HEAP32[i1280 >> 2] | 0;
      i1282 = i1281 + 20 | 0;
      HEAP32[i1282 >> 2] = 25;
      i1283 = HEAP32[i1280 >> 2] | 0;
      i1284 = i1283 | 0;
      i1285 = HEAP32[i1284 >> 2] | 0;
      FUNCTION_TABLE_vi[i1285 & 511](i389);
      i3 = 210;
      break;
     case 210:
      i1286 = HEAP32[i537 >> 2] | 0;
      i1287 = (i1286 | 0) == 0;
      if (i1287) {
        i1288 = 0;
        i3 = 212;
        break;
      } else {
        i3 = 211;
        break;
      }
     case 211:
      i1289 = i9 + 316 | 0;
      i1290 = HEAP32[i1289 >> 2] | 0;
      i1291 = (i1290 | 0) > 1;
      i1288 = i1291;
      i3 = 212;
      break;
     case 212:
      i1292 = HEAP32[i459 >> 2] | 0;
      i1293 = (i1292 | 0) > 0;
      if (i1293) {
        i3 = 213;
        break;
      } else {
        i3 = 236;
        break;
      }
     case 213:
      i1294 = HEAP32[i176 >> 2] | 0;
      i1295 = i9 + 316 | 0;
      i1296 = i9 + 308 | 0;
      i1297 = i9 + 312 | 0;
      i1298 = i1269 + 100 | 0;
      i1299 = i1298;
      i1300 = i1269 + 52 | 0;
      i1301 = i1300;
      i1302 = i9 + 112 | 0;
      i1303 = i1269 + 12 | 0;
      i1304 = i1303;
      i1305 = i9;
      i1306 = i1294;
      i1307 = 0;
      i3 = 214;
      break;
     case 214:
      i1308 = i1306 + 8 | 0;
      i1309 = HEAP32[i1308 >> 2] | 0;
      i1310 = i1306 + 36 | 0;
      i1311 = HEAP32[i1310 >> 2] | 0;
      i1312 = Math_imul(i1311, i1309);
      i1313 = HEAP32[i1295 >> 2] | 0;
      i1314 = (i1312 | 0) / (i1313 | 0) & -1;
      i1315 = i1306 + 12 | 0;
      i1316 = HEAP32[i1315 >> 2] | 0;
      i1317 = Math_imul(i1316, i1311);
      i1318 = (i1317 | 0) / (i1313 | 0) & -1;
      i1319 = HEAP32[i1296 >> 2] | 0;
      i1320 = HEAP32[i1297 >> 2] | 0;
      i1321 = i1299 + (i1307 << 2) | 0;
      HEAP32[i1321 >> 2] = i1318;
      i1322 = i1306 + 48 | 0;
      i1323 = HEAP32[i1322 >> 2] | 0;
      i1324 = (i1323 | 0) == 0;
      if (i1324) {
        i3 = 215;
        break;
      } else {
        i3 = 216;
        break;
      }
     case 215:
      i1325 = i1301 + (i1307 << 2) | 0;
      HEAP32[i1325 >> 2] = 148;
      i3 = 234;
      break;
     case 216:
      i1326 = (i1314 | 0) == (i1319 | 0);
      i1327 = (i1318 | 0) == (i1320 | 0);
      i1328 = i1326 & i1327;
      if (i1328) {
        i3 = 217;
        break;
      } else {
        i3 = 218;
        break;
      }
     case 217:
      i1329 = i1301 + (i1307 << 2) | 0;
      HEAP32[i1329 >> 2] = 88;
      i3 = 234;
      break;
     case 218:
      i1330 = i1314 << 1;
      i1331 = (i1330 | 0) == (i1319 | 0);
      i1332 = i1331 & i1327;
      if (i1332) {
        i3 = 219;
        break;
      } else {
        i3 = 223;
        break;
      }
     case 219:
      if (i1288) {
        i3 = 220;
        break;
      } else {
        i3 = 222;
        break;
      }
     case 220:
      i1333 = i1306 + 40 | 0;
      i1334 = HEAP32[i1333 >> 2] | 0;
      i1335 = i1334 >>> 0 > 2;
      if (i1335) {
        i3 = 221;
        break;
      } else {
        i3 = 222;
        break;
      }
     case 221:
      i1336 = i1301 + (i1307 << 2) | 0;
      HEAP32[i1336 >> 2] = 232;
      i3 = 233;
      break;
     case 222:
      i1337 = i1301 + (i1307 << 2) | 0;
      HEAP32[i1337 >> 2] = 156;
      i3 = 233;
      break;
     case 223:
      if (i1331) {
        i3 = 224;
        break;
      } else {
        i3 = 229;
        break;
      }
     case 224:
      i1338 = i1318 << 1;
      i1339 = (i1338 | 0) == (i1320 | 0);
      if (i1339) {
        i3 = 225;
        break;
      } else {
        i3 = 229;
        break;
      }
     case 225:
      if (i1288) {
        i3 = 226;
        break;
      } else {
        i3 = 228;
        break;
      }
     case 226:
      i1340 = i1306 + 40 | 0;
      i1341 = HEAP32[i1340 >> 2] | 0;
      i1342 = i1341 >>> 0 > 2;
      if (i1342) {
        i3 = 227;
        break;
      } else {
        i3 = 228;
        break;
      }
     case 227:
      i1343 = i1301 + (i1307 << 2) | 0;
      HEAP32[i1343 >> 2] = 224;
      HEAP32[i1276 >> 2] = 1;
      i3 = 233;
      break;
     case 228:
      i1344 = i1301 + (i1307 << 2) | 0;
      HEAP32[i1344 >> 2] = 366;
      i3 = 233;
      break;
     case 229:
      i1345 = (i1319 | 0) % (i1314 | 0);
      i1346 = (i1345 | 0) == 0;
      if (i1346) {
        i3 = 230;
        break;
      } else {
        i3 = 232;
        break;
      }
     case 230:
      i1347 = (i1320 | 0) % (i1318 | 0);
      i1348 = (i1347 | 0) == 0;
      if (i1348) {
        i3 = 231;
        break;
      } else {
        i3 = 232;
        break;
      }
     case 231:
      i1349 = i1301 + (i1307 << 2) | 0;
      HEAP32[i1349 >> 2] = 246;
      i1350 = (i1319 | 0) / (i1314 | 0) & -1;
      i1351 = i1350 & 255;
      i1352 = i1307 + 140 | 0;
      i1353 = i1269 + i1352 | 0;
      HEAP8[i1353] = i1351;
      i1354 = (i1320 | 0) / (i1318 | 0) & -1;
      i1355 = i1354 & 255;
      i1356 = i1307 + 150 | 0;
      i1357 = i1269 + i1356 | 0;
      HEAP8[i1357] = i1355;
      i3 = 233;
      break;
     case 232:
      i1358 = HEAP32[i1305 >> 2] | 0;
      i1359 = i1358 + 20 | 0;
      HEAP32[i1359 >> 2] = 38;
      i1360 = HEAP32[i1305 >> 2] | 0;
      i1361 = i1360 | 0;
      i1362 = HEAP32[i1361 >> 2] | 0;
      FUNCTION_TABLE_vi[i1362 & 511](i389);
      i3 = 233;
      break;
     case 233:
      i1363 = HEAP32[i44 >> 2] | 0;
      i1364 = i1363 + 8 | 0;
      i1365 = HEAP32[i1364 >> 2] | 0;
      i1366 = i1365;
      i1367 = HEAP32[i1302 >> 2] | 0;
      i1368 = HEAP32[i1296 >> 2] | 0;
      i1369 = i1367 - 1 | 0;
      i1370 = i1369 + i1368 | 0;
      i1371 = (i1370 | 0) % (i1368 | 0);
      i1372 = i1370 - i1371 | 0;
      i1373 = HEAP32[i1297 >> 2] | 0;
      i1374 = FUNCTION_TABLE_iiiii[i1366 & 511](i389, 1, i1372, i1373) | 0;
      i1375 = i1304 + (i1307 << 2) | 0;
      HEAP32[i1375 >> 2] = i1374;
      i3 = 234;
      break;
     case 234:
      i1376 = i1307 + 1 | 0;
      i1377 = HEAP32[i459 >> 2] | 0;
      i1378 = (i1376 | 0) < (i1377 | 0);
      if (i1378) {
        i3 = 235;
        break;
      } else {
        i3 = 236;
        break;
      }
     case 235:
      i1379 = i1306 + 84 | 0;
      i1306 = i1379;
      i1307 = i1376;
      i3 = 214;
      break;
     case 236:
      i1380 = i9 + 108 | 0;
      i1381 = HEAP32[i1380 >> 2] | 0;
      i1382 = HEAP32[i44 >> 2] | 0;
      i1383 = i1382;
      i1384 = HEAP32[i1383 >> 2] | 0;
      i1385 = i9;
      i1386 = FUNCTION_TABLE_iiii[i1384 & 511](i1385, 1, 28) | 0;
      i1387 = i9 + 432 | 0;
      i1388 = i1386;
      HEAP32[i1387 >> 2] = i1388;
      i1389 = i1386;
      HEAP32[i1389 >> 2] = 212;
      i1390 = i1386 + 8 | 0;
      i1391 = i1390;
      HEAP32[i1391 >> 2] = 0;
      i1392 = i1386 + 12 | 0;
      i1393 = i1392;
      HEAP32[i1393 >> 2] = 0;
      i1394 = HEAP32[i532 >> 2] | 0;
      i1395 = (i1394 | 0) == 0;
      if (i1395) {
        i3 = 240;
        break;
      } else {
        i3 = 237;
        break;
      }
     case 237:
      i1396 = i9 + 312 | 0;
      i1397 = HEAP32[i1396 >> 2] | 0;
      i1398 = i1386 + 16 | 0;
      i1399 = i1398;
      HEAP32[i1399 >> 2] = i1397;
      i1400 = (i1381 | 0) == 0;
      i1401 = HEAP32[i44 >> 2] | 0;
      if (i1400) {
        i3 = 239;
        break;
      } else {
        i3 = 238;
        break;
      }
     case 238:
      i1402 = i1401 + 16 | 0;
      i1403 = HEAP32[i1402 >> 2] | 0;
      i1404 = i1403;
      i1405 = i9 + 112 | 0;
      i1406 = HEAP32[i1405 >> 2] | 0;
      i1407 = HEAP32[i602 >> 2] | 0;
      i1408 = Math_imul(i1407, i1406);
      i1409 = i9 + 116 | 0;
      i1410 = HEAP32[i1409 >> 2] | 0;
      i1411 = i1397 - 1 | 0;
      i1412 = i1411 + i1410 | 0;
      i1413 = (i1412 | 0) % (i1397 | 0);
      i1414 = i1412 - i1413 | 0;
      i1415 = FUNCTION_TABLE_iiiiiii[i1404 & 511](i1385, 1, 0, i1408, i1414, i1397) | 0;
      HEAP32[i1391 >> 2] = i1415;
      i3 = 240;
      break;
     case 239:
      i1416 = i1401 + 8 | 0;
      i1417 = HEAP32[i1416 >> 2] | 0;
      i1418 = i1417;
      i1419 = i9 + 112 | 0;
      i1420 = HEAP32[i1419 >> 2] | 0;
      i1421 = HEAP32[i602 >> 2] | 0;
      i1422 = Math_imul(i1421, i1420);
      i1423 = FUNCTION_TABLE_iiiii[i1418 & 511](i1385, 1, i1422, i1397) | 0;
      HEAP32[i1393 >> 2] = i1423;
      i3 = 240;
      break;
     case 240:
      i1424 = HEAP32[i44 >> 2] | 0;
      i1425 = i1424;
      i1426 = HEAP32[i1425 >> 2] | 0;
      i1427 = FUNCTION_TABLE_iiii[i1426 & 511](i389, 1, 84) | 0;
      i1428 = i9 + 448 | 0;
      i1429 = i1427;
      HEAP32[i1428 >> 2] = i1429;
      i1430 = i1427;
      HEAP32[i1430 >> 2] = 110;
      i1431 = HEAP32[i459 >> 2] | 0;
      i1432 = (i1431 | 0) > 0;
      if (i1432) {
        i3 = 241;
        break;
      } else {
        i3 = 243;
        break;
      }
     case 241:
      i1433 = HEAP32[i176 >> 2] | 0;
      i1434 = i1427 + 44 | 0;
      i1435 = i1434;
      i1436 = 0;
      i1437 = i1433;
      i3 = 242;
      break;
     case 242:
      i1438 = HEAP32[i44 >> 2] | 0;
      i1439 = i1438;
      i1440 = HEAP32[i1439 >> 2] | 0;
      i1441 = FUNCTION_TABLE_iiii[i1440 & 511](i389, 1, 256) | 0;
      i1442 = i1437 + 80 | 0;
      HEAP32[i1442 >> 2] = i1441;
      _memset(i1441 | 0, 0, 256);
      i1443 = i1435 + (i1436 << 2) | 0;
      HEAP32[i1443 >> 2] = -1;
      i1444 = i1436 + 1 | 0;
      i1445 = i1437 + 84 | 0;
      i1446 = HEAP32[i459 >> 2] | 0;
      i1447 = (i1444 | 0) < (i1446 | 0);
      if (i1447) {
        i1436 = i1444;
        i1437 = i1445;
        i3 = 242;
        break;
      } else {
        i3 = 243;
        break;
      }
     case 243:
      i1448 = i9 + 224 | 0;
      i1449 = HEAP32[i1448 >> 2] | 0;
      i1450 = (i1449 | 0) == 0;
      if (i1450) {
        i3 = 245;
        break;
      } else {
        i3 = 244;
        break;
      }
     case 244:
      i1451 = i9;
      i1452 = HEAP32[i1451 >> 2] | 0;
      i1453 = i1452 + 20 | 0;
      HEAP32[i1453 >> 2] = 1;
      i1454 = HEAP32[i1451 >> 2] | 0;
      i1455 = i1454 | 0;
      i1456 = HEAP32[i1455 >> 2] | 0;
      FUNCTION_TABLE_vi[i1456 & 511](i389);
      i3 = 249;
      break;
     case 245:
      i1457 = i9 + 220 | 0;
      i1458 = HEAP32[i1457 >> 2] | 0;
      i1459 = (i1458 | 0) == 0;
      i1460 = HEAP32[i44 >> 2] | 0;
      if (i1459) {
        i3 = 248;
        break;
      } else {
        i3 = 246;
        break;
      }
     case 246:
      i1461 = i1460;
      i1462 = HEAP32[i1461 >> 2] | 0;
      i1463 = i9;
      i1464 = FUNCTION_TABLE_iiii[i1462 & 511](i1463, 1, 64) | 0;
      i1465 = i9 + 444 | 0;
      i1466 = i1464;
      HEAP32[i1465 >> 2] = i1466;
      i1467 = i1464;
      HEAP32[i1467 >> 2] = 190;
      i1468 = i1464 + 44 | 0;
      HEAP32[i1468 >> 2] = 0;
      HEAP32[i1468 + 4 >> 2] = 0;
      HEAP32[i1468 + 8 >> 2] = 0;
      HEAP32[i1468 + 12 >> 2] = 0;
      i1469 = HEAP32[i44 >> 2] | 0;
      i1470 = i1469;
      i1471 = HEAP32[i1470 >> 2] | 0;
      i1472 = HEAP32[i459 >> 2] | 0;
      i1473 = i1472 << 8;
      i1474 = FUNCTION_TABLE_iiii[i1471 & 511](i1463, 1, i1473) | 0;
      i1475 = i1474;
      i1476 = i9 + 160 | 0;
      HEAP32[i1476 >> 2] = i1475;
      i1477 = HEAP32[i459 >> 2] | 0;
      i1478 = (i1477 | 0) > 0;
      if (i1478) {
        i1479 = 0;
        i3 = 247;
        break;
      } else {
        i3 = 249;
        break;
      }
     case 247:
      i1480 = i1479 << 8;
      i1481 = i1474 + i1480 | 0;
      HEAP32[i1481 >> 2] = -1;
      HEAP32[i1481 + 4 >> 2] = -1;
      HEAP32[i1481 + 8 >> 2] = -1;
      HEAP32[i1481 + 12 >> 2] = -1;
      HEAP32[i1481 + 16 >> 2] = -1;
      HEAP32[i1481 + 20 >> 2] = -1;
      HEAP32[i1481 + 24 >> 2] = -1;
      HEAP32[i1481 + 28 >> 2] = -1;
      HEAP32[i1481 + 32 >> 2] = -1;
      HEAP32[i1481 + 36 >> 2] = -1;
      HEAP32[i1481 + 40 >> 2] = -1;
      HEAP32[i1481 + 44 >> 2] = -1;
      HEAP32[i1481 + 48 >> 2] = -1;
      HEAP32[i1481 + 52 >> 2] = -1;
      HEAP32[i1481 + 56 >> 2] = -1;
      HEAP32[i1481 + 60 >> 2] = -1;
      HEAP32[i1481 + 64 >> 2] = -1;
      HEAP32[i1481 + 68 >> 2] = -1;
      HEAP32[i1481 + 72 >> 2] = -1;
      HEAP32[i1481 + 76 >> 2] = -1;
      HEAP32[i1481 + 80 >> 2] = -1;
      HEAP32[i1481 + 84 >> 2] = -1;
      HEAP32[i1481 + 88 >> 2] = -1;
      HEAP32[i1481 + 92 >> 2] = -1;
      HEAP32[i1481 + 96 >> 2] = -1;
      HEAP32[i1481 + 100 >> 2] = -1;
      HEAP32[i1481 + 104 >> 2] = -1;
      HEAP32[i1481 + 108 >> 2] = -1;
      HEAP32[i1481 + 112 >> 2] = -1;
      HEAP32[i1481 + 116 >> 2] = -1;
      HEAP32[i1481 + 120 >> 2] = -1;
      HEAP32[i1481 + 124 >> 2] = -1;
      HEAP32[i1481 + 128 >> 2] = -1;
      HEAP32[i1481 + 132 >> 2] = -1;
      HEAP32[i1481 + 136 >> 2] = -1;
      HEAP32[i1481 + 140 >> 2] = -1;
      HEAP32[i1481 + 144 >> 2] = -1;
      HEAP32[i1481 + 148 >> 2] = -1;
      HEAP32[i1481 + 152 >> 2] = -1;
      HEAP32[i1481 + 156 >> 2] = -1;
      HEAP32[i1481 + 160 >> 2] = -1;
      HEAP32[i1481 + 164 >> 2] = -1;
      HEAP32[i1481 + 168 >> 2] = -1;
      HEAP32[i1481 + 172 >> 2] = -1;
      HEAP32[i1481 + 176 >> 2] = -1;
      HEAP32[i1481 + 180 >> 2] = -1;
      HEAP32[i1481 + 184 >> 2] = -1;
      HEAP32[i1481 + 188 >> 2] = -1;
      HEAP32[i1481 + 192 >> 2] = -1;
      HEAP32[i1481 + 196 >> 2] = -1;
      HEAP32[i1481 + 200 >> 2] = -1;
      HEAP32[i1481 + 204 >> 2] = -1;
      HEAP32[i1481 + 208 >> 2] = -1;
      HEAP32[i1481 + 212 >> 2] = -1;
      HEAP32[i1481 + 216 >> 2] = -1;
      HEAP32[i1481 + 220 >> 2] = -1;
      HEAP32[i1481 + 224 >> 2] = -1;
      HEAP32[i1481 + 228 >> 2] = -1;
      HEAP32[i1481 + 232 >> 2] = -1;
      HEAP32[i1481 + 236 >> 2] = -1;
      HEAP32[i1481 + 240 >> 2] = -1;
      HEAP32[i1481 + 244 >> 2] = -1;
      HEAP32[i1481 + 248 >> 2] = -1;
      HEAP32[i1481 + 252 >> 2] = -1;
      i1482 = i1479 + 1 | 0;
      i1483 = HEAP32[i459 >> 2] | 0;
      i1484 = (i1482 | 0) < (i1483 | 0);
      if (i1484) {
        i1479 = i1482;
        i3 = 247;
        break;
      } else {
        i3 = 249;
        break;
      }
     case 248:
      i1485 = i1460;
      i1486 = HEAP32[i1485 >> 2] | 0;
      i1487 = i9;
      i1488 = FUNCTION_TABLE_iiii[i1486 & 511](i1487, 1, 232) | 0;
      i1489 = i9 + 444 | 0;
      i1490 = i1488;
      HEAP32[i1489 >> 2] = i1490;
      i1491 = i1488;
      HEAP32[i1491 >> 2] = 62;
      i1492 = i1488 + 4 | 0;
      i1493 = i1492;
      HEAP32[i1493 >> 2] = 100;
      i1494 = i1488 + 40 | 0;
      HEAP32[i1494 >> 2] = 0;
      HEAP32[i1494 + 4 >> 2] = 0;
      HEAP32[i1494 + 8 >> 2] = 0;
      HEAP32[i1494 + 12 >> 2] = 0;
      HEAP32[i1494 + 16 >> 2] = 0;
      HEAP32[i1494 + 20 >> 2] = 0;
      HEAP32[i1494 + 24 >> 2] = 0;
      HEAP32[i1494 + 28 >> 2] = 0;
      i3 = 249;
      break;
     case 249:
      i1495 = HEAP32[i188 >> 2] | 0;
      i1496 = i1495 + 16 | 0;
      i1497 = HEAP32[i1496 >> 2] | 0;
      i1498 = (i1497 | 0) == 0;
      if (i1498) {
        i3 = 250;
        break;
      } else {
        i1499 = 1;
        i3 = 251;
        break;
      }
     case 250:
      i1500 = i9 + 64 | 0;
      i1501 = HEAP32[i1500 >> 2] | 0;
      i1502 = (i1501 | 0) != 0;
      i1499 = i1502;
      i3 = 251;
      break;
     case 251:
      i1503 = HEAP32[i44 >> 2] | 0;
      i1504 = i1503;
      i1505 = HEAP32[i1504 >> 2] | 0;
      i1506 = i9;
      i1507 = FUNCTION_TABLE_iiii[i1505 & 511](i1506, 1, 116) | 0;
      i1508 = i9 + 428 | 0;
      i1509 = i1507;
      HEAP32[i1508 >> 2] = i1509;
      i1510 = i1507;
      HEAP32[i1510 >> 2] = 112;
      i1511 = i1507 + 8 | 0;
      i1512 = i1511;
      HEAP32[i1512 >> 2] = 142;
      i1513 = i1507 + 112 | 0;
      i1514 = i1513;
      HEAP32[i1514 >> 2] = 0;
      if (i1499) {
        i3 = 252;
        break;
      } else {
        i3 = 259;
        break;
      }
     case 252:
      i1515 = HEAP32[i459 >> 2] | 0;
      i1516 = (i1515 | 0) > 0;
      if (i1516) {
        i3 = 254;
        break;
      } else {
        i3 = 253;
        break;
      }
     case 253:
      i1517 = i1507 + 72 | 0;
      i1518 = i1517;
      i3 = 258;
      break;
     case 254:
      i1519 = HEAP32[i176 >> 2] | 0;
      i1520 = i9 + 220 | 0;
      i1521 = i1507 + 72 | 0;
      i1522 = i1521;
      i1523 = i1519;
      i1524 = 0;
      i3 = 255;
      break;
     case 255:
      i1525 = i1523 + 12 | 0;
      i1526 = HEAP32[i1525 >> 2] | 0;
      i1527 = HEAP32[i1520 >> 2] | 0;
      i1528 = (i1527 | 0) == 0;
      if (i1528) {
        i1529 = i1526;
        i3 = 257;
        break;
      } else {
        i3 = 256;
        break;
      }
     case 256:
      i1530 = i1526 * 3 & -1;
      i1529 = i1530;
      i3 = 257;
      break;
     case 257:
      i1531 = HEAP32[i44 >> 2] | 0;
      i1532 = i1531 + 20 | 0;
      i1533 = HEAP32[i1532 >> 2] | 0;
      i1534 = i1533;
      i1535 = i1523 + 28 | 0;
      i1536 = HEAP32[i1535 >> 2] | 0;
      i1537 = i1523 + 8 | 0;
      i1538 = HEAP32[i1537 >> 2] | 0;
      i1539 = i1536 - 1 | 0;
      i1540 = i1539 + i1538 | 0;
      i1541 = (i1540 | 0) % (i1538 | 0);
      i1542 = i1540 - i1541 | 0;
      i1543 = i1523 + 32 | 0;
      i1544 = HEAP32[i1543 >> 2] | 0;
      i1545 = i1544 - 1 | 0;
      i1546 = i1545 + i1526 | 0;
      i1547 = (i1546 | 0) % (i1526 | 0);
      i1548 = i1546 - i1547 | 0;
      i1549 = FUNCTION_TABLE_iiiiiii[i1534 & 511](i1506, 1, 1, i1542, i1548, i1529) | 0;
      i1550 = i1522 + (i1524 << 2) | 0;
      HEAP32[i1550 >> 2] = i1549;
      i1551 = i1524 + 1 | 0;
      i1552 = i1523 + 84 | 0;
      i1553 = HEAP32[i459 >> 2] | 0;
      i1554 = (i1551 | 0) < (i1553 | 0);
      if (i1554) {
        i1523 = i1552;
        i1524 = i1551;
        i3 = 255;
        break;
      } else {
        i1518 = i1521;
        i3 = 258;
        break;
      }
     case 258:
      i1555 = i1507 + 4 | 0;
      i1556 = i1555;
      HEAP32[i1556 >> 2] = 78;
      i1557 = i1507 + 12 | 0;
      i1558 = i1557;
      HEAP32[i1558 >> 2] = 278;
      i1559 = i1518;
      i1560 = i1507 + 16 | 0;
      i1561 = i1560;
      HEAP32[i1561 >> 2] = i1559;
      i3 = 260;
      break;
     case 259:
      i1562 = HEAP32[i44 >> 2] | 0;
      i1563 = i1562 + 4 | 0;
      i1564 = HEAP32[i1563 >> 2] | 0;
      i1565 = i1564;
      i1566 = FUNCTION_TABLE_iiii[i1565 & 511](i1506, 1, 1280) | 0;
      i1567 = i1566;
      i1568 = i1507 + 32 | 0;
      i1569 = i1568;
      HEAP32[i1569 >> 2] = i1567;
      i1570 = i1566 + 128 | 0;
      i1571 = i1570;
      i1572 = i1507 + 36 | 0;
      i1573 = i1572;
      HEAP32[i1573 >> 2] = i1571;
      i1574 = i1566 + 256 | 0;
      i1575 = i1574;
      i1576 = i1507 + 40 | 0;
      i1577 = i1576;
      HEAP32[i1577 >> 2] = i1575;
      i1578 = i1566 + 384 | 0;
      i1579 = i1578;
      i1580 = i1507 + 44 | 0;
      i1581 = i1580;
      HEAP32[i1581 >> 2] = i1579;
      i1582 = i1566 + 512 | 0;
      i1583 = i1582;
      i1584 = i1507 + 48 | 0;
      i1585 = i1584;
      HEAP32[i1585 >> 2] = i1583;
      i1586 = i1566 + 640 | 0;
      i1587 = i1586;
      i1588 = i1507 + 52 | 0;
      i1589 = i1588;
      HEAP32[i1589 >> 2] = i1587;
      i1590 = i1566 + 768 | 0;
      i1591 = i1590;
      i1592 = i1507 + 56 | 0;
      i1593 = i1592;
      HEAP32[i1593 >> 2] = i1591;
      i1594 = i1566 + 896 | 0;
      i1595 = i1594;
      i1596 = i1507 + 60 | 0;
      i1597 = i1596;
      HEAP32[i1597 >> 2] = i1595;
      i1598 = i1566 + 1024 | 0;
      i1599 = i1598;
      i1600 = i1507 + 64 | 0;
      i1601 = i1600;
      HEAP32[i1601 >> 2] = i1599;
      i1602 = i1566 + 1152 | 0;
      i1603 = i1602;
      i1604 = i1507 + 68 | 0;
      i1605 = i1604;
      HEAP32[i1605 >> 2] = i1603;
      i1606 = i1507 + 4 | 0;
      i1607 = i1606;
      HEAP32[i1607 >> 2] = 210;
      i1608 = i1507 + 12 | 0;
      i1609 = i1608;
      HEAP32[i1609 >> 2] = 392;
      i1610 = i1507 + 16 | 0;
      i1611 = i1610;
      HEAP32[i1611 >> 2] = 0;
      i3 = 260;
      break;
     case 260:
      i1612 = HEAP32[i669 >> 2] | 0;
      i1613 = (i1612 | 0) == 0;
      if (i1613) {
        i3 = 261;
        break;
      } else {
        i3 = 273;
        break;
      }
     case 261:
      i1614 = HEAP32[i44 >> 2] | 0;
      i1615 = i1614;
      i1616 = HEAP32[i1615 >> 2] | 0;
      i1617 = i9;
      i1618 = FUNCTION_TABLE_iiii[i1616 & 511](i1617, 1, 80) | 0;
      i1619 = i9 + 424 | 0;
      i1620 = i1618;
      HEAP32[i1619 >> 2] = i1620;
      i1621 = i1618;
      HEAP32[i1621 >> 2] = 4;
      i1622 = i9 + 452 | 0;
      i1623 = HEAP32[i1622 >> 2] | 0;
      i1624 = i1623 + 8 | 0;
      i1625 = HEAP32[i1624 >> 2] | 0;
      i1626 = (i1625 | 0) == 0;
      i1627 = i9 + 316 | 0;
      i1628 = HEAP32[i1627 >> 2] | 0;
      if (i1626) {
        i3 = 262;
        break;
      } else {
        i3 = 263;
        break;
      }
     case 262:
      i1629 = HEAP32[i459 >> 2] | 0;
      i1630 = i1628;
      i1631 = i1629;
      i1632 = i1628;
      i3 = 269;
      break;
     case 263:
      i1633 = (i1628 | 0) < 2;
      if (i1633) {
        i3 = 264;
        break;
      } else {
        i1634 = i1628;
        i3 = 265;
        break;
      }
     case 264:
      i1635 = i9;
      i1636 = HEAP32[i1635 >> 2] | 0;
      i1637 = i1636 + 20 | 0;
      HEAP32[i1637 >> 2] = 47;
      i1638 = HEAP32[i1635 >> 2] | 0;
      i1639 = i1638 | 0;
      i1640 = HEAP32[i1639 >> 2] | 0;
      FUNCTION_TABLE_vi[i1640 & 511](i1617);
      i1641 = HEAP32[i1627 >> 2] | 0;
      i1634 = i1641;
      i3 = 265;
      break;
     case 265:
      i1642 = HEAP32[i1619 >> 2] | 0;
      i1643 = HEAP32[i44 >> 2] | 0;
      i1644 = i1643;
      i1645 = HEAP32[i1644 >> 2] | 0;
      i1646 = HEAP32[i459 >> 2] | 0;
      i1647 = i1646 << 3;
      i1648 = FUNCTION_TABLE_iiii[i1645 & 511](i1617, 1, i1647) | 0;
      i1649 = i1648;
      i1650 = i1642 + 56 | 0;
      i1651 = i1650;
      i1652 = i1650 | 0;
      i1653 = i1648;
      HEAP32[i1652 >> 2] = i1653;
      i1654 = HEAP32[i459 >> 2] | 0;
      i1655 = i1649 + (i1654 << 2) | 0;
      i1656 = i1642 + 60 | 0;
      i1657 = i1655;
      HEAP32[i1656 >> 2] = i1657;
      i1658 = HEAP32[i459 >> 2] | 0;
      i1659 = (i1658 | 0) > 0;
      if (i1659) {
        i3 = 266;
        break;
      } else {
        i1660 = i1658;
        i3 = 268;
        break;
      }
     case 266:
      i1661 = HEAP32[i176 >> 2] | 0;
      i1662 = i1634 + 4 | 0;
      i1663 = i1661;
      i1664 = 0;
      i3 = 267;
      break;
     case 267:
      i1665 = i1663 + 12 | 0;
      i1666 = HEAP32[i1665 >> 2] | 0;
      i1667 = i1663 + 36 | 0;
      i1668 = HEAP32[i1667 >> 2] | 0;
      i1669 = Math_imul(i1668, i1666);
      i1670 = HEAP32[i1627 >> 2] | 0;
      i1671 = (i1669 | 0) / (i1670 | 0) & -1;
      i1672 = HEAP32[i44 >> 2] | 0;
      i1673 = i1672;
      i1674 = HEAP32[i1673 >> 2] | 0;
      i1675 = Math_imul(i1671, i1662);
      i1676 = i1675 << 3;
      i1677 = FUNCTION_TABLE_iiii[i1674 & 511](i1617, 1, i1676) | 0;
      i1678 = i1677;
      i1679 = i1678 + (i1671 << 2) | 0;
      i1680 = HEAP32[i1651 >> 2] | 0;
      i1681 = i1680 + (i1664 << 2) | 0;
      HEAP32[i1681 >> 2] = i1679;
      i1682 = i1675 + i1671 | 0;
      i1683 = i1678 + (i1682 << 2) | 0;
      i1684 = HEAP32[i1656 >> 2] | 0;
      i1685 = i1684;
      i1686 = i1685 + (i1664 << 2) | 0;
      HEAP32[i1686 >> 2] = i1683;
      i1687 = i1664 + 1 | 0;
      i1688 = i1663 + 84 | 0;
      i1689 = HEAP32[i459 >> 2] | 0;
      i1690 = (i1687 | 0) < (i1689 | 0);
      if (i1690) {
        i1663 = i1688;
        i1664 = i1687;
        i3 = 267;
        break;
      } else {
        i1660 = i1689;
        i3 = 268;
        break;
      }
     case 268:
      i1691 = HEAP32[i1627 >> 2] | 0;
      i1692 = i1691 + 2 | 0;
      i1630 = i1692;
      i1631 = i1660;
      i1632 = i1691;
      i3 = 269;
      break;
     case 269:
      i1693 = (i1631 | 0) > 0;
      if (i1693) {
        i3 = 270;
        break;
      } else {
        i3 = 273;
        break;
      }
     case 270:
      i1694 = HEAP32[i176 >> 2] | 0;
      i1695 = i1618 + 8 | 0;
      i1696 = i1695;
      i1697 = 0;
      i1698 = i1694;
      i1699 = i1632;
      i3 = 271;
      break;
     case 271:
      i1700 = i1698 + 12 | 0;
      i1701 = HEAP32[i1700 >> 2] | 0;
      i1702 = i1698 + 36 | 0;
      i1703 = HEAP32[i1702 >> 2] | 0;
      i1704 = Math_imul(i1703, i1701);
      i1705 = (i1704 | 0) / (i1699 | 0) & -1;
      i1706 = HEAP32[i44 >> 2] | 0;
      i1707 = i1706 + 8 | 0;
      i1708 = HEAP32[i1707 >> 2] | 0;
      i1709 = i1708;
      i1710 = i1698 + 28 | 0;
      i1711 = HEAP32[i1710 >> 2] | 0;
      i1712 = Math_imul(i1711, i1703);
      i1713 = Math_imul(i1705, i1630);
      i1714 = FUNCTION_TABLE_iiiii[i1709 & 511](i1617, 1, i1712, i1713) | 0;
      i1715 = i1696 + (i1697 << 2) | 0;
      HEAP32[i1715 >> 2] = i1714;
      i1716 = i1697 + 1 | 0;
      i1717 = HEAP32[i459 >> 2] | 0;
      i1718 = (i1716 | 0) < (i1717 | 0);
      if (i1718) {
        i3 = 272;
        break;
      } else {
        i3 = 273;
        break;
      }
     case 272:
      i1719 = i1698 + 84 | 0;
      i1720 = HEAP32[i1627 >> 2] | 0;
      i1697 = i1716;
      i1698 = i1719;
      i1699 = i1720;
      i3 = 271;
      break;
     case 273:
      i1721 = HEAP32[i44 >> 2] | 0;
      i1722 = i1721 + 24 | 0;
      i1723 = HEAP32[i1722 >> 2] | 0;
      i1724 = i1723;
      FUNCTION_TABLE_vi[i1724 & 511](i389);
      i1725 = HEAP32[i188 >> 2] | 0;
      i1726 = i1725 + 8 | 0;
      i1727 = HEAP32[i1726 >> 2] | 0;
      i1728 = i1727;
      FUNCTION_TABLE_vi[i1728 & 511](i385);
      i1729 = HEAP32[i91 >> 2] | 0;
      i1730 = (i1729 | 0) == 0;
      i1731 = i9 + 64 | 0;
      if (i1730) {
        i1732 = i1731;
        i3 = 279;
        break;
      } else {
        i3 = 274;
        break;
      }
     case 274:
      i1733 = HEAP32[i1731 >> 2] | 0;
      i1734 = (i1733 | 0) == 0;
      if (i1734) {
        i3 = 275;
        break;
      } else {
        i1732 = i1731;
        i3 = 279;
        break;
      }
     case 275:
      i1735 = HEAP32[i188 >> 2] | 0;
      i1736 = i1735 + 16 | 0;
      i1737 = HEAP32[i1736 >> 2] | 0;
      i1738 = (i1737 | 0) == 0;
      if (i1738) {
        i1732 = i1731;
        i3 = 279;
        break;
      } else {
        i3 = 276;
        break;
      }
     case 276:
      i1739 = i9 + 220 | 0;
      i1740 = HEAP32[i1739 >> 2] | 0;
      i1741 = (i1740 | 0) == 0;
      i1742 = HEAP32[i459 >> 2] | 0;
      if (i1741) {
        i1743 = i1742;
        i3 = 278;
        break;
      } else {
        i3 = 277;
        break;
      }
     case 277:
      i1744 = i1742 * 3 & -1;
      i1745 = i1744 + 2 | 0;
      i1743 = i1745;
      i3 = 278;
      break;
     case 278:
      i1746 = i1729 + 4 | 0;
      HEAP32[i1746 >> 2] = 0;
      i1747 = i9 + 320 | 0;
      i1748 = HEAP32[i1747 >> 2] | 0;
      i1749 = Math_imul(i1748, i1743);
      i1750 = HEAP32[i91 >> 2] | 0;
      i1751 = i1750 + 8 | 0;
      HEAP32[i1751 >> 2] = i1749;
      i1752 = HEAP32[i91 >> 2] | 0;
      i1753 = i1752 + 12 | 0;
      HEAP32[i1753 >> 2] = 0;
      i1754 = i9 + 108 | 0;
      i1755 = HEAP32[i1754 >> 2] | 0;
      i1756 = (i1755 | 0) != 0;
      i1757 = i1756 ? 3 : 2;
      i1758 = HEAP32[i91 >> 2] | 0;
      i1759 = i1758 + 16 | 0;
      HEAP32[i1759 >> 2] = i1757;
      i1760 = HEAP32[i604 >> 2] | 0;
      i1761 = i1760 + 1 | 0;
      i1762 = i1761;
      HEAP32[i605 >> 2] = i1762;
      i1732 = i1731;
      i3 = 279;
      break;
     case 279:
      i1763 = HEAP32[i1732 >> 2] | 0;
      i1764 = (i1763 | 0) == 0;
      if (i1764) {
        i3 = 281;
        break;
      } else {
        i3 = 280;
        break;
      }
     case 280:
      HEAP32[i203 >> 2] = 207;
      i1765 = i350;
      i3 = 304;
      break;
     case 281:
      HEAP32[i203 >> 2] = 203;
      i381 = i350;
      i3 = 282;
      break;
     case 282:
      i1766 = HEAP32[i188 >> 2] | 0;
      i1767 = i1766 + 16 | 0;
      i1768 = HEAP32[i1767 >> 2] | 0;
      i1769 = (i1768 | 0) == 0;
      if (i1769) {
        i3 = 292;
        break;
      } else {
        i3 = 283;
        break;
      }
     case 283:
      i1770 = i9 + 320 | 0;
      i1771 = i9;
      i3 = 284;
      break;
     case 284:
      i1772 = HEAP32[i91 >> 2] | 0;
      i1773 = i1772;
      i3 = 285;
      break;
     case 285:
      i1774 = (i1773 | 0) == 0;
      if (i1774) {
        i3 = 287;
        break;
      } else {
        i3 = 286;
        break;
      }
     case 286:
      i1775 = i1773;
      i1776 = HEAP32[i1775 >> 2] | 0;
      FUNCTION_TABLE_vi[i1776 & 511](i1771);
      i3 = 287;
      break;
     case 287:
      i1777 = HEAP32[i188 >> 2] | 0;
      i1778 = i1777;
      i1779 = HEAP32[i1778 >> 2] | 0;
      i1780 = FUNCTION_TABLE_ii[i1779 & 511](i381) | 0;
      if ((i1780 | 0) == 2) {
        i3 = 292;
        break;
      } else if ((i1780 | 0) == 0) {
        i1765 = i381;
        i3 = 304;
        break;
      } else {
        i3 = 288;
        break;
      }
     case 288:
      i1781 = HEAP32[i91 >> 2] | 0;
      i1782 = (i1781 | 0) == 0;
      if (i1782) {
        i1773 = 0;
        i3 = 285;
        break;
      } else {
        i3 = 289;
        break;
      }
     case 289:
      if ((i1780 | 0) == 3 | (i1780 | 0) == 1) {
        i3 = 290;
        break;
      } else {
        i3 = 284;
        break;
      }
     case 290:
      i1783 = i1781 + 4 | 0;
      i1784 = HEAP32[i1783 >> 2] | 0;
      i1785 = i1784 + 1 | 0;
      HEAP32[i1783 >> 2] = i1785;
      i1786 = HEAP32[i91 >> 2] | 0;
      i1787 = i1786 + 8 | 0;
      i1788 = HEAP32[i1787 >> 2] | 0;
      i1789 = (i1785 | 0) < (i1788 | 0);
      if (i1789) {
        i1773 = i1786;
        i3 = 285;
        break;
      } else {
        i3 = 291;
        break;
      }
     case 291:
      i1790 = HEAP32[i1770 >> 2] | 0;
      i1791 = i1790 + i1788 | 0;
      HEAP32[i1787 >> 2] = i1791;
      i3 = 284;
      break;
     case 292:
      i1792 = HEAP32[i177 >> 2] | 0;
      i1793 = i9 + 152 | 0;
      HEAP32[i1793 >> 2] = i1792;
      i1794 = i381;
      i3 = 294;
      break;
     case 293:
      i1795 = i9;
      i1796 = HEAP32[i1795 >> 2] | 0;
      i1797 = i1796 + 20 | 0;
      HEAP32[i1797 >> 2] = 20;
      i1798 = HEAP32[i203 >> 2] | 0;
      i1799 = HEAP32[i1795 >> 2] | 0;
      i1800 = i1799 + 24 | 0;
      HEAP32[i1800 >> 2] = i1798;
      i1801 = HEAP32[i1795 >> 2] | 0;
      i1802 = i1801 | 0;
      i1803 = HEAP32[i1802 >> 2] | 0;
      i1804 = i9;
      FUNCTION_TABLE_vi[i1803 & 511](i1804);
      i1794 = i378;
      i3 = 294;
      break;
     case 294:
      i1805 = HEAP32[i203 >> 2] | 0;
      i1806 = (i1805 | 0) == 204;
      i1807 = i9 + 420 | 0;
      if (i1806) {
        i383 = i1794;
        i384 = i1807;
        i3 = 296;
        break;
      } else {
        i3 = 295;
        break;
      }
     case 295:
      i1808 = HEAP32[i1807 >> 2] | 0;
      i1809 = i1808;
      i1810 = HEAP32[i1809 >> 2] | 0;
      FUNCTION_TABLE_vi[i1810 & 511](i1794);
      i1811 = i9 + 140 | 0;
      HEAP32[i1811 >> 2] = 0;
      HEAP32[i203 >> 2] = 204;
      i383 = i1794;
      i384 = i1807;
      i3 = 296;
      break;
     case 296:
      i1812 = HEAP32[i384 >> 2] | 0;
      i1813 = i1812 + 8 | 0;
      i1814 = HEAP32[i1813 >> 2] | 0;
      i1815 = (i1814 | 0) == 0;
      if (i1815) {
        i1816 = i383;
        i3 = 303;
        break;
      } else {
        i3 = 297;
        break;
      }
     case 297:
      i1817 = i9 + 140 | 0;
      i1818 = i9 + 116 | 0;
      i1819 = i9 + 424 | 0;
      i1820 = i9;
      i1821 = HEAP32[i1817 >> 2] | 0;
      i1822 = i1821;
      i3 = 298;
      break;
     case 298:
      i1823 = HEAP32[i1818 >> 2] | 0;
      i1824 = i1822 >>> 0 < i1823 >>> 0;
      if (i1824) {
        i3 = 299;
        break;
      } else {
        i3 = 302;
        break;
      }
     case 299:
      i1825 = HEAP32[i91 >> 2] | 0;
      i1826 = (i1825 | 0) == 0;
      if (i1826) {
        i1827 = i1822;
        i3 = 301;
        break;
      } else {
        i3 = 300;
        break;
      }
     case 300:
      i1828 = i1825 + 4 | 0;
      HEAP32[i1828 >> 2] = i1822;
      i1829 = HEAP32[i1818 >> 2] | 0;
      i1830 = HEAP32[i91 >> 2] | 0;
      i1831 = i1830 + 8 | 0;
      HEAP32[i1831 >> 2] = i1829;
      i1832 = HEAP32[i91 >> 2] | 0;
      i1833 = i1832;
      i1834 = HEAP32[i1833 >> 2] | 0;
      FUNCTION_TABLE_vi[i1834 & 511](i1820);
      i1835 = HEAP32[i1817 >> 2] | 0;
      i1827 = i1835;
      i3 = 301;
      break;
     case 301:
      i1836 = HEAP32[i1819 >> 2] | 0;
      i1837 = i1836 + 4 | 0;
      i1838 = HEAP32[i1837 >> 2] | 0;
      i1839 = i1838;
      FUNCTION_TABLE_viiii[i1839 & 511](i383, 0, i1817, 0);
      i1840 = HEAP32[i1817 >> 2] | 0;
      i1841 = (i1840 | 0) == (i1827 | 0);
      if (i1841) {
        i1765 = i383;
        i3 = 304;
        break;
      } else {
        i1822 = i1840;
        i3 = 298;
        break;
      }
     case 302:
      i1842 = HEAP32[i384 >> 2] | 0;
      i1843 = i1842 + 4 | 0;
      i1844 = HEAP32[i1843 >> 2] | 0;
      i1845 = i1844;
      FUNCTION_TABLE_vi[i1845 & 511](i383);
      i1846 = HEAP32[i384 >> 2] | 0;
      i1847 = i1846;
      i1848 = HEAP32[i1847 >> 2] | 0;
      FUNCTION_TABLE_vi[i1848 & 511](i383);
      HEAP32[i1817 >> 2] = 0;
      i1849 = HEAP32[i384 >> 2] | 0;
      i1850 = i1849 + 8 | 0;
      i1851 = HEAP32[i1850 >> 2] | 0;
      i1852 = (i1851 | 0) == 0;
      if (i1852) {
        i1816 = i383;
        i3 = 303;
        break;
      } else {
        i1822 = 0;
        i3 = 298;
        break;
      }
     case 303:
      i1853 = i9 + 68 | 0;
      i1854 = HEAP32[i1853 >> 2] | 0;
      i1855 = (i1854 | 0) != 0;
      i1856 = i1855 ? 206 : 205;
      HEAP32[i203 >> 2] = i1856;
      i1765 = i1816;
      i3 = 304;
      break;
     case 304:
      i1857 = i9 + 112 | 0;
      i1858 = HEAP32[i1857 >> 2] | 0;
      HEAP32[1311522] = i1858;
      i1859 = i9 + 116 | 0;
      i1860 = HEAP32[i1859 >> 2] | 0;
      HEAP32[1311523] = i1860;
      i1861 = i9 + 124 | 0;
      i1862 = HEAP32[i1861 >> 2] | 0;
      HEAP32[1311524] = i1862;
      i1863 = Math_imul(i1858, i1862);
      i1864 = Math_imul(i1863, i1860);
      i1865 = (i1864 | 0) > -1;
      i1866 = i1865 ? i1864 : -1;
      i1867 = __Znaj(i1866) | 0;
      i1868 = i1864 + 1 | 0;
      _memset(i1867 | 0, 0, i1868 | 0);
      i1869 = HEAP32[i1857 >> 2] | 0;
      i1870 = HEAP32[i1861 >> 2] | 0;
      i1871 = Math_imul(i1870, i1869);
      i1872 = i9 + 140 | 0;
      i1873 = HEAP32[i1872 >> 2] | 0;
      i1874 = HEAP32[i1859 >> 2] | 0;
      i1875 = i1873 >>> 0 < i1874 >>> 0;
      if (i1875) {
        i3 = 305;
        break;
      } else {
        i1876 = i1873;
        i1877 = i1874;
        i3 = 314;
        break;
      }
     case 305:
      i1878 = i10 | 0;
      $1945 = i7;
      i1879 = i9 + 424 | 0;
      i1880 = i9;
      i1881 = i9;
      i1882 = i1873;
      i1883 = i1874;
      i3 = 306;
      break;
     case 306:
      i1884 = Math_imul(i1871, i1882);
      i1885 = i1867 + i1884 | 0;
      HEAP32[i1878 >> 2] = i1885;
      i1886 = HEAP32[i203 >> 2] | 0;
      i1887 = (i1886 | 0) == 205;
      if (i1887) {
        i1888 = i1882;
        i1889 = i1883;
        i3 = 308;
        break;
      } else {
        i3 = 307;
        break;
      }
     case 307:
      i1890 = HEAP32[i1881 >> 2] | 0;
      i1891 = i1890 + 20 | 0;
      HEAP32[i1891 >> 2] = 20;
      i1892 = HEAP32[i203 >> 2] | 0;
      i1893 = HEAP32[i1881 >> 2] | 0;
      i1894 = i1893 + 24 | 0;
      HEAP32[i1894 >> 2] = i1892;
      i1895 = HEAP32[i1881 >> 2] | 0;
      i1896 = i1895 | 0;
      i1897 = HEAP32[i1896 >> 2] | 0;
      FUNCTION_TABLE_vi[i1897 & 511](i1880);
      i1898 = HEAP32[i1872 >> 2] | 0;
      i1899 = HEAP32[i1859 >> 2] | 0;
      i1888 = i1898;
      i1889 = i1899;
      i3 = 308;
      break;
     case 308:
      i1900 = i1888 >>> 0 < i1889 >>> 0;
      if (i1900) {
        i3 = 311;
        break;
      } else {
        i3 = 309;
        break;
      }
     case 309:
      i1901 = HEAP32[i1881 >> 2] | 0;
      i1902 = i1901 + 20 | 0;
      HEAP32[i1902 >> 2] = 123;
      i1903 = HEAP32[i1881 >> 2] | 0;
      i1904 = i1903 + 4 | 0;
      i1905 = HEAP32[i1904 >> 2] | 0;
      FUNCTION_TABLE_vii[i1905 & 511](i1880, -1);
      i1906 = HEAP32[i1872 >> 2] | 0;
      i1907 = i1906;
      i3 = 310;
      break;
     case 310:
      i1908 = HEAP32[i1859 >> 2] | 0;
      i1909 = i1907 >>> 0 < i1908 >>> 0;
      if (i1909) {
        i1882 = i1907;
        i1883 = i1908;
        i3 = 306;
        break;
      } else {
        i1876 = i1907;
        i1877 = i1908;
        i3 = 314;
        break;
      }
     case 311:
      i1910 = HEAP32[i91 >> 2] | 0;
      i1911 = (i1910 | 0) == 0;
      if (i1911) {
        i3 = 313;
        break;
      } else {
        i3 = 312;
        break;
      }
     case 312:
      i1912 = i1910 + 4 | 0;
      HEAP32[i1912 >> 2] = i1888;
      i1913 = HEAP32[i1859 >> 2] | 0;
      i1914 = HEAP32[i91 >> 2] | 0;
      i1915 = i1914 + 8 | 0;
      HEAP32[i1915 >> 2] = i1913;
      i1916 = HEAP32[i91 >> 2] | 0;
      i1917 = i1916;
      i1918 = HEAP32[i1917 >> 2] | 0;
      FUNCTION_TABLE_vi[i1918 & 511](i1880);
      i3 = 313;
      break;
     case 313:
      HEAP32[i7 >> 2] = 0;
      i1919 = HEAP32[i1879 >> 2] | 0;
      i1920 = i1919 + 4 | 0;
      i1921 = HEAP32[i1920 >> 2] | 0;
      i1922 = i1921;
      FUNCTION_TABLE_viiii[i1922 & 511](i1765, i1878, i7, 1);
      i1923 = HEAP32[i7 >> 2] | 0;
      i1924 = HEAP32[i1872 >> 2] | 0;
      i1925 = i1924 + i1923 | 0;
      HEAP32[i1872 >> 2] = i1925;
      i1907 = i1925;
      i3 = 310;
      break;
     case 314:
      i1926 = HEAP32[i203 >> 2] | 0;
      i1927 = i1926 - 205 | 0;
      i1928 = i1927 >>> 0 < 2;
      if (i1928) {
        i3 = 315;
        break;
      } else {
        i3 = 319;
        break;
      }
     case 315:
      i1929 = i9 + 64 | 0;
      i1930 = HEAP32[i1929 >> 2] | 0;
      i1931 = (i1930 | 0) == 0;
      if (i1931) {
        i3 = 316;
        break;
      } else {
        i3 = 319;
        break;
      }
     case 316:
      i1932 = i1876 >>> 0 < i1877 >>> 0;
      if (i1932) {
        i3 = 317;
        break;
      } else {
        i3 = 318;
        break;
      }
     case 317:
      i1933 = HEAP32[i45 >> 2] | 0;
      i1934 = i1933 + 20 | 0;
      HEAP32[i1934 >> 2] = 67;
      i1935 = HEAP32[i45 >> 2] | 0;
      i1936 = i1935 | 0;
      i1937 = HEAP32[i1936 >> 2] | 0;
      i1938 = i9;
      FUNCTION_TABLE_vi[i1937 & 511](i1938);
      i3 = 318;
      break;
     case 318:
      i1939 = i9 + 420 | 0;
      i1940 = HEAP32[i1939 >> 2] | 0;
      i1941 = i1940 + 4 | 0;
      i1942 = HEAP32[i1941 >> 2] | 0;
      i1943 = i1942;
      FUNCTION_TABLE_vi[i1943 & 511](i43);
      HEAP32[i203 >> 2] = 210;
      i3 = 322;
      break;
     case 319:
      if ((i1926 | 0) == 207) {
        i3 = 320;
        break;
      } else if ((i1926 | 0) == 210) {
        i3 = 322;
        break;
      } else {
        i3 = 321;
        break;
      }
     case 320:
      HEAP32[i203 >> 2] = 210;
      i3 = 322;
      break;
     case 321:
      i1944 = HEAP32[i45 >> 2] | 0;
      i1945 = i1944 + 20 | 0;
      HEAP32[i1945 >> 2] = 20;
      i1946 = HEAP32[i203 >> 2] | 0;
      i1947 = HEAP32[i45 >> 2] | 0;
      i1948 = i1947 + 24 | 0;
      HEAP32[i1948 >> 2] = i1946;
      i1949 = HEAP32[i45 >> 2] | 0;
      i1950 = i1949 | 0;
      i1951 = HEAP32[i1950 >> 2] | 0;
      i1952 = i9;
      FUNCTION_TABLE_vi[i1951 & 511](i1952);
      i3 = 322;
      break;
     case 322:
      i1953 = HEAP32[i188 >> 2] | 0;
      i1954 = i1953 + 20 | 0;
      i1955 = HEAP32[i1954 >> 2] | 0;
      i1956 = (i1955 | 0) == 0;
      if (i1956) {
        i3 = 323;
        break;
      } else {
        i3 = 324;
        break;
      }
     case 323:
      i1957 = i1953;
      i1958 = HEAP32[i1957 >> 2] | 0;
      i1959 = FUNCTION_TABLE_ii[i1958 & 511](i43) | 0;
      i1960 = (i1959 | 0) == 0;
      if (i1960) {
        i3 = 328;
        break;
      } else {
        i3 = 322;
        break;
      }
     case 324:
      i1961 = HEAP32[i92 >> 2] | 0;
      i1962 = i1961 + 24 | 0;
      i1963 = HEAP32[i1962 >> 2] | 0;
      i1964 = i1963;
      FUNCTION_TABLE_vi[i1964 & 511](i43);
      i1965 = HEAP32[i44 >> 2] | 0;
      i1966 = (i1965 | 0) == 0;
      if (i1966) {
        i3 = 330;
        break;
      } else {
        i3 = 325;
        break;
      }
     case 325:
      i1967 = i1965 + 36 | 0;
      i1968 = HEAP32[i1967 >> 2] | 0;
      FUNCTION_TABLE_vii[i1968 & 511](i54, 1);
      i1969 = HEAP32[i51 >> 2] | 0;
      i1970 = (i1969 | 0) == 0;
      if (i1970) {
        i3 = 327;
        break;
      } else {
        i3 = 326;
        break;
      }
     case 326:
      HEAP32[i203 >> 2] = 200;
      HEAP32[i94 >> 2] = 0;
      i3 = 328;
      break;
     case 327:
      HEAP32[i203 >> 2] = 100;
      i3 = 328;
      break;
     case 328:
      i1971 = HEAP32[i44 >> 2] | 0;
      i1972 = (i1971 | 0) == 0;
      if (i1972) {
        i3 = 330;
        break;
      } else {
        i3 = 329;
        break;
      }
     case 329:
      i1973 = i1971 + 40 | 0;
      i1974 = HEAP32[i1973 >> 2] | 0;
      i1975 = i1974;
      FUNCTION_TABLE_vi[i1975 & 511](i54);
      i3 = 330;
      break;
     case 330:
      HEAP32[i44 >> 2] = 0;
      HEAP32[i203 >> 2] = 0;
      i1976 = _fopen(5267920, 5267164) | 0;
      i1977 = (i1976 | 0) == 0;
      if (i1977) {
        i3 = 332;
        break;
      } else {
        i3 = 331;
        break;
      }
     case 331:
      i1978 = _fwrite(i1867 | 0, i1864 | 0, 1, i1976 | 0) | 0;
      i1979 = _fclose(i1976 | 0) | 0;
      i3 = 332;
      break;
     case 332:
      i1980 = _fclose(i12 | 0) | 0;
      i15 = 1;
      i3 = 333;
      break;
     case 333:
      STACKTOP = i2;
      return i15 | 0;
    }
  } catch (e) {
    if (!e.longjmp || !(e.id in i4)) throw e;
    i5[setjmpLabels[e.id]](e.value);
  }
  return 0;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev(i1) {
  i1 = i1 | 0;
  return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev(i1) {
  i1 = i1 | 0;
  return;
}
function __ZN10__cxxabiv117__class_type_infoD1Ev(i1) {
  i1 = i1 | 0;
  return;
}
function __ZN10__cxxabiv120__si_class_type_infoD1Ev(i1) {
  i1 = i1 | 0;
  return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0;
  if ((HEAP32[i2 + 8 >> 2] | 0) != (i1 | 0)) {
    return;
  }
  i1 = i2 + 16 | 0;
  i5 = HEAP32[i1 >> 2] | 0;
  if ((i5 | 0) == 0) {
    HEAP32[i1 >> 2] = i3;
    HEAP32[i2 + 24 >> 2] = i4;
    HEAP32[i2 + 36 >> 2] = 1;
    return;
  }
  if ((i5 | 0) != (i3 | 0)) {
    i3 = i2 + 36 | 0;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1 | 0;
    HEAP32[i2 + 24 >> 2] = 2;
    HEAP8[i2 + 54 | 0] = 1;
    return;
  }
  i3 = i2 + 24 | 0;
  if ((HEAP32[i3 >> 2] | 0) != 2) {
    return;
  }
  HEAP32[i3 >> 2] = i4;
  return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev(i1) {
  i1 = i1 | 0;
  if ((i1 | 0) == 0) {
    return;
  }
  _free(i1);
  return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev(i1) {
  i1 = i1 | 0;
  if ((i1 | 0) == 0) {
    return;
  }
  _free(i1);
  return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv(i1, i2, i3) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
  i4 = STACKTOP;
  STACKTOP = STACKTOP + 112 | 0;
  i5 = i4 | 0;
  i6 = i4 + 56 | 0;
  if ((i1 | 0) == (i2 | 0)) {
    i7 = 1;
    STACKTOP = i4;
    return i7 | 0;
  }
  if ((i2 | 0) == 0) {
    i7 = 0;
    STACKTOP = i4;
    return i7 | 0;
  }
  i8 = i2;
  i9 = HEAP32[i2 >> 2] | 0;
  i2 = i8 + (HEAP32[i9 - 8 >> 2] | 0) | 0;
  i10 = HEAP32[i9 - 4 >> 2] | 0;
  i9 = i10;
  HEAP32[i5 >> 2] = 5276372;
  HEAP32[i5 + 4 >> 2] = i8;
  HEAP32[i5 + 8 >> 2] = 5276384;
  HEAP32[i5 + 12 >> 2] = -1;
  i8 = i5 + 16 | 0;
  i11 = i5 + 20 | 0;
  i12 = i5 + 24 | 0;
  i13 = i5 + 28 | 0;
  i14 = i5 + 32 | 0;
  i15 = i5 + 40 | 0;
  i16 = i8;
  HEAP32[i16 >> 2] = 0;
  HEAP32[i16 + 4 >> 2] = 0;
  HEAP32[i16 + 8 >> 2] = 0;
  HEAP32[i16 + 12 >> 2] = 0;
  HEAP32[i16 + 16 >> 2] = 0;
  HEAP32[i16 + 20 >> 2] = 0;
  HEAP32[i16 + 24 >> 2] = 0;
  HEAP32[i16 + 28 >> 2] = 0;
  HEAP32[i16 + 32 >> 2] = 0;
  HEAP16[i16 + 36 >> 1] = 0;
  HEAP8[i16 + 38 | 0] = 0;
  do {
    if ((i10 | 0) == 5276372) {
      HEAP32[i5 + 48 >> 2] = 1;
      FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[1319093] | 0) + 20 >> 2] & 511](i9, i5, i2, i2, 1, 0);
      i17 = (HEAP32[i12 >> 2] | 0) == 1 ? i2 : 0;
    } else {
      FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2] & 511](i9, i5, i2, 1, 0);
      i16 = HEAP32[i5 + 36 >> 2] | 0;
      if ((i16 | 0) == 0) {
        if ((HEAP32[i15 >> 2] | 0) != 1) {
          i17 = 0;
          break;
        }
        if ((HEAP32[i13 >> 2] | 0) != 1) {
          i17 = 0;
          break;
        }
        i17 = (HEAP32[i14 >> 2] | 0) == 1 ? HEAP32[i11 >> 2] | 0 : 0;
        break;
      } else if ((i16 | 0) != 1) {
        i17 = 0;
        break;
      }
      if ((HEAP32[i12 >> 2] | 0) != 1) {
        if ((HEAP32[i15 >> 2] | 0) != 0) {
          i17 = 0;
          break;
        }
        if ((HEAP32[i13 >> 2] | 0) != 1) {
          i17 = 0;
          break;
        }
        if ((HEAP32[i14 >> 2] | 0) != 1) {
          i17 = 0;
          break;
        }
      }
      i17 = HEAP32[i8 >> 2] | 0;
    }
  } while (0);
  i8 = i17;
  if ((i17 | 0) == 0) {
    i7 = 0;
    STACKTOP = i4;
    return i7 | 0;
  }
  i14 = i6;
  HEAP32[i14 >> 2] = 0;
  HEAP32[i14 + 4 >> 2] = 0;
  HEAP32[i14 + 8 >> 2] = 0;
  HEAP32[i14 + 12 >> 2] = 0;
  HEAP32[i14 + 16 >> 2] = 0;
  HEAP32[i14 + 20 >> 2] = 0;
  HEAP32[i14 + 24 >> 2] = 0;
  HEAP32[i14 + 28 >> 2] = 0;
  HEAP32[i14 + 32 >> 2] = 0;
  HEAP32[i14 + 36 >> 2] = 0;
  HEAP32[i14 + 40 >> 2] = 0;
  HEAP32[i14 + 44 >> 2] = 0;
  HEAP32[i14 + 48 >> 2] = 0;
  HEAP32[i14 + 52 >> 2] = 0;
  HEAP32[i6 >> 2] = i8;
  HEAP32[i6 + 8 >> 2] = i1;
  HEAP32[i6 + 12 >> 2] = -1;
  HEAP32[i6 + 48 >> 2] = 1;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i17 >> 2] | 0) + 28 >> 2] & 511](i8, i6, HEAP32[i3 >> 2] | 0, 1);
  if ((HEAP32[i6 + 24 >> 2] | 0) != 1) {
    i7 = 0;
    STACKTOP = i4;
    return i7 | 0;
  }
  HEAP32[i3 >> 2] = HEAP32[i6 + 16 >> 2] | 0;
  i7 = 1;
  STACKTOP = i4;
  return i7 | 0;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  if ((HEAP32[i2 + 8 >> 2] | 0) == (i1 | 0)) {
    if ((HEAP32[i2 + 4 >> 2] | 0) != (i3 | 0)) {
      return;
    }
    i5 = i2 + 28 | 0;
    if ((HEAP32[i5 >> 2] | 0) == 1) {
      return;
    }
    HEAP32[i5 >> 2] = i4;
    return;
  }
  if ((HEAP32[i2 >> 2] | 0) != (i1 | 0)) {
    return;
  }
  do {
    if ((HEAP32[i2 + 16 >> 2] | 0) != (i3 | 0)) {
      i1 = i2 + 20 | 0;
      if ((HEAP32[i1 >> 2] | 0) == (i3 | 0)) {
        break;
      }
      HEAP32[i2 + 32 >> 2] = i4;
      HEAP32[i1 >> 2] = i3;
      i1 = i2 + 40 | 0;
      HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1 | 0;
      do {
        if ((HEAP32[i2 + 36 >> 2] | 0) == 1) {
          if ((HEAP32[i2 + 24 >> 2] | 0) != 2) {
            break;
          }
          HEAP8[i2 + 54 | 0] = 1;
        }
      } while (0);
      HEAP32[i2 + 44 >> 2] = 4;
      return;
    }
  } while (0);
  if ((i4 | 0) != 1) {
    return;
  }
  HEAP32[i2 + 32 >> 2] = 1;
  return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1, i2, i3, i4, i5, i6) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  var i7 = 0;
  if ((HEAP32[i2 + 8 >> 2] | 0) != (i1 | 0)) {
    return;
  }
  HEAP8[i2 + 53 | 0] = 1;
  if ((HEAP32[i2 + 4 >> 2] | 0) != (i4 | 0)) {
    return;
  }
  HEAP8[i2 + 52 | 0] = 1;
  i4 = i2 + 16 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == 0) {
    HEAP32[i4 >> 2] = i3;
    HEAP32[i2 + 24 >> 2] = i5;
    HEAP32[i2 + 36 >> 2] = 1;
    if (!((HEAP32[i2 + 48 >> 2] | 0) == 1 & (i5 | 0) == 1)) {
      return;
    }
    HEAP8[i2 + 54 | 0] = 1;
    return;
  }
  if ((i1 | 0) != (i3 | 0)) {
    i3 = i2 + 36 | 0;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1 | 0;
    HEAP8[i2 + 54 | 0] = 1;
    return;
  }
  i3 = i2 + 24 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if ((i1 | 0) == 2) {
    HEAP32[i3 >> 2] = i5;
    i7 = i5;
  } else {
    i7 = i1;
  }
  if (!((HEAP32[i2 + 48 >> 2] | 0) == 1 & (i7 | 0) == 1)) {
    return;
  }
  HEAP8[i2 + 54 | 0] = 1;
  return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1, i2, i3, i4) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  var i5 = 0;
  if ((i1 | 0) != (HEAP32[i2 + 8 >> 2] | 0)) {
    i5 = HEAP32[i1 + 8 >> 2] | 0;
    FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 511](i5, i2, i3, i4);
    return;
  }
  i5 = i2 + 16 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == 0) {
    HEAP32[i5 >> 2] = i3;
    HEAP32[i2 + 24 >> 2] = i4;
    HEAP32[i2 + 36 >> 2] = 1;
    return;
  }
  if ((i1 | 0) != (i3 | 0)) {
    i3 = i2 + 36 | 0;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1 | 0;
    HEAP32[i2 + 24 >> 2] = 2;
    HEAP8[i2 + 54 | 0] = 1;
    return;
  }
  i3 = i2 + 24 | 0;
  if ((HEAP32[i3 >> 2] | 0) != 2) {
    return;
  }
  HEAP32[i3 >> 2] = i4;
  return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i2, i3, i4, i5) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
  i6 = i1 | 0;
  if ((i6 | 0) == (HEAP32[i2 + 8 >> 2] | 0)) {
    if ((HEAP32[i2 + 4 >> 2] | 0) != (i3 | 0)) {
      return;
    }
    i7 = i2 + 28 | 0;
    if ((HEAP32[i7 >> 2] | 0) == 1) {
      return;
    }
    HEAP32[i7 >> 2] = i4;
    return;
  }
  if ((i6 | 0) != (HEAP32[i2 >> 2] | 0)) {
    i6 = HEAP32[i1 + 8 >> 2] | 0;
    FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] & 511](i6, i2, i3, i4, i5);
    return;
  }
  do {
    if ((HEAP32[i2 + 16 >> 2] | 0) != (i3 | 0)) {
      i6 = i2 + 20 | 0;
      if ((HEAP32[i6 >> 2] | 0) == (i3 | 0)) {
        break;
      }
      HEAP32[i2 + 32 >> 2] = i4;
      i7 = i2 + 44 | 0;
      if ((HEAP32[i7 >> 2] | 0) == 4) {
        return;
      }
      i8 = i2 + 52 | 0;
      HEAP8[i8] = 0;
      i9 = i2 + 53 | 0;
      HEAP8[i9] = 0;
      i10 = HEAP32[i1 + 8 >> 2] | 0;
      FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] & 511](i10, i2, i3, i3, 1, i5);
      do {
        if ((HEAP8[i9] & 1) << 24 >> 24 == 0) {
          i11 = 0;
          i12 = 67;
        } else {
          if ((HEAP8[i8] & 1) << 24 >> 24 == 0) {
            i11 = 1;
            i12 = 67;
            break;
          } else {
            break;
          }
        }
      } while (0);
      L92 : do {
        if ((i12 | 0) == 67) {
          HEAP32[i6 >> 2] = i3;
          i8 = i2 + 40 | 0;
          HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1 | 0;
          do {
            if ((HEAP32[i2 + 36 >> 2] | 0) == 1) {
              if ((HEAP32[i2 + 24 >> 2] | 0) != 2) {
                i12 = 70;
                break;
              }
              HEAP8[i2 + 54 | 0] = 1;
              if (i11) {
                break L92;
              } else {
                break;
              }
            } else {
              i12 = 70;
            }
          } while (0);
          if ((i12 | 0) == 70) {
            if (i11) {
              break;
            }
          }
          HEAP32[i7 >> 2] = 4;
          return;
        }
      } while (0);
      HEAP32[i7 >> 2] = 3;
      return;
    }
  } while (0);
  if ((i4 | 0) != 1) {
    return;
  }
  HEAP32[i2 + 32 >> 2] = 1;
  return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1, i2, i3, i4, i5, i6) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  i4 = i4 | 0;
  i5 = i5 | 0;
  i6 = i6 | 0;
  var i7 = 0, i8 = 0;
  if ((i1 | 0) != (HEAP32[i2 + 8 >> 2] | 0)) {
    i7 = HEAP32[i1 + 8 >> 2] | 0;
    FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] & 511](i7, i2, i3, i4, i5, i6);
    return;
  }
  HEAP8[i2 + 53 | 0] = 1;
  if ((HEAP32[i2 + 4 >> 2] | 0) != (i4 | 0)) {
    return;
  }
  HEAP8[i2 + 52 | 0] = 1;
  i4 = i2 + 16 | 0;
  i6 = HEAP32[i4 >> 2] | 0;
  if ((i6 | 0) == 0) {
    HEAP32[i4 >> 2] = i3;
    HEAP32[i2 + 24 >> 2] = i5;
    HEAP32[i2 + 36 >> 2] = 1;
    if (!((HEAP32[i2 + 48 >> 2] | 0) == 1 & (i5 | 0) == 1)) {
      return;
    }
    HEAP8[i2 + 54 | 0] = 1;
    return;
  }
  if ((i6 | 0) != (i3 | 0)) {
    i3 = i2 + 36 | 0;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1 | 0;
    HEAP8[i2 + 54 | 0] = 1;
    return;
  }
  i3 = i2 + 24 | 0;
  i6 = HEAP32[i3 >> 2] | 0;
  if ((i6 | 0) == 2) {
    HEAP32[i3 >> 2] = i5;
    i8 = i5;
  } else {
    i8 = i6;
  }
  if (!((HEAP32[i2 + 48 >> 2] | 0) == 1 & (i8 | 0) == 1)) {
    return;
  }
  HEAP8[i2 + 54 | 0] = 1;
  return;
}
function _malloc(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0;
  do {
    if (i1 >>> 0 < 245) {
      if (i1 >>> 0 < 11) {
        i2 = 16;
      } else {
        i2 = i1 + 11 & -8;
      }
      i3 = i2 >>> 3;
      i4 = HEAP32[1318926] | 0;
      i5 = i4 >>> (i3 >>> 0);
      if ((i5 & 3 | 0) != 0) {
        i6 = (i5 & 1 ^ 1) + i3 | 0;
        i7 = i6 << 1;
        i8 = 5275744 + (i7 << 2) | 0;
        i9 = 5275744 + (i7 + 2 << 2) | 0;
        i7 = HEAP32[i9 >> 2] | 0;
        i10 = i7 + 8 | 0;
        i11 = HEAP32[i10 >> 2] | 0;
        do {
          if ((i8 | 0) == (i11 | 0)) {
            HEAP32[1318926] = i4 & (1 << i6 ^ -1);
          } else {
            if (i11 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
              _abort();
              return 0;
            } else {
              HEAP32[i9 >> 2] = i11;
              HEAP32[i11 + 12 >> 2] = i8;
              break;
            }
          }
        } while (0);
        i8 = i6 << 3;
        HEAP32[i7 + 4 >> 2] = i8 | 3;
        i11 = i7 + (i8 | 4) | 0;
        HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | 1;
        i12 = i10;
        return i12 | 0;
      }
      if (i2 >>> 0 <= (HEAP32[1318928] | 0) >>> 0) {
        i13 = i2;
        break;
      }
      if ((i5 | 0) != 0) {
        i11 = 2 << i3;
        i8 = i5 << i3 & (i11 | -i11);
        i11 = (i8 & -i8) - 1 | 0;
        i8 = i11 >>> 12 & 16;
        i9 = i11 >>> (i8 >>> 0);
        i11 = i9 >>> 5 & 8;
        i14 = i9 >>> (i11 >>> 0);
        i9 = i14 >>> 2 & 4;
        i15 = i14 >>> (i9 >>> 0);
        i14 = i15 >>> 1 & 2;
        i16 = i15 >>> (i14 >>> 0);
        i15 = i16 >>> 1 & 1;
        i17 = (i11 | i8 | i9 | i14 | i15) + (i16 >>> (i15 >>> 0)) | 0;
        i15 = i17 << 1;
        i16 = 5275744 + (i15 << 2) | 0;
        i14 = 5275744 + (i15 + 2 << 2) | 0;
        i15 = HEAP32[i14 >> 2] | 0;
        i9 = i15 + 8 | 0;
        i8 = HEAP32[i9 >> 2] | 0;
        do {
          if ((i16 | 0) == (i8 | 0)) {
            HEAP32[1318926] = i4 & (1 << i17 ^ -1);
          } else {
            if (i8 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
              _abort();
              return 0;
            } else {
              HEAP32[i14 >> 2] = i8;
              HEAP32[i8 + 12 >> 2] = i16;
              break;
            }
          }
        } while (0);
        i16 = i17 << 3;
        i8 = i16 - i2 | 0;
        HEAP32[i15 + 4 >> 2] = i2 | 3;
        i14 = i15;
        i4 = i14 + i2 | 0;
        HEAP32[i14 + (i2 | 4) >> 2] = i8 | 1;
        HEAP32[i14 + i16 >> 2] = i8;
        i16 = HEAP32[1318928] | 0;
        if ((i16 | 0) != 0) {
          i14 = HEAP32[1318931] | 0;
          i3 = i16 >>> 3;
          i16 = i3 << 1;
          i5 = 5275744 + (i16 << 2) | 0;
          i10 = HEAP32[1318926] | 0;
          i7 = 1 << i3;
          do {
            if ((i10 & i7 | 0) == 0) {
              HEAP32[1318926] = i10 | i7;
              i18 = i5;
              i19 = 5275744 + (i16 + 2 << 2) | 0;
            } else {
              i3 = 5275744 + (i16 + 2 << 2) | 0;
              i6 = HEAP32[i3 >> 2] | 0;
              if (i6 >>> 0 >= (HEAP32[1318930] | 0) >>> 0) {
                i18 = i6;
                i19 = i3;
                break;
              }
              _abort();
              return 0;
            }
          } while (0);
          HEAP32[i19 >> 2] = i14;
          HEAP32[i18 + 12 >> 2] = i14;
          HEAP32[i14 + 8 >> 2] = i18;
          HEAP32[i14 + 12 >> 2] = i5;
        }
        HEAP32[1318928] = i8;
        HEAP32[1318931] = i4;
        i12 = i9;
        return i12 | 0;
      }
      i16 = HEAP32[1318927] | 0;
      if ((i16 | 0) == 0) {
        i13 = i2;
        break;
      }
      i7 = (i16 & -i16) - 1 | 0;
      i16 = i7 >>> 12 & 16;
      i10 = i7 >>> (i16 >>> 0);
      i7 = i10 >>> 5 & 8;
      i15 = i10 >>> (i7 >>> 0);
      i10 = i15 >>> 2 & 4;
      i17 = i15 >>> (i10 >>> 0);
      i15 = i17 >>> 1 & 2;
      i3 = i17 >>> (i15 >>> 0);
      i17 = i3 >>> 1 & 1;
      i6 = HEAP32[5276008 + ((i7 | i16 | i10 | i15 | i17) + (i3 >>> (i17 >>> 0)) << 2) >> 2] | 0;
      i17 = i6;
      i3 = i6;
      i15 = (HEAP32[i6 + 4 >> 2] & -8) - i2 | 0;
      while (1) {
        i6 = HEAP32[i17 + 16 >> 2] | 0;
        if ((i6 | 0) == 0) {
          i10 = HEAP32[i17 + 20 >> 2] | 0;
          if ((i10 | 0) == 0) {
            break;
          } else {
            i20 = i10;
          }
        } else {
          i20 = i6;
        }
        i6 = (HEAP32[i20 + 4 >> 2] & -8) - i2 | 0;
        i10 = i6 >>> 0 < i15 >>> 0;
        i17 = i20;
        i3 = i10 ? i20 : i3;
        i15 = i10 ? i6 : i15;
      }
      i17 = i3;
      i9 = HEAP32[1318930] | 0;
      if (i17 >>> 0 < i9 >>> 0) {
        _abort();
        return 0;
      }
      i4 = i17 + i2 | 0;
      i8 = i4;
      if (i17 >>> 0 >= i4 >>> 0) {
        _abort();
        return 0;
      }
      i4 = HEAP32[i3 + 24 >> 2] | 0;
      i5 = HEAP32[i3 + 12 >> 2] | 0;
      L184 : do {
        if ((i5 | 0) == (i3 | 0)) {
          i14 = i3 + 20 | 0;
          i6 = HEAP32[i14 >> 2] | 0;
          do {
            if ((i6 | 0) == 0) {
              i10 = i3 + 16 | 0;
              i16 = HEAP32[i10 >> 2] | 0;
              if ((i16 | 0) == 0) {
                i21 = 0;
                break L184;
              } else {
                i22 = i16;
                i23 = i10;
                break;
              }
            } else {
              i22 = i6;
              i23 = i14;
            }
          } while (0);
          while (1) {
            i14 = i22 + 20 | 0;
            i6 = HEAP32[i14 >> 2] | 0;
            if ((i6 | 0) != 0) {
              i22 = i6;
              i23 = i14;
              continue;
            }
            i14 = i22 + 16 | 0;
            i6 = HEAP32[i14 >> 2] | 0;
            if ((i6 | 0) == 0) {
              break;
            } else {
              i22 = i6;
              i23 = i14;
            }
          }
          if (i23 >>> 0 < i9 >>> 0) {
            _abort();
            return 0;
          } else {
            HEAP32[i23 >> 2] = 0;
            i21 = i22;
            break;
          }
        } else {
          i14 = HEAP32[i3 + 8 >> 2] | 0;
          if (i14 >>> 0 < i9 >>> 0) {
            _abort();
            return 0;
          } else {
            HEAP32[i14 + 12 >> 2] = i5;
            HEAP32[i5 + 8 >> 2] = i14;
            i21 = i5;
            break;
          }
        }
      } while (0);
      L200 : do {
        if ((i4 | 0) != 0) {
          i5 = i3 + 28 | 0;
          i9 = 5276008 + (HEAP32[i5 >> 2] << 2) | 0;
          do {
            if ((i3 | 0) == (HEAP32[i9 >> 2] | 0)) {
              HEAP32[i9 >> 2] = i21;
              if ((i21 | 0) != 0) {
                break;
              }
              HEAP32[1318927] = HEAP32[1318927] & (1 << HEAP32[i5 >> 2] ^ -1);
              break L200;
            } else {
              if (i4 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
                _abort();
                return 0;
              }
              i14 = i4 + 16 | 0;
              if ((HEAP32[i14 >> 2] | 0) == (i3 | 0)) {
                HEAP32[i14 >> 2] = i21;
              } else {
                HEAP32[i4 + 20 >> 2] = i21;
              }
              if ((i21 | 0) == 0) {
                break L200;
              }
            }
          } while (0);
          if (i21 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
            _abort();
            return 0;
          }
          HEAP32[i21 + 24 >> 2] = i4;
          i5 = HEAP32[i3 + 16 >> 2] | 0;
          do {
            if ((i5 | 0) != 0) {
              if (i5 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
                _abort();
                return 0;
              } else {
                HEAP32[i21 + 16 >> 2] = i5;
                HEAP32[i5 + 24 >> 2] = i21;
                break;
              }
            }
          } while (0);
          i5 = HEAP32[i3 + 20 >> 2] | 0;
          if ((i5 | 0) == 0) {
            break;
          }
          if (i5 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
            _abort();
            return 0;
          } else {
            HEAP32[i21 + 20 >> 2] = i5;
            HEAP32[i5 + 24 >> 2] = i21;
            break;
          }
        }
      } while (0);
      if (i15 >>> 0 < 16) {
        i4 = i15 + i2 | 0;
        HEAP32[i3 + 4 >> 2] = i4 | 3;
        i5 = i17 + (i4 + 4 | 0) | 0;
        HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 1;
      } else {
        HEAP32[i3 + 4 >> 2] = i2 | 3;
        HEAP32[i17 + (i2 | 4) >> 2] = i15 | 1;
        HEAP32[i17 + (i15 + i2 | 0) >> 2] = i15;
        i5 = HEAP32[1318928] | 0;
        if ((i5 | 0) != 0) {
          i4 = HEAP32[1318931] | 0;
          i9 = i5 >>> 3;
          i5 = i9 << 1;
          i14 = 5275744 + (i5 << 2) | 0;
          i6 = HEAP32[1318926] | 0;
          i10 = 1 << i9;
          do {
            if ((i6 & i10 | 0) == 0) {
              HEAP32[1318926] = i6 | i10;
              i24 = i14;
              i25 = 5275744 + (i5 + 2 << 2) | 0;
            } else {
              i9 = 5275744 + (i5 + 2 << 2) | 0;
              i16 = HEAP32[i9 >> 2] | 0;
              if (i16 >>> 0 >= (HEAP32[1318930] | 0) >>> 0) {
                i24 = i16;
                i25 = i9;
                break;
              }
              _abort();
              return 0;
            }
          } while (0);
          HEAP32[i25 >> 2] = i4;
          HEAP32[i24 + 12 >> 2] = i4;
          HEAP32[i4 + 8 >> 2] = i24;
          HEAP32[i4 + 12 >> 2] = i14;
        }
        HEAP32[1318928] = i15;
        HEAP32[1318931] = i8;
      }
      i5 = i3 + 8 | 0;
      if ((i5 | 0) == 0) {
        i13 = i2;
        break;
      } else {
        i12 = i5;
      }
      return i12 | 0;
    } else {
      if (i1 >>> 0 > 4294967231) {
        i13 = -1;
        break;
      }
      i5 = i1 + 11 | 0;
      i10 = i5 & -8;
      i6 = HEAP32[1318927] | 0;
      if ((i6 | 0) == 0) {
        i13 = i10;
        break;
      }
      i17 = -i10 | 0;
      i9 = i5 >>> 8;
      do {
        if ((i9 | 0) == 0) {
          i26 = 0;
        } else {
          if (i10 >>> 0 > 16777215) {
            i26 = 31;
            break;
          }
          i5 = (i9 + 1048320 | 0) >>> 16 & 8;
          i16 = i9 << i5;
          i7 = (i16 + 520192 | 0) >>> 16 & 4;
          i11 = i16 << i7;
          i16 = (i11 + 245760 | 0) >>> 16 & 2;
          i27 = (14 - (i7 | i5 | i16) | 0) + (i11 << i16 >>> 15) | 0;
          i26 = i10 >>> ((i27 + 7 | 0) >>> 0) & 1 | i27 << 1;
        }
      } while (0);
      i9 = HEAP32[5276008 + (i26 << 2) >> 2] | 0;
      L248 : do {
        if ((i9 | 0) == 0) {
          i28 = 0;
          i29 = i17;
          i30 = 0;
        } else {
          if ((i26 | 0) == 31) {
            i31 = 0;
          } else {
            i31 = 25 - (i26 >>> 1) | 0;
          }
          i3 = 0;
          i8 = i17;
          i15 = i9;
          i14 = i10 << i31;
          i4 = 0;
          while (1) {
            i27 = HEAP32[i15 + 4 >> 2] & -8;
            i16 = i27 - i10 | 0;
            if (i16 >>> 0 < i8 >>> 0) {
              if ((i27 | 0) == (i10 | 0)) {
                i28 = i15;
                i29 = i16;
                i30 = i15;
                break L248;
              } else {
                i32 = i15;
                i33 = i16;
              }
            } else {
              i32 = i3;
              i33 = i8;
            }
            i16 = HEAP32[i15 + 20 >> 2] | 0;
            i27 = HEAP32[i15 + 16 + (i14 >>> 31 << 2) >> 2] | 0;
            i11 = (i16 | 0) == 0 | (i16 | 0) == (i27 | 0) ? i4 : i16;
            if ((i27 | 0) == 0) {
              i28 = i32;
              i29 = i33;
              i30 = i11;
              break L248;
            } else {
              i3 = i32;
              i8 = i33;
              i15 = i27;
              i14 = i14 << 1;
              i4 = i11;
            }
          }
        }
      } while (0);
      if ((i30 | 0) == 0 & (i28 | 0) == 0) {
        i9 = 2 << i26;
        i17 = i6 & (i9 | -i9);
        if ((i17 | 0) == 0) {
          i13 = i10;
          break;
        }
        i9 = (i17 & -i17) - 1 | 0;
        i17 = i9 >>> 12 & 16;
        i4 = i9 >>> (i17 >>> 0);
        i9 = i4 >>> 5 & 8;
        i14 = i4 >>> (i9 >>> 0);
        i4 = i14 >>> 2 & 4;
        i15 = i14 >>> (i4 >>> 0);
        i14 = i15 >>> 1 & 2;
        i8 = i15 >>> (i14 >>> 0);
        i15 = i8 >>> 1 & 1;
        i34 = HEAP32[5276008 + ((i9 | i17 | i4 | i14 | i15) + (i8 >>> (i15 >>> 0)) << 2) >> 2] | 0;
      } else {
        i34 = i30;
      }
      L263 : do {
        if ((i34 | 0) == 0) {
          i35 = i29;
          i36 = i28;
        } else {
          i15 = i34;
          i8 = i29;
          i14 = i28;
          while (1) {
            i4 = (HEAP32[i15 + 4 >> 2] & -8) - i10 | 0;
            i17 = i4 >>> 0 < i8 >>> 0;
            i9 = i17 ? i4 : i8;
            i4 = i17 ? i15 : i14;
            i17 = HEAP32[i15 + 16 >> 2] | 0;
            if ((i17 | 0) != 0) {
              i15 = i17;
              i8 = i9;
              i14 = i4;
              continue;
            }
            i17 = HEAP32[i15 + 20 >> 2] | 0;
            if ((i17 | 0) == 0) {
              i35 = i9;
              i36 = i4;
              break L263;
            } else {
              i15 = i17;
              i8 = i9;
              i14 = i4;
            }
          }
        }
      } while (0);
      if ((i36 | 0) == 0) {
        i13 = i10;
        break;
      }
      if (i35 >>> 0 >= ((HEAP32[1318928] | 0) - i10 | 0) >>> 0) {
        i13 = i10;
        break;
      }
      i6 = i36;
      i14 = HEAP32[1318930] | 0;
      if (i6 >>> 0 < i14 >>> 0) {
        _abort();
        return 0;
      }
      i8 = i6 + i10 | 0;
      i15 = i8;
      if (i6 >>> 0 >= i8 >>> 0) {
        _abort();
        return 0;
      }
      i4 = HEAP32[i36 + 24 >> 2] | 0;
      i9 = HEAP32[i36 + 12 >> 2] | 0;
      L276 : do {
        if ((i9 | 0) == (i36 | 0)) {
          i17 = i36 + 20 | 0;
          i3 = HEAP32[i17 >> 2] | 0;
          do {
            if ((i3 | 0) == 0) {
              i11 = i36 + 16 | 0;
              i27 = HEAP32[i11 >> 2] | 0;
              if ((i27 | 0) == 0) {
                i37 = 0;
                break L276;
              } else {
                i38 = i27;
                i39 = i11;
                break;
              }
            } else {
              i38 = i3;
              i39 = i17;
            }
          } while (0);
          while (1) {
            i17 = i38 + 20 | 0;
            i3 = HEAP32[i17 >> 2] | 0;
            if ((i3 | 0) != 0) {
              i38 = i3;
              i39 = i17;
              continue;
            }
            i17 = i38 + 16 | 0;
            i3 = HEAP32[i17 >> 2] | 0;
            if ((i3 | 0) == 0) {
              break;
            } else {
              i38 = i3;
              i39 = i17;
            }
          }
          if (i39 >>> 0 < i14 >>> 0) {
            _abort();
            return 0;
          } else {
            HEAP32[i39 >> 2] = 0;
            i37 = i38;
            break;
          }
        } else {
          i17 = HEAP32[i36 + 8 >> 2] | 0;
          if (i17 >>> 0 < i14 >>> 0) {
            _abort();
            return 0;
          } else {
            HEAP32[i17 + 12 >> 2] = i9;
            HEAP32[i9 + 8 >> 2] = i17;
            i37 = i9;
            break;
          }
        }
      } while (0);
      L292 : do {
        if ((i4 | 0) != 0) {
          i9 = i36 + 28 | 0;
          i14 = 5276008 + (HEAP32[i9 >> 2] << 2) | 0;
          do {
            if ((i36 | 0) == (HEAP32[i14 >> 2] | 0)) {
              HEAP32[i14 >> 2] = i37;
              if ((i37 | 0) != 0) {
                break;
              }
              HEAP32[1318927] = HEAP32[1318927] & (1 << HEAP32[i9 >> 2] ^ -1);
              break L292;
            } else {
              if (i4 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
                _abort();
                return 0;
              }
              i17 = i4 + 16 | 0;
              if ((HEAP32[i17 >> 2] | 0) == (i36 | 0)) {
                HEAP32[i17 >> 2] = i37;
              } else {
                HEAP32[i4 + 20 >> 2] = i37;
              }
              if ((i37 | 0) == 0) {
                break L292;
              }
            }
          } while (0);
          if (i37 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
            _abort();
            return 0;
          }
          HEAP32[i37 + 24 >> 2] = i4;
          i9 = HEAP32[i36 + 16 >> 2] | 0;
          do {
            if ((i9 | 0) != 0) {
              if (i9 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
                _abort();
                return 0;
              } else {
                HEAP32[i37 + 16 >> 2] = i9;
                HEAP32[i9 + 24 >> 2] = i37;
                break;
              }
            }
          } while (0);
          i9 = HEAP32[i36 + 20 >> 2] | 0;
          if ((i9 | 0) == 0) {
            break;
          }
          if (i9 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
            _abort();
            return 0;
          } else {
            HEAP32[i37 + 20 >> 2] = i9;
            HEAP32[i9 + 24 >> 2] = i37;
            break;
          }
        }
      } while (0);
      do {
        if (i35 >>> 0 < 16) {
          i4 = i35 + i10 | 0;
          HEAP32[i36 + 4 >> 2] = i4 | 3;
          i9 = i6 + (i4 + 4 | 0) | 0;
          HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 1;
        } else {
          HEAP32[i36 + 4 >> 2] = i10 | 3;
          HEAP32[i6 + (i10 | 4) >> 2] = i35 | 1;
          HEAP32[i6 + (i35 + i10 | 0) >> 2] = i35;
          i9 = i35 >>> 3;
          if (i35 >>> 0 < 256) {
            i4 = i9 << 1;
            i14 = 5275744 + (i4 << 2) | 0;
            i17 = HEAP32[1318926] | 0;
            i3 = 1 << i9;
            do {
              if ((i17 & i3 | 0) == 0) {
                HEAP32[1318926] = i17 | i3;
                i40 = i14;
                i41 = 5275744 + (i4 + 2 << 2) | 0;
              } else {
                i9 = 5275744 + (i4 + 2 << 2) | 0;
                i11 = HEAP32[i9 >> 2] | 0;
                if (i11 >>> 0 >= (HEAP32[1318930] | 0) >>> 0) {
                  i40 = i11;
                  i41 = i9;
                  break;
                }
                _abort();
                return 0;
              }
            } while (0);
            HEAP32[i41 >> 2] = i15;
            HEAP32[i40 + 12 >> 2] = i15;
            HEAP32[i6 + (i10 + 8 | 0) >> 2] = i40;
            HEAP32[i6 + (i10 + 12 | 0) >> 2] = i14;
            break;
          }
          i4 = i8;
          i3 = i35 >>> 8;
          do {
            if ((i3 | 0) == 0) {
              i42 = 0;
            } else {
              if (i35 >>> 0 > 16777215) {
                i42 = 31;
                break;
              }
              i17 = (i3 + 1048320 | 0) >>> 16 & 8;
              i9 = i3 << i17;
              i11 = (i9 + 520192 | 0) >>> 16 & 4;
              i27 = i9 << i11;
              i9 = (i27 + 245760 | 0) >>> 16 & 2;
              i16 = (14 - (i11 | i17 | i9) | 0) + (i27 << i9 >>> 15) | 0;
              i42 = i35 >>> ((i16 + 7 | 0) >>> 0) & 1 | i16 << 1;
            }
          } while (0);
          i3 = 5276008 + (i42 << 2) | 0;
          HEAP32[i6 + (i10 + 28 | 0) >> 2] = i42;
          HEAP32[i6 + (i10 + 20 | 0) >> 2] = 0;
          HEAP32[i6 + (i10 + 16 | 0) >> 2] = 0;
          i14 = HEAP32[1318927] | 0;
          i16 = 1 << i42;
          if ((i14 & i16 | 0) == 0) {
            HEAP32[1318927] = i14 | i16;
            HEAP32[i3 >> 2] = i4;
            HEAP32[i6 + (i10 + 24 | 0) >> 2] = i3;
            HEAP32[i6 + (i10 + 12 | 0) >> 2] = i4;
            HEAP32[i6 + (i10 + 8 | 0) >> 2] = i4;
            break;
          }
          if ((i42 | 0) == 31) {
            i43 = 0;
          } else {
            i43 = 25 - (i42 >>> 1) | 0;
          }
          i16 = i35 << i43;
          i14 = HEAP32[i3 >> 2] | 0;
          while (1) {
            if ((HEAP32[i14 + 4 >> 2] & -8 | 0) == (i35 | 0)) {
              break;
            }
            i44 = i14 + 16 + (i16 >>> 31 << 2) | 0;
            i3 = HEAP32[i44 >> 2] | 0;
            if ((i3 | 0) == 0) {
              i45 = 248;
              break;
            } else {
              i16 = i16 << 1;
              i14 = i3;
            }
          }
          if ((i45 | 0) == 248) {
            if (i44 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
              _abort();
              return 0;
            } else {
              HEAP32[i44 >> 2] = i4;
              HEAP32[i6 + (i10 + 24 | 0) >> 2] = i14;
              HEAP32[i6 + (i10 + 12 | 0) >> 2] = i4;
              HEAP32[i6 + (i10 + 8 | 0) >> 2] = i4;
              break;
            }
          }
          i16 = i14 + 8 | 0;
          i3 = HEAP32[i16 >> 2] | 0;
          i9 = HEAP32[1318930] | 0;
          if (i14 >>> 0 < i9 >>> 0) {
            _abort();
            return 0;
          }
          if (i3 >>> 0 < i9 >>> 0) {
            _abort();
            return 0;
          } else {
            HEAP32[i3 + 12 >> 2] = i4;
            HEAP32[i16 >> 2] = i4;
            HEAP32[i6 + (i10 + 8 | 0) >> 2] = i3;
            HEAP32[i6 + (i10 + 12 | 0) >> 2] = i14;
            HEAP32[i6 + (i10 + 24 | 0) >> 2] = 0;
            break;
          }
        }
      } while (0);
      i6 = i36 + 8 | 0;
      if ((i6 | 0) == 0) {
        i13 = i10;
        break;
      } else {
        i12 = i6;
      }
      return i12 | 0;
    }
  } while (0);
  i36 = HEAP32[1318928] | 0;
  if (i13 >>> 0 <= i36 >>> 0) {
    i44 = i36 - i13 | 0;
    i35 = HEAP32[1318931] | 0;
    if (i44 >>> 0 > 15) {
      i43 = i35;
      HEAP32[1318931] = i43 + i13 | 0;
      HEAP32[1318928] = i44;
      HEAP32[i43 + (i13 + 4 | 0) >> 2] = i44 | 1;
      HEAP32[i43 + i36 >> 2] = i44;
      HEAP32[i35 + 4 >> 2] = i13 | 3;
    } else {
      HEAP32[1318928] = 0;
      HEAP32[1318931] = 0;
      HEAP32[i35 + 4 >> 2] = i36 | 3;
      i44 = i35 + (i36 + 4 | 0) | 0;
      HEAP32[i44 >> 2] = HEAP32[i44 >> 2] | 1;
    }
    i12 = i35 + 8 | 0;
    return i12 | 0;
  }
  i35 = HEAP32[1318929] | 0;
  if (i13 >>> 0 < i35 >>> 0) {
    i44 = i35 - i13 | 0;
    HEAP32[1318929] = i44;
    i35 = HEAP32[1318932] | 0;
    i36 = i35;
    HEAP32[1318932] = i36 + i13 | 0;
    HEAP32[i36 + (i13 + 4 | 0) >> 2] = i44 | 1;
    HEAP32[i35 + 4 >> 2] = i13 | 3;
    i12 = i35 + 8 | 0;
    return i12 | 0;
  }
  do {
    if ((HEAP32[1311589] | 0) == 0) {
      if ((HEAP32[1311589] | 0) != 0) {
        break;
      }
      i35 = _sysconf(8) | 0;
      if ((i35 - 1 & i35 | 0) == 0) {
        HEAP32[1311591] = i35;
        HEAP32[1311590] = i35;
        HEAP32[1311592] = -1;
        HEAP32[1311593] = 2097152;
        HEAP32[1311594] = 0;
        HEAP32[1319036] = 0;
        HEAP32[1311589] = _time(0) & -16 ^ 1431655768;
        break;
      } else {
        _abort();
        return 0;
      }
    }
  } while (0);
  L378 : do {
    if ((HEAP32[1319036] & 4 | 0) == 0) {
      i35 = HEAP32[1318932] | 0;
      L380 : do {
        if ((i35 | 0) == 0) {
          i45 = 276;
        } else {
          i44 = i35;
          i36 = 5276148;
          while (1) {
            i46 = i36 | 0;
            i43 = HEAP32[i46 >> 2] | 0;
            if (i43 >>> 0 <= i44 >>> 0) {
              i47 = i36 + 4 | 0;
              if ((i43 + (HEAP32[i47 >> 2] | 0) | 0) >>> 0 > i44 >>> 0) {
                break;
              }
            }
            i43 = HEAP32[i36 + 8 >> 2] | 0;
            if ((i43 | 0) == 0) {
              i45 = 276;
              break L380;
            } else {
              i36 = i43;
            }
          }
          if ((i36 | 0) == 0) {
            i45 = 276;
            break;
          }
          i44 = HEAP32[1311591] | 0;
          i14 = ((i13 + 47 | 0) - (HEAP32[1318929] | 0) | 0) + i44 & -i44;
          if (i14 >>> 0 >= 2147483647) {
            i48 = 0;
            break;
          }
          i44 = _sbrk(i14 | 0) | 0;
          i4 = (i44 | 0) == ((HEAP32[i46 >> 2] | 0) + (HEAP32[i47 >> 2] | 0) | 0);
          i49 = i4 ? i44 : -1;
          i50 = i4 ? i14 : 0;
          i51 = i44;
          i52 = i14;
          i45 = 283;
          break;
        }
      } while (0);
      do {
        if ((i45 | 0) == 276) {
          i35 = _sbrk(0) | 0;
          if ((i35 | 0) == -1) {
            i48 = 0;
            break;
          }
          i10 = HEAP32[1311591] | 0;
          i14 = (i13 + 47 | 0) + i10 & -i10;
          i10 = i35;
          i44 = HEAP32[1311590] | 0;
          i4 = i44 - 1 | 0;
          if ((i4 & i10 | 0) == 0) {
            i53 = i14;
          } else {
            i53 = (i14 - i10 | 0) + (i4 + i10 & -i44) | 0;
          }
          if (i53 >>> 0 >= 2147483647) {
            i48 = 0;
            break;
          }
          i44 = _sbrk(i53 | 0) | 0;
          i10 = (i44 | 0) == (i35 | 0);
          i49 = i10 ? i35 : -1;
          i50 = i10 ? i53 : 0;
          i51 = i44;
          i52 = i53;
          i45 = 283;
          break;
        }
      } while (0);
      L397 : do {
        if ((i45 | 0) == 283) {
          i44 = -i52 | 0;
          if ((i49 | 0) != -1) {
            i54 = i50;
            i55 = i49;
            i45 = 296;
            break L378;
          }
          do {
            if ((i51 | 0) != -1 & i52 >>> 0 < 2147483647) {
              if (i52 >>> 0 >= (i13 + 48 | 0) >>> 0) {
                i56 = i52;
                break;
              }
              i10 = HEAP32[1311591] | 0;
              i35 = ((i13 + 47 | 0) - i52 | 0) + i10 & -i10;
              if (i35 >>> 0 >= 2147483647) {
                i56 = i52;
                break;
              }
              if ((_sbrk(i35 | 0) | 0) == -1) {
                _sbrk(i44 | 0) | 0;
                i48 = i50;
                break L397;
              } else {
                i56 = i35 + i52 | 0;
                break;
              }
            } else {
              i56 = i52;
            }
          } while (0);
          if ((i51 | 0) != -1) {
            i54 = i56;
            i55 = i51;
            i45 = 296;
            break L378;
          }
          HEAP32[1319036] = HEAP32[1319036] | 4;
          i57 = i50;
          i45 = 293;
          break L378;
        }
      } while (0);
      HEAP32[1319036] = HEAP32[1319036] | 4;
      i57 = i48;
      i45 = 293;
      break;
    } else {
      i57 = 0;
      i45 = 293;
    }
  } while (0);
  do {
    if ((i45 | 0) == 293) {
      i48 = HEAP32[1311591] | 0;
      i50 = (i13 + 47 | 0) + i48 & -i48;
      if (i50 >>> 0 >= 2147483647) {
        break;
      }
      i48 = _sbrk(i50 | 0) | 0;
      i50 = _sbrk(0) | 0;
      if (!((i50 | 0) != -1 & (i48 | 0) != -1 & i48 >>> 0 < i50 >>> 0)) {
        break;
      }
      i51 = i50 - i48 | 0;
      i50 = i51 >>> 0 > (i13 + 40 | 0) >>> 0;
      i56 = i50 ? i48 : -1;
      if ((i56 | 0) == -1) {
        break;
      } else {
        i54 = i50 ? i51 : i57;
        i55 = i56;
        i45 = 296;
        break;
      }
    }
  } while (0);
  do {
    if ((i45 | 0) == 296) {
      i57 = (HEAP32[1319034] | 0) + i54 | 0;
      HEAP32[1319034] = i57;
      if (i57 >>> 0 > (HEAP32[1319035] | 0) >>> 0) {
        HEAP32[1319035] = i57;
      }
      i57 = HEAP32[1318932] | 0;
      L419 : do {
        if ((i57 | 0) == 0) {
          i56 = HEAP32[1318930] | 0;
          if ((i56 | 0) == 0 | i55 >>> 0 < i56 >>> 0) {
            HEAP32[1318930] = i55;
          }
          HEAP32[1319037] = i55;
          HEAP32[1319038] = i54;
          HEAP32[1319040] = 0;
          HEAP32[1318935] = HEAP32[1311589] | 0;
          HEAP32[1318934] = -1;
          i56 = 0;
          while (1) {
            i51 = i56 << 1;
            i50 = 5275744 + (i51 << 2) | 0;
            HEAP32[5275744 + (i51 + 3 << 2) >> 2] = i50;
            HEAP32[5275744 + (i51 + 2 << 2) >> 2] = i50;
            i50 = i56 + 1 | 0;
            if ((i50 | 0) == 32) {
              break;
            } else {
              i56 = i50;
            }
          }
          i56 = i55 + 8 | 0;
          if ((i56 & 7 | 0) == 0) {
            i58 = 0;
          } else {
            i58 = -i56 & 7;
          }
          i56 = (i54 - 40 | 0) - i58 | 0;
          HEAP32[1318932] = i55 + i58 | 0;
          HEAP32[1318929] = i56;
          HEAP32[i55 + (i58 + 4 | 0) >> 2] = i56 | 1;
          HEAP32[i55 + (i54 - 36 | 0) >> 2] = 40;
          HEAP32[1318933] = HEAP32[1311593] | 0;
        } else {
          i56 = 5276148;
          while (1) {
            i59 = HEAP32[i56 >> 2] | 0;
            i60 = i56 + 4 | 0;
            i61 = HEAP32[i60 >> 2] | 0;
            if ((i55 | 0) == (i59 + i61 | 0)) {
              i45 = 308;
              break;
            }
            i50 = HEAP32[i56 + 8 >> 2] | 0;
            if ((i50 | 0) == 0) {
              break;
            } else {
              i56 = i50;
            }
          }
          do {
            if ((i45 | 0) == 308) {
              if ((HEAP32[i56 + 12 >> 2] & 8 | 0) != 0) {
                break;
              }
              i50 = i57;
              if (!(i50 >>> 0 >= i59 >>> 0 & i50 >>> 0 < i55 >>> 0)) {
                break;
              }
              HEAP32[i60 >> 2] = i61 + i54 | 0;
              i50 = HEAP32[1318932] | 0;
              i51 = (HEAP32[1318929] | 0) + i54 | 0;
              i48 = i50;
              i52 = i50 + 8 | 0;
              if ((i52 & 7 | 0) == 0) {
                i62 = 0;
              } else {
                i62 = -i52 & 7;
              }
              i52 = i51 - i62 | 0;
              HEAP32[1318932] = i48 + i62 | 0;
              HEAP32[1318929] = i52;
              HEAP32[i48 + (i62 + 4 | 0) >> 2] = i52 | 1;
              HEAP32[i48 + (i51 + 4 | 0) >> 2] = 40;
              HEAP32[1318933] = HEAP32[1311593] | 0;
              break L419;
            }
          } while (0);
          if (i55 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
            HEAP32[1318930] = i55;
          }
          i56 = i55 + i54 | 0;
          i51 = 5276148;
          while (1) {
            i63 = i51 | 0;
            if ((HEAP32[i63 >> 2] | 0) == (i56 | 0)) {
              i45 = 318;
              break;
            }
            i48 = HEAP32[i51 + 8 >> 2] | 0;
            if ((i48 | 0) == 0) {
              break;
            } else {
              i51 = i48;
            }
          }
          do {
            if ((i45 | 0) == 318) {
              if ((HEAP32[i51 + 12 >> 2] & 8 | 0) != 0) {
                break;
              }
              HEAP32[i63 >> 2] = i55;
              i56 = i51 + 4 | 0;
              HEAP32[i56 >> 2] = (HEAP32[i56 >> 2] | 0) + i54 | 0;
              i56 = i55 + 8 | 0;
              if ((i56 & 7 | 0) == 0) {
                i64 = 0;
              } else {
                i64 = -i56 & 7;
              }
              i56 = i55 + (i54 + 8 | 0) | 0;
              if ((i56 & 7 | 0) == 0) {
                i65 = 0;
              } else {
                i65 = -i56 & 7;
              }
              i56 = i55 + (i65 + i54 | 0) | 0;
              i48 = i56;
              i52 = i64 + i13 | 0;
              i50 = i55 + i52 | 0;
              i49 = i50;
              i53 = (i56 - (i55 + i64 | 0) | 0) - i13 | 0;
              HEAP32[i55 + (i64 + 4 | 0) >> 2] = i13 | 3;
              do {
                if ((i48 | 0) == (HEAP32[1318932] | 0)) {
                  i47 = (HEAP32[1318929] | 0) + i53 | 0;
                  HEAP32[1318929] = i47;
                  HEAP32[1318932] = i49;
                  HEAP32[i55 + (i52 + 4 | 0) >> 2] = i47 | 1;
                } else {
                  if ((i48 | 0) == (HEAP32[1318931] | 0)) {
                    i47 = (HEAP32[1318928] | 0) + i53 | 0;
                    HEAP32[1318928] = i47;
                    HEAP32[1318931] = i49;
                    HEAP32[i55 + (i52 + 4 | 0) >> 2] = i47 | 1;
                    HEAP32[i55 + (i47 + i52 | 0) >> 2] = i47;
                    break;
                  }
                  i47 = i54 + 4 | 0;
                  i46 = HEAP32[i55 + (i47 + i65 | 0) >> 2] | 0;
                  if ((i46 & 3 | 0) == 1) {
                    i44 = i46 & -8;
                    i36 = i46 >>> 3;
                    L464 : do {
                      if (i46 >>> 0 < 256) {
                        i35 = HEAP32[i55 + ((i65 | 8) + i54 | 0) >> 2] | 0;
                        i10 = HEAP32[i55 + ((i54 + 12 | 0) + i65 | 0) >> 2] | 0;
                        if ((i35 | 0) == (i10 | 0)) {
                          HEAP32[1318926] = HEAP32[1318926] & (1 << i36 ^ -1);
                          break;
                        }
                        i4 = 5275744 + (i36 << 1 << 2) | 0;
                        do {
                          if ((i35 | 0) != (i4 | 0)) {
                            if (i35 >>> 0 >= (HEAP32[1318930] | 0) >>> 0) {
                              break;
                            }
                            _abort();
                            return 0;
                          }
                        } while (0);
                        do {
                          if ((i10 | 0) != (i4 | 0)) {
                            if (i10 >>> 0 >= (HEAP32[1318930] | 0) >>> 0) {
                              break;
                            }
                            _abort();
                            return 0;
                          }
                        } while (0);
                        HEAP32[i35 + 12 >> 2] = i10;
                        HEAP32[i10 + 8 >> 2] = i35;
                      } else {
                        i4 = i56;
                        i14 = HEAP32[i55 + ((i65 | 24) + i54 | 0) >> 2] | 0;
                        i43 = HEAP32[i55 + ((i54 + 12 | 0) + i65 | 0) >> 2] | 0;
                        L478 : do {
                          if ((i43 | 0) == (i4 | 0)) {
                            i42 = i65 | 16;
                            i40 = i55 + (i47 + i42 | 0) | 0;
                            i41 = HEAP32[i40 >> 2] | 0;
                            do {
                              if ((i41 | 0) == 0) {
                                i37 = i55 + (i42 + i54 | 0) | 0;
                                i38 = HEAP32[i37 >> 2] | 0;
                                if ((i38 | 0) == 0) {
                                  i66 = 0;
                                  break L478;
                                } else {
                                  i67 = i38;
                                  i68 = i37;
                                  break;
                                }
                              } else {
                                i67 = i41;
                                i68 = i40;
                              }
                            } while (0);
                            while (1) {
                              i40 = i67 + 20 | 0;
                              i41 = HEAP32[i40 >> 2] | 0;
                              if ((i41 | 0) != 0) {
                                i67 = i41;
                                i68 = i40;
                                continue;
                              }
                              i40 = i67 + 16 | 0;
                              i41 = HEAP32[i40 >> 2] | 0;
                              if ((i41 | 0) == 0) {
                                break;
                              } else {
                                i67 = i41;
                                i68 = i40;
                              }
                            }
                            if (i68 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
                              _abort();
                              return 0;
                            } else {
                              HEAP32[i68 >> 2] = 0;
                              i66 = i67;
                              break;
                            }
                          } else {
                            i40 = HEAP32[i55 + ((i65 | 8) + i54 | 0) >> 2] | 0;
                            if (i40 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
                              _abort();
                              return 0;
                            } else {
                              HEAP32[i40 + 12 >> 2] = i43;
                              HEAP32[i43 + 8 >> 2] = i40;
                              i66 = i43;
                              break;
                            }
                          }
                        } while (0);
                        if ((i14 | 0) == 0) {
                          break;
                        }
                        i43 = i55 + ((i54 + 28 | 0) + i65 | 0) | 0;
                        i35 = 5276008 + (HEAP32[i43 >> 2] << 2) | 0;
                        do {
                          if ((i4 | 0) == (HEAP32[i35 >> 2] | 0)) {
                            HEAP32[i35 >> 2] = i66;
                            if ((i66 | 0) != 0) {
                              break;
                            }
                            HEAP32[1318927] = HEAP32[1318927] & (1 << HEAP32[i43 >> 2] ^ -1);
                            break L464;
                          } else {
                            if (i14 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
                              _abort();
                              return 0;
                            }
                            i10 = i14 + 16 | 0;
                            if ((HEAP32[i10 >> 2] | 0) == (i4 | 0)) {
                              HEAP32[i10 >> 2] = i66;
                            } else {
                              HEAP32[i14 + 20 >> 2] = i66;
                            }
                            if ((i66 | 0) == 0) {
                              break L464;
                            }
                          }
                        } while (0);
                        if (i66 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
                          _abort();
                          return 0;
                        }
                        HEAP32[i66 + 24 >> 2] = i14;
                        i4 = i65 | 16;
                        i43 = HEAP32[i55 + (i4 + i54 | 0) >> 2] | 0;
                        do {
                          if ((i43 | 0) != 0) {
                            if (i43 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
                              _abort();
                              return 0;
                            } else {
                              HEAP32[i66 + 16 >> 2] = i43;
                              HEAP32[i43 + 24 >> 2] = i66;
                              break;
                            }
                          }
                        } while (0);
                        i43 = HEAP32[i55 + (i47 + i4 | 0) >> 2] | 0;
                        if ((i43 | 0) == 0) {
                          break;
                        }
                        if (i43 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
                          _abort();
                          return 0;
                        } else {
                          HEAP32[i66 + 20 >> 2] = i43;
                          HEAP32[i43 + 24 >> 2] = i66;
                          break;
                        }
                      }
                    } while (0);
                    i69 = i55 + ((i44 | i65) + i54 | 0) | 0;
                    i70 = i44 + i53 | 0;
                  } else {
                    i69 = i48;
                    i70 = i53;
                  }
                  i47 = i69 + 4 | 0;
                  HEAP32[i47 >> 2] = HEAP32[i47 >> 2] & -2;
                  HEAP32[i55 + (i52 + 4 | 0) >> 2] = i70 | 1;
                  HEAP32[i55 + (i70 + i52 | 0) >> 2] = i70;
                  i47 = i70 >>> 3;
                  if (i70 >>> 0 < 256) {
                    i36 = i47 << 1;
                    i46 = 5275744 + (i36 << 2) | 0;
                    i43 = HEAP32[1318926] | 0;
                    i14 = 1 << i47;
                    do {
                      if ((i43 & i14 | 0) == 0) {
                        HEAP32[1318926] = i43 | i14;
                        i71 = i46;
                        i72 = 5275744 + (i36 + 2 << 2) | 0;
                      } else {
                        i47 = 5275744 + (i36 + 2 << 2) | 0;
                        i35 = HEAP32[i47 >> 2] | 0;
                        if (i35 >>> 0 >= (HEAP32[1318930] | 0) >>> 0) {
                          i71 = i35;
                          i72 = i47;
                          break;
                        }
                        _abort();
                        return 0;
                      }
                    } while (0);
                    HEAP32[i72 >> 2] = i49;
                    HEAP32[i71 + 12 >> 2] = i49;
                    HEAP32[i55 + (i52 + 8 | 0) >> 2] = i71;
                    HEAP32[i55 + (i52 + 12 | 0) >> 2] = i46;
                    break;
                  }
                  i36 = i50;
                  i14 = i70 >>> 8;
                  do {
                    if ((i14 | 0) == 0) {
                      i73 = 0;
                    } else {
                      if (i70 >>> 0 > 16777215) {
                        i73 = 31;
                        break;
                      }
                      i43 = (i14 + 1048320 | 0) >>> 16 & 8;
                      i44 = i14 << i43;
                      i47 = (i44 + 520192 | 0) >>> 16 & 4;
                      i35 = i44 << i47;
                      i44 = (i35 + 245760 | 0) >>> 16 & 2;
                      i10 = (14 - (i47 | i43 | i44) | 0) + (i35 << i44 >>> 15) | 0;
                      i73 = i70 >>> ((i10 + 7 | 0) >>> 0) & 1 | i10 << 1;
                    }
                  } while (0);
                  i14 = 5276008 + (i73 << 2) | 0;
                  HEAP32[i55 + (i52 + 28 | 0) >> 2] = i73;
                  HEAP32[i55 + (i52 + 20 | 0) >> 2] = 0;
                  HEAP32[i55 + (i52 + 16 | 0) >> 2] = 0;
                  i46 = HEAP32[1318927] | 0;
                  i10 = 1 << i73;
                  if ((i46 & i10 | 0) == 0) {
                    HEAP32[1318927] = i46 | i10;
                    HEAP32[i14 >> 2] = i36;
                    HEAP32[i55 + (i52 + 24 | 0) >> 2] = i14;
                    HEAP32[i55 + (i52 + 12 | 0) >> 2] = i36;
                    HEAP32[i55 + (i52 + 8 | 0) >> 2] = i36;
                    break;
                  }
                  if ((i73 | 0) == 31) {
                    i74 = 0;
                  } else {
                    i74 = 25 - (i73 >>> 1) | 0;
                  }
                  i10 = i70 << i74;
                  i46 = HEAP32[i14 >> 2] | 0;
                  while (1) {
                    if ((HEAP32[i46 + 4 >> 2] & -8 | 0) == (i70 | 0)) {
                      break;
                    }
                    i75 = i46 + 16 + (i10 >>> 31 << 2) | 0;
                    i14 = HEAP32[i75 >> 2] | 0;
                    if ((i14 | 0) == 0) {
                      i45 = 385;
                      break;
                    } else {
                      i10 = i10 << 1;
                      i46 = i14;
                    }
                  }
                  if ((i45 | 0) == 385) {
                    if (i75 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
                      _abort();
                      return 0;
                    } else {
                      HEAP32[i75 >> 2] = i36;
                      HEAP32[i55 + (i52 + 24 | 0) >> 2] = i46;
                      HEAP32[i55 + (i52 + 12 | 0) >> 2] = i36;
                      HEAP32[i55 + (i52 + 8 | 0) >> 2] = i36;
                      break;
                    }
                  }
                  i10 = i46 + 8 | 0;
                  i14 = HEAP32[i10 >> 2] | 0;
                  i44 = HEAP32[1318930] | 0;
                  if (i46 >>> 0 < i44 >>> 0) {
                    _abort();
                    return 0;
                  }
                  if (i14 >>> 0 < i44 >>> 0) {
                    _abort();
                    return 0;
                  } else {
                    HEAP32[i14 + 12 >> 2] = i36;
                    HEAP32[i10 >> 2] = i36;
                    HEAP32[i55 + (i52 + 8 | 0) >> 2] = i14;
                    HEAP32[i55 + (i52 + 12 | 0) >> 2] = i46;
                    HEAP32[i55 + (i52 + 24 | 0) >> 2] = 0;
                    break;
                  }
                }
              } while (0);
              i12 = i55 + (i64 | 8) | 0;
              return i12 | 0;
            }
          } while (0);
          i51 = i57;
          i52 = 5276148;
          while (1) {
            i76 = HEAP32[i52 >> 2] | 0;
            if (i76 >>> 0 <= i51 >>> 0) {
              i77 = HEAP32[i52 + 4 >> 2] | 0;
              i78 = i76 + i77 | 0;
              if (i78 >>> 0 > i51 >>> 0) {
                break;
              }
            }
            i52 = HEAP32[i52 + 8 >> 2] | 0;
          }
          i52 = i76 + (i77 - 39 | 0) | 0;
          if ((i52 & 7 | 0) == 0) {
            i79 = 0;
          } else {
            i79 = -i52 & 7;
          }
          i52 = i76 + ((i77 - 47 | 0) + i79 | 0) | 0;
          i50 = i52 >>> 0 < (i57 + 16 | 0) >>> 0 ? i51 : i52;
          i52 = i50 + 8 | 0;
          i49 = i55 + 8 | 0;
          if ((i49 & 7 | 0) == 0) {
            i80 = 0;
          } else {
            i80 = -i49 & 7;
          }
          i49 = (i54 - 40 | 0) - i80 | 0;
          HEAP32[1318932] = i55 + i80 | 0;
          HEAP32[1318929] = i49;
          HEAP32[i55 + (i80 + 4 | 0) >> 2] = i49 | 1;
          HEAP32[i55 + (i54 - 36 | 0) >> 2] = 40;
          HEAP32[1318933] = HEAP32[1311593] | 0;
          HEAP32[i50 + 4 >> 2] = 27;
          HEAP32[i52 >> 2] = HEAP32[1319037] | 0;
          HEAP32[i52 + 4 >> 2] = HEAP32[5276152 >> 2] | 0;
          HEAP32[i52 + 8 >> 2] = HEAP32[5276156 >> 2] | 0;
          HEAP32[i52 + 12 >> 2] = HEAP32[5276160 >> 2] | 0;
          HEAP32[1319037] = i55;
          HEAP32[1319038] = i54;
          HEAP32[1319040] = 0;
          HEAP32[1319039] = i52;
          i52 = i50 + 28 | 0;
          HEAP32[i52 >> 2] = 7;
          L570 : do {
            if ((i50 + 32 | 0) >>> 0 < i78 >>> 0) {
              i49 = i52;
              while (1) {
                i53 = i49 + 4 | 0;
                HEAP32[i53 >> 2] = 7;
                if ((i49 + 8 | 0) >>> 0 < i78 >>> 0) {
                  i49 = i53;
                } else {
                  break L570;
                }
              }
            }
          } while (0);
          if ((i50 | 0) == (i51 | 0)) {
            break;
          }
          i52 = i50 - i57 | 0;
          i49 = i51 + (i52 + 4 | 0) | 0;
          HEAP32[i49 >> 2] = HEAP32[i49 >> 2] & -2;
          HEAP32[i57 + 4 >> 2] = i52 | 1;
          HEAP32[i51 + i52 >> 2] = i52;
          i49 = i52 >>> 3;
          if (i52 >>> 0 < 256) {
            i53 = i49 << 1;
            i48 = 5275744 + (i53 << 2) | 0;
            i56 = HEAP32[1318926] | 0;
            i14 = 1 << i49;
            do {
              if ((i56 & i14 | 0) == 0) {
                HEAP32[1318926] = i56 | i14;
                i81 = i48;
                i82 = 5275744 + (i53 + 2 << 2) | 0;
              } else {
                i49 = 5275744 + (i53 + 2 << 2) | 0;
                i10 = HEAP32[i49 >> 2] | 0;
                if (i10 >>> 0 >= (HEAP32[1318930] | 0) >>> 0) {
                  i81 = i10;
                  i82 = i49;
                  break;
                }
                _abort();
                return 0;
              }
            } while (0);
            HEAP32[i82 >> 2] = i57;
            HEAP32[i81 + 12 >> 2] = i57;
            HEAP32[i57 + 8 >> 2] = i81;
            HEAP32[i57 + 12 >> 2] = i48;
            break;
          }
          i53 = i57;
          i14 = i52 >>> 8;
          do {
            if ((i14 | 0) == 0) {
              i83 = 0;
            } else {
              if (i52 >>> 0 > 16777215) {
                i83 = 31;
                break;
              }
              i56 = (i14 + 1048320 | 0) >>> 16 & 8;
              i51 = i14 << i56;
              i50 = (i51 + 520192 | 0) >>> 16 & 4;
              i49 = i51 << i50;
              i51 = (i49 + 245760 | 0) >>> 16 & 2;
              i10 = (14 - (i50 | i56 | i51) | 0) + (i49 << i51 >>> 15) | 0;
              i83 = i52 >>> ((i10 + 7 | 0) >>> 0) & 1 | i10 << 1;
            }
          } while (0);
          i14 = 5276008 + (i83 << 2) | 0;
          HEAP32[i57 + 28 >> 2] = i83;
          HEAP32[i57 + 20 >> 2] = 0;
          HEAP32[i57 + 16 >> 2] = 0;
          i48 = HEAP32[1318927] | 0;
          i10 = 1 << i83;
          if ((i48 & i10 | 0) == 0) {
            HEAP32[1318927] = i48 | i10;
            HEAP32[i14 >> 2] = i53;
            HEAP32[i57 + 24 >> 2] = i14;
            HEAP32[i57 + 12 >> 2] = i57;
            HEAP32[i57 + 8 >> 2] = i57;
            break;
          }
          if ((i83 | 0) == 31) {
            i84 = 0;
          } else {
            i84 = 25 - (i83 >>> 1) | 0;
          }
          i10 = i52 << i84;
          i48 = HEAP32[i14 >> 2] | 0;
          while (1) {
            if ((HEAP32[i48 + 4 >> 2] & -8 | 0) == (i52 | 0)) {
              break;
            }
            i85 = i48 + 16 + (i10 >>> 31 << 2) | 0;
            i14 = HEAP32[i85 >> 2] | 0;
            if ((i14 | 0) == 0) {
              i45 = 420;
              break;
            } else {
              i10 = i10 << 1;
              i48 = i14;
            }
          }
          if ((i45 | 0) == 420) {
            if (i85 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
              _abort();
              return 0;
            } else {
              HEAP32[i85 >> 2] = i53;
              HEAP32[i57 + 24 >> 2] = i48;
              HEAP32[i57 + 12 >> 2] = i57;
              HEAP32[i57 + 8 >> 2] = i57;
              break;
            }
          }
          i10 = i48 + 8 | 0;
          i52 = HEAP32[i10 >> 2] | 0;
          i14 = HEAP32[1318930] | 0;
          if (i48 >>> 0 < i14 >>> 0) {
            _abort();
            return 0;
          }
          if (i52 >>> 0 < i14 >>> 0) {
            _abort();
            return 0;
          } else {
            HEAP32[i52 + 12 >> 2] = i53;
            HEAP32[i10 >> 2] = i53;
            HEAP32[i57 + 8 >> 2] = i52;
            HEAP32[i57 + 12 >> 2] = i48;
            HEAP32[i57 + 24 >> 2] = 0;
            break;
          }
        }
      } while (0);
      i57 = HEAP32[1318929] | 0;
      if (i57 >>> 0 <= i13 >>> 0) {
        break;
      }
      i52 = i57 - i13 | 0;
      HEAP32[1318929] = i52;
      i57 = HEAP32[1318932] | 0;
      i10 = i57;
      HEAP32[1318932] = i10 + i13 | 0;
      HEAP32[i10 + (i13 + 4 | 0) >> 2] = i52 | 1;
      HEAP32[i57 + 4 >> 2] = i13 | 3;
      i12 = i57 + 8 | 0;
      return i12 | 0;
    }
  } while (0);
  HEAP32[___errno_location() >> 2] = 12;
  i12 = 0;
  return i12 | 0;
}
function _free(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0;
  if ((i1 | 0) == 0) {
    return;
  }
  i2 = i1 - 8 | 0;
  i3 = i2;
  i4 = HEAP32[1318930] | 0;
  if (i2 >>> 0 < i4 >>> 0) {
    _abort();
  }
  i5 = HEAP32[i1 - 4 >> 2] | 0;
  i6 = i5 & 3;
  if ((i6 | 0) == 1) {
    _abort();
  }
  i7 = i5 & -8;
  i8 = i1 + (i7 - 8 | 0) | 0;
  i9 = i8;
  L623 : do {
    if ((i5 & 1 | 0) == 0) {
      i10 = HEAP32[i2 >> 2] | 0;
      if ((i6 | 0) == 0) {
        return;
      }
      i11 = -8 - i10 | 0;
      i12 = i1 + i11 | 0;
      i13 = i12;
      i14 = i10 + i7 | 0;
      if (i12 >>> 0 < i4 >>> 0) {
        _abort();
      }
      if ((i13 | 0) == (HEAP32[1318931] | 0)) {
        i15 = i1 + (i7 - 4 | 0) | 0;
        if ((HEAP32[i15 >> 2] & 3 | 0) != 3) {
          i16 = i13;
          i17 = i14;
          break;
        }
        HEAP32[1318928] = i14;
        HEAP32[i15 >> 2] = HEAP32[i15 >> 2] & -2;
        HEAP32[i1 + (i11 + 4 | 0) >> 2] = i14 | 1;
        HEAP32[i8 >> 2] = i14;
        return;
      }
      i15 = i10 >>> 3;
      if (i10 >>> 0 < 256) {
        i10 = HEAP32[i1 + (i11 + 8 | 0) >> 2] | 0;
        i18 = HEAP32[i1 + (i11 + 12 | 0) >> 2] | 0;
        if ((i10 | 0) == (i18 | 0)) {
          HEAP32[1318926] = HEAP32[1318926] & (1 << i15 ^ -1);
          i16 = i13;
          i17 = i14;
          break;
        }
        i19 = 5275744 + (i15 << 1 << 2) | 0;
        if ((i10 | 0) != (i19 | 0) & i10 >>> 0 < i4 >>> 0) {
          _abort();
        }
        if ((i18 | 0) == (i19 | 0) | i18 >>> 0 >= i4 >>> 0) {
          HEAP32[i10 + 12 >> 2] = i18;
          HEAP32[i18 + 8 >> 2] = i10;
          i16 = i13;
          i17 = i14;
          break;
        } else {
          _abort();
        }
      }
      i10 = i12;
      i12 = HEAP32[i1 + (i11 + 24 | 0) >> 2] | 0;
      i18 = HEAP32[i1 + (i11 + 12 | 0) >> 2] | 0;
      L648 : do {
        if ((i18 | 0) == (i10 | 0)) {
          i19 = i1 + (i11 + 20 | 0) | 0;
          i15 = HEAP32[i19 >> 2] | 0;
          do {
            if ((i15 | 0) == 0) {
              i20 = i1 + (i11 + 16 | 0) | 0;
              i21 = HEAP32[i20 >> 2] | 0;
              if ((i21 | 0) == 0) {
                i22 = 0;
                break L648;
              } else {
                i23 = i21;
                i24 = i20;
                break;
              }
            } else {
              i23 = i15;
              i24 = i19;
            }
          } while (0);
          while (1) {
            i19 = i23 + 20 | 0;
            i15 = HEAP32[i19 >> 2] | 0;
            if ((i15 | 0) != 0) {
              i23 = i15;
              i24 = i19;
              continue;
            }
            i19 = i23 + 16 | 0;
            i15 = HEAP32[i19 >> 2] | 0;
            if ((i15 | 0) == 0) {
              break;
            } else {
              i23 = i15;
              i24 = i19;
            }
          }
          if (i24 >>> 0 < i4 >>> 0) {
            _abort();
          } else {
            HEAP32[i24 >> 2] = 0;
            i22 = i23;
            break;
          }
        } else {
          i19 = HEAP32[i1 + (i11 + 8 | 0) >> 2] | 0;
          if (i19 >>> 0 < i4 >>> 0) {
            _abort();
          } else {
            HEAP32[i19 + 12 >> 2] = i18;
            HEAP32[i18 + 8 >> 2] = i19;
            i22 = i18;
            break;
          }
        }
      } while (0);
      if ((i12 | 0) == 0) {
        i16 = i13;
        i17 = i14;
        break;
      }
      i18 = i1 + (i11 + 28 | 0) | 0;
      i19 = 5276008 + (HEAP32[i18 >> 2] << 2) | 0;
      do {
        if ((i10 | 0) == (HEAP32[i19 >> 2] | 0)) {
          HEAP32[i19 >> 2] = i22;
          if ((i22 | 0) != 0) {
            break;
          }
          HEAP32[1318927] = HEAP32[1318927] & (1 << HEAP32[i18 >> 2] ^ -1);
          i16 = i13;
          i17 = i14;
          break L623;
        } else {
          if (i12 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
            _abort();
          }
          i15 = i12 + 16 | 0;
          if ((HEAP32[i15 >> 2] | 0) == (i10 | 0)) {
            HEAP32[i15 >> 2] = i22;
          } else {
            HEAP32[i12 + 20 >> 2] = i22;
          }
          if ((i22 | 0) == 0) {
            i16 = i13;
            i17 = i14;
            break L623;
          }
        }
      } while (0);
      if (i22 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
        _abort();
      }
      HEAP32[i22 + 24 >> 2] = i12;
      i10 = HEAP32[i1 + (i11 + 16 | 0) >> 2] | 0;
      do {
        if ((i10 | 0) != 0) {
          if (i10 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
            _abort();
          } else {
            HEAP32[i22 + 16 >> 2] = i10;
            HEAP32[i10 + 24 >> 2] = i22;
            break;
          }
        }
      } while (0);
      i10 = HEAP32[i1 + (i11 + 20 | 0) >> 2] | 0;
      if ((i10 | 0) == 0) {
        i16 = i13;
        i17 = i14;
        break;
      }
      if (i10 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
        _abort();
      } else {
        HEAP32[i22 + 20 >> 2] = i10;
        HEAP32[i10 + 24 >> 2] = i22;
        i16 = i13;
        i17 = i14;
        break;
      }
    } else {
      i16 = i3;
      i17 = i7;
    }
  } while (0);
  i3 = i16;
  if (i3 >>> 0 >= i8 >>> 0) {
    _abort();
  }
  i22 = i1 + (i7 - 4 | 0) | 0;
  i4 = HEAP32[i22 >> 2] | 0;
  if ((i4 & 1 | 0) == 0) {
    _abort();
  }
  do {
    if ((i4 & 2 | 0) == 0) {
      if ((i9 | 0) == (HEAP32[1318932] | 0)) {
        i23 = (HEAP32[1318929] | 0) + i17 | 0;
        HEAP32[1318929] = i23;
        HEAP32[1318932] = i16;
        HEAP32[i16 + 4 >> 2] = i23 | 1;
        if ((i16 | 0) == (HEAP32[1318931] | 0)) {
          HEAP32[1318931] = 0;
          HEAP32[1318928] = 0;
        }
        if (i23 >>> 0 <= (HEAP32[1318933] | 0) >>> 0) {
          return;
        }
        do {
          if ((HEAP32[1311589] | 0) == 0) {
            if ((HEAP32[1311589] | 0) != 0) {
              break;
            }
            i23 = _sysconf(8) | 0;
            if ((i23 - 1 & i23 | 0) == 0) {
              HEAP32[1311591] = i23;
              HEAP32[1311590] = i23;
              HEAP32[1311592] = -1;
              HEAP32[1311593] = 2097152;
              HEAP32[1311594] = 0;
              HEAP32[1319036] = 0;
              HEAP32[1311589] = _time(0) & -16 ^ 1431655768;
              break;
            } else {
              _abort();
            }
          }
        } while (0);
        i14 = HEAP32[1318932] | 0;
        if ((i14 | 0) == 0) {
          return;
        }
        i13 = HEAP32[1318929] | 0;
        do {
          if (i13 >>> 0 > 40) {
            i11 = HEAP32[1311591] | 0;
            i23 = Math_imul(((((i13 - 41 | 0) + i11 | 0) >>> 0) / (i11 >>> 0) >>> 0) - 1 | 0, i11);
            i24 = i14;
            i6 = 5276148;
            while (1) {
              i2 = HEAP32[i6 >> 2] | 0;
              if (i2 >>> 0 <= i24 >>> 0) {
                if ((i2 + (HEAP32[i6 + 4 >> 2] | 0) | 0) >>> 0 > i24 >>> 0) {
                  i25 = i6;
                  break;
                }
              }
              i2 = HEAP32[i6 + 8 >> 2] | 0;
              if ((i2 | 0) == 0) {
                i25 = 0;
                break;
              } else {
                i6 = i2;
              }
            }
            if ((HEAP32[i25 + 12 >> 2] & 8 | 0) != 0) {
              break;
            }
            i6 = _sbrk(0) | 0;
            i24 = i25 + 4 | 0;
            if ((i6 | 0) != ((HEAP32[i25 >> 2] | 0) + (HEAP32[i24 >> 2] | 0) | 0)) {
              break;
            }
            i2 = _sbrk(-(i23 >>> 0 > 2147483646 ? -2147483648 - i11 | 0 : i23) | 0) | 0;
            i5 = _sbrk(0) | 0;
            if (!((i2 | 0) != -1 & i5 >>> 0 < i6 >>> 0)) {
              break;
            }
            i2 = i6 - i5 | 0;
            if ((i6 | 0) == (i5 | 0)) {
              break;
            }
            HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) - i2 | 0;
            HEAP32[1319034] = (HEAP32[1319034] | 0) - i2 | 0;
            i24 = HEAP32[1318932] | 0;
            i5 = (HEAP32[1318929] | 0) - i2 | 0;
            i2 = i24;
            i6 = i24 + 8 | 0;
            if ((i6 & 7 | 0) == 0) {
              i26 = 0;
            } else {
              i26 = -i6 & 7;
            }
            i6 = i5 - i26 | 0;
            HEAP32[1318932] = i2 + i26 | 0;
            HEAP32[1318929] = i6;
            HEAP32[i2 + (i26 + 4 | 0) >> 2] = i6 | 1;
            HEAP32[i2 + (i5 + 4 | 0) >> 2] = 40;
            HEAP32[1318933] = HEAP32[1311593] | 0;
            return;
          }
        } while (0);
        if ((HEAP32[1318929] | 0) >>> 0 <= (HEAP32[1318933] | 0) >>> 0) {
          return;
        }
        HEAP32[1318933] = -1;
        return;
      }
      if ((i9 | 0) == (HEAP32[1318931] | 0)) {
        i14 = (HEAP32[1318928] | 0) + i17 | 0;
        HEAP32[1318928] = i14;
        HEAP32[1318931] = i16;
        HEAP32[i16 + 4 >> 2] = i14 | 1;
        HEAP32[i3 + i14 >> 2] = i14;
        return;
      }
      i14 = (i4 & -8) + i17 | 0;
      i13 = i4 >>> 3;
      L743 : do {
        if (i4 >>> 0 < 256) {
          i5 = HEAP32[i1 + i7 >> 2] | 0;
          i2 = HEAP32[i1 + (i7 | 4) >> 2] | 0;
          if ((i5 | 0) == (i2 | 0)) {
            HEAP32[1318926] = HEAP32[1318926] & (1 << i13 ^ -1);
            break;
          }
          i6 = 5275744 + (i13 << 1 << 2) | 0;
          do {
            if ((i5 | 0) != (i6 | 0)) {
              if (i5 >>> 0 >= (HEAP32[1318930] | 0) >>> 0) {
                break;
              }
              _abort();
            }
          } while (0);
          do {
            if ((i2 | 0) != (i6 | 0)) {
              if (i2 >>> 0 >= (HEAP32[1318930] | 0) >>> 0) {
                break;
              }
              _abort();
            }
          } while (0);
          HEAP32[i5 + 12 >> 2] = i2;
          HEAP32[i2 + 8 >> 2] = i5;
        } else {
          i6 = i8;
          i23 = HEAP32[i1 + (i7 + 16 | 0) >> 2] | 0;
          i11 = HEAP32[i1 + (i7 | 4) >> 2] | 0;
          L757 : do {
            if ((i11 | 0) == (i6 | 0)) {
              i24 = i1 + (i7 + 12 | 0) | 0;
              i10 = HEAP32[i24 >> 2] | 0;
              do {
                if ((i10 | 0) == 0) {
                  i12 = i1 + (i7 + 8 | 0) | 0;
                  i18 = HEAP32[i12 >> 2] | 0;
                  if ((i18 | 0) == 0) {
                    i27 = 0;
                    break L757;
                  } else {
                    i28 = i18;
                    i29 = i12;
                    break;
                  }
                } else {
                  i28 = i10;
                  i29 = i24;
                }
              } while (0);
              while (1) {
                i24 = i28 + 20 | 0;
                i10 = HEAP32[i24 >> 2] | 0;
                if ((i10 | 0) != 0) {
                  i28 = i10;
                  i29 = i24;
                  continue;
                }
                i24 = i28 + 16 | 0;
                i10 = HEAP32[i24 >> 2] | 0;
                if ((i10 | 0) == 0) {
                  break;
                } else {
                  i28 = i10;
                  i29 = i24;
                }
              }
              if (i29 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
                _abort();
              } else {
                HEAP32[i29 >> 2] = 0;
                i27 = i28;
                break;
              }
            } else {
              i24 = HEAP32[i1 + i7 >> 2] | 0;
              if (i24 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
                _abort();
              } else {
                HEAP32[i24 + 12 >> 2] = i11;
                HEAP32[i11 + 8 >> 2] = i24;
                i27 = i11;
                break;
              }
            }
          } while (0);
          if ((i23 | 0) == 0) {
            break;
          }
          i11 = i1 + (i7 + 20 | 0) | 0;
          i5 = 5276008 + (HEAP32[i11 >> 2] << 2) | 0;
          do {
            if ((i6 | 0) == (HEAP32[i5 >> 2] | 0)) {
              HEAP32[i5 >> 2] = i27;
              if ((i27 | 0) != 0) {
                break;
              }
              HEAP32[1318927] = HEAP32[1318927] & (1 << HEAP32[i11 >> 2] ^ -1);
              break L743;
            } else {
              if (i23 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
                _abort();
              }
              i2 = i23 + 16 | 0;
              if ((HEAP32[i2 >> 2] | 0) == (i6 | 0)) {
                HEAP32[i2 >> 2] = i27;
              } else {
                HEAP32[i23 + 20 >> 2] = i27;
              }
              if ((i27 | 0) == 0) {
                break L743;
              }
            }
          } while (0);
          if (i27 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
            _abort();
          }
          HEAP32[i27 + 24 >> 2] = i23;
          i6 = HEAP32[i1 + (i7 + 8 | 0) >> 2] | 0;
          do {
            if ((i6 | 0) != 0) {
              if (i6 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
                _abort();
              } else {
                HEAP32[i27 + 16 >> 2] = i6;
                HEAP32[i6 + 24 >> 2] = i27;
                break;
              }
            }
          } while (0);
          i6 = HEAP32[i1 + (i7 + 12 | 0) >> 2] | 0;
          if ((i6 | 0) == 0) {
            break;
          }
          if (i6 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
            _abort();
          } else {
            HEAP32[i27 + 20 >> 2] = i6;
            HEAP32[i6 + 24 >> 2] = i27;
            break;
          }
        }
      } while (0);
      HEAP32[i16 + 4 >> 2] = i14 | 1;
      HEAP32[i3 + i14 >> 2] = i14;
      if ((i16 | 0) != (HEAP32[1318931] | 0)) {
        i30 = i14;
        break;
      }
      HEAP32[1318928] = i14;
      return;
    } else {
      HEAP32[i22 >> 2] = i4 & -2;
      HEAP32[i16 + 4 >> 2] = i17 | 1;
      HEAP32[i3 + i17 >> 2] = i17;
      i30 = i17;
    }
  } while (0);
  i17 = i30 >>> 3;
  if (i30 >>> 0 < 256) {
    i3 = i17 << 1;
    i4 = 5275744 + (i3 << 2) | 0;
    i22 = HEAP32[1318926] | 0;
    i27 = 1 << i17;
    do {
      if ((i22 & i27 | 0) == 0) {
        HEAP32[1318926] = i22 | i27;
        i31 = i4;
        i32 = 5275744 + (i3 + 2 << 2) | 0;
      } else {
        i17 = 5275744 + (i3 + 2 << 2) | 0;
        i7 = HEAP32[i17 >> 2] | 0;
        if (i7 >>> 0 >= (HEAP32[1318930] | 0) >>> 0) {
          i31 = i7;
          i32 = i17;
          break;
        }
        _abort();
      }
    } while (0);
    HEAP32[i32 >> 2] = i16;
    HEAP32[i31 + 12 >> 2] = i16;
    HEAP32[i16 + 8 >> 2] = i31;
    HEAP32[i16 + 12 >> 2] = i4;
    return;
  }
  i4 = i16;
  i31 = i30 >>> 8;
  do {
    if ((i31 | 0) == 0) {
      i33 = 0;
    } else {
      if (i30 >>> 0 > 16777215) {
        i33 = 31;
        break;
      }
      i32 = (i31 + 1048320 | 0) >>> 16 & 8;
      i3 = i31 << i32;
      i27 = (i3 + 520192 | 0) >>> 16 & 4;
      i22 = i3 << i27;
      i3 = (i22 + 245760 | 0) >>> 16 & 2;
      i17 = (14 - (i27 | i32 | i3) | 0) + (i22 << i3 >>> 15) | 0;
      i33 = i30 >>> ((i17 + 7 | 0) >>> 0) & 1 | i17 << 1;
    }
  } while (0);
  i31 = 5276008 + (i33 << 2) | 0;
  HEAP32[i16 + 28 >> 2] = i33;
  HEAP32[i16 + 20 >> 2] = 0;
  HEAP32[i16 + 16 >> 2] = 0;
  i17 = HEAP32[1318927] | 0;
  i3 = 1 << i33;
  do {
    if ((i17 & i3 | 0) == 0) {
      HEAP32[1318927] = i17 | i3;
      HEAP32[i31 >> 2] = i4;
      HEAP32[i16 + 24 >> 2] = i31;
      HEAP32[i16 + 12 >> 2] = i16;
      HEAP32[i16 + 8 >> 2] = i16;
    } else {
      if ((i33 | 0) == 31) {
        i34 = 0;
      } else {
        i34 = 25 - (i33 >>> 1) | 0;
      }
      i22 = i30 << i34;
      i32 = HEAP32[i31 >> 2] | 0;
      while (1) {
        if ((HEAP32[i32 + 4 >> 2] & -8 | 0) == (i30 | 0)) {
          break;
        }
        i35 = i32 + 16 + (i22 >>> 31 << 2) | 0;
        i27 = HEAP32[i35 >> 2] | 0;
        if ((i27 | 0) == 0) {
          i36 = 587;
          break;
        } else {
          i22 = i22 << 1;
          i32 = i27;
        }
      }
      if ((i36 | 0) == 587) {
        if (i35 >>> 0 < (HEAP32[1318930] | 0) >>> 0) {
          _abort();
        } else {
          HEAP32[i35 >> 2] = i4;
          HEAP32[i16 + 24 >> 2] = i32;
          HEAP32[i16 + 12 >> 2] = i16;
          HEAP32[i16 + 8 >> 2] = i16;
          break;
        }
      }
      i22 = i32 + 8 | 0;
      i14 = HEAP32[i22 >> 2] | 0;
      i27 = HEAP32[1318930] | 0;
      if (i32 >>> 0 < i27 >>> 0) {
        _abort();
      }
      if (i14 >>> 0 < i27 >>> 0) {
        _abort();
      } else {
        HEAP32[i14 + 12 >> 2] = i4;
        HEAP32[i22 >> 2] = i4;
        HEAP32[i16 + 8 >> 2] = i14;
        HEAP32[i16 + 12 >> 2] = i32;
        HEAP32[i16 + 24 >> 2] = 0;
        break;
      }
    }
  } while (0);
  i16 = (HEAP32[1318934] | 0) - 1 | 0;
  HEAP32[1318934] = i16;
  if ((i16 | 0) == 0) {
    i37 = 5276156;
  } else {
    return;
  }
  while (1) {
    i16 = HEAP32[i37 >> 2] | 0;
    if ((i16 | 0) == 0) {
      break;
    } else {
      i37 = i16 + 8 | 0;
    }
  }
  HEAP32[1318934] = -1;
  return;
}
function __ZNKSt9bad_alloc4whatEv(i1) {
  i1 = i1 | 0;
  return 5268920;
}
function __ZNSt9bad_allocD1Ev(i1) {
  i1 = i1 | 0;
  return;
}
function __ZNSt9bad_allocD0Ev(i1) {
  i1 = i1 | 0;
  if ((i1 | 0) == 0) {
    return;
  }
  _free(i1);
  return;
}
function __Znaj(i1) {
  i1 = i1 | 0;
  var i2 = 0, i3 = 0, i4 = 0;
  i2 = (i1 | 0) == 0 ? 1 : i1;
  while (1) {
    i3 = _malloc(i2) | 0;
    if ((i3 | 0) != 0) {
      i4 = 641;
      break;
    }
    i1 = (tempValue = HEAP32[1319099] | 0, HEAP32[1319099] = tempValue + 0, tempValue);
    if ((i1 | 0) == 0) {
      break;
    }
    FUNCTION_TABLE_v[i1 & 511]();
  }
  if ((i4 | 0) == 641) {
    return i3 | 0;
  }
  i3 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i3 >> 2] = 5276180;
  ___cxa_throw(i3 | 0, 5276348, 380);
  return 0;
}
function _memset(i1, i2, i3) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  var i4 = 0, i5 = 0, i6 = 0;
  i4 = i1 + i3 | 0;
  if ((i3 | 0) >= 20) {
    i2 = i2 & 255;
    i3 = i1 & 3;
    i5 = i2 | i2 << 8 | i2 << 16 | i2 << 24;
    i6 = i4 & ~3;
    if (i3) {
      i3 = i1 + 4 - i3 | 0;
      while ((i1 | 0) < (i3 | 0)) {
        HEAP8[i1] = i2;
        i1 = i1 + 1 | 0;
      }
    }
    while ((i1 | 0) < (i6 | 0)) {
      HEAP32[i1 >> 2] = i5;
      i1 = i1 + 4 | 0;
    }
  }
  while ((i1 | 0) < (i4 | 0)) {
    HEAP8[i1] = i2;
    i1 = i1 + 1 | 0;
  }
}
function _memcpy(i1, i2, i3) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  var i4 = 0;
  i4 = i1 | 0;
  if ((i1 & 3) == (i2 & 3)) {
    while (i1 & 3) {
      if ((i3 | 0) == 0) return i4 | 0;
      HEAP8[i1] = HEAP8[i2] | 0;
      i1 = i1 + 1 | 0;
      i2 = i2 + 1 | 0;
      i3 = i3 - 1 | 0;
    }
    while ((i3 | 0) >= 4) {
      HEAP32[i1 >> 2] = HEAP32[i2 >> 2] | 0;
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
      i3 = i3 - 4 | 0;
    }
  }
  while ((i3 | 0) > 0) {
    HEAP8[i1] = HEAP8[i2] | 0;
    i1 = i1 + 1 | 0;
    i2 = i2 + 1 | 0;
    i3 = i3 - 1 | 0;
  }
  return i4 | 0;
}
function _strlen(i1) {
  i1 = i1 | 0;
  var i2 = 0;
  i2 = i1;
  while (HEAP8[i2] | 0 != 0) {
    i2 = i2 + 1 | 0;
  }
  return i2 - i1 | 0;
}
function _memcmp(i1, i2, i3) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  var i4 = 0, i5 = 0, i6 = 0;
  while ((i4 | 0) < (i3 | 0)) {
    i5 = HEAPU8[i1 + i4 | 0] | 0;
    i6 = HEAPU8[i2 + i4 | 0] | 0;
    if ((i5 | 0) != (i6 | 0)) return ((i5 | 0) > (i6 | 0) ? 1 : -1) | 0;
    i4 = i4 + 1 | 0;
  }
  return 0;
}
function _memmove(i1, i2, i3) {
  i1 = i1 | 0;
  i2 = i2 | 0;
  i3 = i3 | 0;
  if ((i2 | 0) < (i1 | 0) & (i1 | 0) < (i2 + i3 | 0)) {
    i2 = i2 + i3 | 0;
    i1 = i1 + i3 | 0;
    while ((i3 | 0) > 0) {
      i1 = i1 - 1 | 0;
      i2 = i2 - 1 | 0;
      i3 = i3 - 1 | 0;
      HEAP8[i1] = HEAP8[i2] | 0;
    }
  } else {
    _memcpy(i1, i2, i3);
  }
}






  function _longjmp__wrapper(a1,a2) { a1=((a1)|0);a2=((a2)|0); ; _longjmp(((a1)|0),((a2)|0)) }

  function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    FUNCTION_TABLE_viiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0);
  }


  function dynCall_iiiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    return FUNCTION_TABLE_iiiii[index&511](a1|0,a2|0,a3|0,a4|0)|0;
  }


  function dynCall_viii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    FUNCTION_TABLE_viii[index&511](a1|0,a2|0,a3|0);
  }


  function dynCall_vi(index,a1) {
    index = index|0;
    a1=a1|0;
    FUNCTION_TABLE_vi[index&511](a1|0);
  }


  function dynCall_vii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    FUNCTION_TABLE_vii[index&511](a1|0,a2|0);
  }


  function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
    return FUNCTION_TABLE_iiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
  }


  function dynCall_ii(index,a1) {
    index = index|0;
    a1=a1|0;
    return FUNCTION_TABLE_ii[index&511](a1|0)|0;
  }


  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&511](a1|0,a2|0,a3|0)|0;
  }


  function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
    FUNCTION_TABLE_viiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
  }


  function dynCall_v(index) {
    index = index|0;
    
    FUNCTION_TABLE_v[index&511]();
  }


  function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
    FUNCTION_TABLE_viiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
  }


  function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
    FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
  }


  function dynCall_iii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return FUNCTION_TABLE_iii[index&511](a1|0,a2|0)|0;
  }


  function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    return FUNCTION_TABLE_iiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
  }


  function dynCall_viiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
  }

function b0(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(0);  };
  function b1(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(1); return 0 };
  function b2(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(2);  };
  function b3(p0) { p0 = p0|0; abort(3);  };
  function b4(p0,p1) { p0 = p0|0;p1 = p1|0; abort(4);  };
  function b5(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(5); return 0 };
  function b6(p0) { p0 = p0|0; abort(6); return 0 };
  function b7(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(7); return 0 };
  function b8(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; abort(8);  };
  function b9() { ; abort(9);  };
  function b10(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; abort(10);  };
  function b11(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(11);  };
  function b12(p0,p1) { p0 = p0|0;p1 = p1|0; abort(12); return 0 };
  function b13(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(13); return 0 };
  function b14(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(14);  };
  var FUNCTION_TABLE_viiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_grayscale_convert192
  ,b0,b0,b0,_gray_rgb_convert,b0,_jpeg_idct_1x1,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,_Yuv444ToRgb565
  ,b0,b0,b0,_Yuv444ToRgba4444,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,_jpeg_idct_ifast,b0,b0,b0,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,_Yuv444ToBgra,b0,b0,b0,b0,b0,b0
  ,b0,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,_jpeg_idct_2x2,b0,b0,b0,_null_convert193,b0,_jpeg_idct_4x4,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,_Yuv444ToRgba,b0,b0
  ,b0,b0,b0,b0,b0,_jpeg_idct_islow,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,_Yuv444ToBgr,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,_jpeg_idct_float,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,_ycck_cmyk_convert,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,_ycc_rgb_convert
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,_Yuv444ToArgb,b0,_Yuv444ToRgb,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
  
  var FUNCTION_TABLE_iiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,_alloc_barray,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,_alloc_sarray
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
  
  var FUNCTION_TABLE_viii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN14ImageFormatPNG18file_read_functionEP14png_struct_defPhj
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,_png_default_read_data,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
  
  var FUNCTION_TABLE_vi = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,_start_pass_upsample
  ,b3,_self_destruct,b3,b3,b3,_HE4,b3,b3,b3,b3
  ,b3,__ZN14ImageFormatJPG10error_exitEP18jpeg_common_struct,b3,b3,b3,b3,b3,_HE16,b3,b3
  ,b3,_DC8uvNoTop,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,_HD4,b3,b3
  ,b3,_start_pass_huff_decoder,b3,_DC8uvNoLeft,b3,b3,b3,b3,b3,b3
  ,b3,_LD4,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,_DC4,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,__ZN14ImageFormatJPG14output_messageEP18jpeg_common_struct,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,_CustomTeardown,b3,_start_pass
  ,b3,_start_input_pass170,b3,_HE8uv,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,_TM16,b3,_finish_output_pass,b3,b3,b3,b3,b3,__ZN14ImageFormatJPG11term_sourceEP22jpeg_decompress_struct
  ,b3,_start_output_pass,b3,_DC8uvNoTopLeft,b3,b3,b3,b3,b3,_DC16NoTop
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,_prepare_for_output_pass
  ,b3,b3,b3,_HU4,b3,b3,b3,_VE4,b3,b3
  ,b3,_VR4,b3,b3,b3,_new_color_map_2_quant,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,_start_pass_phuff_decoder
  ,b3,b3,b3,b3,b3,_RD4,b3,b3,b3,_DC16NoLeft
  ,b3,b3,b3,__ZN10__cxxabiv117__class_type_infoD1Ev,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,_reset_input_controller,b3,_finish_pass_1_quant,b3,b3,b3,_VE8uv
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,_start_input_pass,b3,_DC16,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,_DC8uv,b3,b3,b3,b3,b3,b3
  ,b3,_finish_input_pass,b3,_TM8uv,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD1Ev,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,_VL4,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt9bad_allocD0Ev
  ,b3,b3,b3,__ZN10__cxxabiv117__class_type_infoD0Ev,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,_realize_virt_arrays,b3,b3,b3,_reset_marker_reader,b3,b3
  ,b3,_start_pass_merged_upsample,b3,b3,b3,_finish_pass2,b3,_finish_pass1,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,b3,b3,b3,_reset_error_mgr,b3,b3
  ,b3,_start_pass_dcolor,b3,__ZN14ImageFormatJPG11init_sourceEP22jpeg_decompress_struct,b3,b3,b3,_VE16,b3,__ZNSt9bad_allocD1Ev
  ,b3,b3,b3,b3,b3,_DC16NoTopLeft,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,_TM4
  ,b3,b3,b3,_new_color_map_1_quant,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
  
  var FUNCTION_TABLE_vii = [b4,b4,b4,b4,_start_pass_main166,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,_longjmp__wrapper
  ,b4,b4,b4,b4,b4,_start_pass_2_quant,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,_free_pool,b4,b4,b4,b4
  ,b4,b4,b4,_emit_message,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,_png_zfree,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,_zcfree,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,_format_message,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,_ExtractAlphaRows,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,__ZN14ImageFormatJPG20file_skip_input_dataEP22jpeg_decompress_structl,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,_start_pass_dpost,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,_ProcessRows,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,_start_pass_1_quant,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4];
  
  var FUNCTION_TABLE_iiiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,_request_virt_barray,b5,b5,b5,b5,b5,_request_virt_sarray
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
  
  var FUNCTION_TABLE_ii = [b6,b6,b6,b6,b6,b6,b6,b6,_CustomPut,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,__ZNKSt9bad_alloc4whatEv,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,_CustomSetup,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,_consume_data,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,_read_markers,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,_dummy_consume_data
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,_consume_markers,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,_read_restart_marker,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,_skip_variable,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,__ZN14ImageFormatJPG22file_fill_input_bufferEP22jpeg_decompress_struct,b6,b6
  ,b6,_get_interesting_appn,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6];
  
  var FUNCTION_TABLE_iiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,_alloc_small,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,_png_zalloc
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,_zcalloc
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,_alloc_large,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];
  
  var FUNCTION_TABLE_viiiiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,_SampleRgb565LinePair,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,_SampleRgbLinePair,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,_SampleBgraLinePair,b8,_post_process_2pass,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,_SampleBgrLinePair,b8,b8,b8,b8,b8,b8
  ,b8,_post_process_prepass,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,_SampleArgbLinePair,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,_merged_1v_upsample
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,_merged_2v_upsample,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,_post_process_1pass,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,_SampleRgbaLinePair,b8,b8,b8,_sep_upsample,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,_SampleRgba4444LinePair,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];
  
  var FUNCTION_TABLE_v = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9];
  
  var FUNCTION_TABLE_viiiiiiiii = [b10,b10,b10,b10,b10,b10,_UpsampleArgbLinePair,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,_UpsampleRgb565LinePair,b10,b10
  ,b10,b10,b10,_UpsampleRgba4444LinePair,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,_UpsampleRgbLinePair
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,_UpsampleBgrLinePair,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,_UpsampleBgraLinePair,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,_UpsampleRgbaLinePair,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10];
  
  var FUNCTION_TABLE_viiiiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,_HorizontalUnfilter,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b11,b11,b11,_VerticalUnfilter,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,_GradientUnfilter,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11];
  
  var FUNCTION_TABLE_iii = [b12,b12,_ExportAlphaRGBA4444,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,_decode_mcu_AC_first,b12,b12,b12,b12,b12,b12
  ,b12,_FinishRow,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,_decode_mcu_AC_refine,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,_EmitAlphaRGBA4444,b12,b12,b12,b12,b12,b12,b12,_decode_mcu
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,_Predictor13
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,_Predictor3,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,_EmitRescaledYUV,b12,_EmitFancyRGB
  ,b12,b12,b12,_EmitAlphaYUV,b12,_EmitRescaledAlphaYUV,b12,b12,b12,b12
  ,b12,_EmitRescaledRGB,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,_decompress_smooth_data,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,_decode_mcu_DC_first
  ,b12,_jpeg_resync_to_restart,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,_EmitYUV,b12,b12,b12,_decode_mcu_DC_refine
  ,b12,b12,b12,b12,b12,b12,b12,_decompress_data,b12,b12
  ,b12,_Predictor4,b12,_Predictor5,b12,_Predictor6,b12,_Predictor7,b12,_Predictor0
  ,b12,_Predictor1,b12,_Predictor2,b12,b12,b12,_ExportAlpha,b12,_Predictor8
  ,b12,_Predictor9,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,_EmitSampledRGB,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,_EmitAlphaRGB,b12,_Predictor12,b12,b12,b12,_Predictor10,b12,_Predictor11
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,_EmitRescaledAlphaRGB
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,_decompress_onepass,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12];
  
  var FUNCTION_TABLE_iiiiii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,_access_virt_barray,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,_access_virt_sarray
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13];
  
  var FUNCTION_TABLE_viiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,_pass2_no_dither,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,_process_data_context_main
  ,b14,b14,b14,b14,b14,b14,b14,_color_quantize3,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,_process_data_crank_post
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,_quantize_fs_dither,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,_fullsize_upsample,b14,_h2v2_merged_upsample
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,_pass2_fs_dither,b14,_noop_upsample,b14,b14
  ,b14,b14,b14,b14,b14,_h2v1_upsample,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,_h2v2_fancy_upsample,b14,b14,b14,b14,b14,b14
  ,b14,_h2v1_fancy_upsample,b14,_prescan_quantize,b14,_color_quantize,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,_int_upsample,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,_quantize3_ord_dither
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,_process_data_simple_main167,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,_quantize_ord_dither,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,_h2v2_upsample,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,_h2v1_merged_upsample,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14];
  

  return { _memmove: _memmove, _memcmp: _memcmp, _strlen: _strlen, _free: _free, _main: _main, _format: _format, _width: _width, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _height: _height, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, setTempRet1: setTempRet1, setTempRet2: setTempRet2, setTempRet3: setTempRet3, setTempRet4: setTempRet4, setTempRet5: setTempRet5, setTempRet6: setTempRet6, setTempRet7: setTempRet7, setTempRet8: setTempRet8, setTempRet9: setTempRet9, dynCall_viiiii: dynCall_viiiii, dynCall_iiiii: dynCall_iiiii, dynCall_viii: dynCall_viii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_v: dynCall_v, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})({ Math: Math, Int8Array: Int8Array, Int16Array: Int16Array, Int32Array: Int32Array, Uint8Array: Uint8Array, Uint16Array: Uint16Array, Uint32Array: Uint32Array, Float32Array: Float32Array, Float64Array: Float64Array }, { abort: abort, assert: assert, asmPrintInt: asmPrintInt, asmPrintFloat: asmPrintFloat, copyTempDouble: copyTempDouble, copyTempFloat: copyTempFloat, Runtime_bitshift64: Runtime_bitshift64, min: Math_min, _llvm_lifetime_end: _llvm_lifetime_end, _lseek: _lseek, ___cxa_call_unexpected: ___cxa_call_unexpected, _snprintf: _snprintf, ___cxa_throw: ___cxa_throw, _fread: _fread, _fclose: _fclose, _abort: _abort, _fprintf: _fprintf, _printf: _printf, _close: _close, _fopen: _fopen, _pread: _pread, _fputc: _fputc, _puts: _puts, _sysconf: _sysconf, _open: _open, _floor: _floor, ___setErrNo: ___setErrNo, _fwrite: _fwrite, _fseek: _fseek, _llvm_eh_exception: _llvm_eh_exception, _write: _write, _fputs: _fputs, _ftell: _ftell, _llvm_umul_with_overflow_i32: _llvm_umul_with_overflow_i32, _sprintf: _sprintf, ___cxa_find_matching_catch: ___cxa_find_matching_catch, ___cxa_allocate_exception: ___cxa_allocate_exception, _longjmp: _longjmp, _read: _read, ___cxa_is_number_type: ___cxa_is_number_type, __formatString: __formatString, ___cxa_does_inherit: ___cxa_does_inherit, __ZSt18uncaught_exceptionv: __ZSt18uncaught_exceptionv, _pwrite: _pwrite, _strstr: _strstr, _llvm_pow_f64: _llvm_pow_f64, _fsync: _fsync, ___errno_location: ___errno_location, ___gxx_personality_v0: ___gxx_personality_v0, __ZNSt9exceptionD2Ev: __ZNSt9exceptionD2Ev, _llvm_bswap_i32: _llvm_bswap_i32, _sbrk: _sbrk, _time: _time, _llvm_lifetime_start: _llvm_lifetime_start, STACKTOP: STACKTOP, STACK_MAX: STACK_MAX, tempDoublePtr: tempDoublePtr, ABORT: ABORT, NaN: NaN, Infinity: Infinity, __ZTVN10__cxxabiv120__si_class_type_infoE: __ZTVN10__cxxabiv120__si_class_type_infoE, _stderr: _stderr, __ZTVN10__cxxabiv117__class_type_infoE: __ZTVN10__cxxabiv117__class_type_infoE, __ZTISt9exception: __ZTISt9exception }, buffer);
var _memmove = Module["_memmove"] = asm._memmove;
var _memcmp = Module["_memcmp"] = asm._memcmp;
var _strlen = Module["_strlen"] = asm._strlen;
var _free = Module["_free"] = asm._free;
var _main = Module["_main"] = asm._main;
var _format = Module["_format"] = asm._format;
var _width = Module["_width"] = asm._width;
var _memset = Module["_memset"] = asm._memset;
var _malloc = Module["_malloc"] = asm._malloc;
var _memcpy = Module["_memcpy"] = asm._memcpy;
var _height = Module["_height"] = asm._height;
var dynCall_viiiii = Module["dynCall_viiiii"] = asm.dynCall_viiiii;
var dynCall_iiiii = Module["dynCall_iiiii"] = asm.dynCall_iiiii;
var dynCall_viii = Module["dynCall_viii"] = asm.dynCall_viii;
var dynCall_vi = Module["dynCall_vi"] = asm.dynCall_vi;
var dynCall_vii = Module["dynCall_vii"] = asm.dynCall_vii;
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm.dynCall_iiiiiii;
var dynCall_ii = Module["dynCall_ii"] = asm.dynCall_ii;
var dynCall_iiii = Module["dynCall_iiii"] = asm.dynCall_iiii;
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm.dynCall_viiiiiii;
var dynCall_v = Module["dynCall_v"] = asm.dynCall_v;
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm.dynCall_viiiiiiiii;
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm.dynCall_viiiiii;
var dynCall_iii = Module["dynCall_iii"] = asm.dynCall_iii;
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm.dynCall_iiiiii;
var dynCall_viiii = Module["dynCall_viiii"] = asm.dynCall_viiii;
Runtime.stackAlloc = function(size) { return asm.stackAlloc(size) };
Runtime.stackSave = function() { return asm.stackSave() };
Runtime.stackRestore = function(top) { asm.stackRestore(top) };
// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;

// === Auto-generated postamble setup entry stuff ===

Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);


  var ret;

  ret = Module['_main'](argc, argv, 0);


  return ret;
}




function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }

  function doRun() {
    var ret = 0;
    calledRun = true;
    if (Module['_main']) {
      preMain();
      ret = Module.callMain(args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = Module.run = run;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

initRuntime();

var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

if (shouldRunNow) {
  var ret = run();
}

// {{POST_RUN_ADDITIONS}}






  // {{MODULE_ADDITIONS}}





			var ret = {
			"width": Module['ccall']('width', 'number', null),
			"height": Module['ccall']('height', 'number', null),
			"format": Module['ccall']('format', 'number', null),
			"raw": FS.root.contents['image.raw'].contents
			};
			return ret;
	},

};

